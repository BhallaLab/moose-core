objref netstims, netstim_netcons, netstim_randoms
netstims = new List()
netstim_netcons = new List()
netstim_randoms = new List()
netstim_random_seedoffset = ranseedbase + pnm.ncell // increment by number of Cells
proc par_netstim_create() {local gid  localobj cell, syn, nc, ns, r
	gid = $1
	if (pc.gid_exists(gid)) {
		cell = pc.gid2obj(gid)
		cell.comp[$2] {syn = new PulseSyn(.5)}
		syn.amp = $3
		ns = new S_NetStim()
		ns.pp.interval = $4
		netstims.append(ns)
		nc = new NetCon(ns.pp, syn)
		netstim_netcons.append(nc)
		nc.delay = 0
		r = new Random()
		r.negexp(1)
//		r.Isaac64(netstim_random_seedoffset + gid)
		r.MCellRan4(netstim_random_seedoffset + 1000*gid)
		ns.pp.noiseFromRandom(r)
		netstim_randoms.append(r)
	}
	netstim_base_ += 1
}

objref par_gaps
par_gaps = new List()
gap_src_gid = 2
proc par_gap_create() {
	gap_src_gid += 2
	if (pc.gid_exists($1)) {
		par_gap_create1($1, $2, gap_src_gid + 1, gap_src_gid, $5)
	}
	if (pc.gid_exists($3)) {
		par_gap_create1($3, $4, gap_src_gid, gap_src_gid + 1, $5)
	}
}
proc par_gap_create1() {localobj c, g
	c = pc.gid2obj($1)
	c.comp[$2] {
		g = new gGapPar(.5)
		par_gaps.append(g)
		pc.target_var(&g.vgap, $3)
		pc.source_var(&v(.5), $4)
		g.g = $5
	}
}

icdel0_ = 0
cdel0_ = 0

func nc_append() {local comp  localobj cell, syn, s
	if ($5 <= 0) {
//		if (pc.gid_exists($2)) {
//			print pc.id, $1, $2, $3, $4, $5, " ", pc.gid2obj($2)
//		}
		if (icdel0_ == 0) if ((pc.gid_exists($1)!=0) != (pc.gid_exists($2)!=0)) {
if (pmesg) print "Notice: Requesting an interprocessor connection delay of 0"
			icdel0_ = 1
		}
		if (cdel0_ == 0) {
if (pmesg) print "Notice: Requesting a connection delay of 0. Setting those to 1ms."
			cdel0_ = 1
		}
		$5 = 1
	}
	if ($5 < mindelay_) if (pc.gid_exists($1) == 0) if (pc.gid_exists($2)!=0) {
		mindelay_ = $5
	}

	if (pc.gid_exists($2)) {
		cell = pc.gid2cell($2)
		syn = cell.synlist.object($3)
		s = new String()
		classname(syn, s.s)
		if (strcmp(s.s, "GABAA") == 0) {
			syn.e = vgaba.x[cell.type]
		}
		// for debugging :need to switch the debug lines in
		// ampa.mod, traub_nmda.mod, and gabaa.mod
	    if (0) {
		syn.get_loc
		comp = -1
		sscanf(secname(), "%*[^0-9]%*d%*[^0-9]%d",&comp)
		pop_section()
		syn.srcgid = $1
		syn.targid = $2
		syn.synid = $3
		syn.comp = comp
	    }
	}
	return pnm.nc_append($1, $2, $3, $4, $5)
}

proc set_const_curr_inj() {local i  localobj c, clmp
	for i = 1, $2 if (pc.gid_exists($1 + i)) {
		c = pc.gid2obj($1 + i)
		c.comp[1] clmp = new IClamp_const(0.5)
		clmp.amp = $o3.x[i]
		iclamp_const_list.append(clmp)
	}
}
