setuptime = startsw()
{load_file("nrngui.hoc")}
{load_file("fortmap.hoc")}
{load_file("hoc/parlib.hoc")}
{load_file("finit.hoc")}
ranseedbase = 1
serial = 0 // override serial set in parlib.hoc
pmesg = 1 && (pc.id == 0)
small_model = 0 // 0 for full model, set to 1 for 40 cells each type
use_traubexact = 1

{load_file("hoc/traubcon.hoc")}
// til the shift bug in the mod files are fixed (table depends on range variable)
usetable_naf2 = 0
usetable_naf = 0
usetable_naf_tcr = 0
usetable_napf = 0
usetable_napf_spinstell = 0
usetable_napf_tcr = 0

gfac_AMPA = 1
gfac_NMDA = 1
gfac_GABAA = 1

{load_file("cell_templates.hoc")}
use_p2c_net_connections = 0 // not 0, requires p2c emitted  map and compmap files
{load_file("net/network_specification_interface.hoc")}
if (!serial) {load_file("hoc/parlib2.hoc")}
{load_file("net/serial_or_par_wrapper.hoc")}
{load_file("net/groucho.hoc")}
want_all_spikes()
mkhist(50)

objref fihprog_
if (pc.id == 0) fihprog_ = new FInitializeHandler("progress()")
proc progress() {
	print "t=",t
	cvode.event(t+1, "progress()")
}

if (use_traubexact) {
	load_file("hoc/traubcon_net.hoc")
	if (pc.id == 0) {
		print "before setting traub exact connection coefficients, setuptime = ", startsw() - setuptime
	}
	reset_connection_coefficients()
}

setuptime = startsw() - setuptime
if (pc.id == 0) {print "SetupTime: ", setuptime}

steps_per_ms = 40
dt = .025
secondorder = 2
if (serial) {
	tstop = 10
}else{
	tstop = 100
}

//{finitialize(-65) cvode_local(1) cvode.atol(1e-4)} // the finitialze avoids /0 in BREAKPOINT


prun()
if (pc.id == 0) { print "RunTime: ", runtime }
if (pc.nhost > 5) {cvode_active(1)} // to count equations
{pc.runworker()}

{pnm.gatherspikes()}
print "Maximum integration interval: ", mindelay()
getstat()
prhist()
print_spike_stat_info()

{pc.done()}

spike2file()

if (!serial) { quit() }
