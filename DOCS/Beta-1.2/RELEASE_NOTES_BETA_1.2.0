These are the release notes for the Beta 1.2.0 release of MOOSE, the
Multiscale Object-Oriented Simulation environment.

Introduction.
This release has four major functional changes from the previous Beta 1.1.0:
- A PyQt-based graphical interface for running basic simulations and tutorials.
	This is now the default 'face' of MOOSE.
- Gillespie solver for chemical kinetic simulations.
- SBML support for writing kinetic models, partial support for reading.
- MPI support for parallel neuronal simulations, and interface to MUSIC.

The default release now is PyMOOSE. For users who need to run non-graphical
and batch-mode simulations, there is a separate GUI-free MOOSE release.
The two are compatible. You can use PyMOOSE on a master node and have it
talk to GUI-free MOOSE instances on the slave nodes of a cluster.

=============================================
Release notes for PyMOOSE (MOOSE beta 1.2) (Subhasis Ray)
=============================================

1. INTRODUCTION

PyMOOSE is MOOSE for Python. It is a module that you can import in a
Python script.  Thus use the MOOSE classes as Python classes to create
models and run simulations.

2. INSTALLATION

PyMOOSE is compiled as a shared library. We have compiled it on
various platforms and you can download one suited for you from the
sourceforge site. But in case there is no precompiled binary suited
for your environment, you can compile it for yourself. While the basic
moose module does not have too many dependecies, you will need several
GUI libraries for using the graphical interface. These are: 

numpy
PyQt (which depends on Qt)
PyQwt (which depends on Qt, numpy, sip and Qwt)

PyQwt itself has a number of dependencies and you can get the correct
version of these packages from the PyQwt download page:
http://pyqwt.sourceforge.net/download.html

Installing the python plotting module matplotlib is also encouraged.

2.1. LINUX

To compile PyMOOSE you need the Python development library
installed. You can install it using apt ( on Debian like systems ):

apt-get install python-dev

Using yum ( on Fedora )

yum install python-dev

If you want to use GSL, then install the GSL development
library also.

apt-get install libgsl0-dev

or

yum install gsl-devel

In the Makefiles we have used standard paths for these libraries. If
your system has them installed somewhere else, edit the Makefile and
do these replacements:

 /usr/include/python2.5 

 with 

 path to your python development library's include directory ( which 
contains the file Python.h )

 -lpython2.5 

 with

 -lpythonX.Y where X.Y is the version of your Python installation.

Now go to the moose directory and build PyMOOSE using:

make pymoose BUILD=release USE_GSL=true

If you want to build without GSL support:

make pymoose BUILD=release

For a debug build use BUILD=debug on the make command line.

2.2. Mac OS X

Replace
/Library/Frameworks/Python.framework/Versions/2.5/include/python2.5 in
the pymoose/Makefile with the path to the directory containing
Python.h and
/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/config/
with the path to the directory containing libpythonX.Y.a where X.Y is
your Python version number.

Now go to the moose directory and build PyMOOSE using:

make pymoose BUILD=release USE_GSL=true

If you want to build without GSL support:

make pymoose BUILD=release

If you want a debug build, use BUILD=debug instead.

2.3. MICROSOFT WINDOWS

Here we recommend that you use the ready-made binaries. To use GSL you
can install the Windows version of GSL Library
(http://gnuwin32.sourceforge.net/packages/gsl.htm). 

If you want to build PyMOOSE for yourself, you need VC++ 8 or 9 to
compile PyMOOSE on Windows. The freely available express editions are
just fine.  Open the pymoose_vcpp2005/moose/moose.vcproj in Visual C++
IDE. Select the project properties and update the preprocessor
directives (add or remove the directive USE_GSL), update C++ include
paths and Linker inputs and library directories.

2.4. SOLARIS

The procedure to compile PyMOOSE on solaris is very similar to that 
outlined for Linux. Install Python development libraries and GSL using
your favourite package manager, or from source.

It is perhaps easiest to use GNU tools to compile PyMOOSE. You will need
to set the appropriate paths for GNU Make, g++, flex and bison with the
following bash commands:
	export PATH=/usr/sfw/bin:/usr/ccs/bin:/usr/local/bin:$PATH
	alias make='/usr/sfw/bin/gmake'

If you are going to use GSL, then set the linker path:
	export LD_LIBRARY_PATH=/usr/local/lib

Finally, update the Makefile for your system, and build pymoose as
described above for Linux. 

After a successful build, you can copy pymoose/_moose.so and
pymoose/moose.py to a directory of your choice. You have to append
this directory to your PYTHONPATH variable in order to import the
module. Assuming you kept files in ~/moose directory, in bash shell
you can update PYTHONPATH by executing the command

export PYTHONPATH=$PYTHONPATH:~/moose

If you want this to be permanent, append the same to your ~/.bashrc file.

On Windows, instead of _moose.so you will have _moose.pyd. You can set
the PYTHONPATH variable by right clicking My Computer and selecting
Properties from the pop-up menu. Now go to Advanced tab and click
Environment Variables. If there is no PYTHONPATH variable defined,
create a new one. Otherwise edit the existing one and append the path
to the directory containing _moose.pyd and moose.py.


3. USAGE

To test your PyMOOSE installation, run python and in the interpreter prompt , try

import moose

If it works ( no error messages ), you can now use the moose functions
and classes in Python scriupts. There are some example scripts in
examples directory. In particular, there is a new avatar of the
GENESIS squid demo using PyQt. To run the GUI, you have to install
PyQt4(http://www.riverbankcomputing.co.uk/software/pyqt/download) and
PyQwt5(http://pyqwt.sourceforge.net/download.html). And beware that
for PyQt to work on windows, the path to PyQt4/bin must be the first
entry in your PYTHONPATH environment variable.

You can run the squid demo without GUI as well, just cd to the
pymoose/squid in DEMOS directory and run:

python squid.py

That will create a bunch of .plot files containing the time series for
various parameters.

You can use most MOOSE classes like regular Python classes. However
you have to access global functions using the special PyMooseContext
object. You can retrieve it by:

context = moose.PyMooseBase.getContext()

And call the global MOOSE functions as methods on this object. 
Moreover, you can run GENESIS commands from Python using 

context.runG("GENESIS command string")

and load whole GENESIS scripts using

context.loadG("genesis script file")

Take a look into the example scripts and that should get you going.

4. GUI

If you have installed the version with Python based GUI, then you can
run: moosegui.py to start it. This will show a window with two tabs:
one called 'Model Tree' and the other 'Run'. 

One can load an existing model in this gui by selecting File->Load
(Keyboard shortcut: Ctrl+L) from the menu and navigating to the
desired file. The directory containing the selected file gets added to
the SIMPATH, the list of directories to search for scripts.

In the 'Model Tree' tab one can view the hierarchy of moose objects in
an expandable tree form. This tree is editable. If you select a
particular node and then double click on a class in the toll box on
the roght-hand-side, it creates a new object of that class with the
same name as the class name. It is up to you to rename it. The nodes
in the tree are editable. If you double click on a node, it will pop
up a table with a list of fields and their values. You can edit the
values and they take effect immediately. You can rename an object by
editing the name field here.

The 'Run' tab is for running a loaded model. Here one can choose the
duration of a simulation (Run time) and update interval for the
plots. It also has a plots panel where all the plots under /data (for
genesis scripts) or '/graphs' and '/moregraphs' (for kinetikit
scripts) are shown. If the script had a step command already executed,
then the plots will be visible right after loading. Otherwise, one can
reset and run the simulation for desired time to update the plots. It
should be noted that longer update interval may result in unresponsive
gui until the simulation is over.

As SBML files do not contain predefined plots, there will be a list of
available molecules in the model beside the plots. You can double
click on a molecule name in order to get it plotted.

You can set the locations to be searched for model scripts by
selecting File->Settings from the menu and then entering the directory
paths in the dialog box and clicking OK.

=============================================
Release notes for SBML compatibility (Siji George)
=============================================

MOOSE now understands SBML (Systems Biology Markup Language) and can read and
write models in this format. The following demos demonstrate SBML capability:

	- sbml_Reader
	- sbml_Writer
	- sbml_roundtrip

=============================================
Release notes for MPI-based parallel simulations (Niraj Dudani)
=============================================

MPI-based simulations are now somewhat more robust. Many of your simple serial
simulations should run in parallel as well, since MOOSE offers automatic
parallelization of models. Avoid scripts in the GENESIS sli language which
contain neuronal models with calcium--since this is currently not stable.

There are no binaries offered with MPI support. You will need to obtain the
source code for MOOSE and compile it yourself after installing the development
libraries for your favourite MPI implementation. Use the following command to
compile with MPI support:

	make moose USE_MPI=1

Some other dependencies (SBML, GSL, etc.) are included by default, but you can
switch those off by using similar flags. Refer to the Makefile for further help.

=============================================
Release notes for MUSIC compatibility (Niraj Dudani)
=============================================

The MUSIC (MUlti-SImulation Coordinator) project aims to develop a standard to
allow multiple simulators to exchange simulation information at runtime. It
allows exchange spike-time-like event information, which makes it well suited
for neuronal simulators. MOOSE now has the ability to communicate with another
MUSIC-compatible simulator via the MUSIC library. Refer to the 'music-network'
directory (in the DEMOS directory) for demonstration. In this demo, 2 instances
of MOOSE talk to each other via MUSIC.

To try out this DEMO, you will have to install MPI and MUSIC development
libraries. For MUSIC downloads and information, visit:

	http://software.incf.org/software/music/home

Finally, compile moose using the following command:
	make moose USE_MPI=1 USE_MUSIC=1
