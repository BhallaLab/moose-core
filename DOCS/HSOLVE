HSolve Documentation - v0.1

11 / 07 / 2007 - Niraj Dudani

1. Classes & Relationships
2. Data structure details
3. Setting up

1. Classes & Relationships
- - - - - - - - - - - - - -

The classes making up HSolve have been modelled around the Kinetics solver,
where the Solver / Hub / Stoich are a loosely-coupled trio, working together
to solve and interact with MOOSE (as described in the SOLVERS document). This
resemblance is superficial though, since the HSolve classes currently are very
closely bound, and do not offer plug-and-play convenience for new algorithms,
unless they be derivatives of the algorithm in use at present. In any case,
the current arrangement still allows for a clean partitioning of roles across
classes, as described below.

Following classes constitute the solver:

- HSolveBase, HSolve: These form the MOOSE class which the user interacts with.
  HSolveBase is where the computations happen, without any knowledge of MOOSE.
  HSolve completes the MOOSE class by providing a wrapper for speaking with the
  companion classes below, and with MOOSE in general. Upon creating an HSolve
  object, a 'scan' and a 'hub' object are spawned as children. Their roles are
  described below.
  
- NeuroScanBase, NeuroScan: From the solver's perspective, this class allows
  for "pull" operations. In other words, model details are scanned from the
  MOOSE object forest, and fed into local data structures. Again, the 2-layered
  hierarchy holds: NeuroScanBase functions while being oblivious about MOOSE,
  referring to biophysical entities by a system local ID's (plain integers).
  NeuroScan maintains a Local ID <==> Global ID mapping. This insulation allows
  for the code to be inspectible by a solver-veteran-yet-MOOSE-newbie. Currently
  the Global IDs are nothing but the Element pointers, but will be changed to
  the new ID system soon.
  
  The creation of the hub is in fact done by the Scan element. This is because
  the set of data-structures within scan is a union of the sets of those within
  the solver and the hub. For this, 'scan' receives a message from the solver to
  create 'hub' as its sibling.

- NeuroHub: Looking at the solver from the rest-of-MOOSE, this class allows for
  "push" as well as "pull" operations. The "push" operations are messages and
  field-set attempts originally aimed at biophysical elements. The "pull" ops
  are the field-get's. This is made possible by implementing the patented
  Zombification (TM) algorithm. (Just kidding. Refer to 'SOLVERS' for details).

- HSolveStructure: All data structures are contained in here. Above classes
  pass around references to these. (May shift to pointers if references found
  restrictive.)


2. Data structure details
- - - - - - - - - - - - - -
(Around the corner)


3. Setting up
- - - - - - - - - - - - - -
Setting up is simple:
 - Create an HSolve element
 - Point 'path' field in solver to your model
 - Assign clock to solver
 - Call 'reset'

Note: The 'path' in the solver should point to exactly one element of type
'Compartment'. The user gives a "seed" compartment from which the solver (the
scanner, really) "grows the tree". This is distinct from giving all compartments
in the cell, as was the case in GENESIS. Taking one compartment is cleaner for
the solver to work with, and means less chance of user error. For backward
compatibility, this could be taken care of, though.
