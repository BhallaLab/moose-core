Programmers Introduction to MOOSE messaging.
Applies to MOOSE Beta 1.0.1

by Upinder S. Bhalla, NCBS.
(c) Upinder S. Bhalla, NCBS.

============================================================================

3 Feb 2008

Overview.
Message are used to connect MOOSE objects, and to transfer information and 
function requests between them. 
	- Messages are persistent: more like a connecting wire between 
		logic gates, than like a carrier pigeon. 
	- Another metaphor is graph theory. 
		Objects are nodes, and messages are edges. 
	- Messages are directional.

Messages are a fundamental concept in MOOSE: 
- All data transfer uses messages. Think of it as a framework for one object
	to call a function, with arguments, in a set of target objects.
- Any relationship between objects must be expressed in terms of messaging.
	For example, the parent-child hierarchy in MOOSE is managed through
	messages.

Messages are most commonly used to trigger operations in target objects.
	- Each message source may send output to many targets.
	- Each message destination may be triggered by many targets.
	- Messaging operations are often cascaded. A triggers B triggers C...

MOOSE messages can also be traversed whenever the system has to figure out
the connectivity of a simulation.

Messaging is a multiscale concept. One can set up connections between 
individual objects, but also can set up entire projection fields between
two arrays of objects.

============================================================================
Accessing MOOSE messages.

A MOOSE message is known by its source and destination. These are its only
defining and persistent attributes. One can get 
temporary message handles through iteration or through searches, but these
handles are NOT definitive and NOT persistent.
This rule applies across scales: A projection field of messages, which
is itself visible as an object, is defined by the source and destination
arrays. Within this projection field you can also obtain individual handles
to messages between specific objects.

============================================================================

Using MOOSE messages

By far most messaging works through 'send' function calls initiated from the
source object. The 'send' call invokes a 'RecvFunc' on the target object,
with zero or more arguments. Send passes the argument to all of the targets.

send0( Element*, Slot )	// Calls a zero-argument function on all targets
send1<T>( Element*, Slot, T )	// Calls a one-argument function on all targets
				// The argument is of type T.
send2<T1, T2>( Element*, Slot, T1, T2 )	// Calls a two-argument function
...

On the RecvFunc side, we have corresponding definitions:

func0( const Conn* )
func1<T>( const Conn*, T )
func2<T1, T2>( const Conn*, T1, T2 )
...

As indicated below, the Conn provides enough information to the RecvFunc
to carry out the operation on the data struct, to identify the target and 
source, and to provide a unique index onto local data applicable to that
specific message.

Note that each RecvFunc is an operation to be carried out on a _single_
target object. It is the job of the messaging system to disperse the function
calls onto all targets of the source.

...........................................................................

The Slot object.
The Slot object fully identifies the message source. 
	- It specifies which entry in the MsgSrc vector to use.
		This defines a set of targets. These are pointed to by the
		ConnVec.
	- It specifies which function (from the FuncVec) to call on the target 
		object.
		This is currently a type-unsafe process. One could mistakenly
		specify the wrong slot and hence the wrong RecvFunc type
		for the arguments.
	- It is usually statically created in each class source file
		by classname-message lookup using the getSlot function.

...........................................................................

Example: A message from an axon to all the connected synapses, which
may be of divergent types. A single send call does it all.
	
On source axon:

	Element* axon;
	Slot axonSlot;
	double time;
	...
	if ( Vm > threshold )
		send1< double >( axon, axonSlot, time );
	...

Note that this single 'send' call sends the axonal message to _all_ the
target synapses.

On some of the destination synapse:

	...
	void SynChan::synFunc( const Conn* c, double time )
	{
		Element *synElem = c->targetElement()
		SynChan* syn = static_cast< SynChan* >( c->data() );
		double weight = syn->weight( c->targetIndex() );
		syn->addSynapticEvent( time, weight );
	}
	...

On other possible synapses we could have a different kind of function, but
taking the same argument:

	...
	void HebbSynChan::hebbSynFunc( const Conn* c, double time )
	{
		Element *synElem = c->targetElement()
		HebbSynChan* syn = static_cast< HebbSynChan* >( c->data() );
		double weight = syn->weight( c->targetIndex() );
		double plasticity = syn->plasticity( c->targetIndex() );
		double postSynapticActivity = syn->Vm;
		syn->addSynapticEvent( time, weight, plasticity, 
			postSynapticActivity );
	}
	...

...........................................................................

Example: A 'return' message, where the RecvFunc bounces the message back
to the specific sender. Here the Vm value is used to look up A and B
terms, which are returned to sender.

	void HHGate::gateFunc( const Conn* c, double Vm )
	{
		HHGate* h = static_cast< HHGate* >( c->data() );

		sendBack2< double, double >( c, gateSlot, 
			h->A_.innerLookup( Vm ), h->B_.innerLookup( Vm ) );
	}

...........................................................................

Example: A message from a random activity generator axon to a randomly
	selected individual synapse.

	Element* axon;
	Slot axonSlot;
	double time;
	unsigned int targetMax = axon->numTargets( axonSlot );
	unsigned int targetSelection;
	...
	
	targetSelection = static_cast< unsigned int >( mtrand() * targetMax );
	sendTo1< double >( axon, axonSlot, targetSelection, time );
	...


============================================================================
Data structure overview for MOOSE Beta 1.1.0 messages.

Source Element 
	L MsgSrc (vector)
	|	L ConnVec
	|	|	L Ptr to conn struct
	|	|	L Ptr to conn struct----+
	|	|				|
	|	L FuncVec			|
	|	L next				|
	|					|
	L data					|
						V
						Conn subclass data.
						^
Dest Element					|
	L MsgDest (vector)			|
	|	L ConnVec			|
	|	|	L Ptr to conn struct----+
	|	|	L Ptr to conn struct
	|	|
	|	L FuncVec
	|	L next
	|
	L data

Note that the Dest element also uses a MsgSrc structure to handle the 
incoming data. This is because we can have bidirectional traffic along the
same wire (the Conn).

...........................................................................

The Conn

The Conn provides the following information through virtual functions:
	Source and Dest Element pointers
		Used to find source and dest objects
	Source and Dest Element indices 
		used in array elements
	Source and Dest Connection indices
		used when there is a specific mapping between messages and
		data on source and dest. For example, synaptic weights
		require a mapping between message source and the weight vector.
		Solvers require a mapping between message dest and the
		identity of the zombie target at the dest.
	MsgSrc and MsgDest
		Used to identify functionality associated with message.
	data()
		This critical lookup function accesses the data of the
		dest element using the Element pointer and index.

Note that most Conn classes actually store a very limited subset of this
data, and use defaults or clever lookup operations to obtain other values.

...........................................................................

The FuncVec.

When two objects interact, they often need to do so through multiple 
different functions. This would normally require multiple different
messages. To economize, such messages can share the same underlying
connection. The FuncVec manages all RecvFuncs that can be called on the
same message/connection. 
As a metaphor, many signals can use the same wire. The wire
is the connection. The list of potential signals is the FuncVec.

FuncVecs are identified by a unique, unsigned int id. This
acts as a lookup into a static table of FuncVecs. This id is useful because
it is common across nodes, although the actual function pointers are likely
to differ. 
A funcVecId of 0 (zero) indicates that the funcVec is empty. This is not just
a failure option: all SrcFinfos and many SharedFinfos have a funcVecId of 0.
The FuncVec can also be looked up using a unique name string of the format 
<className>.<finfoName>
but this is hardly ever done.

Each FuncVec defined for a Finfo provides four supplementary FuncVecs:
trigFuncVec 	Generated for ValueFinfos/LookupFinfos for returning a value.
lookupFuncVec	Generated for LookupFinfos for returning values with an index
			(need to check how this works, it looks strange).
asyncFuncVec	Generated for Src/Shared Finfos as a target func for postmaster
syncFuncVec	Generated for Src/Shared Finfos as a target func for postmaster

There is currently a problem here for getting at these values, because we
look up by the original FuncVecId, which is often zero.
Options:
- Lookup using string naming. Slow.
x Lookup all FuncIds from Ftype, including SharedFinfo: 
	Can't do. Multiple Funcs may have same Ftype.
- But the parallel functions are all unique to an Ftype.
	Could separate out FuncIds from the ones the Finfos use.
- Put an id on Ftypes and get global FuncVecs from there.
	Messy static initialization management needed here.
- Pass original Finfo into RespondToAdd, and provide a new Finfo::getFuncVec
	through which we can traverse to the fundId of the AsyncFuncVec.
- Pass original Finfo into RespondToAdd, and provide a new Finfo::getAsyncFuncId
x Don't use FuncId = 0, instead have an empty FuncId for SrcFinfos that can
	be used to track down the AsyncFuncId. 
	Messes up too much other stuff.

Each of these FuncVecs also has its own Id, so we can pass them around in
the same way as the original. They can also be looked up, using the naming
<className>.<finfoName>.<[trig][lookup][async][sync]>


For example, when displaying a cell membrane potential
through a colorful 3-D diagram, we want to know the membrane potential as
well as the coordinates of the compartment. However, we probably only want
to update the coordinates at startup, because they do not change. So the
compartment now needs to send two messages to the display: the membrane
potential (updated every timestep) and the coordinates (updated only at
startup). These messages go through the same MsgSrc and ConnVec.
The only difference is which target function gets executed. The list of
all functions involved in a Shared message is managed by the FuncVec.
(It does other things too, but we won't discuss that here).
Here, FuncVec would have as entries:
	updateVm( const Conn* c, double Vm )
	updateCoords( const Conn* c, double x, double y, double z )

The Slot, therefore, specifies both the MsgSrc and the index of the correct
function in the FuncVec.


...........................................................................

The 'next' field

Messages often go from a single source to multiple classes of targets. The
RecvFuncs of the different targets have the same type arguments, but do
quite different things. This was illustrated above for two kinds of Synapse. 
In other words, the MsgSrc may need to manage one group of targets which
have FuncVec A, and another group of targets which have a FuncVec B. In this
case, A would be managed on the usual MsgSrc, and B would be managed by another
MsgSrc with FuncVec B. The 'next' field points from MsgSrc A to MsgSrc B.

To set this up, the MsgSrc checks each newly created message to see which 
FuncVec it needs. If it is A, then the new message is created on MsgSrc A.
If it is B, then it traverses through its 'next' field to MsgSrc B, and so
on till it finds the required FuncVec. If no-one has used FuncVec B so far,
then the MsgSrc assigns a new one from scratch, and sets up the 'next' field
of A to point to the new MsgSrc B.

============================================================================

Changes in the messaging infrastructure.

Overview.

From Moose Beta 1.0.0, messaging has evolved to be more powerful and flexible.
The user programming interface is almost identical: you send data using
a 'send' call, and handle message calls using a stereotyped RecvFunc
format. The evolution is in more efficient and cleaner code, and in its
ability to efficiently handle array messages.

From GENESIS to MOOSE, there was a huge change in messaging. The basic
semantics changed: in GENESIS, messages used to 'peek' into data held in
other objects. The inspected objects knew nothing about when this happened.
Very dangerous and untidy. In MOOSE, messages 'pass' data
into objects using clean function calls.

...........................................................................

MOOSE beta 1.0.0 vs 1.0.1 messaging

Similarities: 
- Send/Recv syntax and semantics. 
	But RecvFuncs in 1.0.0 use const Conn&, while in 1.0.1 use const Conn*
- sendTo function
	But 1.0.1 also has sendBack
- Use of Slot to identify message.
	But in 1.0.1 the Slot is a new class, while in 1.0.0 it was an 
	unsigned int.

Differences:
- Multiple scales of messaging. MOOSE beta 1.0.1 has facilities for array-level
	messaging. MOOSE beta 1.0.0 can only handle individual single messages.
- The implementation is very different.
- Multiple classes of Conn in 1.0.1 to handle array and other message variants.
- The use of FuncVecs.

============================================================================

