Moose also has a parallel version. 

System configuration:
	Parallel moose has been compiled and tested with the following
	configuration:
	- OS: Linux, Fedora 7, Kernel: 2.6.21
	- GCC: gcc (GCC) 4.1.2
	- MPI: OpenMPI 1.2.3

Parallel Moose compilation:
	- Define the "CRL_MPI" flag in moose makefile. 
	- Include "-DCRL_MPI" in the "CFLAGS" of the moose makefile
	- Set the variable "CXX" in the moose make file to the correct MPI
	  compiler. ("mpicxx" / "mpiCC")
	- If MPI installation path is non-standard then give explicit path for
	  the above variable. In this case set the "LD_LIBRARY_PATH"
	  environment variable to point to the MPI libraries
	- Some MPI compilers may optionally require to explicitly link to MPI
	  libraries. Include "-lmpi" and "-lmpiCC" in the LIBS variable in the
	  moose makefile.
	- Some MPI compilers like HP-MPI have problems accepting commandline
	  input. The moose command prompt is seen to be scrolling continously
	  in this case. To avoid this give "stdio=i" as an argument to mpirun
	  to use command line input.

Parallel Moose usage:

	- Parallel Moose can be executed using executable "mpirun" provided by
	  MPI library
	- "mpirun" invokes the specified number of Moose executabled on the
	  specified number of computational nodes
	- The number of Moose executables to be invoked is specified as an
	  argument "-np <no of execs>" to mpirun
	- The computational nodes on which the executables are to be invoked is
	  specified as a list in a file. The name/full path of this file is given as an argument "-machinefile=<file name>" to mpirun. The file normally contains IP addresses / Domain names of nodes, seperated by new line.
	- A moose script file can also be provided as an optional argument to
	  mpirun
	- The following is a sample command to invoke parallel moose:
		+ mpirun -np 4 -machinefile nodelist ./moose <optional: moose script file>
	- The above statement invokes 4 moose executables on the nodes specified
	  in the nodelist file
	
Running commands on parallel moose:
	- If no moose script file is provided as an argument to mpirun, the a
	  Moose command prompt will show up.
	- This is similar to the serial moose command prompt, except that every
	  command keyed in here will be sent and executed at all non-root
	  processes. Thus is you start moose with 4 processess and keyin the
	  command "create Cell /cell" then a "/cell" object will be created on
	  processes with rank 1, 2 and 3.
	- If you want to send a command to a specific process, then use command
	  "setrank <rank no>". This ensures that all further commands are sent
	  to the process with rank: "rank no". To revert back to broadcast mode,
	  issue command "setrank 0", which ensures that all further commands
	  are broadcast to all non-root processes
	- Spikegen and SynChan objects in parallel moose should be objects of
	  "ParSpikeGen" and "ParSynChan" classes.
	- Table objects in parallel moose should be objects of "ParTable" class
	- Refer to the "DOCS/Demos/parallel_squid.g" script file for parallel
	  moose script file
