Solver design in MOOSE.

0. Introduction.
1. Overview.
2. How to design a solver.
3. How to design the solver interface to MOOSE
4. Field access
5. Regular messages
6. Special messages


0. Introduction.
----------------
Many simulators begin life as a clever new algorithm, or solver. Then the 
designer finds that they need to add input-output routines, perhaps a 
standard file format converter. A scripting language and other interfaces 
may follow. Pretty soon the original clean algorithm and the fun 
of making the fastest [neuron/network/signaling network] in the world is 
lost in the much bigger (and often less exciting) effort to make this fast 
neuron usable by other users.

MOOSE separates these tasks. Solvers do the interesting number crunching. 
MOOSE does everything else. This document describes how to write solvers
for MOOSE.


1. Overview.
------------

Solvers in MOOSE take over the computation of groups of objects that represent
simulation concepts. Solvers typically result in large improvements in speed
and accuracy, for two reasons:

- Object computations are local, so they require explicit information about
	previous states of other objects. This often restricts us to relatively
	simple explicit algorithms if we use a pure object-oriented
	computational scheme.

- Object computations require message passing. This is less efficient than
	array or matrix operations, or the use of pointers.
	
The problem with using solvers is that they violate all the nice 
object-oriented rules that users like. In a solver, values from many different
objects may be bundled together. Values are stored in a cache-optimized way.
Calculations make heavy use of pointers and even threading. All these make
it hard to write clean, user-friendly interfaces.

MOOSE provides an infrastructure for balancing the needs of speed and
clean object-oriented interface. It works by retaining the original objects
as the interface for the solvers. As far as the users and the rest of the
simulator features are concerned, the objects are the same, except that
the calculations go faster. As far as the solver is concerned, it is free 
to employ any memory structure and algorithm: no holds barred. The old 
objects are now zombies*, their inner functions taken over by the solver,
but otherwise acting like ordinary autonomous MOOSE objects.

*Footnote:
The term 'zombie' arose in the mythical ancient history of GENESIS 
development, but is so apt that we use it now as a technical term to
describe objects whose function has been taken over by a solver.

This infrastructure works through three main facilities:
- Field access (set/get) onto zombie objects is redirected to the solver
	whenever needed. Fields that the solver does not care about are
	left alone.
- Regular messages onto zombie objects are also redirected to the solver,
	again only when needed. This would usually be the case when a non-
	zombie object has messages coming and going to a zombie.
- Special messages onto zombie objects are left alone but the underlying
	access functions that the special messages tap into are changed
	to query the solver. For example, when plotting a value, a special
	message is set up between the value field and the graph. This
	message would now ask the solver for the value rather than the zombie.

In later sections we describe how to build a solver to do all these things.


2. How to design a solver.
--------------------------
A MOOSE solver should be fast and memory efficient. Design it with just
the core algorithm, and leave concerns about interfacing for later.

The typical solver uses an implicit numerical integration algorithm, often
with a variable time-step. It usually does matrix calculations with care
to ordering operations for cache efficiency.

Things to pay attention to when designing a solver:
- Primary:
	- reliability: Should work for all models in its domain,
		and give sensible failures when something goes wrong.
	- accuracy: Should give the right answer.
	- speed: Should be fast.
	- memory use: Should be economical in memory use. See also the
		point about memory reuse.
	- documentation, clean code, testing: 'Nuff said.

- Secondary:
	- Extendability: Is the design clean enough to grow when your
		models involve more kinds of calculations?
	- External objects: Can you connect up external inputs so that the
		solver can work correctly with objects that it does not
		internally handle? These may even be objects that were
		written after the solver.
	- Memory Reusability: Simulations often have repeated, very similar
		sets of objects controlled by a solver: e.g., neuron models in
		a network. Can multiple instances of the solver reuse data 
		structures between such isomorphic repeated sets?

- Tertiary:
	- Parallelization. Can it be multithreaded? Solvers are usually many 
	per node, so serial versions are already very useful. Sometimes
	we have a single solver on a multiprocessor node, so multithreading
	will help for such models. (I don't have any advice about spreading
	a solver over many cluster nodes, as the issue has yet to arise.)
	- Hot-plugging. Sometimes we can use 'canned' libraries like the
	GNU Scientific Library (GSL) or the NaG/BLAS routines. Does the
	solver let you plug in different matrix and other engines from these
	libraries?
	- Data reorganization: Sometimes the matrix form of the model is 
	useful for numerical analysis of the model. For example,
	reaction systems give rise to stoichiometry matrices which are useful
	for testing for mass conservation and other operations. If so, it is
	a bonus if the solver can provide such a matrix for other numerical
	tools.

Things to ignore:
	- What does the MOOSE data structure look like? This is dealt with
	by the interface code, many aspects of which are highly stereotyped.
	See next section.
	- What architecture will it run on? Assume it will have to run
	on many architectures and OSs. Just write clean C++ code.
	- How will the model be set up? This is the job of MOOSE and the
	interface code.
	- How will data come out of the solver? This too is the job of
	the interface code.
	- How should the solver talk to other nodes on a cluster? MOOSE will
	handle it. Assume the solver runs on a single node.
	- How do we synchronize events with the interface and other
	solvers? MOOSE will do it.

In summary, your solver design should focus just on the core numerical problem.


3. How to design the solver interface to MOOSE
----------------------------------------------

You should only get to the interface _after_ your solver is designed.

The solver should spend minimal time dealing with MOOSE. This means that it
updates external values and accesses external information only when needed.

There are three kinds of information flow between MOOSE and the solver.

- Field access: typically user-triggered set/get operations on fields that
	impinge on the solver. These could be variables (continuously updated
	simulation values like Vm, membrane potential) or parameters (stable
	input values to a simulation, like Rm, membrane resistance).
- Regular messaging: High throughput data transfer between computational 
	objects, one of which is now a zombie, and the other remains 
	external. An example could be a specialized channel class that does
	its own calculations for channel conductance, to send to a compartment
	within the solver. These messages are typically updated every timestep.
- Occasional messaging: Low throughput data transfer, typically to monitor
	simulation variables at relatively long intervals. For example, 
	a graph object may send a request for membrane potential every 
	millisecond, but internally the solver updates the potential every
	10 microseconds.

Each of these operations is handled through the regular MOOSE messaging 
facilities, so that the interface remains clean. There are some common 
functions provided by MOOSE to help with each of these operations.

An important design rule is that the objects do NOT need to know anything
about the existence of the solver class. No additional features have to
be added to objects to render them capable of being solved.

Recommended overall design:
There are four aspects of setting up the solver.
	a Defining the solver data structures
	b Loading these data structures by parsing the MOOSE model.
	c Mapping between MOOSE operations and the solver data
	d Crunching the numerical data.

Although these aspects are tightly coupled, it turns out that usually two,
and sometimes three of them can be separated out into different classes
that communicate via MOOSE messages. 

For example, in the kinetics solver, we have the Stoich class which handles
operations (a) and (b), the KineticHub does (c), and there are a number of
possible numerical engines that do (d).

Another typical decomposition would be to have one class that does
(a), (b) and (d), and another that does (c).

The advantage of separating out (c) is that it moves the MOOSE interface
code away from the data structures and into a self-contained class. This
class is typically called the Hub.

The advantage of separating out (d), if you can, is that it allows you
to plug in multiple distinct solver engines into the same set of interface
classes.

When we separate out the solver into multiple classes, there is the problem
that these classes need to be tightly coupled. For example, in the kinetics 
solver, the KineticHub needs to know about the vector created by the Stoich
object in which all the molecule concentrations are stored. We do this by
passing messages back and forth between the solver objects which contain
pointers to these data structures. This admittedly violates a key rule of
MOOSE messaging: no pointers should be passed. It is OK in this one case
because the solvers are really meant to function as an integral whole and
are not going to be separated between nodes.

4. Field access. 
----------------
Fields in normal objects are accessed through a set and a get function
stored in a ValueFinfo. When an object is zombified, the original set 
of ValueFinfos is replaced with a new set provided by the solver. These
new ValueFinfos refer to the solver.
Note that the solver only needs to provide replacement ValueFinfos
for fields that it is interested in. For example, a compartmental solver
would need to provide replacement ValueFinfos for the variable Vm 
and the parameters Erest, Rm, Cm, Ra, and so on. It would NOT provide
a replacement for the coordinates of the compartment.

Recommended Implementation for field access.

- The Hub has a function of the form
	classConnectionFunc( const Conn& c, unsigned int index, Element* obj )
  where index is for looking up the object obj.
  This function sets up all the operations to turn object obj into a zombie,
  and to map its accesses to the location in the solver specified by 'index'
  Note that this is in the standard form for MOOSE function calls, so this
  is typically set up in a DestFinfo.
- This function is called during the model parsing stage of solver setup,
	when the solver is traversing through all prospective zombies.
	It is class-specific. For example, we would have a 
	moleculeConnectionFunc for zombies of class Molecule, 
	a reactionConnectionFunc for Reaction zombies, and so on.
- This function has a set of replacement fields for the class a static array.
	These replacement fields are stored in the SolveFinfo which is derived
	from ThisFinfo.
- This solveFinfo replaces the ThisFinfo of the object when the zombify 
	function executes.

Once the classConnectionFunc is done for a given object, regular field access 
operations like set and get will look up the replacement versions of the
access function. In each case the first step of the replacement function is
to find the Hub from information on the zombie. There is a standard
function for doing this:

	Hub* h = getHubFromZombie( Element* zombie, 
		const Finfo* solveFinfo, unsigned int& index )
	where the zombie is the affected object, 
	the solveFinfo is a dummy SrcFinfo to replace the process
		message of the zombie.
	the index is the relative index of this replacement process 
		message on the Hub.

A typical set function would work like this:

void KineticHub::setReacKf( const Conn& c, double value )
{
	unsigned int index;
	KineticHub* kh = getHubFromZombie(
		c.targetElement(), reacSolveFinfo, index );
	if ( kh && kh->rates_ ) {
		assert ( index < kh->reacMap_.size() );
		index = kh->reacMap_[ index ];
		assert ( index < kh->rates_->size() );
		( *kh->rates_ )[index]->setR1( value );
	}
	Reaction::setKf( c, value );
}

Note that the Hub has to set up the mapping vector reacMap_ to go from
the relative message index to the address of the solver data structure.

Similar operations work for the get function.

5. Regular Messages
-------------------
Regular messages go between a SrcFinfo and a DestFinfo, or between two
SharedFinfos which are composed of matching sets of Src and Dest Finfos.
In each case the message works because the message source (src) gets hold
of an access function of the message destination (dest), and calls this
function to pass information and commands to the destination object.

When an object is solved, it may have messages that go outside the domain
of the solver. We assume that such messages will pass data on each time-step,
so they must be managed efficiently. This rules out the kind of forwarding
scheme that is implemented for value fields above. Instead we simply replace
the original object message with a message to (or from) the solver. To make
this work, two things must happen:

a) The solver must have a suitable Finfo to replace the 
SrcFinfo/DestFinfo/SharedFinfo on the zombie. This Finfo must be able to
identify the target object (by the information on the Conn structure of the
message) and to map it to the correct part of the solver data structures.

b) The original message from the zombie must be deleted, and in its place
the solver must set up a message to the original target.




