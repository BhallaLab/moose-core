\input texinfo   @c -*-texinfo-*-
@comment $Id$
@comment %**start of header
@setfilename moosegui.info
@settitle MOOSE GUI
@syncodeindex pg cp
@c footnotestyle separate
@c paragraphindent 2
@comment %**end of header
@copying 
This manual is for MOOSE (version 1.3 ),
The Multiscale Object-Oriented Simulation Environment.

Copyright @copyright{} 2010 Subhasis Ray, Upinder Bhalla and National
Centre for Biological Sciences, TIFR, Bellary Road, Bangalore 560065,
INDIA.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts and no Back-Cover Texts. A
copy of the license is included in the section entitled ``GNU Free
Documentation License.''
@end quotation
@end copying

@titlepage
@title MOOSE GUI
@subtitle How to use the Graphical User Interface for MOOSE
@subtitle Version 1.3
@author Subhasis Ray (@email{subhasis  at ncbs dot res dot in})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@setchapternewpage odd
@contents

@ifnottex
@node top, Getting Started, (dir), (dir)
@top MOOSE GUI

This manual is for MOOSE (version 1.3). It will be undergoing additioins
and corrections. Please keep visiting the the MOOSE website to see the
latest version.

It contains an overview of how to use the PyMOOSE/PyQT GUI for MOOSE.

@insertcopying
@end ifnottex

@iftex
@unnumbered Executive Summary
@end iftex

It contains an overview of how to use the PyMOOSE/PyQT GUI for MOOSE.

@menu
* Getting Started::             
* Overview of the GUI window::  
* Loading a file in the GUI::   
* Recording and plotting data::  
* Adding elements in a model::  
* Getting help::                
@end menu

@node Getting Started, Overview of the GUI window, top, top
@chapter Getting Started
The script to start the GUI for MOOSE is moosegui.py. Depending on where
it is installed, you can enter the following in a command prompt:

python @{full path of moosegui.py@}

If you install it from a binary package, it should already be in your
path and have execute permission set. In that case just entering 

moosegui.py

should fire up the GUI.

If you are running it for the first time, a graphical wizard will appear
to confirm some details. It has three pages. Verify if the details in
these pages are correct. Other wise select the appropriate values.  The
initial page contains general information about MOOSE and the wizard itself.

@image{first_time_wizard, 15 cm, 10 cm, first-time wizard - page 1,png}

Click @i{next} and you will be prompted to select the directory
containing the PyMOOSE demos. On Linux systems, these are installed in
@code{usr/share/doc/moose1.3/DEMOS/pymoose}. Verify that the contents of
the text box labeled @code{``PyMOOSE demos directory''}(encircled in
red) has the correct location of the PyMOOSE demos. Otherwise, click the
@code{Browse} button (encircled in blue) next to it and browse to the
appropriate directory and click @code{Open} button on the pop-up dialog.


@image{first_time_wizard_1, , , first-time wizard - page 2, png}


Clicking @i{next} will take you to the next page to select the
@code{glclient} executable. If this is installed in some location in
your @code{$@{PATH@}} (which is the case for installation from binary
packages), then just glclient in the textbox will do. Otherwise, you
will have to browse and select the executable file. If you compiled
MOOSE from source with the @code{USE_GL=1} option to @code{make}, it
will be located in @code{@{moose-source@}/gl/src/glclient}.


@image{first_time_wizard_2, , , first-time wizard - page 3, png}


After clicking next you will reach the final page in the wizard. Here
you specify a colormap file for OpenGL-based 3D visualization. Select
any of the files in the @code{colormaps} directory (which is
@code{/usr/share/moose1.3/colormaps/} for binary packages and
@code{@{moose-source@}/gl/colormaps} when compiled from source) and
click @code{Finish}.


@image{first_time_wizard_3, , , first-time wizard - page 4, png}

@node Overview of the GUI window, Loading a file in the GUI, Getting Started, top
@chapter Overview of the GUI window

Once you are finished with the @code{First-time Wizard}, you will be
working with the @i{moosegui}. Even if you cancel the wizard the first
time, you can go back to it and change the settings. It can be accessed
from the @code{File->First time wizard} menu.

We discuss the different parts of this window below.

@image{moosegui, 6 in, , moosegui window, png}

@table @dfn

@item Element Tree
      The left-most dock area of the moosegui contains two tabs. The one
      titled @code{Element Tree} contains the complete tree structure of
      the MOOSE elements. The elements(objects) in MOOSE models are part
      of a tree structure similar to the folder structure in your PC.
      
      You can click the little arrows to the left of the tree items to
      expand the tree. When fully expanded, the element tree looks like
      this:

@image{element_tree, , , moose element tree, png}

@item Simulation Control


      This is the other tab in the left-most dock
      window. 

      @image{simulation_control, , , simulation control, png} 

      Here you can specify the simulation time step, the time
      step used for plotting and the timestep when using the 3D
      visualization. The total run time of the simulation and the update
      interval for plots is also specified here. When you are ready to
      run a model, you can click the @code{Run} button here to carry out
      the simulation for the specified time.

@item Plot Window
      In the centre of the main moosegui window is the plot window. When
      you run a simulation, you can plot  the variables of interest in
      this area. This will be discussed in connection with the @code{Object
      Editor} later.

@item MOOSE Classes @anchor{moose-classes-widget}

      The right dock area contains a list of classes available in
      MOOSE. They are categorized under different headings.

@image{moose_classes,,,moose classes, png}

      Clicking a heading will expand that category. Below is a short
      description of the categories:
@table @dfn

@item base 
      Basic classes. 

@item builtins
      Classes for some builtin utility functions. 

@item biophysics
      Classes used in simulation of biophysical entities. It includes
      compartments for cable models of neurons, ion channels, synaptic
      channels, etc.

@item kinetics
      Classes for simulating biochemical entities. Includes molecule pool,
      reaction, enzyme, etc.

@item device
      Classes for simulating instrumentation. It includes rc-circuit,
      pulse-egenrator, differential amplifier, PID controller.

@item robots
      These are special purpose classes used in multiscale
      models.

@end table

If you hover the cursor over any class name in the list, a tool-tip text
with a brief documentation of the class will show up.

@item MOOSE Shell
      
      The MOOSE Shell at the bottom dock area provides an interpreter
      where you can enter Python or GENESIS commands.

@image{moose_shell, , ,moose shell, png}      

      The default interpreter is the Python interpreter. You can switch
      to the GENESIS shell by selecting GENESIS from @code{File->MOOSE
      Shell Mode} from the menu.

@end table

@node  Loading a file in the GUI, Recording and plotting data, Overview of the GUI window, top
@chapter Loading a file in the GUI


You can load an existing model into the GUI from the menu: File->Load
Model.  

@image{load_model,,, load an existing model file in moosegui,
png} 

This will pop-up a file browser in which you can select the file you
want to load. At the bottom of the file-browser you can select what type
of model file you want to load. 

@image{file_types,,, file typs recognized by MOOSE, png}

The default is GENESIS script (.g), you
can also choose NeuroML or SBML files (extension .xml).

When you load a GENESIS script, it executes whatever is in the script
using the built-in GENESIS-parser. Such a script can do much more than
just loading the model. In particular, if the script contains
@code{reset} and @code{step} commands, then the simulation will be
executed and you will have to wait until the simulatioin is over to get
control of the moosegui back. You may want to comment out the lines
containing these commands from the @code{.g} file before loading in
order to use the @code{Simulation Control} to run the simulation with
custom time.

@section Kinetikit models

In addition to regular GENESIS scripts, the GUI recognizes @code{.g}
files that contain kinetikit models. Kinetikit models have the commands
to plot variables of interest. When you load the model, all these plots
are added to the available plot window. Moreover, you get a graphical
representation of the reaction network in the layout window and the
plots in the Plot window. For example, after I load @code{Kholodenko.g}
from @code{DEMOS/kholodenko} directory I get the following:

@image{kholodenko, 6 in,,After loading the Kholodenko model in moosegui,
png}
    
You can double click any item in the layout window and that will open an
editor(@code{Object Editor}) for the underlying MOOSE object on the
right hand dock (on top of the @code{Class List}) will come up. The more
general way of bringing up the @code{Object Editor} is to double click
an item in the @code{Element Tree}.

@image{object_editor, 6 in,,object editor, png}

You can modify the properties of the objects (for example the initial
concentration of a substrate) in the object editor.

Normally the plot window is under the layout window. You can minimize
the windows on top to view the ones below.

@image{kholodenko_plots, 6 in, , kholodenko model - plots, png}


@section SBML models
Just like GENESIS models, you can select SBML model in the drop down and
load an SBML file. The main difference is that here you don't get the
reaction network layout. Also, GENESIS kinetikit files come with
predefined plots. But SBML does not handle plotting and
visualization. 

@section NeuroML models
Currently MOOSE has partial support for NeuroML models. You can load a
model from the ``Load File'' dialog and selecting NeuroML format from the
file type drop down. The elements in the model are generated as children
of the currently selected element in the @code{Element Tree}. So, you can
create the model under a new element by 
@enumerate
@item creating a new @code{Neutral} element
@item then selecting the newly created element.
@item then loading a model using the file menu
@end enumerate

@menu
* Recording and plotting data::  
@end menu

@node Recording and plotting data, Adding elements in a model, Loading a file in the GUI, top
@chapter Recording and plotting field values over simulation time
@cindex Table

Elements of the @code{Table} class are used in MOOSE are used for
recording data. @code{Table} is a versatile class: it can serves as (1)
an interpolation table, (2) a function generator (3) a recording table,
depending on what stepmode you set. But in the @b{moosegui} you do not
need to create the @code{Table} explicitly to record data. You can
simply drag and drop fields in MOOSE elements to a plot window in order
to plot it. The steps are:
@enumerate
@item You have to double click the object whose field you want
to plot in the @code{Element Tree}. This will open the object editor with
list of available fields.
@item Now you can plot a field by either left-clicking on the field and
dragging it to the plot widget and releasing the mouse button, 
@item or 
by clicking in the the @code{Plot} column twice and then selecting 'Plot
0' from the drop down. When you have multiple plot widgets, you can
select where it should be plotted from this drop-down.
@end enumerate

@node Adding elements in a model, Getting help, Recording and plotting data, top
@chapter Adding elements in a model

@section Adding a new element in the @code{Element Tree}
You can add a new element in a model by using the class list on the
right hand side pane in moosegui @pxref{moose-classes-widget,,Moose
Classes}. Double clicking the class name will create a new element in
the @code{Element Tree} under the currently selected element and also open
the @code{Object Editor} widget for the new element. The element will
have the same name as the class name. It is up to you to rename it to
something more appropriate. To do so edit the @code{name} field in the
@code{Object Editor}.


@section Connecting elements via messages
Just creating an element may not be sufficient for any complex
model. You need to enable this model to talk to other elements during a
simulation. This is done via messages. 
To do this,
@enumerate
@item Click @code{Edit Model} in the menu bar and select @code{Connect
Elements}.

@image{connect_0_lowres, 15 cm, 10 cm, Connect elements - menu item,
png}

 This will pop up a window with two panes. The left pane is for
selecting the source of the message, the right for the destination of
the message. Both has a model tree and drop-down menu for the message
field.

@image{connect_1_lowres, 15 cm, 10 cm, Connect elements - popup,
png}

@item Select source
In the left pane, expand the @code{Element Tree} and select the element
which will be the source of the message. Once you select the element,
the drop-down menu labeled @code{Source Field} will be populated. You
have to select the appropriate source field here.

@image{connect_2_lowres, 15 cm, 10 cm, Connect elements - select source,
png}

@item Select Destination
Similar to selecting source, you have to select the destination element
and the target field in the right pane.
@item Click OK to actually make the connection.
@end enumerate

@node Getting help,  , Adding elements in a model, top
@chapter Getting help in MOOSE
The documentation for MOOSE is work under progress. You can get some
contextual information in the tool tip text (popped up by hovering the
mouse cursor above a class in @code{Class List} or a field in
@code{Object Editor}. 
@image{moose_class_tooltip_lowres, 15 cm, 10 cm, moose class
tooltip,png}
@image{moose_field_tooltip_lowres, 15 cm, 10 cm, moose field tooltip,png}
Moreover you can get detailed documentation on a
class by calling moose.doc() function on the class in the @code{MOOSE
Shell}.
@example
print moose.doc(moose.HHChannel)
print moose.doc('HHChannel.channel')
@end example

Note that the documentation is formatted with special characters for
printing in a terminal. Thus you have to call @code{print} on the
returned string.


@bye

@c Local Variables: 
@c mode: texinfo
@c TeX-master: t
@c End: 




