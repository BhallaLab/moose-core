@node Backward Compatibility, , , Top
@chapter Backward Compatibility with GENESIS

MOOSE is backward compatible with GENESIS 2. You can run many GENESIS
scripts in MOOSE and there are ways to use GENESIS scripts and GENESIS
commands from Python via PyMOOSE.

@menu
* Loading a GENESIS script::    
* Running a GENESIS command::   
* PyMOOSE equivalents of GENESIS classes::  
@end menu

@node Loading a GENESIS script, Running a GENESIS command, Backward Compatibility, Backward Compatibility
@section Loading a GENESIS script

You can load (and run) and existing GENESIS script using the loadG command in pymoose.
@example
moose.context.loadG(path_to_your_genesis_script)
@end example

Here path_to_your_genesis_script is a python string with the file-path
to be loaded.  

If the GENESIS script has something that MOOSE is not compatibile with,
then you will get error messages. the loadG function passes the file to
the GENESIS parser in MOOSE and thus, whatever is there in the script
gets execeuted outside the control of pymoose. Thus, if your GENESIS
script has @code{reset} and @code{step} commands, then the simulation
will have to be finished before control returns to the Python process.

@menu
* Accessing elements created in a GENESIS script::  
@end menu

@node Accessing elements created in a GENESIS script,  , Loading a GENESIS script, Loading a GENESIS script
@subsection Accessing elements created in a GENESIS script

Whatever elements are created in a GENESIS script, are available in
memory, but not directly visible in Python. In order to access such
elements, you need to create reference to the elements.

In GENESIS, every element is uniquely identified by its path, which
similar to UNIX filesystem paths. You can use this path string to create
a reference to the element in PyMOOSE.

@example
Suppose you have created a table in your GENESIS script as follows:

@code{// FILE: my_script.g
// ... ... 
create table /vm_table
setfield /vm_table step_mode 3
// ... ...
}
Then you have loaded my_script.g in moose:

@code{moose.context.loadG('my_script.g')
}

Now, you can access the table as follows:

@code{my_table = moose.Table('/vm_table')
}
And the field values you set in the GENESIS script remain intact:

@code{print my_table.stepMode
>>> 3
}

@end example

@node Running a GENESIS command, PyMOOSE equivalents of GENESIS classes, Loading a GENESIS script, Backward Compatibility
@section Running a GENESIS command

Sometimes it happens that some functions available in the GENESIS parser
are not yet ported to PyMOOSE, or you may just find it more convenient
to use GENESIS commands. In such cases, you directly run the GENESIS
commands using @code{runG} function of PyMooseContext. You have to pass
the GENESIS command string as parameter to the function.

@example
@code{moose.context.runG('setfield /vm_table xdivs 1000 xmin -1.0 xmax 1.0')}
@end example


@node PyMOOSE equivalents of GENESIS classes,  , Running a GENESIS command, Backward Compatibility
@section PyMOOSE equivalents of GENESIS classes

Many GENESIS classes have been renamed in PyMOOSE. We have tried to
follow CamelCase for class names in PyMOOSE. For fields and method
names, we use camelCase starting with lowercase letter.

The following table gives a list of MOOSE classes replacing GENESIS
classes. The ones followed by an asterix (*) are not exactly compatible
but can be used with a little bit of modification discussed later. If
there is a '-' in the MOOSE column, that means the class has not been
implemented in MOOSE yet.

@table @var
@item GENESIS 
MOOSE
@item Ca_concen
@var{CaConc}
@item Kpores
-
@item Mg_block
@var{Mg_block}
@item neutral
@var{Neutral}
@item PID
@var{PIDController}
@item RC
@var{RC}
@item asc_file
@var{AscFile}
@item autocorr
-
@item calculator
-
@item compartment
@var{Compartment}
@item concchan
-
@item concpool
-
@item crosscorr
-
@item ddsyn
-
@item dif2buffer
-
@item difbuffer
-
@item diffamp
@var{DiffAmp}
@item difshell
@var{DifShell}
@item dis_kin
-
@item disk_out
-
@item diskio
-
@item efield
-
@item enz
@var{Enzyme}
@item event_tofile
-
@item facsynchan
-
@item fixbuffer
-
@item freqmonitor
-
@item funcgen
@var{Table}*
@item fura2
-
@item ghk
@var{GHK}
@item hebbsynchan
-
@item hh_channel
@var{HHChannel}*
@item hillpump
-
@item hsolve
@var{HSolve}
@item interspike
-
@item leakage
@var{Leakage}
@end table

@emph{TO BE COMPLETED}
@c Local Variables: 
@c mode: texinfo
@c TeX-master: "pymoose"
@c End: 
