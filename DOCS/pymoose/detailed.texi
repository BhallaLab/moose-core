@node Detailed Guide, , , Top
@chapter In-Depth Guide to PyMOOSE
In this chapter we go through the internal details of PyMOOSE.
@menu
* Overview::                    A short overview of impotrant internals of PyMOOSE
* Element Tree::                All elements in MOOSE are part of a Tree structure
* Id::                          The unique identifier for each MOOSE object
* Neutral::                     Common properties of all MOOSE classes
* PyMooseContext::              The God object giving access to global functions
* Messaging::                   How to setup communication between elements in a model
* Running GENESIS scripts in Python::  How to run GENESIS-2 commands/scripts in Python
@end menu

@node Overview, Element Tree, Detailed Guide, Detailed Guide
@section Overview of PyMOOSE internals
The entities in a MOOSE model are called @t{elements}. An @t{element} is
an object of some MOOSE class. Elements are the basic building blocks of
a model. You set the properties of the individual elements and connect
them via messages to build a model.

@subsection Id - the unique identifier of each MOOSE object
Each element has a unique identifier, called its @code{id}. PyMOOSE
provides Pythonic wrappers around this id. For every MOOSE class, we
have a corresponding Python class provided by PyMOOSE. This class
essentially creates an illusion of mirrorring the MOOSE class via a set
of properties which correspond to the fields in the MOOSE class. The
main data contained in instances of the PyMOOSE classes is only a copy
of the @code{id} of the original MOOSE object. All the fields are
accessed on-demand via function calls using this @code{id} as the
handle.

@subsection Class hierarchy of MOOSE
MOOSE provides a class hierarchy which is closely imitated by the
PyMOOSE classes. @code{Neutral} is at the top of the class hierarchy. So
instance of any other MOOSE class is also an instance of @code{Neutral}
class. A Neutral object is most often used as a container of other
objects.

Major areas of focus in MOOSE are neuronal simulations and biochemical
simulations. So many of the classes are for modeling these
scenarios. Some of the commonly used classes in Neuronal models are:
@itemize
@item Compartment 
-     models an isopotential fragment of a neuronal cable.
@item HHChannel
-     Hodgkin-Huxley-type ion channel.
@item SynChan
-     Synaptic channel.
@item SpikeGen
-     Spike generator. This models the presynaptic terminal and is
      connected to the SynChan on the postsynaptic side.
@item Cell
-     Represents a single neuron. Practically it is a container for
      connected compartments that constitute a neuron.
@end itemize

Commonly used classes in biochemistry/chemical kinetics models are:
@itemize
@item Molecule
-     A pool of molecules.
@item Enzyme
-     An abstraction of enzymatic mechanism.
@item Reaction
-     A general chemical reaction with forward and backward rate constants.
@item KinCompt
-     A volume in space in which molecules exist/reactions take place.
@end itemize

Some classes are there to provide utilities and infrastructure for doing
simulation experiments:
@itemize
@item Table
-     A versatile list-like structure which allows interpolation,
      data-recording, sending pre-assigned sequence of data at each time
      step tp some target object and saving data to file.
@item AscFile
-     A general text(ascii) file handle.
@item Random number generators 
- a whole bunch of them to generate samples from various distributions.
@end itemize
TODO: incorporate class-herarchy diagram

@subsection Messaging
Any complex model is composed of multiple components called
@code{elements} which represent some well defined biological concept,
like an ion-channel or an enzyme. The components of a model are
connected to each other via messages. These messages allow state
variables of one element to be seen by the other. For example, a
synaptic channel has a conductance @code{g} which depends on the
membrane potential @code{Vm} of a neuronal compartment. @code{Vm} on the
other hand changes with change in @code{g}. Thus, we need a message
sending @code{Vm} from compartment to synapse and a message sending
@code{g} from synapse to compartment. These two messages are combined in
another message, @code{channel}.

@example
Take, for example, a simple reaction: @code{A + B <---> C}. By
convention, the rate of the forward reaction is represented by @i{Kf}
and that of the backward reaction is represented by @i{Kb}.

Now, @b{A}, @b{B} and @b{C} are molecular species and MOOSE provides the
class @code{Molecule} to model them. The main property of a Molecule
element is @i{n}, the number of molecules.

As you will immediately recognize, just knowing the number of molecules
does not help in calculating the progress of a chemical reaction with
time. It is concentration that matters. But to obtain concentration from
number of molecules, you need the volume of the container. This
container is called a kinetic compartment, which need not be a real
container, but any volume in space whithin which the molecules are
homogeneously distributed. Kinetic compartments are represented by the
class @code{KinCompt} in MOOSE. 

TODO: to be completed with an walk-through to developing the simulation.
@end example


@node Element Tree, Id, Overview, Detailed Guide
@section Element Tree
@cindex Element Tree
@cindex element
@cindex root

All elements in MOOSE are part of a tree structure. We call this
@code{Element Tree} or @code{Model Tree}. This is similar to the folder
structure in the file system of your computer. Each entry in this tree
is a moose object and we call it an @strong{element}. The top level
element is called the @code{root} element (represented as
@samp{/}). Every element other than @code{root} has a parent
element. There are some predefined special elements that are used for
management of the system. They are created when you startup moose (or
@code{import} moose in Python). The following diagram shows this
structure:

@example
@group
root
|
|__ shell
|  |
|  |__ sli
|  |
|  |__ BaseContext
|
|__ sched
|  |
|  |__ cj
|     |
|     |__ t0
|     |
|     |__ t1
|
|__ library
|
|__ proto
@end group
@end example



@node Id, Neutral, Element Tree, Detailed Guide
@section Id
@cindex Id
@findex id
@findex index
The unique identifier for each MOOSE object is an Id. This is accessible
as @code{id} field of pymoose objects. An Id object has two components, 
@itemize
@item id 
      an unsigned integer. The method @code{id} returns this value. The
      root element of the moose element tree always has the id 0.
@item index
      an unsigned integer giving the index number of
      array-elements. For simple elements, it is 0. It is returned by
      the method @code{index}.
@end itemize

When you print an @code{Id} object, it is printed in the form: @code{id[index]}

Example:
@example
@group

>>> foo = moose.Neutral('foo') # create a Neutral object called 'foo'
>>> foo.id
<moose.Id; proxy of <Swig Object of type 'Id *' at 0x248c6f8> >
>>> print foo.id
470[0]
>>> print foo.id.id()
470
>>> print foo.id.index()
0

@end group
@end example

Even if you create multiple python objects wrapping the same moose
element, you can always verify if the underlying moose element is the
same by comparing their @code{id}s.

Example:
@example
@group

>>> a = moose.Neutral('my_test_object')
>>> b = moose.Neutral('my_test_object')
>>> a.id == b.id
True

@end group
@end example

Note that @code{id} is a more fundamental property than the path string
of an object. The path string changes when you change the name of the
object, but the @code{id} remains unchanged.

Example:
@example
@group

>>> a = moose.Neutral('my_test_object')
>>> print a.path
/my_test_object
>>> ii = a.id
>>> a.name = 'your_test_object'
>>> print a.path
/your_test_object
>>> ii == a.id
True

@end group
@end example

In addition, any @code{Id} object is hashable. The hash is computed as
the hash of its string representation. Thus you can use them as keys in
a @code{dict}.

@node Neutral, PyMooseContext, Id, Detailed Guide
@section Neutral
@cindex Neutral
@cindex base class
@vindex className
@vindex name
@vindex index
@vindex path
@vindex parent
@vindex cpu
@vindex dataMem
@vindex msgMem
@vindex fieldList
@vindex childList
@vindex node

@vindex author
@vindex description

@code{Neutral} captures the fundamental properties of all the MOOSE
elements. If you are familiar with Object Oriented Programming, you can
recognize that this is the base class of all moose classes whose
instances can be in the element tree.@footnote{Not all classes in MOOSE
are element-classes. The @code{Id} class, for example.} 

Being the base class of all other MOOSE classes, properties of @code{Neutral}
class is common to all MOOSE classes. A @code{Neutral} object can wrap any
valid moose object. 

You can construct a Neutral object in many ways. 
@table @samp
@item From a path string: 
First, you can just
give a path-string as the parameter to the constructor. If there is
already an object with the given path, then you get a wrapper around the
existing object. On the other hand, if no such object exists, it will
try to create a new @code{Neutral} object with the given path. 
@example
@group

>>> foo_neutral = moose.Neutral('/foo')
>>> bar_neutral = moose.Neutral('/foo')
>>> foo_neutral.path
'/foo'
>>> bar_neutral.path
'/foo'
>>> bar_neutral.name = 'bar'
>>> foo_neutral.name
'bar'

@end group
@end example

As you can see in the above example, @code{bar_neutral} is just a
wrapper around @code{foo_neutral} and thus changing a field in one of
them will be reflected in the other.

Note that when you specify a path to the constructor, it has to exist up
to the parent object.

@item From an @code{Id}:
You can wrap the Id of any existing MOOSE object inside a
@code{Neutral}. The following example shows a common idiom used for
looping through the list of children of an object.
@example 
@group
>>> root = moose.Neutral('/')
>>> for child_id in root.childList:
...     child_obj = moose.Neutral(child_id)
...     print child_obj.path, 'is actually of class', child_obj.className
... 
/shell is actually of class Shell
/sched is actually of class Neutral
/library is actually of class Neutral
/proto is actually of class Neutral
@end group
@end example
@item Specifying a parent and name: 
You can also give the name of the objct to be created and specify the
parent. You can call the constructor like this:

@code{>>> foo = moose.Neutral('foo', parent)}
Here @code{parent} can be another PyMoose object or an @code{Id}. Thus,
if the path of the parent is @code{'/bar'}, then path of @code{foo} will
be:
@code{'/bar/foo'}

@item Copy an existing object: 
You can also make a copy of an existing object. The constructor is
called like:
@code{foo = moose.Neutral(src, new_name, parent)}
or @code{foo = moose.Neutral(src, path)}

Here @code{src} can be another @code{Neutral} object or the @code{Id}
thereof. @code{new_name} is a string specifying the name of the
duplicate and parent is any PyMoose object or an Id. @code{path} is a
string specifying the path of the duplicate object.

@end table
The following fields are available in Neutral class and hence in all
element classes:

@table @samp
@item className
The name of the MOOSE class this object belongs to. The object-oriented
design of MOOSE enables you to work with an element as if it was an
instance of its superclass. You can wrap any element in a @code{Neutral}
object but of course later you may need to find out the actual MOOSE
class it belongs to. @code{className} is the way to go. 

What about the @code{__class__} property in Python? The reason for
having a separate @code{className} field is that MOOSE has its own
system for class hierarchy. This is not necessarily visible to
Python. Similarly, if you extend a MOOSE class in Python, it does not
reach the underlying MOOSE class system. Extending MOOSE classes in
Python is only useful for attaching additional information to it, but
not for changing the underlying behaviour. For that you have to edit the
C++ source code of MOOSE and recompile it, a task suited for the brave.

@item name
Name of the element. Two different objects may have the same name but
siblings in the element tree should have different names. You can change
the name of an object by assigning a new string value to this field.

@item index
MOOSE has two flavours of element: @code{simple element} and @code{array
element}. A single entity is represented by a @code{simple element}
whereas an @code{array element} represents a bunch of elements of the
same kind. The @code{index} field indicates the position of this
@code{Neutral} object in an @code{array element}. For @code{simple
element}s it is @code{0}.

@item parent
The @code{Id} of the parent element of this object in the element tree.

@item node
This is the CPU node no. of on which this element is located. This is
relevant only for parallel computers and PyMOOSE is yet to be adapted to
such systems.

@item fieldList
Vector listing the fields in the MOOSE object. You can traverse it like
a Python @code{list}. If you add a Python attribute to the object later,
that will not be visible in this. Nor will that visible to MOOSE. The
way to add a field to the underlying MOOSE object is to use the
@code{addField} function of the @code{PyMooseContext}.
      
@item cpu
Reports the cost of one clock tick, very roughly # of FLOPs.

@item dataMem
Memory used by data part of object

@item msgMem
Memory used by messaging (Element) part of object.

@item childList
Vector of @code{Id}s of the children of this object. This is also
available via @code{children()} method, which is retained for backward
compatibility.

@end table


@node PyMooseContext, Messaging, Neutral, Detailed Guide
@section PyMooseContext

One global object that provides access to global functions in PyMOOSE is
the instance of PyMooseContext. It is available from the abstract base
class of all PyMOOSE classes, PyMooseBase (which, being abstract, cannot
be instantiated, but whose public properties are inherited throughout
the class hierarchy).

PyMooseContext should be considered a singleton. There should be only
one instance of it at any given time. And usually this instamce is
created at startup (when moose is imported for the first time).

@example
The standard way to access the context is:
context = PyMooseBase.getContext()
@end example

The context object provides quite low level access to MOOSE. So you
should be discriminate about using the functions available. There are
some functions to control simulation which are very common and must
accessed via the context object.
@table @samp
@item  setClock(clockNo, dt, stage=0)
       set the clock no. specified by @code{clockNo} with time step
       @code{dt} and stage @code{stage}.

@item useClock(clockNo, path, func='process')
      use clock specified by @code{clockNo} on @code{path}, which can be
      a wildcard path, calling the internal function @code{func} of the
      element class at each time step. The internal function is by
      default 'process', which calculates the state of the object at the
      end of the timestep.

@item reset()
      reset the simulation. This clears all recording Table objects that
      have been scheduled on some clock, and usually sets things back to
      initial values.

@item step(time)
      Run the simulation. If @code{time} is a @code{float}, it is taken
      as the length of time to be simulated. Each clock in the
      simulation proceeds by its @code{dt} until its @code{currentTime}
      reaches or exceeds @code{time}.

      If @code{time} is an integer, then it is taken as the number of
      steps for the fastest clock in the system. Thus, if the fastest
      clock in the system has @code{dt = 0.01} and @code{time = 10},
      then this will run the simulation for 0.1 time units.

@item readCell
@item readSBML,
@item readNeuroML, 
@item getCurrentTime, 
@item addField.
@item loadG
@item runG
@item move
@item exists
@end table
The following are more advanced methods and should be used with
caution. Usually for each of them there is a more accessible counterpart
as a member of the PyMooseBase object or its derivative. The methods in
PyMooseContext are required only when there is no such counterpart.

@table @samp
@item getField
@item setField
@item getParent
@item getPath
@item getName
@item getChildren
@item copy

@end table

@node Messaging, Running GENESIS scripts in Python, PyMooseContext, Detailed Guide
@section Messaging
@cindex connection
@cindex message
@subsection Source and Destination fields
@cindex source field
@cindex destination field
Elements in a MOOSE model communicate with each other at runtime via
messages. For example, to set up a constant current injection into a
neuronal compartment, you want to connect a @code{PulseGen} object
@code{pulsegen} to the @code{Compartment} object @code{comp}. In the
definition of @code{PulseGen} class you have predefined source fields
which tell what are the fields that can be transmitted out of the
@code{pulsegen} object. Similarly, @code{Compartment} has a destination
field where it can receive a current injection value. By connecting the
source and the destination fields we set up communication between these
two components.

The syntax for connecting source and destination messages is simple:
@code{@{source-object@}.connect(@{source-field@}, @{target-object@},
@{target-field@})}

With the current example, it will be:

@code{pulsegen.connect('outputSrc', comp, 'injectMsg')}

A very common yet confusing scenario is when you want to record the
value of some state variable periodically. This is achieved by using
@code{Table} objects. The confusing bit here is that the table object is
used as a source, not a destination. The relevant source-field is
@code{inputRequest} and the destination-field is the field to be
recorded. This is a special case as the fields to be recorded are not
destination fields, but value fields, which do not usually participate
in messaging. Also, to use the Table object as an output buffer, you
have to set the stepMode field to @code{TAB_BUF}.

Thus, to record the membrane potential Vm from our compartment, we can
issue the following statements:

@example
@group

table = moose.Table('/Vm_tbl')
table.stepMode = 3
table.connect('inputRequest', comp, 'Vm')

@end group
@end example

@node Running GENESIS scripts in Python,  , Messaging, Detailed Guide
@section Running GENESIS scripts in Python
@cindex GENESIS script
There are two commands in PyMOOSE that allows you to run legacy GENESIS
commands inside Python. These are @code{loadG} and @code{runG}. If you
have a file @code{script.g} containing a GENESIS script, then you can
execute the contents of it by invoking: 

@code{context.loadG(script.g)}

where context is the singleton PyMooseContext object (can be obtained
via: @code{context = moose.PyMooseBase.getContext()}).

Sometimes it is useful to access the MOOSE objects via the GENESIS
commands. This is because for some classes, the Python wrappers may not
be up to date, or it may just be ease of use. In those cases, just to
carry out a single command, you can use
@code{context.runG('@{genesis-command@}')}.

For example, to display the messages on an element specified by the path
@code{/my_element}, you can use: 

@code{context.runG('showmsg /my_element')} 



@c Local Variables: 
@c mode: texinfo
@c TeX-master: "pymoose"
@c End: 
