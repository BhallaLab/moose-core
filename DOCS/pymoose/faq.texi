@node FAQ, , , Top
@chapter Frequently Asked Questions
@menu
* How do I load a model?::      
* How do I record field 'xyz' from and object?::  
@end menu

@node How do I load a model?, How do I record field 'xyz' from and object?, FAQ, FAQ
@section How do I load a model?
There are various formats that a model can be in. MOOSE recognizes
GENESIS cell prototypes ('.p' files), SBML and neuroML files. Moreover, a GENESIS script
('.g' file) can be loaded in PyMOOSE. Here is a brief description of these:

@menu
* How do I load a GENESIS prototype file?::  
* How do I load an SBML file?::  
* How do I load a neuroML file?::  
@end menu

@node How do I load a GENESIS prototype file?, How do I load an SBML file?, How do I load a model?, How do I load a model?
@subsection How do I load GENESIS prototype file?
@cindex prototype
There is a text file format used by GENESIS to define prototypes for
neuronal models. The details of this format can be found in GENESIS
documentation for @code{readcell}. 

Briefly, the main content of files in this format is a sequence of rows
corresponding to compartments that constitute the cell model. In each
row, you have the compartment name, its parent compartment's name,
position of the starting point the compartment (optionally the end
point), diameter of the compartment (the spatial dimensions are in
microns for position and diameter), followed by a list of channels and
their conductance densities(in SI unit, Siemens/m^2).

The channels are recognized by their names and the actual channel
prototype definitions must be loaded under @code{/lib} before loading
the prototype file. Otherwise that channel will not be inserted on the
compartments.

Once you have created prototypes for the channels, the @code{readCell}
function in @code{PyMooseContext} can be called to load the cell
prototype. For instance,
@example
moose.context.readCell('/usr/share/doc/moose/DEMOS/axon/axon.p', '/axon')
@end example

will load read the prototype described in the file
@code{/usr/share/doc/moose/DEMOS/axon/axon.p} as the cell @code{/axon}.

@node How do I load an SBML file?, How do I load a neuroML file?, How do I load a GENESIS prototype file?, How do I load a model?
@subsection How do I load an SBML file?
SBML stands for systems biology markup language. This is an XML based
file format for defining computational models in systems biology. More
information can be found at the official website:
@uref{http://sbml.org/, http://sbml.org/}.

You can load SBML models using the @code{readSBML(filepath,
elementpath)} function in @code{PyMooseContext} class.

For example,

@example
moose.context.readSBML('/usr/share/moose/DEMOS/sbml_Reader/acc88.xml', '/acc88')
@end example

will load the model defined in acc88.xml file under a container @code{/acc88}.

@node How do I load a neuroML file?,  , How do I load an SBML file?, How do I load a model?
@subsection How do I load a neuroML file?

neuroML is an XML-based format for defining neuronal models. You can
find out more about neuroML at its website:
@uref{http://www.neuroml.org/, http://www.neuroml.org/}. MOOSE is capable
of reading some levels of neuroML model definition. You can use the
@code{readNeuroML} function in PyMooseContext to load a neuroML model in
MOOSE:
@example
moose.context.readNeuroML('/usr/share/moose/DEMOS/NeuroML_Reader/CA1/Ca1.xml', '/ca1')
@end example
to load the model defined in Ca1.xml into a Cell object '/ca1'.

@node How do I record field 'xyz' from and object?,  , How do I load a model?, FAQ
@section How do I record field 'xyz' from and object?
The @code{Table} class serves for recording data in MOOSE. @code{Table}
is a multipurpose class, capable of acting as an interpolation table,
function generator as well as a data recorder. You have to set up a
@code{Table} element before you reset and run the simulation (the
@code{Table} objects are themselves part of the simulation).

For recording the value of fields that represent continuous variables,
during a simulation, you have to connect the @code{inputRequest} field
of a @code{Table} object to the corresponding value field on the target
object, and set the step mode of the table object to @code{TAB_BUF}
(=3).

@example

Suppose, you want to record the membrane potential of a compartment
@code{/soma} over simulation time. Now, the membrane potential is
represented by the value field (@code{ValueFinfo} in MOOSE API) @var{Vm}
of @var{Compartment} class.

Assuming you have a container element for data [you can create one by
data = moose.Neutral('/data')], the following code will setup a Table
for recording Vm at each timestep.


@code{
Vm_table = moose.Table('/data/Vm_table')
Vm_table.stepMode = moose.TAB_BUF
Vm_table.connect('inputRequest', target_object, 'Vm')
}

Generally,

@code{
xyz_table = moose.Table('/data/xyz_table')
xyz_table.stepMode = moose.TAB_BUF
xyz_table.connect('inputRequest', target_object, 'xyz')
}

@end example

@subsection How do I record spike events?
If you only want to record some threshold crossing events, like neuronal
spikes, then you can use @code{TAB_SPIKE} (=4) mode. In this case, the
@code{stepSize} field of the table is used as the threshold for the
target field to be recorded.

@example
spike_table = moose.Table('/data/spike_table')
spike_table.step_mode = moose.TAB_SPIKE 
spike_table.connect('inputRequest', soma, 'Vm')
spike_table.stepSize = 0.1
@end example

In the above example, soma is a neuronal compartment (instance of
@code{Compartment} class). @code{spike_table} will have an entry of the
current simulated time every time membrane potential @code{Vm} of
@code{soma} crosses 0.1 Volt (assuming you are using SI system through
out).

@node Can I do XYZ available in GENESIS using PyMOOSE?
@section Can I do XYZ available in GENESIS using PyMOOSE?
@xref{Backward Compatibility}.

@node How do I plot the simulation data?
@section How do I plot the simulation data?
To plot data, you must set up recording tables for fields you are
interested in (@xref{How do I record field 'xyz' from and object?}).
Once the simulation is finished [i.e. after you have called
@code{moose.context.reset()} and
@code{moose.context.step({runtime/no.-of-integration-steps})}], you 

@c Local Variables: 
@c mode: texinfo
@c TeX-master: "pymoose"
@c TeX-master: "pymoose"
@c End: 
