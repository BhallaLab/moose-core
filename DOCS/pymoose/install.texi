@node Installation, , , Top
@chapter Installing (Py)MOOSE

@cindex install, installation

MOOSE is available both as source code and platform-specific installer
packages. However easy the platform-specific installers are to use,
there may be issues with dependencies. Hence the most universal way of
installing MOOSE is to build it from the sources.

@menu
* Prerequisites::       Software environment needed to build MOOSE
* Configuration::       Configuring the build settings
* Build/install::       Compiling and installing MOOSE
* Loading::             Load the moose module in Python
@end menu

@node Prerequisites
@section Prerequisites

@itemize @bullet
@item GNU Make

@item GNU C and C++ compiler

@w{gcc and g++} are required for compiling the C++ source code of MOOSE.

@item Python development headers

Python.h should be located somewhere in the include search
directories. If it is in a non standard directory, you can edit
pymoose/Makefile to add this directory in the include search path with
@minus{}I@{your_python_include_directory@} argument.

@item GNU Scientific Library

@r{GSL} provides integration methods for some classes in MOOSE.

@item libsbml

The default build requires @r{libsbml} to be installed. You can download
it from SBML website (@uref{http://sbml.org)}.


@end itemize

@node Configuration
@section Configuration
Right now all configuration is done by editing the @code{Makefile} of
MOOSE. You can have some control over what all are included in the
compilation by passing commandline arguments to @code{make}. These
options are described in the next section (Build/install).

@node Build/install
@section Build/install
To build @b{pymoose} run make in the moose source code's top-level
directory with pymoose as the targte:

make pymoose

This will do the default build. There are several options you can pass
to make for customizing the build. Pass the options as key-value pairs
in the make commandline as follows:

make pymoose OPTION1=value1 OPTION2=value2 OPTION3=value3

Most of the options are for enabling or disabling some feature. They are
listed below:

@itemize @bullet

@item BUILD=release,debug (default value: release)
      
BUILDTYPE can be either @code{debug} or @code{release}. Passing
@code{debug} will build an unoptimized version with debugging symbols
for gdb and will enable the built-in C++ unit tests.

@code{release} will build an optimized version without debugging
symbols or unit-tests.

If unspecified, BUILD defaults to @code{release}.

@item USE_GSL=1,0 (default value: 1) 
Use GNU Scientific Library for integration in kinetic simulations.
		
@item USE_SBML=1,0 (default value: 1) 
Compile with support for the Systems Biology Markup Language
 		(SBML). This allows you to read and write chemical
 		kinetic models in the simulator-indpendent SBML format.
 
@item USE_NEUROML=1,0 (default value: 0) 
Compile with support for the NeuroML. This allows you to read neuronal
		models in the NeuroML format.  Look in
		external/neuroML_src/README for the extra steps needed
		to add the libraries & headers.

@item USE_READLINE=1,0 (default value: 1)
Use the readline library which provides command history and better
 		command line editing capabilities

@item USE_MPI=1,0 (default value: 0) 
Compile with support for parallel computing through MPICH library
 
@item USE_MUSIC=1,0 (default value: 0) 
Compile with MUSIC support. The MUSIC library allows runtime exchange of
 		information between simulators.

@item USE_CURSES=1,0 (default value: 0) 
To compile with curses support (terminal aware printing)
 
@item USE_GL=1,0 (default value: 0)
To compile with OpenSceneGraph support to enable the MOOSE elements
 		'GLcell', 'GLview'.

@item GENERATE_WRAPPERS=1,0 (default value: 0) 
Useful for python interface developers.  The binary created with this
 		option looks for a directory named 'generated' in the
 		working directory and creates a wrapper class (one .h
 		file and a .cpp file ) for each moose class and partial
 		code for the swig interface file (pymoose.i). These
 		files with some modification can be used for generating
 		the python interface using swig.

@end itemize

The build process for pymoose generates two final output files in the
top level directory: @code{moose.py} and @code{_moose.so}. Copy
these to any location in your PYTHONPATH environment variable (for
Python 2.6 you can copy them to @file{dist-packages} directory inside
your python installation directory (for UNIX-like systems it is:
@file{/usr/lib/python@{version@}} or @file{/usr/local/lib/python@{version@}}
Additionally, there is a file with some utility functions
@file{pymoose/pymoose.py}. It has functions like @code{showmsg},
@code{printtree}, etc. You may copy this file along with moose.py to use
these functions.

@node Loading
@section Loading

Once you have built and installed PyMOOSE, you can load it in the Python
interpreter by the statement: @code{import moose}
You should see a few informational outputs, ending with:
@example
SIMPATH = .:your_home_directory
nnnn FuncVecs built for the first time
@end example

where @i{your_home_directory} stands for the full path of the user's
home directory and @i{nnnn} stands for some number (2200 in my case).

@c Local Variables: 
@c mode: texinfo
@c TeX-master: "pymoose"
@c End: 
