@node Introduction, , , Top
@chapter Introduction to MOOSE and PyMOOSE

MOOSE is a general purpose simulation environment, and PyMOOSE its
incarnation as a Python module. MOOSE stands for Multiscale
Object-Oriented Simulation Environment.

The 'multiscale' comes from the fact that one can simulate systems
spanning multiple scales: from a few molecules reacting with each other
(Gillespie simulations) to large networks of neurons to simulate areas
of the brain.

It is 'object-oriented' in the sense that it represents the simulation
entities as instances of particular classes and these classes are
organized in a hierarchy where a child inherits the properties of its
parent.

@menu
* Modeling for simulation::     
@end menu

@node Modeling for simulation
@section Modeling for simulation
@cindex object
@cindex field
@cindex model
@cindex simulation

Computers are limited by the available memory and the speed of the
electronics, whereas anything from reality has infinite complexity (if
you have any doubt, see the beautiful description of the complexity of a
glass of wine by Richard Feynman)@footnote{Feynman Lectures on Physics,
Volume I, pp 3-10, The relation of Physics to other sciences}. Hence,
when simulating any system from reality, we have to consider carefully
what details are important and what to leave out.

This leads us to abstraction. We use the existing scientific knowledge
to make abstract representations of entities from reality. These are
called @code{objects}. We use @code{objects} as the building blocks for
more complex models. An @code{object} in a model may be represent a
real-life object or some abstract concept. How do we model the
interaction between the objects in real life? Through @code{messages}
between interacting @code{objects}. Also, the pieces information
relevant to the situation are attached to the @code{objects} as
@code{fields}. When we set up these abstractions and interactions, we
have a model of the system.

As an illustration, consider modeling a simple chemical reaction, say
the oxidation of Nitric oxide(NO) to Nitrogen dioxide(NO2). There are
some NO molecules and some O2 molecules and depending on the
concentrations they react at certain rate and form NO2. If you go too
deep into reality, there is a mind boggling amount of detail: NO
molecules and O2 molecules roaming around randomly inside a container at
very high speed, hitting each other and the walls of the container and
once in a while there will be some exchange of electrons and an atom of
oxygen will stick with the NO to share them.

But we also know that as long as we are worrying only about the amount
of the end product NO2 at any given time, all these details can be
forgotten and a more simple law can be applied if we have some empirical
information, viz., the initial concentration of each of the gases, the
rate constants of the forward and backward reactions and how many
molecules of each reactant gas react to produce how many molecules of
the product. Given these, we can invoke the laws of chemistry to
calculate the concentration of each molecule at any given time. When we
compute the series of values these molecular concentrations take at a
given sequence of points in time, we call that a simulation.

All this can be modeled and simulated in MOOSE as follows:

The gases will be contained in some closed volume: we represent this
with a @code{KinCompt} object (the name is a programmers' abbreviation
for COMPartmenT for chemical KINetics). We set the @code{volume} field
of the @code{KinCompt} object.

The pool of NO molecules will be modeled as @i{a} @code{Molecule} object
and we set the number of molecules by setting the the field @code{n} of
the Molecule object. Similarly, the pools of O2 and NO2 molecules will
be modeled as @code{Molecule} objects (If initially there is no NO2, we
set @code{n = 0} for it). When we set the number of molecules, the
concentration is computed automatically from the volume of the
@code{KinCompt} object. Alternatively, we can set the concentrations
directly in the @code{conc} field of the @code{Molecule} objects.

Now the reaction itself is determined by the forward and backward rate
constants. The @code{Reaction} class is precisely for this. We create a
@code{Reaction} object and set its @code{Kf} and @code{Kb} fields to the
forward and backward rate constants.

Now to implement the interaction between these, we set some messages
between particular fields of different objects. We have to setup the
substrate and product relationships of the @code{Molecules} with the
@code{Reaction}. This is done by connecting the @code{'reac'} field of
the O2 and NO @code{Molecule} objects with @code{'sub'} field of the
@code{Reaction} object and connecting the @code{'reac'} field of the NO2
@code{Molecule} with the @code{'prd'} field of the @code{Reaction}
object.
        
There are bunch of @code{Clock} objects that tick at some specified
intervals. Each object is associated with some clock which controls the
update interval of its state variables. Once the model is set up we can
do a 'reset' to bring everything to an initial condition and then 'run'
the simulation. Running the simulation causes the clocks to start. As
each clock progresses, the @code{conc} field of the @code{Molecules}
will be updated with the computed concentration for that time.

