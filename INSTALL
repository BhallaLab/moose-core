* Getting MOOSE 
==============================================================================

** Released versions of MOOSE are available in the sourceforge file area:
   http://sourceforge.net/projects/moose/files/moose/Moose%202.0.0%20Kalakand/
   

   Download and install the prepackaged version suitable for your
   platform. If no such package exists, you can build it from the sources
   (download the file ending with tar.gz or tar.bz2 or zip and unpack it,
   go through README and INSTALLATION).

** Development version:

   You can download the development sources using a subversion client:
   svn co svn://svn.code.sf.net/p/moose/code/moose/branches/async13 moose
   

   or 
   svn checkout svn://svn.code.sf.net/p/moose/code/moose/branches/{branchname} moose
   


* Building MOOSE from sources
==============================================================================

** Linux:
   - gnu make




     On Debian based distributions these can be obtained by the command:

     sudo apt-get install g++ make python-dev libgsl0-dev python-numpy libhdf5-serial-dev

     These names are for Ubuntu 12.04, the exact package names may
     vary depending on your distribution.

     On Fedora based distributions, you can use:

     sudo yum install {package names}

     where {package names} is the list of Fedora packages
     corresponding to thos mentioned above.
  


*** Building:

    You may need to inform make of C++ include directories and library
    directories if your installed packages are at non-standard
    location. For example, if your have libsbml installed in
    /opt/libsbml and the header files are located in
    /opt/libsbml/include and lib files are located in
    /opt/libsbml/lib, you can set the environment variables CXXFLAGS
    and LDFLAGS to include these before calling make:

    export CXXFLAGS= -I/opt/libsbml/include
    export LDFLAGS= -L/opt/libsbml/lib

    Lookup the manuals for gcc and gnu make to understand CXXFLAGS and
    LDFLAGS.


**** Release build:
     cd moose
     make BUILD=release

**** Debug build:
     cd moose
     make BUILD=debug

**** Python 3K
     By default, MOOSE is built for Python 2. In case you want to
     build MOOSE for Python 3K, you need to pass the additional flag:

     PYTHON=3

     like:
     
     make BUILD=release PYTHON=3


*** Installation:

    For system-wide installation you can run:

    sudo make install

    Now you can import moose in a Python script or interpreter with
    the statement:

    import moose
     
    If you have installed the GUI dependencies below for running the
    graphical user interface, then you can run the GUI by
    double-clicking on the desktop icon or via the main-menu.  The
    squid axon tutorial/demo is also accessible via these routes.


**** Local-installation

     If you do not have permission to install it in system directories,
     you can let it be where it was built or copy the `python`
     subdirectory of MOOSE source tree to a location of your choice and
     add the path to your PYTHONPATH environment variable. Suppose you
     have a ~/lib directory where you keep all your locally built
     libraries, do:

     cp -r {moose-source-directory}/python ~/lib/
     
     and add this to your .bashrc file (if you use bash shell):

     export PYTHONPATH="$HOME/lib/python":"$PYTHONPATH"

     For other shells, look up your shell's manual to find out how to
     set environment variable in it.

     To use the GUI, copy the `gui` subdirectory from MOOSE source
     tree to a location of your choice, like this:

     cp -r {moose-source-directory}}/gui ~/lib/python/moosegui

     and make the MooseGUI.py executable:

     chmod +x  ~/lib/python/moosegui/MooseGUI.py

     and create a link somewhere in your PATH:

     ln -s ~/lib/python/moosegui/MooseGUI.py ~/bin/moosegui

     assuming you have ~/bin directory in your PATH environment
     variable. After this you run the MOOSE GUI by the `moosegui`
     command.

***** Recommended:

      In addition to the essential libraries for building MOOSE, you
      can use many of the Python libraries freely available for
      scientific computing. Among these are:
      - scipy: provides many utility functions for data analysis
      - h5py: provides capability to read and write HDF5 files.

**** GUI:
     To run the moose GUI, you need some additional packages:

     - Python bindings for Qt4 or higher
     - matplotlib
     - Python OpenGL
     - Python bindings for Qt's OpenGL module

     On Ubuntu 12.04 these can be installed with:

     sudo apt-get install python-matplotlib python-qt4 python-qt4-gl 

     If you have installed moose as above 'sudo make install', and above dependencies,
     you can run 'moosegui' in the terminal, or via the desktop / main menu shortcuts.
     There are also shortcuts for the squid axon tutorial/demo on the desktop / main menu.
     MOOSE GUI creates a ~/moose/Demos directory (home folder) on first run.
     File->load models from there. Help is available from the GUI menu.
