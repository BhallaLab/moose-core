#+TITLE: Recommended coding practices for Python scripting
Python is a very flexible scripting language with very few rules
imposed by the language designers. Thus you are free to shoot yourself
in the foot any way you like and nobody is going to stop you. A
popular slogan summarizing the Python philosophy is "We are all
consenting adults here".

But not everybody who writes code is an "adult" in the programming
sense. And even seasoned programmers have a tendency to get entangled
by their own "smart" code to render them immobile
(programmatically). Time and again we need to be reminded of the
basics.

There are some pretty common ideas that keep coming up in various
mailing list discussions and here is a collection of aphorisms, tips,
tricks and links to such things.

* KISS: Keep it short and simple
** Logical program units should fit in one screen
   That is not a hard limit, but if your function definition is too
   long then you may want to rethink it. A function should do one well
   defined task. Check your function to see if you have put in
   multiple disparate tasks inside one function.

   See
   [[http://stackoverflow.com/questions/475675/when-is-a-function-too-long]]

** More than five logical units at any level is too much
   Remember that code has to be read and understood by average human
   beings. And five to seven is the number of items most people can
   easily keep in mind. So it is a good idea to compose things with
   those many elements. Think of data flow diagrams.

** "If you need more than 3 levels of indentation, you're screwed anyway, and should fix your program."
   That was Linus Torvalds in 1995. While it sounds a bit drastic,
   loops nested more than three levels need serious
   consideration. Most likely you can find a better way to write that
   code if you think hard enough.

** "Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it?"
   - Brian Kernighan. 
   
   What you thought was a clever trick is likely to cause a lot of
   pain in future. If it is too clever, two weeks down the line you
   will most probably have no clue how it works. Forget about other
   people reading your code being able to understand your code. If you
   think the trick is really necessary, document it!

** Write idiomatic code
   Like natural (human) languages programming languages also gather
   standard idioms. Some ways of programming turn out to be so useful
   that everybody starts using them. You will be more productive in a
   new programming language (and more readable to your fellow
   programmers) if you master these idioms. A nice collection of such
   idioms for Python is available here:
   [[http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html]]

* Document
** "You know you're brilliant, but maybe you'd like to understand what you did 2 weeks from now."
   - Linus Torvalds.

   While most software companies reuire their programmers to document
   their work, many beginning hackers and academic programmers think
   "I know what I am doing! I know this code inside out, there is no
   need for documentation." As Linus correctly pointed out, you, two
   weeks from writing a piece of code, are a different person from the
   one who wrote it. And if your code was too clever, most likely you
   will not be understand it later (here comes the quote by Brian
   Kernighan). So better document your code for your own good.

* Think
** Before you write anything, think!
   It is often better to make rough outlines using pen and paper
   before you start typing your code. Just like writing an essay or a
   novel, programs need a coherent flow of thought, and an outline
   helps with that.

** "The most effective debugging tool is still careful thought, coupled with judiciously placed print statements."
   Brian Kernighan wrote that in 1979 and it still applies no matter
   how proficient you are with gdb or some other debugger. Jumping
   into a debugger without re-reading your code is a sure sign that
   you are not using your brain properly. A debugger can help you
   narrow down the code you need to investigate, but usually a second
   reading of your code (better after a break) is the most efficient
   and educational way to find and fix a bug.

* Fast Python: Some points regarding performance for more advanced users (but good to practice these from the beginning)!
** These points are quoted from a post by Guido van Rossum on Google+ on 11 Sep 2012   
   - Avoid overengineering datastructures. Tuples are better than
     objects (try namedtuple too though). Prefer simple fields over
     getter/setter functions.

   - Built-in datatypes are your friends. Use more numbers, strings,
     tuples, lists, sets, dicts. Also check out the collections
     library, esp. deque.
   
   - Be suspicious of function/method calls; creating a stack frame is
     expensive.
   
   - Don't write Java (or C++, or Javascript, ...) in Python.
   
   - Are you sure it's too slow? Profile before optimizing!
   
   - The universal speed-up is rewriting small bits of code in C. Do
     this only when all else fails.

   - I'm -0 on using generator[ expression]s unless you know you have
     huge lists of values to iterate over. The concrete list
     [comprehension] is usually faster than the genexpr until memory
     allocation becomes critical.﻿

** Michael Foord added the following points to the same post by Guido
   Understand the performance characteristics of basic operations on
   the builtin types. For example 

   - Checking for membership in a list is O(N) but for a set or
     dictionary it is O(1).

   - Adding lists and tuples creates new objects.

   - Inserting to the left of a list is O(N) whilst append is O(1)
     (use a deque instead). And so on.﻿

** Richard Merren added to the same post by Guido
   - Use dicts to store and retrieve information--they are very fast.

   - Break your task up to simple and testable/verifiable functions so
     that you make less errors on each part.
   
   - Don't be afraid to give variables and functions long and
     descriptive names so you can reread your code and figure out what
     it does.

   - Do things the way they make sense to you and don't worry about
     optimizing your code until you find out which part is slow.
