#line 2 "GenesisParser.yy.cpp"

#line 4 "GenesisParser.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
// Deleted    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int myFlexLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[371] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       53,   51,   18,    7,    8,   51,   12,   51,   51,   51,
       51,   51,   45,   35,   51,   37,   44,   11,   44,   44,
       44,   44,   44,   44,   44,   49,   51,   50,   16,   17,
        3,    4,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   18,
       40,   12,   13,   12,   12,   14,   42,   43,    0,   48,
        1,    2,   47,   45,    0,   36,   39,   38,   44,   11,

       44,   44,   44,   44,   44,   44,   44,   24,   44,   44,
       44,   44,   41,   16,   17,   16,   16,   16,   16,   16,
        1,    2,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   15,   15,   15,   15,   15,   15,    1,    2,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       13,   12,   12,   12,   12,    0,    0,    2,   10,    2,
       47,    0,    0,   46,   44,   44,   44,   29,   44,   44,
       27,   44,   44,   32,   44,   34,   44,   16,   16,    2,

        6,    2,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   15,
       15,    2,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   13,
       13,   12,   12,    0,    0,   48,    0,    0,   47,   44,
       26,   25,   44,   44,   44,   44,   44,   44,   44,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,    0,    0,   47,   21,   44,   33,   44,   44,   44,

       44,   23,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,    0,   31,   44,   44,   44,   22,
       16,   16,   16,   16,   16,   16,   15,   15,   15,   15,
       15,   15,    0,   28,   44,   19,   16,   16,   16,   16,
       15,   15,   15,   15,    0,   30,   16,   16,   15,   15,
        0,   16,   15,    0,   16,   15,   20,   16,   15,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    1,    7,    1,    8,    1,    9,
        9,   10,   11,    9,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    1,   16,   17,
       18,   19,    1,    1,   20,   20,   21,   22,   23,   20,
       20,   20,   24,   20,   20,   20,   20,   25,   20,   26,
       20,   27,   28,   29,   20,   20,   20,   20,   20,   20,
        1,   30,    1,    1,   20,    1,   31,   32,   33,   34,

       35,   36,   20,   37,   38,   20,   39,   40,   20,   41,
       42,   20,   20,   43,   44,   45,   46,   20,   47,   48,
       20,   20,   49,   50,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[52] =
    {   0,
        1,    2,    3,    4,    1,    5,    2,    1,    6,    1,
        1,    1,    1,    1,    7,    8,    1,    1,    1,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    2,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    2,    1,
        2
    } ;

static yyconst flex_int16_t yy_base[386] =
    {   0,
        0,    0,   51,    0,  102,    0,    0,    0,    0,    0,
      812,  813,  809,  813,  813,  792,  151,  794,  800,  146,
      792,  147,  145,  788,  787,  786,    0,    0,  760,  122,
      125,  123,  767,  756,  763,  813,  749,  813,    0,  796,
      813,  813,  779,  788,  156,  780,  162,  160,  776,  775,
      774,  195,  245,  144,  148,  174,  139,  154,  179,  741,
        0,  772,  781,  179,  773,  209,  205,  769,  768,  767,
      295,  345,  184,  191,  200,  143,  199,  192,  734,  781,
      813,  235,  752,  751,  245,  765,  813,  813,  754,  237,
      813,  263,  246,  255,  262,  813,  813,  813,    0,    0,

      743,  238,  743,  731,  733,  731,  732,    0,  238,  727,
      728,  732,  813,    0,  767,    0,    0,    0,  743,  264,
        0,  394,  269,  302,  274,    0,    0,    0,  724,  158,
      278,  187,  248,  255,  723,  277,  722,  286,  281,  721,
      285,    0,    0,    0,    0,    0,  738,  312,    0,  444,
      317,  352,  327,    0,    0,    0,  719,  259,  305,  267,
      291,  326,  718,  329,  717,  333,  328,  716,  336,    0,
      377,  324,  381,  386,  388,  736,  391,  754,  813,  753,
      390,  397,  740,  739,  722,  716,  716,    0,  715,  718,
      713,  714,  706,    0,  699,    0,  704,  721,  408,  494,

      813,  739,  399,  415,  726,  725,  386,  308,  298,  696,
      393,  390,  396,  399,  395,  695,  394,  694,  401,  714,
      443,  544,  434,  448,  720,  719,  421,  350,  427,  690,
      430,  425,  432,  428,  436,  689,  434,  688,  438,  700,
      479,  699,  460,  700,  712,  711,  476,  710,  709,  684,
        0,    0,  679,  676,  689,  674,  672,  674,  681,  687,
      699,  698,  491,  697,  696,  465,  667,  666,  665,  441,
      468,  449,  469,  664,  470,  678,  685,  639,  505,  637,
      631,  475,  602,  596,  595,  476,  491,  480,  483,  594,
      492,  615,  620,  616,    0,  589,    0,  596,  590,  593,

      582,    0,  601,  606,  605,  573,  487,  572,  498,  339,
      499,  495,  571,  592,  591,  585,  551,  496,  549,  511,
      361,  506,  514,  548,  563,    0,  552,  546,  552,    0,
      559,  542,  515,  517,  521,  541,  556,  539,  524,  520,
      530,  538,  556,    0,  538,    0,  554,  534,  525,  533,
      551,  529,  528,  527,  506,    0,  481,  446,  446,  372,
      331,  251,  218,  216,  201,  188,  813,    0,    0,  813,
      595,  170,  603,  611,  618,  625,  633,  641,  649,  657,
      665,  673,  681,  689,  697
    } ;

static yyconst flex_int16_t yy_def[386] =
    {   0,
      370,    1,  370,    3,  370,    5,    1,    1,    1,    1,
      370,  370,  370,  370,  370,  370,  371,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  372,  373,  372,  372,
      372,  372,  372,  372,  372,  370,  370,  370,  374,  370,
      370,  370,  374,  374,  374,  374,  374,  374,  374,  374,
      374,  375,  375,   53,   53,   53,   53,   53,   53,  374,
      376,  376,  376,  376,  376,  376,  376,  376,  376,  376,
      377,  377,   72,   72,   72,   72,   72,   72,  376,  370,
      370,  371,  378,  379,  380,  370,  370,  370,  370,  370,
      370,  381,  370,  370,  370,  370,  370,  370,  372,  373,

      372,  372,  372,  372,  372,  372,  372,  372,  372,  372,
      372,  372,  370,  374,  370,  374,  374,  374,  374,  374,
      374,  382,  374,  374,  374,  374,  374,  374,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
       53,  374,  376,  376,  376,  376,  376,  376,  376,  383,
      376,  376,  376,  376,  376,  376,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,  376,
      384,  385,  371,  371,  380,  370,  370,  381,  370,  381,
      370,  370,  370,  370,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  372,  372,  372,  372,  374,  374,  382,

      370,  381,  374,  374,  374,  374,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,   53,   53,  376,
      376,  383,  376,  376,  376,  376,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,  378,
      384,  379,  385,  370,  370,  370,  370,  370,  370,  372,
      372,  372,  372,  372,  372,  372,  372,  372,  372,  374,
      374,  374,  374,  374,  374,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  376,  376,  376,  376,  376,
      376,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,  370,  370,  370,  372,  372,  372,  372,  372,  372,

      372,  372,  374,  374,  374,   53,   53,   53,   53,   53,
       53,   53,   53,  376,  376,  376,   72,   72,   72,   72,
       72,   72,   72,   72,  370,  372,  372,  372,  372,  372,
      374,   53,   53,   53,   53,   53,  376,   72,   72,   72,
       72,   72,  370,  372,  372,  372,  374,   53,   53,   53,
      376,   72,   72,   72,  370,  372,  374,   53,  376,   72,
      370,  374,  376,  370,  374,  376,  370,  374,  376,    0,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370
    } ;

static yyconst flex_int16_t yy_nxt[865] =
    {   0,
       12,   13,   14,   15,   16,   17,   18,   19,   12,   20,
       12,   12,   21,   22,   23,   12,   24,   25,   26,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   28,
       27,   29,   27,   27,   30,   31,   27,   32,   27,   27,
       27,   27,   33,   34,   27,   27,   35,   27,   36,   37,
       38,   39,   40,   41,   42,   43,   17,   18,   44,   39,
       45,   39,   39,   46,   47,   48,   12,   49,   50,   51,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       28,   52,   53,   52,   52,   54,   55,   52,   56,   52,
       52,   52,   52,   57,   58,   52,   52,   59,   52,   36,

       60,   38,   61,   40,   41,   42,   62,   17,   18,   63,
       12,   64,   61,   61,   65,   66,   67,   61,   68,   69,
       70,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   28,   71,   72,   71,   71,   73,   74,   71,   75,
       71,   71,   71,   71,   76,   77,   71,   71,   78,   71,
       36,   79,   38,   83,   84,   88,   91,   93,  108,   94,
       92,  102,  103,  109,  105,  118,  106,   95,   89,  104,
      107,  121,  123,  139,  124,  122,   99,  167,  119,   95,
       85,  129,  125,  131,  132,  157,  129,  134,  146,  135,
      129,  133,  207,  136,  125,  114,  129,  369,  140,  114,

      129,  147,  114,  114,  114,  114,  114,  114,  114,  137,
      368,  114,  114,  114,  138,  141,  129,  151,  149,  152,
      210,  129,  150,  159,  160,  367,  157,  153,  169,  129,
      162,  161,  163,  157,  157,  165,  164,   83,   84,  153,
      166,  157,  157,  168,  114,  114,  366,   83,  174,  114,
       82,   90,  114,  114,  114,  114,  114,  114,  114,  177,
      181,  114,  114,  114,   85,  179,  180,   93,  182,   94,
      193,  177,  183,  183,  175,  186,  184,   95,  120,  365,
      182,  187,  194,  203,  205,  205,  199,  130,  206,   95,
      129,  204,  211,  227,  114,  143,  212,  129,  199,  143,

      230,  157,  143,  204,  143,  143,  143,  143,  143,  157,
      143,  143,  143,  143,  123,  208,  124,  214,  215,  129,
      129,  209,  219,  129,  125,  217,  148,  129,  129,   84,
      216,  223,  268,  157,  221,  231,  125,  225,  225,  224,
      129,  226,  228,  267,  143,  143,  221,  157,  229,  143,
      129,  224,  143,  243,  143,  143,  143,  143,  143,  364,
      143,  143,  143,  143,  151,  235,  152,  232,  157,  234,
      157,  157,  237,  239,  153,  157,  334,  236,  157,   83,
       83,  129,   83,   83,   84,  283,  153,  158,   83,   84,
       83,  174,  157,   82,  143,  178,  201,  202,  340,  178,

      178,  245,  245,  157,  181,  246,  241,  248,  248,  178,
       85,  249,  247,  203,  157,   85,  266,  175,  261,  261,
      270,  263,  262,  178,  247,  264,  264,  269,  129,  265,
      271,  272,  129,  263,  273,  129,  129,  129,  129,  274,
      275,  129,  178,  129,  178,  178,  201,  202,  223,  178,
      178,  282,  178,  277,  277,  286,  279,  278,  280,  280,
      288,  284,  281,  157,  285,   84,  287,  157,  279,  157,
      157,  363,  157,  178,  157,  289,  157,  291,  157,  290,
      157,   83,   83,  129,   83,  308,  293,  293,  129,  243,
      294,  129,  178,  310,  178,  178,  370,  178,  309,  178,

      178,  304,  304,  306,  313,  305,  362,  129,  241,  178,
      129,  129,  129,  317,  311,  315,  315,  157,  157,  316,
      319,  320,  157,  178,  321,  157,  324,  332,  322,  129,
      333,  361,  335,  157,  157,  336,  338,  129,  157,  341,
      129,  129,  178,  339,  178,  178,  370,  178,  157,  178,
      178,  348,  178,  157,  342,  350,  157,  129,  349,  129,
      352,  353,  157,  129,  354,  358,  157,  129,  360,  157,
      157,  157,  157,  178,  359,  129,  129,  357,  356,  355,
      157,  157,  351,  129,  129,  347,  346,  345,  344,  343,
      157,  157,  178,  157,  178,   82,   82,   82,   82,  316,

       82,   82,   82,  100,  100,  316,  100,  100,  100,  100,
      100,  114,  337,  129,  129,  129,  114,  114,  129,  305,
      305,  331,  330,  129,  129,  143,  329,  328,  327,  326,
      294,  143,  143,  157,  294,  325,  323,  318,  157,  157,
      157,   83,   83,   83,  157,  281,   83,   83,   83,   84,
       84,  281,   84,  278,   84,   84,   84,  173,  173,  173,
      173,  173,  173,  173,  173,  178,  178,  178,  178,  178,
      178,  178,  178,  200,  200,  200,  200,  200,  200,  200,
      200,  222,  222,  222,  222,  222,  222,  222,  222,  240,
      240,  240,  240,  240,  240,  240,  240,  242,  242,  278,

      242,  242,  242,  242,  242,  314,  312,  307,  129,  129,
      265,  265,  262,  262,  303,  302,  301,  300,  299,  298,
      297,  296,  295,  249,  249,  246,  246,  292,  172,  171,
      157,  157,  157,  226,  226,  276,  129,  129,  129,  206,
      206,  370,  260,  259,  258,  257,  256,  255,  254,  253,
      252,  251,  250,  184,  184,  370,  370,  244,  238,  157,
      233,  157,  220,  218,  129,  213,  129,  198,  115,  197,
      196,  195,  192,  191,  190,  189,  188,  185,  176,   86,
      172,  171,   80,  170,  156,  155,  154,  148,  145,  144,
      142,  128,  127,  126,  120,  117,  116,  115,  113,  112,

      111,  110,  101,   98,   97,   96,   90,   87,   86,   81,
       80,  370,   11,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370
    } ;

static yyconst flex_int16_t yy_chk[865] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   17,   17,   20,   22,   23,   32,   23,
       22,   30,   30,   32,   31,   45,   31,   23,   20,   30,
       31,   47,   48,   57,   48,   47,  372,   76,   45,   23,
       17,   57,   48,   54,   54,   76,   54,   55,   64,   55,
       55,   54,  130,   55,   48,   52,   58,  366,   58,   52,

      130,   64,   52,   52,   52,   52,   52,   52,   52,   56,
      365,   52,   52,   52,   56,   59,   56,   67,   66,   67,
      132,   59,   66,   73,   73,  364,   73,   67,   78,  132,
       74,   73,   74,   74,   78,   75,   74,   82,   82,   67,
       75,   77,   75,   77,   52,   53,  363,   85,   85,   53,
       85,   90,   53,   53,   53,   53,   53,   53,   53,   90,
       93,   53,   53,   53,   82,   92,   92,   94,   93,   94,
      109,   90,   95,   95,   85,  102,   95,   94,  120,  362,
       93,  102,  109,  123,  125,  125,  120,   53,  125,   94,
      133,  123,  133,  158,   53,   71,  134,  134,  120,   71,

      160,  158,   71,  123,   71,   71,   71,   71,   71,  160,
       71,   71,   71,   71,  124,  131,  124,  136,  138,  136,
      131,  131,  141,  139,  124,  139,  148,  141,  138,  172,
      138,  151,  209,  161,  148,  161,  124,  153,  153,  151,
      209,  153,  159,  208,   71,   72,  148,  159,  159,   72,
      208,  151,   72,  172,   72,   72,   72,   72,   72,  361,
       72,   72,   72,   72,  152,  166,  152,  162,  162,  164,
      167,  164,  167,  169,  152,  166,  310,  166,  169,  171,
      171,  310,  171,  173,  173,  228,  152,   72,  174,  174,
      175,  175,  228,  175,   72,  122,  122,  122,  321,  122,

      122,  177,  177,  321,  181,  177,  171,  182,  182,  122,
      173,  182,  181,  203,  360,  174,  207,  175,  199,  199,
      212,  203,  199,  122,  181,  204,  204,  211,  207,  204,
      213,  214,  212,  203,  215,  211,  217,  215,  213,  217,
      219,  214,  122,  219,  122,  150,  150,  150,  223,  150,
      150,  227,  150,  221,  221,  232,  223,  221,  224,  224,
      234,  229,  224,  227,  231,  243,  233,  232,  223,  229,
      234,  359,  231,  150,  233,  235,  237,  239,  235,  237,
      239,  241,  241,  270,  241,  270,  247,  247,  358,  243,
      247,  272,  150,  272,  150,  200,  200,  200,  271,  200,

      200,  263,  263,  266,  275,  263,  357,  266,  241,  200,
      271,  273,  275,  282,  273,  279,  279,  282,  286,  279,
      286,  287,  288,  200,  288,  289,  291,  307,  289,  307,
      309,  355,  311,  287,  291,  312,  318,  312,  318,  322,
      309,  311,  200,  320,  200,  222,  222,  222,  322,  222,
      222,  333,  222,  320,  323,  335,  323,  333,  334,  334,
      339,  340,  340,  335,  341,  349,  339,  349,  353,  354,
      353,  352,  341,  222,  351,  350,  348,  347,  345,  343,
      342,  338,  337,  336,  332,  331,  329,  328,  327,  325,
      324,  319,  222,  317,  222,  371,  371,  371,  371,  316,

      371,  371,  371,  373,  373,  315,  373,  373,  373,  373,
      373,  374,  314,  313,  308,  306,  374,  374,  375,  305,
      304,  303,  301,  375,  375,  376,  300,  299,  298,  296,
      294,  376,  376,  377,  293,  292,  290,  285,  284,  377,
      377,  378,  378,  378,  283,  281,  378,  378,  378,  379,
      379,  280,  379,  278,  379,  379,  379,  380,  380,  380,
      380,  380,  380,  380,  380,  381,  381,  381,  381,  381,
      381,  381,  381,  382,  382,  382,  382,  382,  382,  382,
      382,  383,  383,  383,  383,  383,  383,  383,  383,  384,
      384,  384,  384,  384,  384,  384,  384,  385,  385,  277,

      385,  385,  385,  385,  385,  276,  274,  269,  268,  267,
      265,  264,  262,  261,  260,  259,  258,  257,  256,  255,
      254,  253,  250,  249,  248,  246,  245,  244,  242,  240,
      238,  236,  230,  226,  225,  220,  218,  216,  210,  206,
      205,  202,  198,  197,  195,  193,  192,  191,  190,  189,
      187,  186,  185,  184,  183,  180,  178,  176,  168,  165,
      163,  157,  147,  140,  137,  135,  129,  119,  115,  112,
      111,  110,  107,  106,  105,  104,  103,  101,   89,   86,
       84,   83,   80,   79,   70,   69,   68,   65,   63,   62,
       60,   51,   50,   49,   46,   44,   43,   40,   37,   35,

       34,   33,   29,   26,   25,   24,   21,   19,   18,   16,
       13,   11,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "GenesisParser.yy.l"
#line 11 "GenesisParser.yy.l"
// Word recognizer with a symbol table, C++ implementation
#include <fstream>
#include <setjmp.h>
#include "GenesisParser.h"
#include "GenesisParser.tab.h"


#    define lextoken(tok)   return(tok)
#    define lexchar(ch) return(ch)

/*
** C comment handling taken from ANSI C Lex specification published by
** Jeff Lee and Jutta Degener <jutta@pobox.com>.
*/

#line 35 "GenesisParser.yy.l"
/* I use this area to hold things that I might want back */

#ifdef COMMENT
<CPPCOMMENT>[^\n]*	Popyybgin();
"//"			Pushyybgin(CPPCOMMENT);

\\\n			continuation = 0;

<CCOMMENT>[^*\n]*	;
<CCOMMENT>"*"		;
<CCOMMENT>"\n"		;
<CCOMMENT>"*/"		Popyybgin();
"/*"/[^\n]*		Pushyybgin(CCOMMENT);
#endif
#line 761 "GenesisParser.yy.cpp"

#define INITIAL 0
#define LIT 1
#define FUNCLIT 2
#define CCOMMENT 3
#define CPPCOMMENT 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 51 "GenesisParser.yy.l"


#line 868 "GenesisParser.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 371 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 813 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 53 "GenesisParser.yy.l"
Ccomment();
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 55 "GenesisParser.yy.l"
;
	YY_BREAK
case 3:
/* rule 3 can match eol */
#line 58 "GenesisParser.yy.l"
case 4:
/* rule 4 can match eol */
#line 59 "GenesisParser.yy.l"
case 5:
/* rule 5 can match eol */
#line 60 "GenesisParser.yy.l"
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 60 "GenesisParser.yy.l"
{
			  if (!continuation)
			      lexchar('\n');
			  else
			    {
			      continuation = 0;
			      lexchar(WHITESPACE);
			    }
			}
	YY_BREAK
case 7:
/* rule 7 can match eol */
#line 71 "GenesisParser.yy.l"
case 8:
/* rule 8 can match eol */
#line 72 "GenesisParser.yy.l"
case 9:
/* rule 9 can match eol */
#line 73 "GenesisParser.yy.l"
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 73 "GenesisParser.yy.l"
{
			  if (!continuation)
			      lexchar('\n');
			  continuation = 0;
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 79 "GenesisParser.yy.l"
continuation = 1;
	YY_BREAK
case 12:
#line 82 "GenesisParser.yy.l"
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 82 "GenesisParser.yy.l"
{
			  char	ch;

			  ch = (char)yyinput();
			  if (ch == '\n' || ch == '\r')
			    {
			      yyerror
			      ("Missing closing quote in string constant");
			      // No Return 
			    }
			  if (yytext[yyleng-1] == '\\')
			    {
			      yytext[yyleng-1] = '"';
			      yyless(yyleng-1);
			      yymore();
			    }
			  else
			    {
			      /* Changes made by Raamesh Deshpande, NCBS
			       * Change made in lex rule \"[^\n"]*|\"[^\n"]* --> \"(\\.|[^\n"])*|\"(\\.|[^\r"])*
			       * This allows escape characters which are in form of text, for example, \n, \t, etc
			       * I have dealt only with \n, \", \t. Rest will remain as text. If you want to deal with an 
			       * escape character say \x then add another else if and it would be dealt.
			       */
			      char *str = (char *) strdup(yytext+1);
 			      int index = 0;
			      //char *str1 = new char[strlen(str)];
			      for (size_t i = 0; i < strlen(str); i++){
			        if (str[i] == '\\' && str[i+1] == '"') {
			          str[index] = '"';
			          index++;
			          i++;
			        }
			        else if (str[i] == '\\' && str[i+1] == 'n') {
			          str[index] = '\n';
			          index++;
			          i++;
			        }
			        else if (str[i] == '\\' && str[i+1] == 't') {
			          str[index] = '\t';
			          index++;
			          i++;
			        }
			        else {
			          str[index] = str[i];
			          index++;
			        }
			      }
			      str[index] = '\0';
			      //Change end
			      yylval.str = str;
			      lextoken(STRCONST);
			    }
		}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 138 "GenesisParser.yy.l"
{
			  sscanf(yytext+1, " %d ", &yylval.iconst);
			  lextoken(DOLLARARG);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 143 "GenesisParser.yy.l"
{ 
			  yylval.str = (char *) strdup(yytext);
			  lextoken(LITERAL);
			};
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 148 "GenesisParser.yy.l"
{ 
			  yylval.str = (char *) strdup(yytext);
			  lextoken(LITERAL);
			};
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 153 "GenesisParser.yy.l"
lextoken(WHITESPACE);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "GenesisParser.yy.l"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 156 "GenesisParser.yy.l"
lextoken(INCLUDE);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "GenesisParser.yy.l"
lextoken(ENDSCRIPT);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 160 "GenesisParser.yy.l"
lextoken(BREAK);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 162 "GenesisParser.yy.l"
lextoken(RETURN);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 164 "GenesisParser.yy.l"
lextoken(WHILE);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 166 "GenesisParser.yy.l"
lextoken(IF);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 168 "GenesisParser.yy.l"
lextoken(ELSE);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 170 "GenesisParser.yy.l"
lextoken(ELIF);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 172 "GenesisParser.yy.l"
lextoken(FOR);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 174 "GenesisParser.yy.l"
lextoken(FOREACH);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 176 "GenesisParser.yy.l"
lextoken(END);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 178 "GenesisParser.yy.l"
lextoken(FUNCTION);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 180 "GenesisParser.yy.l"
lextoken(EXTERN);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 182 "GenesisParser.yy.l"
lextoken(INT);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 184 "GenesisParser.yy.l"
lextoken(FLOAT);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 186 "GenesisParser.yy.l"
lextoken(STR);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 188 "GenesisParser.yy.l"
lextoken(LT);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 189 "GenesisParser.yy.l"
lextoken(LE);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 190 "GenesisParser.yy.l"
lextoken(GT);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 191 "GenesisParser.yy.l"
lextoken(GE);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 192 "GenesisParser.yy.l"
lextoken(EQ);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 193 "GenesisParser.yy.l"
lextoken(NE);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 195 "GenesisParser.yy.l"
lextoken(OR);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 196 "GenesisParser.yy.l"
lextoken(AND);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 198 "GenesisParser.yy.l"
lextoken(POW);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 200 "GenesisParser.yy.l"
{
			  Result	*rp;

			  if (!ReturnIdents &&
			      ((rp=SymtabLook(LocalSymbols, yytext)) != NULL ||
			       (rp=SymtabLook(&GlobalSymbols, yytext)) != NULL))
			    {
			      yylval.str = (char *) rp;
			      if (rp->r_type == FUNCTION)
				  { lextoken(FUNCREF); }
			      else
				  lextoken(VARREF);
			    }
			  else
			    {
			      yylval.str = (char *) strdup(yytext);
			      lextoken(IDENT);
			    }
			};
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 220 "GenesisParser.yy.l"
{
			  sscanf(yytext, " %d ", &yylval.iconst);
			  lextoken(INTCONST);
			}
	YY_BREAK
case 46:
#line 226 "GenesisParser.yy.l"
case 47:
#line 227 "GenesisParser.yy.l"
case 48:
YY_RULE_SETUP
#line 227 "GenesisParser.yy.l"
{
			  sscanf(yytext, " %lf ", &yylval.fconst);
			  lextoken(FLOATCONST);
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 232 "GenesisParser.yy.l"
{ Pushyybgin(0); lexchar('{'); };
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 233 "GenesisParser.yy.l"
{ Popyybgin(); lexchar('}'); };
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 235 "GenesisParser.yy.l"
lexchar(yytext[0]);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 236 "GenesisParser.yy.l"
ECHO;
	YY_BREAK
#line 1297 "GenesisParser.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(LIT):
case YY_STATE_EOF(FUNCLIT):
case YY_STATE_EOF(CCOMMENT):
case YY_STATE_EOF(CPPCOMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 371 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 371 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 370);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

// Deleted extern C int isatty

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

yyFlexLexer::~yyFlexLexer()
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

	delete [] (yy_state_buf);
	yyfree((yy_start_stack)  );

}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 236 "GenesisParser.yy.l"






/*
** Lexer routines to push and pop the lexer begin state
** They have to be here rather than GenesisParser.cpp because certain
** ugly #defines are
** made by flex and referred to in these functions.
*/

void myFlexLexer::Pushyybgin(int start)
{	/* Pushyybgin --- Push to another lexer begin state */

	if (yybginidx == BGINSTKSIZE)
	    yyerror("Pushyybgin: lexer begin state stack overflow");
	    /* No Return */

	yybginstk[yybginidx++] = YY_START;
	BEGIN start;

}	/* Pushyybgin */


void myFlexLexer::Popyybgin()
{	/* Popyybgin --- Pop to previous lexer begin state */

	if (yybginidx == 0)
	    yyerror("Popyybgin: lexer begin state stack underflow");
	    /* No Return */

	BEGIN yybginstk[--yybginidx];

}	/* Popyybgin */


int myFlexLexer::nextchar(int flush)
{
	if (flush)
	  {
	    yybginidx = 0;
	    BEGIN 0;
	    yyrestart(yyin); /* flushes flex input buffer */
	  }

	return 0;
}

