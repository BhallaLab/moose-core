Using the GLcell element:
---------------------

The GLcell element must be explicitly created and set up with
appropriate field values (some are optional) as described
below. GENESIS-style script examples are also provided:

> create GLcell gl0
> setclock 4 0.01
> useclock gl0 4

Required fields:
-------------

a. 'vizpath': this specifies the GENESIS-style path for the geometry to
be visualized; this will have been loaded previously with the
'readcell' script command:

> readcell test.p /axon
> setfield gl0 vizpath /axon

b. 'port': this specifies the network port (on localhost or on a
remote machine) over which this GLcell element will communicate with
the corresponding client instance (the process 'glclient'):

> setfield gl0 port 9999


Optional fields:
-------------

c. 'host': default value is 'localhost'. This specifies the hostname of
the machine on which the corresponding client instance is running.

> setfield gl0 host localhost

d. 'attribute': default value is 'Vm'. This is the field under
observation. Values for this field will be mapped to color ranges as
specified by a colormap file passed to the client instance.

>setfield gl0 attribute Vm

e. 'threshold': this is expressed as percentage of the difference
between highvalue and lowvalue; default is 1% of the range. Changes in
the 'attribute' field's value smaller than the value of 'threshold'
are not transmitted to the client instance. Values are compared
against the last value transmitted for the specific compartment, not
necessarily the value at the last clock pulse. The intent is to reduce
the bandwidth of transmission between the GLcell element and the
client instance; this substantially improves the performance of the
client instance.

> setfield gl0 threshold 5

So this, for instance, will set the threshold to 5% of the difference
between highvalue and lowvalue.

f. 'sync': default value is 'off'; possible values are 'on' and
'off'. If the time taken by the client instance to render one frame of
color information (over all compartments) exceeds the time taken by
the MOOSE simulation to simulate one time-step, the simulation may
overtake the 3D display and the 3D display will skip intermediate
frames in order to keep up with the state of the simulation.

This flag forces the two to operate in lockstep, which may be useful
for debugging or while recording movies for publication (so that no
frames are skipped) but will slow down the MOOSE simulation.

A longer explanation is provided in Appendix A of the file README.

> setfield gl0 sync on
OR
> setfield gl0 sync off

g. 'vscale': default value is 1.0. Cylindrical compartments when drawn
in a physiologically accurate ratio between their diameters and
lengths can be too thin to render well visually. They can be scaled up
in thickness, only in terms of visual appearance and not numerically,
by specificying this value as greater than 1.0.

> setfield gl0 vscale 4

h. 'bgcolor': default value is 000000000. This represents the
background color of the viewer window, encoded as a string in the
format RRRGGGBBB, where 000000000 is black (the default) and 255255255
is white.

> setfield gl0 bgcolor 100100100

i. 'highvalue': default value is 0.05 (to be interpreted as 0.05V,
when the attribute is Vm). This is the value represented by the color
specified on the last line of the colormap file. This represents the
highest value that the attribute is assumed to be able to attain. Any
values greater than this, should they occur, will be mapped to the
color which corresponds to this value.

> setfield gl0 highvalue 0.1

j. 'lowvalue': default value is -0.1 (to be interpreted as -0.1V,
when the attribute is Vm). This is the value represented by the color
specified on the first line of the colormap file. This represents the
lowest value that the attribute is assumed to be able to attain. Any
values lower than this, should they occur, will be mapped to the color
which corresponds to this value.

> setfield gl0 lowvalue -0.08


A version of DEMOS/gbar/myelin.g, modified to include GLcell, is
included in the directory DEMOS/gbar/ as cMyelin.g. See the file README
for general operating instructions to launch such a script, coupled with
an instance of 'glclient', as a complete example.

Particles and the 'particleData' message:
--------------------------------

The GLcell element can be used for the visualization of individual
molecules simulated by Smoldyn, where input is obtained from Smoldyn
via a MOOSE interface. Such molecules can be rendered as point
particles or as individual spheres (which is more expensive). Setting
'sync' to 'on' will be necessary when the number of molecules
displayed is large and frame-skipping must to be avoided, for
instance, when saving individual frames for a publication-ready
animation.

The GLcell element expects incoming messages of the type
'particleData', each of which will contain a vector of the struct
ParticleData (refer to ParticleData.h). Each ParticleData struct lists
particles of a specific kind, which will all be rendered with the
colour and diameter as specified in that struct. If diameter is equal
to zero, particles will be rendered as points; if greater than zero,
as spheres of that diameter. Colour is specified as RGB values over
[0,1]. Individual particles are represented by their co-ordinates.

Each particleData message lists particle positions after a particular
display timestep. Therefore the animation consists of one frame per
display timestep/particleData message. A test function is included in
GLview.cpp to simulate incoming particleData messages for a particular
testcase.

Smoldyn geometry and the 'smoldynShapeData' message:
---------------------------------------------

When GLcell is being used to display particles simulated in Smoldyn,
it is expected that supporting geometry data represented by Smoldyn
'surfaces' will also need to be imported into GLcell and displayed in
the graphical client.

This is supported in GLcell via incoming messages of the type
'smoldynShapeData'. Each message will contain a vector of the struct
SmoldynShapeData (refer to SmoldynShapeData.h). Each SmoldynShapeData
struct holds data for a particular surface, colour information and
optionally a name for the surface. Surfaces can be specified as one of
a few specific types, viz. cylinder, disk, hemisphere, sphere,
triangle and rectangle. Colour is specified as RGBA values over [0,1].

Multiple 'smoldynShapeData' messages can be received but the geometry
specified in a new message will replace all previous geometry in the
scene, whether specified via readcell or imported from a previous
'smoldynShapeData' message. A test function is included in GLview.cpp
to simulate this message for a particular testcase.
