Using the GLview element:
----------------------

The GLview element must be explicitly created and set up with
appropriate field values (some are optional) as described
below. GENESIS-style script examples are also provided:

> create GLview gl0
> setclock 4 0.01
> useclock gl0 4

The following information (indented) is adapted from the documentation
for 'xview' in GENESIS-2.3:

        This element displays values by linear interpolation. Every
	GLview has at least two child elements of class GLshape, named
	shape[0], shape[1], etc. These shapes determine the extreme
	points for the linear interpolation. Therefore if shape[0] has
	foreground color 0.0, and shape[1] has color 1.0, the range of
	colors displayed would be interpolated between 0.0 and
	1.0. Likewise, if shape[0] displays a tall thin rectangle, and
	shape[1] a short wide rectangle, the shapes displayed would be
	'morphed' between these two extremes (the current
	implementation of GLview supports cubes and spheres, so
	morphing refers to interpolation between cubes of different
	widths or spheres of different diameters). Of course, to get
	these effects one would have to set the color_val and
	morph_val to the appropriate values (see below for 'color_val'
	and 'morph_val').  In addition to the shapes themselves, three
	arrays are used to specify how the GLview element does
	interpolation. As already mentioned, the 'values' array
	specifies the actual values to be displayed (in GLview,
	'values' consists of five one-dimensional arrays, each
	specified by 'value1'..'value5').  'value_min' contains the
	values that correspond to the lower end of the interpolated
	range. Thus if the element at index 0 of the array represented
	by value1 was equal to value_min[0], the parameter displayed
	would correspond to shape[0]. Likewise, value_max contains the
	upper end of the interpolated range.

	One can have multiple GLshapes. In this case the interpolation
	first decides which pair of shapes to use. In this version,
	each pair of shapes handles an equal range between value_min
	and value_max.  Having selected the appropriate pair of
	shapes, the algorithm then proceeds as outlined above.

	By default, the GLview object creates two child shapes,
	shape[0] and shape[1]. The default shapes are cubes, shape[0]
	being a small one with color 0.0 and shape[1] a big one in
	color 1.0.  The child shapes can have parameters set in the
	usual ways, but are not displayed independently of the GLview
	element.

        The two child shapes are created when the GLview element
        receives its first RESET message, if they have not have been
        created by the user yet (manually). Therefore their fields
        (such as shapetype) can only be changed after at least one
        RESET has been sent to the GLview element in question.

	So, for instance:

        > create GLview gl0
        > reset
	This creates the two default child shapes.

        > setfield gl0/shape[0] shapetype 1
	This sets the shapetype of shape[0] to sphere, from the
	default of cube.

	Note that currently the shapetype of shape[0] is adopted as
	the shapetype of all 3D shapes that make up the visualization.

	GLshape elements have the following fields:

	'color': colors are specified from 0.0 to 1.0, and represent
	the full range of the colormap file referenced by the client.

	'xoffset', 'yoffset', 'zoffset': offsets in the x,y,z
	directions of the shape from its original location.

	'len': width if the shape is a cube, diameter if it is a sphere.

        'shapetype': 0 represents cubes (the default), and 1
        represents spheres. Please note that spheres consist of many
        more polygons than cubes and therefore displaying a large
        number of spheres can make the client slow and unresponsive.

Required fields:
-------------

a. 'vizpath': this specifies the GENESIS-style path for elements whose
attributes we wish to visualize directly or after appending the value
of the attribute 'relpath' to each such element. The attribute 'path'
is usually specified as a wildcard.

The 3D co-ordinates of the shapes that make up the visualization are
obtained from elements on 'path' by the following heuristics,
whichever applies first:

1. If the particular element on 'path' itself has x, y, z fields, or
2. if the parent of the element has x, y, z fields or its parents and
so on, unless such a parent is the root element,

unless the x, y, z values thus obtained overlap those of another
shape. If such a collision occurs, or no x, y, z values could be
obtained in any case, the shape is automatically placed on a planar
grid among other such unplaced shapes. The planar grid is itself
located just outside the bounding box of shapes that were successfully
placed.

> readcell test.p /axon
> setfield gl0 vizpath /axon/##[CLASS=Compartment]

b. 'port': this specifies the network port (on localhost or on a
remote machine) over which this GLcell element will communicate with
the corresponding client instance (the process 'glclient'):

> setfield gl0 port 9999

Optional fields:
-------------

d. 'relpath': default is blank. If this is assigned, it is appended to
the full path of each element found on 'path', and the element on the
resulting path is then checked for field values.

> setfield gl0 relpath soma

e. 'value1'..'value5': default values are blank. With respect to
elements found on 'path' (with 'relpath' appended to each element's
pathname, if non-blank), these attributes represent the names of
fields whose values will be used as attributes of 3D shapes in the
final visualization. Each such field ('value1'..'value5') thus
initializes an array of values in the GLview element, taken from the
named field per element on 'path'.

> setfield gl0 value1 Vm

The following five fields specify which array of values is used to
modify which attribute of the 3D shapes that appear in the
visualization. Each has the default value of '0', and since there is
no 'value0' or corresponding array, the final shapes are not modified
by default (they appear as grey cubes of size 0.5 in this case).

 f. 'color_val': this specifies the index of the array that modifies
 the color of the 3D shapes in the visualization as per the client's
 current colormap.

> setfield gl0 color_val 1

So, for instance, the above line will make each shape's color be
mapped to the field represented by 'value1' in elements on 'path'
(with 'relpath' appended to each element's pathname if present). It is
assumed that 'value1' has already been set and values extracted
successfully.

g. 'morph_val': this specifies the index of the array that modifies
the size of the 3D shapes (width or diameter, depending on type of
shape) in the visualization.

> setfield gl0 morph_val 1

h. 'xoffset_val'

i. 'yoffset_val'

j. 'zoffset_val'

These specify the indices of the arrays, respectively, that modify the
offset in the x, y, z directions of 3D shapes from their original
locations.

k. 'value1min'..'value5min' and 'value1max'..'value5max'

This sets minimum and maximum values for 'value1' and 'value5'
respectively. 

> setfield gl0 value1min -0.1
> setfield gl0 value1max 0.05

So, for instance, this sets value_min for 'value1' to -0.1 and
value_max for 'value1' to 0.05.

l. 'host': default value is 'localhost'. This specifies the hostname of
the machine on which the corresponding client instance is running.

> setfield gl0 host localhost

m. 'sync': default value is 'off'; possible values are 'on' and
'off'. If the time taken by the client instance to render one frame of
color information (over all compartments) exceeds the time taken by
the MOOSE simulation to simulate one time-step, the simulation may
overtake the 3D display and the 3D display will skip intermediate
frames in order to keep up with the state of the simulation.

This flag forces the two to operate in lockstep, which may be useful
for debugging or while recording movies for publication (so that no
frames are skipped) but will slow down the MOOSE simulation.

A longer explanation is provided in Appendix A of the file README.

> setfield gl0 sync on
OR
> setfield gl0 sync off

n. 'grid': default value is 'off'; possible values are 'on' and
'off'. When this is set to 'on', all shapes in the visualization will
be forced into a grid layout and will no longer inherit 3D
co-ordinates from corresponding parent elements.

> setfield gl0 grid on
OR
> setfield gl0 grid off

o. 'bgcolor': default value is 000000000. This represents the
background color of the viewer window, encoded as a string in the
format RRRGGGBBB, where 000000000 is black (the default) and 255255255
is white.

> setfield gl0 bgcolor 100100100



A version of DEMOS/gbar/myelin.g, modified to include GLview, is 
included in the directory DEMOS/gbar/ as vMyelin.g. See the file README
for general operating instructions to launch such a script, coupled with
an instance of 'glclient', as a complete example.
