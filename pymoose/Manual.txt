-*- text-mode fill-column: 78 -*-
/*******************************************************************
 * File:            GtoPy.txt
 * Description:      
 * Author:          Subhasis Ray
 * E-mail:          ray.subhasis@gmail.com
 * Created:         2007-05-07 17:46:02
 ********************************************************************/

This documents how to convert a .g file ( genesis commands) into
pymoose commands - which are just python classes and function calls.

----------------------------
tabchannel
----------------------------
tabchannel - it is HHChannel actually.
create tabchannel LCa3_mit_usb 
is equivalent to
LCa3_mit_usb = moose.HHChannel('LCa3_mit_usb')

setup_tabchan is equivalent to setupAlpha for the same HHChannel.
setup_tabchan LCa3_mit_usb X 7500.0 0.0 1.0 -0.013 -0.007 1650.0 0.0 1.0 -0.014 0.004
LCa3_mit_usb.setupAlpha('X', params)    

setup_tabchan_tau
setupTau()

tweak_tabchan channelname gatename

-----------------------------
 TABCREATE
-----------------------------

TABCREATE is used for two types - HHChaneel and Table.  This is
essentially a utility function in moose. In python, one can directly
create the required objects.

In moose shell - 
For Tables:
call /Vm TABCREATE {NDIVS} {XMIN} {XMAX} 

TABCREATE on HHChannel requires the assignment of something like
setfield /squid/Na/xGate/A xmin {XMIN} 
setfield /squid/Na/xGate/A xmax {XMAX} 
setfield /squid/Na/xGate/A xdivs {XDIVS}


Which is equivalent to:

squid_Na_xGate_A.xmin = XMIN
squid_Na_xGate_A.xmax = XMAX
squid_Na_xGate_A.xdivs = XDIVS


Where squid_Na_xGate_A corresponds to the element with path
/squid/Na/xGate/A.


Still, these two utility functions were provided to reduce the task:

HHChannel.createTable(gatename, xmin, xmax, xdivs)
and Table.createTable(xmin, xmax, xdivs)

----------------------------------------------
	setfield mychannel X_A->tab[N] valueN
----------------------------------------------
// WORK IN PROGRESS
----------------------------------------------
 Connecting a channel to CaConc
----------------------------------------------

The CaConc in a compartment is affected by the Ca currents. And this
in turn affects the Ca dependent channels in the compartment.  If you
have an HHChannel CaL for long lasting high threshold Ca2+ current and
CaT for the transient low threshold Ca2+ current and you want to
update the Ca2+ concentration in the compartment due to these
currents, create a CaConc object in the compartment and connect the
"IkSrc" source-field in the chnnels to the "current" destination field
in the CaConc object.

caConc = CaConc("caConc", compartment)
caL.connect("IkSrc", caConc, "current")
caT.connect("IkSrc", caConc, "current")

This will result in the individual currents being added to the
"activation" variable in the CaConc object. The "activation" is used
for calculating the Ca2+ concentration as in the foloowing formula:

    x = exp( -dt / tau );
    c = c * x + ( B * activation * tau )  * ( 1.0 - x );    
    Ca = Ca_Basal + c;

where dt is the timestep, tau is a time constant, B is constant and
Ca_Basal is the basal concentration of Ca2+.


For a [Ca2+] dependent channel we have to connect the CaConc object to
the channel as follows:

    caConc.connect("concSrc", kAHP, "concen")
			  
where kAHP is an HHChannel whose conductance is dependent on
[Ca2+]. The concentration is used for looking up an entry in the
tables in the "zGate" of the channel.
