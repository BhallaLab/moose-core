-*- text-mode fill-column: 78 -*-
/*******************************************************************
 * File:            GtoPy.txt
 * Description:      
 * Author:          Subhasis Ray
 * E-mail:          subhasis at ncbs dot res dot in
 * Created:         2007-05-07 17:46:02
 ********************************************************************/

This documents how to convert a .g file ( genesis commands) into
pymoose commands - which are just python classes and function calls.

----------------------------
tabchannel
----------------------------
tabchannel - it is HHChannel actually.
create tabchannel LCa3_mit_usb 
is equivalent to
LCa3_mit_usb = moose.HHChannel('LCa3_mit_usb')

setup_tabchan is equivalent to setupAlpha for the same HHChannel.
setup_tabchan LCa3_mit_usb X 7500.0 0.0 1.0 -0.013 -0.007 1650.0 0.0 1.0 -0.014 0.004
LCa3_mit_usb.setupAlpha('X', params)    

setup_tabchan_tau
setupTau()

tweak_tabchan channelname gatename

-----------------------------
 TABCREATE
-----------------------------

TABCREATE is used for two types - HHChaneel and Table.  This is
essentially a utility function in moose. In python, one can directly
create the required objects.

In moose shell - 
For Tables:
call /Vm TABCREATE {NDIVS} {XMIN} {XMAX} 

TABCREATE on HHChannel requires the assignment of something like
setfield /squid/Na/xGate/A xmin {XMIN} 
setfield /squid/Na/xGate/A xmax {XMAX} 
setfield /squid/Na/xGate/A xdivs {XDIVS}


Which is equivalent to:

squid_Na_xGate_A.xmin = XMIN
squid_Na_xGate_A.xmax = XMAX
squid_Na_xGate_A.xdivs = XDIVS


Where squid_Na_xGate_A corresponds to the element with path
/squid/Na/xGate/A.


Still, these two utility functions were provided to reduce the task:

HHChannel.createTable(gatename, xmin, xmax, xdivs)
and Table.createTable(xmin, xmax, xdivs)

----------------------------------------------
	setfield mychannel X_A->tab[N] valueN
----------------------------------------------
// WORK IN PROGRESS
----------------------------------------------
 Connecting a channel to CaConc
----------------------------------------------

The CaConc in a compartment is affected by the Ca currents. And this
in turn affects the Ca dependent channels in the compartment.  If you
have an HHChannel CaL for long lasting high threshold Ca2+ current and
CaT for the transient low threshold Ca2+ current and you want to
update the Ca2+ concentration in the compartment due to these
currents, create a CaConc object in the compartment and connect the
"IkSrc" source-field in the chnnels to the "current" destination field
in the CaConc object.

caConc = CaConc("caConc", compartment)
caL.connect("IkSrc", caConc, "current")
caT.connect("IkSrc", caConc, "current")

This will result in the individual currents being added to the
"activation" variable in the CaConc object. The "activation" is used
for calculating the Ca2+ concentration as in the foloowing formula:

    x = exp( -dt / tau );
    c = c * x + ( B * activation * tau )  * ( 1.0 - x );    
    Ca = Ca_Basal + c;

where dt is the timestep, tau is a time constant, B is constant and
Ca_Basal is the basal concentration of Ca2+.


For a [Ca2+] dependent channel we have to connect the CaConc object to
the channel as follows:

    caConc.connect("concSrc", kAHP, "concen")
			  
where kAHP is an HHChannel whose conductance is dependent on
[Ca2+]. The concentration is used for looking up an entry in the
tables in the "zGate" of the channel.

-----------------------------------------------------------------


PyMooseBase.pwe() 

returns the Id of the current working element. By default, MOOSE
initializes current working element to: root ("/"). The above command
will print some info about the swig proxy object for the Id, something
like:

<moosee.Id; proxy of <Swig Object of type 'Id *' at 0x8208ad8> >

To see something more meaningful, enter:
 
print PyMooseBase.pwe().path()


Now let us create a neutral object, which is often used as a container
for more interesting objects:

x = Neutral("test")

When you do not specify the full path for the object, it is created
under the current working element. The above command creates a Neutral
object called test under the root element.

Now let us change the present working element to "test":

PyMooseBase.ce("/test") 

Now:
print PyMooseBase.pwe().path()

results in: 
'/test'


Now let us create a compartment:

comp = Compartment("cmp")

Since "/test" is the present working element, "cmp" will be created as
a child of "/test".

print comp.path()
will give the output:
'/test/cmp'

We could specify the path to the desired parent as a second parameter
to the constructor. For example:

comp = Compartment("cmp", "/")

will create the compartment as a child of root element instead of the
current working element.

print comp.path()

should give the output:

'/cmp'


Now let us make this compartment our new working element.

PyMooseBase.ce(comp)

Now try:

for element in PyMooseBase.le():
   print element.path()

this will not give any output because there are no elements under our
newly created compartment. Now let us create soem objects inside it:

naChan = HHChan("Na")
kChan = HHChan("K", comp)
caChan = HHChan("Ca", "/test/cmp")
kAChan = HHChan("/test/cmp/KA")

Notice the various ways of creating objects in MOOSE. Each of them are
created as a child of the compartment object. The naChan was created
with just the name of the object, so it will be created under the
present working element, which is "/test/cmp". When constructing the
kChan we specified the comp object as a second parameter. This is the
parent of the kChan object. In caChan construction, we specify the
path to the parent object. And in kAChan, we specify the full path of
the channel to be created. The full (absolute) path always starts with
"/" like unix file system.



-------------------------------
createmap

planarconnect

planardelay

planarweight
-------------------------------

These are implemented as member functions of PyMooseContext class.
See planarconnect.py in examples directory to see how to use them.
The names have become camel case.

Assuming context is the PyMooseContext instance, the mapping of the
functions are shown below:

createmap sourceObject destinationContainer {nx} {ny} -delta {dx} {dy} -origin {xo} {yo}

will map to:

context.createMap(sourceObject, destinationContainer, nx, ny, dx, dy, xo, yo)


planarconnect source dest -probability {probabilityValue}

becomes:

context.planarConnect(sourcePathString, destPathString, probabilityValue)

NOTE: we do not yet have implementation of all the options in GENESIS.

planardelay source -fixed {delay}

becomes

context.planarDelay(sourcePath, delay)



