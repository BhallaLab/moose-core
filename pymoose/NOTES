-*- mode: org; fill-column: 78 -*-


* TODO Improve NumPy SUPPORT
  This is deferred until we have pressing need to do so.
  
** NumPy version 1.1.1 required.
   In older versions, the enums in numpy/ndarrayobject.h have a trailing comma
   which gives compilation error. This has been fixed in numpy 1.1.1

* DONE Fix PyMooseContext::readCell
   The format is just opposite GENESIS, should make GENESIS like to avoid ugly surprise.
   Files to be affected:
   PyMooseContext.h, PyMooseContext.cpp
   examples/axon/axon.py
   any python script using readCell
   
* DONE Changed path from member function to member variable
  Earlier I was forced to supply accessor path() for retrieving the MOOSE path
  for an object. Whenever I tried to emulate a member variable path using
  __get_path(), any access to object.path caused a segmentation fault, while
  another similar function name() did not cause any problem. Now I
  think I have figured out the reason. 

  name was not creating any problem because it is actually a member variable
  in the corresponding moose object, whereas path is actually a local variable
  in one of the inner moose functions. That is why this memory was getting
  deallocated before PyMOOSE had an opportunity to access it. Now I am
  assigning all string values to PyMooseContext::fieldValue_ and then
  returning it. This should solve the problem. <2008-11-21 01:33:27 (+0530)>

* DONE Improved introspection
  Now PyMOOSE objects have a member variable className which provides the
  Class Name of the underlying MOOSE element. The older function getType()
  will be deprecated because it worked at the python level and as you wrap an
  existing object in another class, the getType() functioned returned the name
  of the new class instead of the original MOOSE class, just like python.
  for example 
  c = moose.Compartment("/c")
  d = moose.HHChannel("/c")
  print c.getType(), d.getType()

  would have printed:
  >>> Compartment HHChannel

  although the actual moose object is still a Compartment.

  But now,
  print c.className, d.className

  will print:
  >>> Compartment Compartment
  <2008-11-21 01:40:49 (+0530)>

  There was a bug in it - every class had a static const member variable
  className for providing the class name to the base class constructor. This
  was shadowing the actual className of the underlying object. Converted the
  above mentioned constant to className_.
  <2008-11-26 Wed 23:58 (+0530)>

* DONE Changed classname InterpolationTable to Interpol
  Earlier I had been using the functions of builtins/Interpol.h directly in
  pymoose/Interpol.cpp and for this I was forced to rename the class
  InterpolationTable instead of the moose class name Interpol to avoid
  conflicts.
  This caused inconsistency in terms of checking the class name ( className
  field in pymoose objects ) which always returns the moose class name. I
  renamed pymoose::InterpolationTable to pymoose::Interpol. This class does
  not use the methods of builtins/Interpol anymore, instead uses lookupSet and
  lookupGet for settig and getting table entries. 
  
  <2008-12-05 Fri>

* CODING JUSTIFICATIONS
  The principle of least surprise requires PyMOOSE to stick closely to the
  GENESIS commands. But we also want PyMOOSE to be more intuitive to the
  new-comer than GENESIS was. When we deviate from the GENESIS conventions, or
  do some coding whose reason is not obvious, here we put the justifications.

** addmsg converted to connect
   Because connect is a meaningful english word whereas addmsg is a
   programmer's shortened word for "add message". The principle is to use
   something meaningful, and a full word instead of abbreviation whenever
   possible. This is a coding style guideline in many organizations.




** New help() function introduced for retrieving pymoose objects/classes
   The Python functions and fields do not match MOOSE exactly (sometimes names
   change, additional functions are introduced in PyMOOSE, etc. Swig autodoc
   option automatically inserts quite a bit of documentation (at least
   function parameter names and data types) which returned by python built-in
   help function. So I prefer to maintain both MOOSE built-in help and python
   help system as complementary documentation.

* INCONSISTENCIES
  There are places where MOOSE and/or PyMOOSE are inconsistent in coding
  conventions or naming conventions. We need to weed them out before going to
  production.

** Table::step_mode/stepmode in MOOSE, stepMode in PyMOOSE.
   We should decide on underscore vs camel-case and follow on way or the
   other.

** SigNeur::lambda has been renamed to lambda_ as lambda is a python keyword.
   
** Id::path is a function returning a string while for all PyMOOSE classes, path is a string variable.
   Tried to make Id::path appear to be a member variable, but could not find a
   way around of the name collission.

** readcell 
   MOOSE does not use the last object when parent is specified as '.' in a .p
   file.
* Threading
  We want to make sure that the tty does not get blocked when running moose
  simulation from python interpreter.

  This shows an example use of QThread for this purpose:
  http://orangepalantir.org/topicspace/index.php?idnum=33
  

  Python threads have serious problems, especially due to GIL:
  http://www.dabeaz.com/python/GIL.pdf


  I need to look in further detail to see if pthreads within a module is safe
  from the issues posed by GIL. If Qt (which, just like python, wraps the
  OS's native threads) can do it, we should also be able to do it. May need to
  to steal some code from the Qt sources.

  I am not sure if the issue presented by David Beazly is resolved in QThread.

  - QThread seems to slow down even more than Python thread. For each thread's
    run() method counting down from 1e7, it takes 19 s for two threads
    compared to 2 s for Python thread.
