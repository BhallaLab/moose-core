
	NOTES ON COMPILING PYTHON INTERFACE FOR MOOSE
-------------------------------------------------------------------

	Author : Subhasis Ray
	Version: 
		2007-05-01 	0.0 - Initial draft 
		2007-05-18	0.1 - Updated info on Python2.5
		2007-07-19	0.2 - Added examples
___________________________________________________________________

	This directory contains code for python interface for
moose. There are C++ wrappers for relevant moose classes. These
classes are visible to python through a swig wrapper. The file moose.i
contains the swig interface definition. All moose classes that can be
used through python extend one base class - PyMooseBase.

	Some of the moose functionalities are available through this
base class. And the classes named after the moose classes act as a
very thin wrapper over the latter.

	The module is named 'moose'. To compile it, you need to have
swig and python installed. The make program should be invoked in the
top level source directory as :

	make pymoose

	This creates moose.py, moose_wrap.cxx, _moose.so in the
pymoose directory. Note that if you ran make for moose earlier, you
need to run "make clean" first. This is because swig uses dynamic
linking/loading (.so) while the default moose binary uses static
linking.

	Using Python 2.5 produces this error in some cases:
... undefined symbol: Py_InitModule4
	To compile for other versions of python, you have to change 
the entry -I/usr/include/python2.5 to -I${YOUR_PYTHON_INCLUDE_DIR}

	After successful compilation and linking, you can try out the
python interface by cd-ing to the pymoose directory, which should
contain the moose.py and _moose.so now. See the squid.py file and
comment out the parts requiring third party libraries unless you have
them installed. Now run: python ./squid.py - you should get the out
file squid.plot (and a nice looking graph will pop up if you have the
third party library installed).

Examples:
	The directory examples contains a few python scripts
demonstrating the use of the python version. These are translations of
corresponding GENESIS scripts. To run these from any location, you
should have the directory containing moose.py and _moose.so (the same
directory where _this_ file is located ) in your PYTHONPATH
environment variable.

#-------- Classes that are generated but not included in PyMOOSE -------

CopyClass - Copy.cpp has a test Cinfo which causes auto generation of
CopyClass.h and CopyClass.cpp. These are not part of PyMoose or MOOSE.

GenesisParser - This class is not to be exposed to user

Sched0
Sched1
Sched2
script_out.cpp
script_out.h
sharedFinfoTestClass.cpp
sharedFinfoTestClass.h
Shell.cpp
Shell.h
