The plan for the GUI is:
    Left dock widget contains a toolbox with all MOOSE classes - divided into categories.

    Right dock widget is a property editor for the current object
    
    Central widget is a workspace - like that in electronics workbench

    Users can select objects from toolbox and add them to workspace.

    Do not create the MOOSE structure immediately - because the user
    may want to move things around; rather start creating a NeuroML
    document?

    Create the moose model once the user hits the reset/run button


    For each object, there should be an incoming and an outgoing node
    point. On this node point a user can select a message and join it
    to a complementery message.


    Use model/view architecture - MOOSE structure nicely falls into
    the TreeModel category. No problem with the model. 

    The view is tricky - need to allow nice graphics, allow drag and
    drop. Started with a QGroupBox but that is insufficient.

    Multilevel tree veiw is perhaps not so important. Inserting a
    PulseGen as a child of a compartment is not so intuitive. Nor is
    it supported by the standard languages.


2009-06-17 02:43:37 (+0530) 

The simple interface design we decided today is supposed to consist of
multiple tabs for different files loaded. But MDI has its own problem
and with arbitrary model definition as allowed in GENESIS scripts,
makes this approach impossible.

First: for each tab we have to know exactly what is going to be
plotted. We decided to use one standard location for all data tables -
the loader does not have any way of deciding which table will go to
which data plot.

For example, if I run squid.g and this puts data in /data/squidVm and
I run Traub.g and it puts data in /data/traubVm, there is no way to
recognize that squidVm should be plotted in squid_tab and traubVm
should be plotted in traub_tab.

Second: I can easily give the user a tree view of the whole MOOSE
hierarchy, but again there is no way to categorize objects depending
on which loaded model they belong to. If squid.g creates a compartment
/squid and Traub.g creates a compartment /traub, then there is no way
we can separate them out post loading. Actually, there may be
conflicts if two models have objects with same path (Siji encpuntered
this while trying to load multiple SBML files.

One possible solution could be to load each model under a new Neutral
element. But with the kind of absolute path prevalent in GENESIS
scripts, this approach will break down.

Third: This is a fundamental problem with MOOSE/GENESIS - the clocks
are global - so all the models share same clocks. If I call reset on
one tab, all models get reset. If I do a run, all models will go
through their simulation steps.


The attempt to create a separate Python process using subprocess.call
failed. The original window gets stuck. Will try to do via a shell
script.

2009-06-22 16:01:13 (+0530)
Added a run tab in moose ui. The ui file is moose_gui.ui. The generated python code is ui_mainwindow.py. The mainwin.py has MainWindow class extending 
nding and specializing the Ui_MainWindow class.


2009-06-25 02:06:22 (+0530) 

Added a very primitive utility class to check the file type
(filetypeutil.py:FileTypeChecker). moosehandler.MHandler is yet to be
updated to handle each type correctly. One thing is to get the correct
number of plots. Also, SBML is still a problem - as there may be zip
archives which this ascii based FileTypeChecker cannot
handle. Simplest way, is still to force the user to select one of the
file types in the combo box for load file dialog and use that
information to handle these situations.

2010-11-04 01:32:15 (+0530) 

Currently moosegui does not use any multithreading. This causes the
gui to freeze when the simulation is running. I just checked a test
code, and with locks and mutexes i could run the simulation without
freezing the GUI. But synchronization is a big headache as my original
plan to do all moose access via the MooseHandler class did not
materialize.

Also, Python support for multithreading/multicore computing was not
the best in version 2.4-2.5. In 2.6 multiprocessing module looks
promising. Also twisted/ampoule may be effective in distributed
computing.

The demo code with QThreads (developed after the example here:
http://old.nabble.com/pausing-and-resuming-QThread-tasks-td28259263.html)
:
#-------------8<--------------------->8-------------------
import sys
from PyQt4 import QtCore, QtGui

import moose

class MooseRunner(QtCore.QThread):
    def __init__(self, lock, parent=None):
        QtCore.QThread.__init__(self, parent)
        self.lock = lock
        self.stopped = False
        self.mutex = QtCore.QMutex()
        self.completed = False
        self.paused = False
        self.runTime = 0.0
        self.updateTime = 0.0
        moose.context.loadG('Kholodenko.g')
        
        
    def initialize(self):
        self.stopped = False
        self.completed = False
        self.paused = False        
        moose.context.reset()

    def isStopped(self):
        try:
            self.mutex.lock()
            return self.stopped
        finally:
            self.mutex.unlock()

    def pause(self, unpause=True):
        if unpause:
            print 'Resuming'
            try:
                self.mutex.lock()
                self.paused = False
            finally:
                self.mutex.unlock()
        else:
            print 'Pausing'
            try:
                self.mutex.lock()
                self.paused = True
            finally:
                self.mutex.unlock()

    def stop(self):
        print 'MooseRunner.stop'
        with QtCore.QMutexLocker(self.mutex):
            self.stopped = True
            
    def setRunTime(self, time):
        try:
            self.mutex.lock()
            self.runTime = time
        finally:
            self.mutex.unlock()

    def setUpdateTime(self, time):
        try:
            self.mutex.lock()
            self.updateTime = time
        finally:
            self.mutex.unlock()
        
    def run(self):
        print 'Starting run'
        if self.isStopped():
            return 
        while moose.context.getCurrentTime() < self.runTime:
            if self.isStopped():
                return
            while(self.paused):
                print 'Sleeping for 100 ms'
                QtCore.QThread.msleep(100)
            moose.context.step(self.updateTime)
            progressStr = 'Simulated %f s' % (moose.context.getCurrentTime())
            self.emit(QtCore.SIGNAL('updatePlots(PyQt_PyObject)'), progressStr)
        self.completed = True
        self.stop()
        self.emit(QtCore.SIGNAL('finished(bool'), self.completed)

class MooseGui(QtGui.QWidget):
        """
        Simple GUI for testing
        """
        
        def __init__(self, parent=None):
            QtGui.QWidget.__init__(self, parent)
            self.runtimeLabel = QtGui.QLabel(self.tr('Runtime'))
            self.runtimeEdit = QtGui.QLineEdit()
            self.updatetimeLabel = QtGui.QLabel(self.tr('Update interval'))
            self.updatetimeEdit = QtGui.QLineEdit()
            self.timesLayout = QtGui.QGridLayout()
            self.timesLayout.addWidget(self.runtimeLabel, 0, 0)
            self.timesLayout.addWidget(self.runtimeEdit, 0, 1)
            self.timesLayout.addWidget(self.updatetimeLabel, 1, 0)
            self.timesLayout.addWidget(self.updatetimeEdit, 1, 1)

            self.startButton = QtGui.QPushButton(self.tr('Start'))
            self.pauseButton = QtGui.QPushButton(self.tr('Pause'))
            self.pauseButton.setCheckable(True)
            self.stopButton  = QtGui.QPushButton(self.tr('Stop'))
            self.buttonsLayout = QtGui.QHBoxLayout()
            self.buttonsLayout.addWidget(self.startButton)
            self.buttonsLayout.addWidget(self.pauseButton)
            self.buttonsLayout.addWidget(self.stopButton)
            
            self.widgetLayout = QtGui.QVBoxLayout()
            self.widgetLayout.addLayout(self.timesLayout)
            self.widgetLayout.addLayout(self.buttonsLayout)
            self.setLayout(self.widgetLayout)
            
            # signals/slots
            #--------------------------------
            self.startButton.clicked.connect(self.startSimulation)
            self.connect(self.pauseButton, QtCore.SIGNAL('toggled(bool)'), self.pauseSimulation)
            self.stopButton.clicked.connect(self.stopSimulation)

            # init MooseRunner object
            #--------------------------------
            self.lock = QtCore.QReadWriteLock()
            self.runner = MooseRunner(self.lock, self)
            self.connect(self.runner, QtCore.SIGNAL('updatePlots(PyQt_PyObject)'), self.setProgress)
            self.connect(self.runner, QtCore.SIGNAL('finished(bool)'), self.finished)

        def setProgress(self, theString):
            print 'setProgress:', theString

        def finished(self, theBool):
            print 'finished:', theBool

        def startSimulation(self):
            self.runner.setRunTime(float(self.runtimeEdit.text()))
            self.runner.setUpdateTime(float(self.updatetimeEdit.text()))
            self.runner.start()

        def pauseSimulation(self, isPaused):
            if isPaused:
                self.pauseButton.setText('Resume')
                self.runner.pause(False)
            else:
                self.pauseButton.setText('Pause')
                self.runner.pause(True)

        def stopSimulation(self):
            if self.runner.isRunning():
                self.runner.stop()

            self.stopButton.setText('Restart/Kill')
            if not self.runner.isRunning():
                self.runner.initialize()
                self.startSimulation()


# Test main
#-------------------------------------------
if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    win = MooseGui()
    win.setWindowTitle('MooseGui - threading test')
    win.show()
    sys.exit(app.exec_())
#-------------8<--------------------->8-------------------
