# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.

import _moose
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class PySwigIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _moose.PySwigIterator_value(*args)
    def incr(*args): return _moose.PySwigIterator_incr(*args)
    def decr(*args): return _moose.PySwigIterator_decr(*args)
    def distance(*args): return _moose.PySwigIterator_distance(*args)
    def equal(*args): return _moose.PySwigIterator_equal(*args)
    def copy(*args): return _moose.PySwigIterator_copy(*args)
    def next(*args): return _moose.PySwigIterator_next(*args)
    def previous(*args): return _moose.PySwigIterator_previous(*args)
    def advance(*args): return _moose.PySwigIterator_advance(*args)
    def __eq__(*args): return _moose.PySwigIterator___eq__(*args)
    def __ne__(*args): return _moose.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _moose.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _moose.PySwigIterator___isub__(*args)
    def __add__(*args): return _moose.PySwigIterator___add__(*args)
    def __sub__(*args): return _moose.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _moose.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class uint_vector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args): return _moose.uint_vector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _moose.uint_vector___nonzero__(*args)
    def __len__(*args): return _moose.uint_vector___len__(*args)
    def pop(*args): return _moose.uint_vector_pop(*args)
    def __getslice__(*args): return _moose.uint_vector___getslice__(*args)
    def __setslice__(*args): return _moose.uint_vector___setslice__(*args)
    def __delslice__(*args): return _moose.uint_vector___delslice__(*args)
    def __delitem__(*args): return _moose.uint_vector___delitem__(*args)
    def __getitem__(*args): return _moose.uint_vector___getitem__(*args)
    def __setitem__(*args): return _moose.uint_vector___setitem__(*args)
    def append(*args): return _moose.uint_vector_append(*args)
    def empty(*args): return _moose.uint_vector_empty(*args)
    def size(*args): return _moose.uint_vector_size(*args)
    def clear(*args): return _moose.uint_vector_clear(*args)
    def swap(*args): return _moose.uint_vector_swap(*args)
    def get_allocator(*args): return _moose.uint_vector_get_allocator(*args)
    def begin(*args): return _moose.uint_vector_begin(*args)
    def end(*args): return _moose.uint_vector_end(*args)
    def rbegin(*args): return _moose.uint_vector_rbegin(*args)
    def rend(*args): return _moose.uint_vector_rend(*args)
    def pop_back(*args): return _moose.uint_vector_pop_back(*args)
    def erase(*args): return _moose.uint_vector_erase(*args)
    def __init__(self, *args): 
        this = _moose.new_uint_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _moose.uint_vector_push_back(*args)
    def front(*args): return _moose.uint_vector_front(*args)
    def back(*args): return _moose.uint_vector_back(*args)
    def assign(*args): return _moose.uint_vector_assign(*args)
    def resize(*args): return _moose.uint_vector_resize(*args)
    def insert(*args): return _moose.uint_vector_insert(*args)
    def reserve(*args): return _moose.uint_vector_reserve(*args)
    def capacity(*args): return _moose.uint_vector_capacity(*args)
    __swig_destroy__ = _moose.delete_uint_vector
    __del__ = lambda self : None;
uint_vector_swigregister = _moose.uint_vector_swigregister
uint_vector_swigregister(uint_vector)

class int_vector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args): return _moose.int_vector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _moose.int_vector___nonzero__(*args)
    def __len__(*args): return _moose.int_vector___len__(*args)
    def pop(*args): return _moose.int_vector_pop(*args)
    def __getslice__(*args): return _moose.int_vector___getslice__(*args)
    def __setslice__(*args): return _moose.int_vector___setslice__(*args)
    def __delslice__(*args): return _moose.int_vector___delslice__(*args)
    def __delitem__(*args): return _moose.int_vector___delitem__(*args)
    def __getitem__(*args): return _moose.int_vector___getitem__(*args)
    def __setitem__(*args): return _moose.int_vector___setitem__(*args)
    def append(*args): return _moose.int_vector_append(*args)
    def empty(*args): return _moose.int_vector_empty(*args)
    def size(*args): return _moose.int_vector_size(*args)
    def clear(*args): return _moose.int_vector_clear(*args)
    def swap(*args): return _moose.int_vector_swap(*args)
    def get_allocator(*args): return _moose.int_vector_get_allocator(*args)
    def begin(*args): return _moose.int_vector_begin(*args)
    def end(*args): return _moose.int_vector_end(*args)
    def rbegin(*args): return _moose.int_vector_rbegin(*args)
    def rend(*args): return _moose.int_vector_rend(*args)
    def pop_back(*args): return _moose.int_vector_pop_back(*args)
    def erase(*args): return _moose.int_vector_erase(*args)
    def __init__(self, *args): 
        this = _moose.new_int_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _moose.int_vector_push_back(*args)
    def front(*args): return _moose.int_vector_front(*args)
    def back(*args): return _moose.int_vector_back(*args)
    def assign(*args): return _moose.int_vector_assign(*args)
    def resize(*args): return _moose.int_vector_resize(*args)
    def insert(*args): return _moose.int_vector_insert(*args)
    def reserve(*args): return _moose.int_vector_reserve(*args)
    def capacity(*args): return _moose.int_vector_capacity(*args)
    __swig_destroy__ = _moose.delete_int_vector
    __del__ = lambda self : None;
int_vector_swigregister = _moose.int_vector_swigregister
int_vector_swigregister(int_vector)

class double_vector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args): return _moose.double_vector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _moose.double_vector___nonzero__(*args)
    def __len__(*args): return _moose.double_vector___len__(*args)
    def pop(*args): return _moose.double_vector_pop(*args)
    def __getslice__(*args): return _moose.double_vector___getslice__(*args)
    def __setslice__(*args): return _moose.double_vector___setslice__(*args)
    def __delslice__(*args): return _moose.double_vector___delslice__(*args)
    def __delitem__(*args): return _moose.double_vector___delitem__(*args)
    def __getitem__(*args): return _moose.double_vector___getitem__(*args)
    def __setitem__(*args): return _moose.double_vector___setitem__(*args)
    def append(*args): return _moose.double_vector_append(*args)
    def empty(*args): return _moose.double_vector_empty(*args)
    def size(*args): return _moose.double_vector_size(*args)
    def clear(*args): return _moose.double_vector_clear(*args)
    def swap(*args): return _moose.double_vector_swap(*args)
    def get_allocator(*args): return _moose.double_vector_get_allocator(*args)
    def begin(*args): return _moose.double_vector_begin(*args)
    def end(*args): return _moose.double_vector_end(*args)
    def rbegin(*args): return _moose.double_vector_rbegin(*args)
    def rend(*args): return _moose.double_vector_rend(*args)
    def pop_back(*args): return _moose.double_vector_pop_back(*args)
    def erase(*args): return _moose.double_vector_erase(*args)
    def __init__(self, *args): 
        this = _moose.new_double_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _moose.double_vector_push_back(*args)
    def front(*args): return _moose.double_vector_front(*args)
    def back(*args): return _moose.double_vector_back(*args)
    def assign(*args): return _moose.double_vector_assign(*args)
    def resize(*args): return _moose.double_vector_resize(*args)
    def insert(*args): return _moose.double_vector_insert(*args)
    def reserve(*args): return _moose.double_vector_reserve(*args)
    def capacity(*args): return _moose.double_vector_capacity(*args)
    __swig_destroy__ = _moose.delete_double_vector
    __del__ = lambda self : None;
double_vector_swigregister = _moose.double_vector_swigregister
double_vector_swigregister(double_vector)

class string_vector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args): return _moose.string_vector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _moose.string_vector___nonzero__(*args)
    def __len__(*args): return _moose.string_vector___len__(*args)
    def pop(*args): return _moose.string_vector_pop(*args)
    def __getslice__(*args): return _moose.string_vector___getslice__(*args)
    def __setslice__(*args): return _moose.string_vector___setslice__(*args)
    def __delslice__(*args): return _moose.string_vector___delslice__(*args)
    def __delitem__(*args): return _moose.string_vector___delitem__(*args)
    def __getitem__(*args): return _moose.string_vector___getitem__(*args)
    def __setitem__(*args): return _moose.string_vector___setitem__(*args)
    def append(*args): return _moose.string_vector_append(*args)
    def empty(*args): return _moose.string_vector_empty(*args)
    def size(*args): return _moose.string_vector_size(*args)
    def clear(*args): return _moose.string_vector_clear(*args)
    def swap(*args): return _moose.string_vector_swap(*args)
    def get_allocator(*args): return _moose.string_vector_get_allocator(*args)
    def begin(*args): return _moose.string_vector_begin(*args)
    def end(*args): return _moose.string_vector_end(*args)
    def rbegin(*args): return _moose.string_vector_rbegin(*args)
    def rend(*args): return _moose.string_vector_rend(*args)
    def pop_back(*args): return _moose.string_vector_pop_back(*args)
    def erase(*args): return _moose.string_vector_erase(*args)
    def __init__(self, *args): 
        this = _moose.new_string_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _moose.string_vector_push_back(*args)
    def front(*args): return _moose.string_vector_front(*args)
    def back(*args): return _moose.string_vector_back(*args)
    def assign(*args): return _moose.string_vector_assign(*args)
    def resize(*args): return _moose.string_vector_resize(*args)
    def insert(*args): return _moose.string_vector_insert(*args)
    def reserve(*args): return _moose.string_vector_reserve(*args)
    def capacity(*args): return _moose.string_vector_capacity(*args)
    __swig_destroy__ = _moose.delete_string_vector
    __del__ = lambda self : None;
string_vector_swigregister = _moose.string_vector_swigregister
string_vector_swigregister(string_vector)

class Id_vector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(*args): return _moose.Id_vector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _moose.Id_vector___nonzero__(*args)
    def __len__(*args): return _moose.Id_vector___len__(*args)
    def pop(*args): return _moose.Id_vector_pop(*args)
    def __getslice__(*args): return _moose.Id_vector___getslice__(*args)
    def __setslice__(*args): return _moose.Id_vector___setslice__(*args)
    def __delslice__(*args): return _moose.Id_vector___delslice__(*args)
    def __delitem__(*args): return _moose.Id_vector___delitem__(*args)
    def __getitem__(*args): return _moose.Id_vector___getitem__(*args)
    def __setitem__(*args): return _moose.Id_vector___setitem__(*args)
    def append(*args): return _moose.Id_vector_append(*args)
    def empty(*args): return _moose.Id_vector_empty(*args)
    def size(*args): return _moose.Id_vector_size(*args)
    def clear(*args): return _moose.Id_vector_clear(*args)
    def swap(*args): return _moose.Id_vector_swap(*args)
    def get_allocator(*args): return _moose.Id_vector_get_allocator(*args)
    def begin(*args): return _moose.Id_vector_begin(*args)
    def end(*args): return _moose.Id_vector_end(*args)
    def rbegin(*args): return _moose.Id_vector_rbegin(*args)
    def rend(*args): return _moose.Id_vector_rend(*args)
    def pop_back(*args): return _moose.Id_vector_pop_back(*args)
    def erase(*args): return _moose.Id_vector_erase(*args)
    def __init__(self, *args): 
        this = _moose.new_Id_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _moose.Id_vector_push_back(*args)
    def front(*args): return _moose.Id_vector_front(*args)
    def back(*args): return _moose.Id_vector_back(*args)
    def assign(*args): return _moose.Id_vector_assign(*args)
    def resize(*args): return _moose.Id_vector_resize(*args)
    def insert(*args): return _moose.Id_vector_insert(*args)
    def reserve(*args): return _moose.Id_vector_reserve(*args)
    def capacity(*args): return _moose.Id_vector_capacity(*args)
    __swig_destroy__ = _moose.delete_Id_vector
    __del__ = lambda self : None;
Id_vector_swigregister = _moose.Id_vector_swigregister
Id_vector_swigregister(Id_vector)

getParBuf = _moose.getParBuf
getAsyncParBuf = _moose.getAsyncParBuf
initNeutralCinfo = _moose.initNeutralCinfo
separateString = _moose.separateString
parseString = _moose.parseString
class Id(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_Id
    __del__ = lambda self : None;
    localId = staticmethod(_moose.Id_localId)
    childId = staticmethod(_moose.Id_childId)
    scratchId = staticmethod(_moose.Id_scratchId)
    makeIdOnNode = staticmethod(_moose.Id_makeIdOnNode)
    shellId = staticmethod(_moose.Id_shellId)
    postId = staticmethod(_moose.Id_postId)
    def assignIndex(*args): return _moose.Id_assignIndex(*args)
    nextScratchId = staticmethod(_moose.Id_nextScratchId)
    redefineScratchIds = staticmethod(_moose.Id_redefineScratchIds)
    regularizeScratch = staticmethod(_moose.Id_regularizeScratch)
    allotMainIdBlock = staticmethod(_moose.Id_allotMainIdBlock)
    def path(*args): return _moose.Id_path(*args)
    def id(*args): return _moose.Id_id(*args)
    def index(*args): return _moose.Id_index(*args)
    def node(*args): return _moose.Id_node(*args)
    def isGlobal(*args): return _moose.Id_isGlobal(*args)
    def setGlobal(*args): return _moose.Id_setGlobal(*args)
    def setNode(*args): return _moose.Id_setNode(*args)
    lastId = staticmethod(_moose.Id_lastId)
    badId = staticmethod(_moose.Id_badId)
    str2Id = staticmethod(_moose.Id_str2Id)
    id2str = staticmethod(_moose.Id_id2str)
    def bad(*args): return _moose.Id_bad(*args)
    def good(*args): return _moose.Id_good(*args)
    def zero(*args): return _moose.Id_zero(*args)
    def outOfRange(*args): return _moose.Id_outOfRange(*args)
    def isScratch(*args): return _moose.Id_isScratch(*args)
    def isProxy(*args): return _moose.Id_isProxy(*args)
    def __eq__(*args): return _moose.Id___eq__(*args)
    def __ne__(*args): return _moose.Id___ne__(*args)
    def __lt__(*args): return _moose.Id___lt__(*args)
    def setElement(*args): return _moose.Id_setElement(*args)
    def __init__(self, *args): 
        this = _moose.new_Id(*args)
        try: self.this.append(this)
        except: self.this = this
Id_swigregister = _moose.Id_swigregister
Id_swigregister(Id)
Id_localId = _moose.Id_localId
Id_childId = _moose.Id_childId
Id_scratchId = _moose.Id_scratchId
Id_makeIdOnNode = _moose.Id_makeIdOnNode
Id_shellId = _moose.Id_shellId
Id_postId = _moose.Id_postId
Id_nextScratchId = _moose.Id_nextScratchId
Id_redefineScratchIds = _moose.Id_redefineScratchIds
Id_regularizeScratch = _moose.Id_regularizeScratch
Id_allotMainIdBlock = _moose.Id_allotMainIdBlock
Id_lastId = _moose.Id_lastId
Id_badId = _moose.Id_badId
Id_str2Id = _moose.Id_str2Id
Id_id2str = _moose.Id_id2str
cvar = _moose.cvar
Id.AnyIndex = _moose.cvar.Id_AnyIndex
Id.BadIndex = _moose.cvar.Id_BadIndex
Id.GlobalNode = _moose.cvar.Id_GlobalNode

class Nid(Id):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Nid(*args)
        try: self.this.append(this)
        except: self.this = this
    def node(*args): return _moose.Nid_node(*args)
    def setNode(*args): return _moose.Nid_setNode(*args)
    __swig_destroy__ = _moose.delete_Nid
    __del__ = lambda self : None;
Nid_swigregister = _moose.Nid_swigregister
Nid_swigregister(Nid)

class PyMooseContext(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_PyMooseContext(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PyMooseContext
    __del__ = lambda self : None;
    def getCwe(*args): return _moose.PyMooseContext_getCwe(*args)
    def setCwe(*args): return _moose.PyMooseContext_setCwe(*args)
    def getShell(*args): return _moose.PyMooseContext_getShell(*args)
    def id(*args): return _moose.PyMooseContext_id(*args)
    def create(*args): return _moose.PyMooseContext_create(*args)
    def destroy(*args): return _moose.PyMooseContext_destroy(*args)
    def end(*args): return _moose.PyMooseContext_end(*args)
    recvCwe = staticmethod(_moose.PyMooseContext_recvCwe)
    recvElist = staticmethod(_moose.PyMooseContext_recvElist)
    recvCreate = staticmethod(_moose.PyMooseContext_recvCreate)
    recvField = staticmethod(_moose.PyMooseContext_recvField)
    recvWildcardList = staticmethod(_moose.PyMooseContext_recvWildcardList)
    recvClocks = staticmethod(_moose.PyMooseContext_recvClocks)
    recvMessageList = staticmethod(_moose.PyMooseContext_recvMessageList)
    createPyMooseContext = staticmethod(_moose.PyMooseContext_createPyMooseContext)
    destroyPyMooseContext = staticmethod(_moose.PyMooseContext_destroyPyMooseContext)
    def loadG(*args): return _moose.PyMooseContext_loadG(*args)
    def runG(*args): return _moose.PyMooseContext_runG(*args)
    def getField(*args): return _moose.PyMooseContext_getField(*args)
    def setField(*args): return _moose.PyMooseContext_setField(*args)
    def getMessageList(*args): return _moose.PyMooseContext_getMessageList(*args)
    def getParent(*args): return _moose.PyMooseContext_getParent(*args)
    def getPath(*args): return _moose.PyMooseContext_getPath(*args)
    def getChildren(*args): return _moose.PyMooseContext_getChildren(*args)
    def pathToId(*args): return _moose.PyMooseContext_pathToId(*args)
    srandom = staticmethod(_moose.PyMooseContext_srandom)
    def step(*args): return _moose.PyMooseContext_step(*args)
    def reset(*args): return _moose.PyMooseContext_reset(*args)
    def stop(*args): return _moose.PyMooseContext_stop(*args)
    def setClock(*args): return _moose.PyMooseContext_setClock(*args)
    def getClocks(*args): return _moose.PyMooseContext_getClocks(*args)
    def useClock(*args): return _moose.PyMooseContext_useClock(*args)
    def addTask(*args): return _moose.PyMooseContext_addTask(*args)
    def do_deep_copy(*args): return _moose.PyMooseContext_do_deep_copy(*args)
    def deepCopy(*args): return _moose.PyMooseContext_deepCopy(*args)
    def move(*args): return _moose.PyMooseContext_move(*args)
    def connect(*args): return _moose.PyMooseContext_connect(*args)
    def tabFill(*args): return _moose.PyMooseContext_tabFill(*args)
    def setupAlpha(*args): return _moose.PyMooseContext_setupAlpha(*args)
    def setupTau(*args): return _moose.PyMooseContext_setupTau(*args)
    def tweakAlpha(*args): return _moose.PyMooseContext_tweakAlpha(*args)
    def tweakTau(*args): return _moose.PyMooseContext_tweakTau(*args)
    def readCell(*args): return _moose.PyMooseContext_readCell(*args)
    def exists(*args): return _moose.PyMooseContext_exists(*args)
    def createMap(*args): return _moose.PyMooseContext_createMap(*args)
    def planarConnect(*args): return _moose.PyMooseContext_planarConnect(*args)
    def plannarDelay(*args): return _moose.PyMooseContext_plannarDelay(*args)
    def planarWeight(*args): return _moose.PyMooseContext_planarWeight(*args)
PyMooseContext_swigregister = _moose.PyMooseContext_swigregister
PyMooseContext_swigregister(PyMooseContext)
PyMooseContext_recvCwe = _moose.PyMooseContext_recvCwe
PyMooseContext_recvElist = _moose.PyMooseContext_recvElist
PyMooseContext_recvCreate = _moose.PyMooseContext_recvCreate
PyMooseContext_recvField = _moose.PyMooseContext_recvField
PyMooseContext_recvWildcardList = _moose.PyMooseContext_recvWildcardList
PyMooseContext_recvClocks = _moose.PyMooseContext_recvClocks
PyMooseContext_recvMessageList = _moose.PyMooseContext_recvMessageList
PyMooseContext_createPyMooseContext = _moose.PyMooseContext_createPyMooseContext
PyMooseContext_destroyPyMooseContext = _moose.PyMooseContext_destroyPyMooseContext
PyMooseContext_srandom = _moose.PyMooseContext_srandom
PyMooseContext.separator = _moose.cvar.PyMooseContext_separator

class PyMooseBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_PyMooseBase
    __del__ = lambda self : None;
    destroy = staticmethod(_moose.PyMooseBase_destroy)
    endSimulation = staticmethod(_moose.PyMooseBase_endSimulation)
    def getType(*args): return _moose.PyMooseBase_getType(*args)
    def getSeparator(*args): return _moose.PyMooseBase_getSeparator(*args)
    getContext = staticmethod(_moose.PyMooseBase_getContext)
    def children(*args): return _moose.PyMooseBase_children(*args)
    def __get_parent(*args): return _moose.PyMooseBase___get_parent(*args)
    def path(*args): return _moose.PyMooseBase_path(*args)
    def __get_id(*args): return _moose.PyMooseBase___get_id(*args)
    def __get_name(*args): return _moose.PyMooseBase___get_name(*args)
    def useClock(*args): return _moose.PyMooseBase_useClock(*args)
    def connect(*args): return _moose.PyMooseBase_connect(*args)
    def getMessageList(*args): return _moose.PyMooseBase_getMessageList(*args)
    def inMessages(*args): return _moose.PyMooseBase_inMessages(*args)
    def outMessages(*args): return _moose.PyMooseBase_outMessages(*args)
    exists = staticmethod(_moose.PyMooseBase_exists)
    le = staticmethod(_moose.PyMooseBase_le)
    pwe = staticmethod(_moose.PyMooseBase_pwe)
    ce = staticmethod(_moose.PyMooseBase_ce)
    pathToId = staticmethod(_moose.PyMooseBase_pathToId)
    idToPath = staticmethod(_moose.PyMooseBase_idToPath)
    getParent = staticmethod(_moose.PyMooseBase_getParent)
    getChildren = staticmethod(_moose.PyMooseBase_getChildren)
    initSimulation = staticmethod(_moose.PyMooseBase_initSimulation)
    id = _swig_property(_moose.PyMooseBase_id_get)
    parent = _swig_property(_moose.PyMooseBase_parent_get)
    name = _swig_property(_moose.PyMooseBase_name_get)
PyMooseBase_swigregister = _moose.PyMooseBase_swigregister
PyMooseBase_swigregister(PyMooseBase)
PyMooseBase_destroy = _moose.PyMooseBase_destroy
PyMooseBase_endSimulation = _moose.PyMooseBase_endSimulation
PyMooseBase_getContext = _moose.PyMooseBase_getContext
PyMooseBase_exists = _moose.PyMooseBase_exists
PyMooseBase_le = _moose.PyMooseBase_le
PyMooseBase_pwe = _moose.PyMooseBase_pwe
PyMooseBase_ce = _moose.PyMooseBase_ce
PyMooseBase_pathToId = _moose.PyMooseBase_pathToId
PyMooseBase_idToPath = _moose.PyMooseBase_idToPath
PyMooseBase_getParent = _moose.PyMooseBase_getParent
PyMooseBase_getChildren = _moose.PyMooseBase_getChildren
PyMooseBase_initSimulation = _moose.PyMooseBase_initSimulation

class Neutral(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Neutral(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Neutral
    __del__ = lambda self : None;
    def getType(*args): return _moose.Neutral_getType(*args)
    def __get_childSrc(*args): return _moose.Neutral___get_childSrc(*args)
    def __set_childSrc(*args): return _moose.Neutral___set_childSrc(*args)
    def __get_child(*args): return _moose.Neutral___get_child(*args)
    def __set_child(*args): return _moose.Neutral___set_child(*args)
    childSrc = _swig_property(_moose.Neutral_childSrc_get, _moose.Neutral_childSrc_set)
    child = _swig_property(_moose.Neutral_child_get, _moose.Neutral_child_set)
Neutral_swigregister = _moose.Neutral_swigregister
Neutral_swigregister(Neutral)
Neutral.className = _moose.cvar.Neutral_className

class Class(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Class(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Class
    __del__ = lambda self : None;
    def getType(*args): return _moose.Class_getType(*args)
    def __set_name(*args): return _moose.Class___set_name(*args)
    def __get_author(*args): return _moose.Class___get_author(*args)
    def __get_description(*args): return _moose.Class___get_description(*args)
    def __get_tick(*args): return _moose.Class___get_tick(*args)
    def __set_tick(*args): return _moose.Class___set_tick(*args)
    def __get_stage(*args): return _moose.Class___get_stage(*args)
    def __set_stage(*args): return _moose.Class___set_stage(*args)
    def __get_clock(*args): return _moose.Class___get_clock(*args)
    def setClock(*args): return _moose.Class_setClock(*args)
    name = _swig_property(_moose.Class_name_get)
    author = _swig_property(_moose.Class_author_get)
    description = _swig_property(_moose.Class_description_get)
    tick = _swig_property(_moose.Class_tick_get, _moose.Class_tick_set)
    stage = _swig_property(_moose.Class_stage_get, _moose.Class_stage_set)
Class_swigregister = _moose.Class_swigregister
Class_swigregister(Class)
Class.className = _moose.cvar.Class_className

class Cell(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Cell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Cell
    __del__ = lambda self : None;
    def getType(*args): return _moose.Cell_getType(*args)
    def __set_method(*args): return _moose.Cell___set_method(*args)
    def __get_method(*args): return _moose.Cell___get_method(*args)
    def __get_variableDt(*args): return _moose.Cell___get_variableDt(*args)
    def __get_implicit(*args): return _moose.Cell___get_implicit(*args)
    def __get_description(*args): return _moose.Cell___get_description(*args)
    method = _swig_property(_moose.Cell_method_get, _moose.Cell_method_set)
    variableDt = _swig_property(_moose.Cell_variableDt_get)
    implicit = _swig_property(_moose.Cell_implicit_get)
    description = _swig_property(_moose.Cell_description_get)
Cell_swigregister = _moose.Cell_swigregister
Cell_swigregister(Cell)
Cell.className = _moose.cvar.Cell_className

class ClockTick(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_ClockTick(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_ClockTick
    __del__ = lambda self : None;
    def getType(*args): return _moose.ClockTick_getType(*args)
    def __get_dt(*args): return _moose.ClockTick___get_dt(*args)
    def __set_dt(*args): return _moose.ClockTick___set_dt(*args)
    def __get_stage(*args): return _moose.ClockTick___get_stage(*args)
    def __set_stage(*args): return _moose.ClockTick___set_stage(*args)
    def __get_ordinal(*args): return _moose.ClockTick___get_ordinal(*args)
    def __set_ordinal(*args): return _moose.ClockTick___set_ordinal(*args)
    def __get_nextTime(*args): return _moose.ClockTick___get_nextTime(*args)
    def __set_nextTime(*args): return _moose.ClockTick___set_nextTime(*args)
    def __get_path(*args): return _moose.ClockTick___get_path(*args)
    def __set_path(*args): return _moose.ClockTick___set_path(*args)
    def __get_updateDtSrc(*args): return _moose.ClockTick___get_updateDtSrc(*args)
    def __set_updateDtSrc(*args): return _moose.ClockTick___set_updateDtSrc(*args)
    dt = _swig_property(_moose.ClockTick_dt_get, _moose.ClockTick_dt_set)
    stage = _swig_property(_moose.ClockTick_stage_get, _moose.ClockTick_stage_set)
    ordinal = _swig_property(_moose.ClockTick_ordinal_get, _moose.ClockTick_ordinal_set)
    nextTime = _swig_property(_moose.ClockTick_nextTime_get, _moose.ClockTick_nextTime_set)
    updateDtSrc = _swig_property(_moose.ClockTick_updateDtSrc_get, _moose.ClockTick_updateDtSrc_set)
ClockTick_swigregister = _moose.ClockTick_swigregister
ClockTick_swigregister(ClockTick)
ClockTick.className = _moose.cvar.ClockTick_className

class ClockJob(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_ClockJob(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_ClockJob
    __del__ = lambda self : None;
    def getType(*args): return _moose.ClockJob_getType(*args)
    def __get_runTime(*args): return _moose.ClockJob___get_runTime(*args)
    def __set_runTime(*args): return _moose.ClockJob___set_runTime(*args)
    def __get_currentTime(*args): return _moose.ClockJob___get_currentTime(*args)
    def __set_currentTime(*args): return _moose.ClockJob___set_currentTime(*args)
    def __get_nsteps(*args): return _moose.ClockJob___get_nsteps(*args)
    def __set_nsteps(*args): return _moose.ClockJob___set_nsteps(*args)
    def __get_currentStep(*args): return _moose.ClockJob___get_currentStep(*args)
    def __set_currentStep(*args): return _moose.ClockJob___set_currentStep(*args)
    def __get_start(*args): return _moose.ClockJob___get_start(*args)
    def __set_start(*args): return _moose.ClockJob___set_start(*args)
    def __get_step(*args): return _moose.ClockJob___get_step(*args)
    def __set_step(*args): return _moose.ClockJob___set_step(*args)
    def resched(*args): return _moose.ClockJob_resched(*args)
    def reinit(*args): return _moose.ClockJob_reinit(*args)
    def stop(*args): return _moose.ClockJob_stop(*args)
    getClocks = staticmethod(_moose.ClockJob_getClocks)
    runTime = _swig_property(_moose.ClockJob_runTime_get, _moose.ClockJob_runTime_set)
    currentTime = _swig_property(_moose.ClockJob_currentTime_get, _moose.ClockJob_currentTime_set)
    nsteps = _swig_property(_moose.ClockJob_nsteps_get, _moose.ClockJob_nsteps_set)
    currentStep = _swig_property(_moose.ClockJob_currentStep_get, _moose.ClockJob_currentStep_set)
    start = _swig_property(_moose.ClockJob_start_get, _moose.ClockJob_start_set)
    step = _swig_property(_moose.ClockJob_step_get, _moose.ClockJob_step_set)
ClockJob_swigregister = _moose.ClockJob_swigregister
ClockJob_swigregister(ClockJob)
ClockJob.className = _moose.cvar.ClockJob_className
ClockJob_getClocks = _moose.ClockJob_getClocks

class InterpolationTable(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_InterpolationTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_InterpolationTable
    __del__ = lambda self : None;
    def getType(*args): return _moose.InterpolationTable_getType(*args)
    def __get_xmin(*args): return _moose.InterpolationTable___get_xmin(*args)
    def __set_xmin(*args): return _moose.InterpolationTable___set_xmin(*args)
    def __get_xmax(*args): return _moose.InterpolationTable___get_xmax(*args)
    def __set_xmax(*args): return _moose.InterpolationTable___set_xmax(*args)
    def __get_xdivs(*args): return _moose.InterpolationTable___get_xdivs(*args)
    def __set_xdivs(*args): return _moose.InterpolationTable___set_xdivs(*args)
    def __get_mode(*args): return _moose.InterpolationTable___get_mode(*args)
    def __set_mode(*args): return _moose.InterpolationTable___set_mode(*args)
    def __get_dx(*args): return _moose.InterpolationTable___get_dx(*args)
    def __set_dx(*args): return _moose.InterpolationTable___set_dx(*args)
    def __get_sy(*args): return _moose.InterpolationTable___get_sy(*args)
    def __set_sy(*args): return _moose.InterpolationTable___set_sy(*args)
    def __getitem__(*args): return _moose.InterpolationTable___getitem__(*args)
    def __setitem__(*args): return _moose.InterpolationTable___setitem__(*args)
    def __iter__(*args): return _moose.InterpolationTable___iter__(*args)
    def __len__(*args): return _moose.InterpolationTable___len__(*args)
    def __get_calcMode(*args): return _moose.InterpolationTable___get_calcMode(*args)
    def __set_calcMode(*args): return _moose.InterpolationTable___set_calcMode(*args)
    def dumpFile(*args): return _moose.InterpolationTable_dumpFile(*args)
    def tabFill(*args): return _moose.InterpolationTable_tabFill(*args)
    xmin = _swig_property(_moose.InterpolationTable_xmin_get, _moose.InterpolationTable_xmin_set)
    xmax = _swig_property(_moose.InterpolationTable_xmax_get, _moose.InterpolationTable_xmax_set)
    xdivs = _swig_property(_moose.InterpolationTable_xdivs_get, _moose.InterpolationTable_xdivs_set)
    mode = _swig_property(_moose.InterpolationTable_mode_get, _moose.InterpolationTable_mode_set)
    dx = _swig_property(_moose.InterpolationTable_dx_get, _moose.InterpolationTable_dx_set)
    sy = _swig_property(_moose.InterpolationTable_sy_get, _moose.InterpolationTable_sy_set)
    calcMode = _swig_property(_moose.InterpolationTable_calcMode_get, _moose.InterpolationTable_calcMode_set)
InterpolationTable_swigregister = _moose.InterpolationTable_swigregister
InterpolationTable_swigregister(InterpolationTable)
InterpolationTable.className = _moose.cvar.InterpolationTable_className

class TableIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_TableIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iter__(*args): return _moose.TableIterator___iter__(*args)
    def __hasNext__(*args): return _moose.TableIterator___hasNext__(*args)
    def __next__(*args): return _moose.TableIterator___next__(*args)
    def _generator_(self):
    	if self.__hasNext__():
    		yield self.__next__()

    def next(self):
    	return self._generator_().next()
    	

    __swig_destroy__ = _moose.delete_TableIterator
    __del__ = lambda self : None;
TableIterator_swigregister = _moose.TableIterator_swigregister
TableIterator_swigregister(TableIterator)

class Table(InterpolationTable):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Table(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Table
    __del__ = lambda self : None;
    def getType(*args): return _moose.Table_getType(*args)
    def __get_input(*args): return _moose.Table___get_input(*args)
    def __set_input(*args): return _moose.Table___set_input(*args)
    def __get_output(*args): return _moose.Table___get_output(*args)
    def __set_output(*args): return _moose.Table___set_output(*args)
    def __get_stepMode(*args): return _moose.Table___get_stepMode(*args)
    def __set_stepMode(*args): return _moose.Table___set_stepMode(*args)
    def __get_stepSize(*args): return _moose.Table___get_stepSize(*args)
    def __set_stepSize(*args): return _moose.Table___set_stepSize(*args)
    def __get_threshold(*args): return _moose.Table___get_threshold(*args)
    def __set_threshold(*args): return _moose.Table___set_threshold(*args)
    def createTable(*args): return _moose.Table_createTable(*args)
    input = _swig_property(_moose.Table_input_get, _moose.Table_input_set)
    output = _swig_property(_moose.Table_output_get, _moose.Table_output_set)
    stepMode = _swig_property(_moose.Table_stepMode_get, _moose.Table_stepMode_set)
    stepSize = _swig_property(_moose.Table_stepSize_get, _moose.Table_stepSize_set)
    threshold = _swig_property(_moose.Table_threshold_get, _moose.Table_threshold_set)
Table_swigregister = _moose.Table_swigregister
Table_swigregister(Table)
Table.className = _moose.cvar.Table_className

class SynChan(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_SynChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SynChan
    __del__ = lambda self : None;
    def getType(*args): return _moose.SynChan_getType(*args)
    def __get_Gbar(*args): return _moose.SynChan___get_Gbar(*args)
    def __set_Gbar(*args): return _moose.SynChan___set_Gbar(*args)
    def __get_Ek(*args): return _moose.SynChan___get_Ek(*args)
    def __set_Ek(*args): return _moose.SynChan___set_Ek(*args)
    def __get_tau1(*args): return _moose.SynChan___get_tau1(*args)
    def __set_tau1(*args): return _moose.SynChan___set_tau1(*args)
    def __get_tau2(*args): return _moose.SynChan___get_tau2(*args)
    def __set_tau2(*args): return _moose.SynChan___set_tau2(*args)
    def __get_normalizeWeights(*args): return _moose.SynChan___get_normalizeWeights(*args)
    def __set_normalizeWeights(*args): return _moose.SynChan___set_normalizeWeights(*args)
    def __get_Gk(*args): return _moose.SynChan___get_Gk(*args)
    def __set_Gk(*args): return _moose.SynChan___set_Gk(*args)
    def __get_Ik(*args): return _moose.SynChan___get_Ik(*args)
    def __set_Ik(*args): return _moose.SynChan___set_Ik(*args)
    def __get_numSynapses(*args): return _moose.SynChan___get_numSynapses(*args)
    def __set_numSynapses(*args): return _moose.SynChan___set_numSynapses(*args)
    def __get_weight(*args): return _moose.SynChan___get_weight(*args)
    def __set_weight(*args): return _moose.SynChan___set_weight(*args)
    def __get_delay(*args): return _moose.SynChan___get_delay(*args)
    def __set_delay(*args): return _moose.SynChan___set_delay(*args)
    def __get_IkSrc(*args): return _moose.SynChan___get_IkSrc(*args)
    def __set_IkSrc(*args): return _moose.SynChan___set_IkSrc(*args)
    def __get_synapse(*args): return _moose.SynChan___get_synapse(*args)
    def __set_synapse(*args): return _moose.SynChan___set_synapse(*args)
    def __get_activation(*args): return _moose.SynChan___get_activation(*args)
    def __set_activation(*args): return _moose.SynChan___set_activation(*args)
    def __get_modulator(*args): return _moose.SynChan___get_modulator(*args)
    def __set_modulator(*args): return _moose.SynChan___set_modulator(*args)
    Gbar = _swig_property(_moose.SynChan_Gbar_get, _moose.SynChan_Gbar_set)
    Ek = _swig_property(_moose.SynChan_Ek_get, _moose.SynChan_Ek_set)
    tau1 = _swig_property(_moose.SynChan_tau1_get, _moose.SynChan_tau1_set)
    tau2 = _swig_property(_moose.SynChan_tau2_get, _moose.SynChan_tau2_set)
    normalizeWeights = _swig_property(_moose.SynChan_normalizeWeights_get, _moose.SynChan_normalizeWeights_set)
    Gk = _swig_property(_moose.SynChan_Gk_get, _moose.SynChan_Gk_set)
    Ik = _swig_property(_moose.SynChan_Ik_get, _moose.SynChan_Ik_set)
    numSynapses = _swig_property(_moose.SynChan_numSynapses_get)
    activation = _swig_property(_moose.SynChan_activation_get, _moose.SynChan_activation_set)
    modulator = _swig_property(_moose.SynChan_modulator_get, _moose.SynChan_modulator_set)
SynChan_swigregister = _moose.SynChan_swigregister
SynChan_swigregister(SynChan)
SynChan.className = _moose.cvar.SynChan_className

class BinSynchan(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_BinSynchan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_BinSynchan
    __del__ = lambda self : None;
    def getType(*args): return _moose.BinSynchan_getType(*args)
    def __get_Gbar(*args): return _moose.BinSynchan___get_Gbar(*args)
    def __set_Gbar(*args): return _moose.BinSynchan___set_Gbar(*args)
    def __get_Ek(*args): return _moose.BinSynchan___get_Ek(*args)
    def __set_Ek(*args): return _moose.BinSynchan___set_Ek(*args)
    def __get_tau1(*args): return _moose.BinSynchan___get_tau1(*args)
    def __set_tau1(*args): return _moose.BinSynchan___set_tau1(*args)
    def __get_tau2(*args): return _moose.BinSynchan___get_tau2(*args)
    def __set_tau2(*args): return _moose.BinSynchan___set_tau2(*args)
    def __get_normalizeWeights(*args): return _moose.BinSynchan___get_normalizeWeights(*args)
    def __set_normalizeWeights(*args): return _moose.BinSynchan___set_normalizeWeights(*args)
    def __get_Gk(*args): return _moose.BinSynchan___get_Gk(*args)
    def __set_Gk(*args): return _moose.BinSynchan___set_Gk(*args)
    def __get_Ik(*args): return _moose.BinSynchan___get_Ik(*args)
    def __set_Ik(*args): return _moose.BinSynchan___set_Ik(*args)
    def __get_numSynapses(*args): return _moose.BinSynchan___get_numSynapses(*args)
    def __set_numSynapses(*args): return _moose.BinSynchan___set_numSynapses(*args)
    def __get_weight(*args): return _moose.BinSynchan___get_weight(*args)
    def __set_weight(*args): return _moose.BinSynchan___set_weight(*args)
    def __get_delay(*args): return _moose.BinSynchan___get_delay(*args)
    def __set_delay(*args): return _moose.BinSynchan___set_delay(*args)
    def __get_poolSize(*args): return _moose.BinSynchan___get_poolSize(*args)
    def __set_poolSize(*args): return _moose.BinSynchan___set_poolSize(*args)
    def __get_releaseP(*args): return _moose.BinSynchan___get_releaseP(*args)
    def __set_releaseP(*args): return _moose.BinSynchan___set_releaseP(*args)
    def __get_releaseCount(*args): return _moose.BinSynchan___get_releaseCount(*args)
    def __set_releaseCount(*args): return _moose.BinSynchan___set_releaseCount(*args)
    def __get_synapse(*args): return _moose.BinSynchan___get_synapse(*args)
    def __set_synapse(*args): return _moose.BinSynchan___set_synapse(*args)
    def __get_activation(*args): return _moose.BinSynchan___get_activation(*args)
    def __set_activation(*args): return _moose.BinSynchan___set_activation(*args)
    def __get_modulator(*args): return _moose.BinSynchan___get_modulator(*args)
    def __set_modulator(*args): return _moose.BinSynchan___set_modulator(*args)
    weight = _swig_property(_moose.BinSynchan_weight_get, _moose.BinSynchan_weight_set)
    delay = _swig_property(_moose.BinSynchan_delay_get, _moose.BinSynchan_delay_set)
    releaseP = _swig_property(_moose.BinSynchan_releaseP_get, _moose.BinSynchan_releaseP_set)
    poolSize = _swig_property(_moose.BinSynchan_poolSize_get, _moose.BinSynchan_poolSize_set)
    releaseCount = _swig_property(_moose.BinSynchan_releaseCount_get, _moose.BinSynchan_releaseCount_set)
    Gbar = _swig_property(_moose.BinSynchan_Gbar_get, _moose.BinSynchan_Gbar_set)
    Ek = _swig_property(_moose.BinSynchan_Ek_get, _moose.BinSynchan_Ek_set)
    tau1 = _swig_property(_moose.BinSynchan_tau1_get, _moose.BinSynchan_tau1_set)
    tau2 = _swig_property(_moose.BinSynchan_tau2_get, _moose.BinSynchan_tau2_set)
    normalizeWeights = _swig_property(_moose.BinSynchan_normalizeWeights_get, _moose.BinSynchan_normalizeWeights_set)
    Gk = _swig_property(_moose.BinSynchan_Gk_get, _moose.BinSynchan_Gk_set)
    Ik = _swig_property(_moose.BinSynchan_Ik_get, _moose.BinSynchan_Ik_set)
    numSynapses = _swig_property(_moose.BinSynchan_numSynapses_get)
    activation = _swig_property(_moose.BinSynchan_activation_get, _moose.BinSynchan_activation_set)
    modulator = _swig_property(_moose.BinSynchan_modulator_get, _moose.BinSynchan_modulator_set)
BinSynchan_swigregister = _moose.BinSynchan_swigregister
BinSynchan_swigregister(BinSynchan)
BinSynchan.className = _moose.cvar.BinSynchan_className

class StochSynchan(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_StochSynchan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_StochSynchan
    __del__ = lambda self : None;
    def getType(*args): return _moose.StochSynchan_getType(*args)
    def __get_Gbar(*args): return _moose.StochSynchan___get_Gbar(*args)
    def __set_Gbar(*args): return _moose.StochSynchan___set_Gbar(*args)
    def __get_Ek(*args): return _moose.StochSynchan___get_Ek(*args)
    def __set_Ek(*args): return _moose.StochSynchan___set_Ek(*args)
    def __get_tau1(*args): return _moose.StochSynchan___get_tau1(*args)
    def __set_tau1(*args): return _moose.StochSynchan___set_tau1(*args)
    def __get_tau2(*args): return _moose.StochSynchan___get_tau2(*args)
    def __set_tau2(*args): return _moose.StochSynchan___set_tau2(*args)
    def __get_normalizeWeights(*args): return _moose.StochSynchan___get_normalizeWeights(*args)
    def __set_normalizeWeights(*args): return _moose.StochSynchan___set_normalizeWeights(*args)
    def __get_Gk(*args): return _moose.StochSynchan___get_Gk(*args)
    def __set_Gk(*args): return _moose.StochSynchan___set_Gk(*args)
    def __get_Ik(*args): return _moose.StochSynchan___get_Ik(*args)
    def __set_Ik(*args): return _moose.StochSynchan___set_Ik(*args)
    def __get_numSynapses(*args): return _moose.StochSynchan___get_numSynapses(*args)
    def __set_numSynapses(*args): return _moose.StochSynchan___set_numSynapses(*args)
    def __get_weight(*args): return _moose.StochSynchan___get_weight(*args)
    def __set_weight(*args): return _moose.StochSynchan___set_weight(*args)
    def __get_delay(*args): return _moose.StochSynchan___get_delay(*args)
    def __set_delay(*args): return _moose.StochSynchan___set_delay(*args)
    def __get_releaseP(*args): return _moose.StochSynchan___get_releaseP(*args)
    def __set_releaseP(*args): return _moose.StochSynchan___set_releaseP(*args)
    def __get_releaseCount(*args): return _moose.StochSynchan___get_releaseCount(*args)
    def __set_releaseCount(*args): return _moose.StochSynchan___set_releaseCount(*args)
    def __get_synapse(*args): return _moose.StochSynchan___get_synapse(*args)
    def __set_synapse(*args): return _moose.StochSynchan___set_synapse(*args)
    def __get_activation(*args): return _moose.StochSynchan___get_activation(*args)
    def __set_activation(*args): return _moose.StochSynchan___set_activation(*args)
    def __get_modulator(*args): return _moose.StochSynchan___get_modulator(*args)
    def __set_modulator(*args): return _moose.StochSynchan___set_modulator(*args)
    weight = _swig_property(_moose.StochSynchan_weight_get, _moose.StochSynchan_weight_set)
    delay = _swig_property(_moose.StochSynchan_delay_get, _moose.StochSynchan_delay_set)
    releaseP = _swig_property(_moose.StochSynchan_releaseP_get, _moose.StochSynchan_releaseP_set)
    releaseCount = _swig_property(_moose.StochSynchan_releaseCount_get, _moose.StochSynchan_releaseCount_set)
    Gbar = _swig_property(_moose.StochSynchan_Gbar_get, _moose.StochSynchan_Gbar_set)
    Ek = _swig_property(_moose.StochSynchan_Ek_get, _moose.StochSynchan_Ek_set)
    tau1 = _swig_property(_moose.StochSynchan_tau1_get, _moose.StochSynchan_tau1_set)
    tau2 = _swig_property(_moose.StochSynchan_tau2_get, _moose.StochSynchan_tau2_set)
    normalizeWeights = _swig_property(_moose.StochSynchan_normalizeWeights_get, _moose.StochSynchan_normalizeWeights_set)
    Gk = _swig_property(_moose.StochSynchan_Gk_get, _moose.StochSynchan_Gk_set)
    Ik = _swig_property(_moose.StochSynchan_Ik_get, _moose.StochSynchan_Ik_set)
    numSynapses = _swig_property(_moose.StochSynchan_numSynapses_get)
    activation = _swig_property(_moose.StochSynchan_activation_get, _moose.StochSynchan_activation_set)
    modulator = _swig_property(_moose.StochSynchan_modulator_get, _moose.StochSynchan_modulator_set)
StochSynchan_swigregister = _moose.StochSynchan_swigregister
StochSynchan_swigregister(StochSynchan)
StochSynchan.className = _moose.cvar.StochSynchan_className

class SpikeGen(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_SpikeGen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SpikeGen
    __del__ = lambda self : None;
    def getType(*args): return _moose.SpikeGen_getType(*args)
    def __get_threshold(*args): return _moose.SpikeGen___get_threshold(*args)
    def __set_threshold(*args): return _moose.SpikeGen___set_threshold(*args)
    def __get_refractT(*args): return _moose.SpikeGen___get_refractT(*args)
    def __set_refractT(*args): return _moose.SpikeGen___set_refractT(*args)
    def __get_absRefractT(*args): return _moose.SpikeGen___get_absRefractT(*args)
    def __set_absRefractT(*args): return _moose.SpikeGen___set_absRefractT(*args)
    def __get_amplitude(*args): return _moose.SpikeGen___get_amplitude(*args)
    def __set_amplitude(*args): return _moose.SpikeGen___set_amplitude(*args)
    def __get_state(*args): return _moose.SpikeGen___get_state(*args)
    def __set_state(*args): return _moose.SpikeGen___set_state(*args)
    def __get_event(*args): return _moose.SpikeGen___get_event(*args)
    def __set_event(*args): return _moose.SpikeGen___set_event(*args)
    def __get_Vm(*args): return _moose.SpikeGen___get_Vm(*args)
    def __set_Vm(*args): return _moose.SpikeGen___set_Vm(*args)
    threshold = _swig_property(_moose.SpikeGen_threshold_get, _moose.SpikeGen_threshold_set)
    refractT = _swig_property(_moose.SpikeGen_refractT_get, _moose.SpikeGen_refractT_set)
    absRefractT = _swig_property(_moose.SpikeGen_absRefractT_get, _moose.SpikeGen_absRefractT_set)
    amplitude = _swig_property(_moose.SpikeGen_amplitude_get, _moose.SpikeGen_amplitude_set)
    state = _swig_property(_moose.SpikeGen_state_get, _moose.SpikeGen_state_set)
    event = _swig_property(_moose.SpikeGen_event_get, _moose.SpikeGen_event_set)
    Vm = _swig_property(_moose.SpikeGen_Vm_get, _moose.SpikeGen_Vm_set)
SpikeGen_swigregister = _moose.SpikeGen_swigregister
SpikeGen_swigregister(SpikeGen)
SpikeGen.className = _moose.cvar.SpikeGen_className

class RandomSpike(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_RandomSpike(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_RandomSpike
    __del__ = lambda self : None;
    def getType(*args): return _moose.RandomSpike_getType(*args)
    def __get_minAmp(*args): return _moose.RandomSpike___get_minAmp(*args)
    def __set_minAmp(*args): return _moose.RandomSpike___set_minAmp(*args)
    def __get_maxAmp(*args): return _moose.RandomSpike___get_maxAmp(*args)
    def __set_maxAmp(*args): return _moose.RandomSpike___set_maxAmp(*args)
    def __get_rate(*args): return _moose.RandomSpike___get_rate(*args)
    def __set_rate(*args): return _moose.RandomSpike___set_rate(*args)
    def __get_resetValue(*args): return _moose.RandomSpike___get_resetValue(*args)
    def __set_resetValue(*args): return _moose.RandomSpike___set_resetValue(*args)
    def __get_state(*args): return _moose.RandomSpike___get_state(*args)
    def __set_state(*args): return _moose.RandomSpike___set_state(*args)
    def __get_absRefract(*args): return _moose.RandomSpike___get_absRefract(*args)
    def __set_absRefract(*args): return _moose.RandomSpike___set_absRefract(*args)
    def __get_lastEvent(*args): return _moose.RandomSpike___get_lastEvent(*args)
    def __get_reset(*args): return _moose.RandomSpike___get_reset(*args)
    def __set_reset(*args): return _moose.RandomSpike___set_reset(*args)
    minAmp = _swig_property(_moose.RandomSpike_minAmp_get, _moose.RandomSpike_minAmp_set)
    maxAmp = _swig_property(_moose.RandomSpike_maxAmp_get, _moose.RandomSpike_maxAmp_set)
    rate = _swig_property(_moose.RandomSpike_rate_get, _moose.RandomSpike_rate_set)
    resetValue = _swig_property(_moose.RandomSpike_resetValue_get, _moose.RandomSpike_resetValue_set)
    state = _swig_property(_moose.RandomSpike_state_get, _moose.RandomSpike_state_set)
    absRefract = _swig_property(_moose.RandomSpike_absRefract_get, _moose.RandomSpike_absRefract_set)
    lastEvent = _swig_property(_moose.RandomSpike_lastEvent_get)
    reset = _swig_property(_moose.RandomSpike_reset_get, _moose.RandomSpike_reset_set)
RandomSpike_swigregister = _moose.RandomSpike_swigregister
RandomSpike_swigregister(RandomSpike)
RandomSpike.className = _moose.cvar.RandomSpike_className

class PulseGen(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_PulseGen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PulseGen
    __del__ = lambda self : None;
    def getType(*args): return _moose.PulseGen_getType(*args)
    def __get_firstLevel(*args): return _moose.PulseGen___get_firstLevel(*args)
    def __set_firstLevel(*args): return _moose.PulseGen___set_firstLevel(*args)
    def __get_firstWidth(*args): return _moose.PulseGen___get_firstWidth(*args)
    def __set_firstWidth(*args): return _moose.PulseGen___set_firstWidth(*args)
    def __get_firstDelay(*args): return _moose.PulseGen___get_firstDelay(*args)
    def __set_firstDelay(*args): return _moose.PulseGen___set_firstDelay(*args)
    def __get_secondLevel(*args): return _moose.PulseGen___get_secondLevel(*args)
    def __set_secondLevel(*args): return _moose.PulseGen___set_secondLevel(*args)
    def __get_secondWidth(*args): return _moose.PulseGen___get_secondWidth(*args)
    def __set_secondWidth(*args): return _moose.PulseGen___set_secondWidth(*args)
    def __get_secondDelay(*args): return _moose.PulseGen___get_secondDelay(*args)
    def __set_secondDelay(*args): return _moose.PulseGen___set_secondDelay(*args)
    def __get_baseLevel(*args): return _moose.PulseGen___get_baseLevel(*args)
    def __set_baseLevel(*args): return _moose.PulseGen___set_baseLevel(*args)
    def __get_output(*args): return _moose.PulseGen___get_output(*args)
    def __get_trigTime(*args): return _moose.PulseGen___get_trigTime(*args)
    def __set_trigTime(*args): return _moose.PulseGen___set_trigTime(*args)
    def __get_trigMode(*args): return _moose.PulseGen___get_trigMode(*args)
    def __set_trigMode(*args): return _moose.PulseGen___set_trigMode(*args)
    def __get_prevInput(*args): return _moose.PulseGen___get_prevInput(*args)
    firstLevel = _swig_property(_moose.PulseGen_firstLevel_get, _moose.PulseGen_firstLevel_set)
    firstWidth = _swig_property(_moose.PulseGen_firstWidth_get, _moose.PulseGen_firstWidth_set)
    firstDelay = _swig_property(_moose.PulseGen_firstDelay_get, _moose.PulseGen_firstDelay_set)
    secondLevel = _swig_property(_moose.PulseGen_secondLevel_get, _moose.PulseGen_secondLevel_set)
    secondWidth = _swig_property(_moose.PulseGen_secondWidth_get, _moose.PulseGen_secondWidth_set)
    secondDelay = _swig_property(_moose.PulseGen_secondDelay_get, _moose.PulseGen_secondDelay_set)
    baseLevel = _swig_property(_moose.PulseGen_baseLevel_get, _moose.PulseGen_baseLevel_set)
    output = _swig_property(_moose.PulseGen_output_get)
    trigTime = _swig_property(_moose.PulseGen_trigTime_get, _moose.PulseGen_trigTime_set)
    trigMode = _swig_property(_moose.PulseGen_trigMode_get, _moose.PulseGen_trigMode_set)
    prevInput = _swig_property(_moose.PulseGen_prevInput_get)
PulseGen_swigregister = _moose.PulseGen_swigregister
PulseGen_swigregister(PulseGen)
PulseGen.className = _moose.cvar.PulseGen_className

class Nernst(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Nernst(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Nernst
    __del__ = lambda self : None;
    def getType(*args): return _moose.Nernst_getType(*args)
    def __get_E(*args): return _moose.Nernst___get_E(*args)
    def __set_E(*args): return _moose.Nernst___set_E(*args)
    def __get_Temperature(*args): return _moose.Nernst___get_Temperature(*args)
    def __set_Temperature(*args): return _moose.Nernst___set_Temperature(*args)
    def __get_valence(*args): return _moose.Nernst___get_valence(*args)
    def __set_valence(*args): return _moose.Nernst___set_valence(*args)
    def __get_Cin(*args): return _moose.Nernst___get_Cin(*args)
    def __set_Cin(*args): return _moose.Nernst___set_Cin(*args)
    def __get_Cout(*args): return _moose.Nernst___get_Cout(*args)
    def __set_Cout(*args): return _moose.Nernst___set_Cout(*args)
    def __get_scale(*args): return _moose.Nernst___get_scale(*args)
    def __set_scale(*args): return _moose.Nernst___set_scale(*args)
    def __get_ESrc(*args): return _moose.Nernst___get_ESrc(*args)
    def __set_ESrc(*args): return _moose.Nernst___set_ESrc(*args)
    def __get_CinMsg(*args): return _moose.Nernst___get_CinMsg(*args)
    def __set_CinMsg(*args): return _moose.Nernst___set_CinMsg(*args)
    def __get_CoutMsg(*args): return _moose.Nernst___get_CoutMsg(*args)
    def __set_CoutMsg(*args): return _moose.Nernst___set_CoutMsg(*args)
    E = _swig_property(_moose.Nernst_E_get, _moose.Nernst_E_set)
    Temperature = _swig_property(_moose.Nernst_Temperature_get, _moose.Nernst_Temperature_set)
    valence = _swig_property(_moose.Nernst_valence_get, _moose.Nernst_valence_set)
    Cin = _swig_property(_moose.Nernst_Cin_get, _moose.Nernst_Cin_set)
    Cout = _swig_property(_moose.Nernst_Cout_get, _moose.Nernst_Cout_set)
    scale = _swig_property(_moose.Nernst_scale_get, _moose.Nernst_scale_set)
    ESrc = _swig_property(_moose.Nernst_ESrc_get, _moose.Nernst_ESrc_set)
    CinMsg = _swig_property(_moose.Nernst_CinMsg_get, _moose.Nernst_CinMsg_set)
    CoutMsg = _swig_property(_moose.Nernst_CoutMsg_get, _moose.Nernst_CoutMsg_set)
Nernst_swigregister = _moose.Nernst_swigregister
Nernst_swigregister(Nernst)
Nernst.className = _moose.cvar.Nernst_className

class CaConc(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_CaConc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_CaConc
    __del__ = lambda self : None;
    def getType(*args): return _moose.CaConc_getType(*args)
    def __get_Ca(*args): return _moose.CaConc___get_Ca(*args)
    def __set_Ca(*args): return _moose.CaConc___set_Ca(*args)
    def __get_CaBasal(*args): return _moose.CaConc___get_CaBasal(*args)
    def __set_CaBasal(*args): return _moose.CaConc___set_CaBasal(*args)
    def __get_Ca_base(*args): return _moose.CaConc___get_Ca_base(*args)
    def __set_Ca_base(*args): return _moose.CaConc___set_Ca_base(*args)
    def __get_tau(*args): return _moose.CaConc___get_tau(*args)
    def __set_tau(*args): return _moose.CaConc___set_tau(*args)
    def __get_B(*args): return _moose.CaConc___get_B(*args)
    def __set_B(*args): return _moose.CaConc___set_B(*args)
    Ca = _swig_property(_moose.CaConc_Ca_get, _moose.CaConc_Ca_set)
    CaBasal = _swig_property(_moose.CaConc_CaBasal_get, _moose.CaConc_CaBasal_set)
    Ca_base = _swig_property(_moose.CaConc_Ca_base_get, _moose.CaConc_Ca_base_set)
    tau = _swig_property(_moose.CaConc_tau_get, _moose.CaConc_tau_set)
    B = _swig_property(_moose.CaConc_B_get, _moose.CaConc_B_set)
CaConc_swigregister = _moose.CaConc_swigregister
CaConc_swigregister(CaConc)
CaConc.className = _moose.cvar.CaConc_className

class HHGate(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_HHGate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHGate
    __del__ = lambda self : None;
    def getType(*args): return _moose.HHGate_getType(*args)
    def __get_A(*args): return _moose.HHGate___get_A(*args)
    def __get_B(*args): return _moose.HHGate___get_B(*args)
    def tabFill(*args): return _moose.HHGate_tabFill(*args)
    def setupAlpha(*args): return _moose.HHGate_setupAlpha(*args)
    def setupTau(*args): return _moose.HHGate_setupTau(*args)
    def tweakAlpha(*args): return _moose.HHGate_tweakAlpha(*args)
    def tweakTau(*args): return _moose.HHGate_tweakTau(*args)
    A = _swig_property(_moose.HHGate_A_get)
    B = _swig_property(_moose.HHGate_B_get)
HHGate_swigregister = _moose.HHGate_swigregister
HHGate_swigregister(HHGate)
HHGate.className = _moose.cvar.HHGate_className

class HHChannel(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_HHChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHChannel
    __del__ = lambda self : None;
    def getType(*args): return _moose.HHChannel_getType(*args)
    def __get_Gbar(*args): return _moose.HHChannel___get_Gbar(*args)
    def __set_Gbar(*args): return _moose.HHChannel___set_Gbar(*args)
    def __get_Ek(*args): return _moose.HHChannel___get_Ek(*args)
    def __set_Ek(*args): return _moose.HHChannel___set_Ek(*args)
    def __get_Xpower(*args): return _moose.HHChannel___get_Xpower(*args)
    def __set_Xpower(*args): return _moose.HHChannel___set_Xpower(*args)
    def __get_Ypower(*args): return _moose.HHChannel___get_Ypower(*args)
    def __set_Ypower(*args): return _moose.HHChannel___set_Ypower(*args)
    def __get_Zpower(*args): return _moose.HHChannel___get_Zpower(*args)
    def __set_Zpower(*args): return _moose.HHChannel___set_Zpower(*args)
    def __get_instant(*args): return _moose.HHChannel___get_instant(*args)
    def __set_instant(*args): return _moose.HHChannel___set_instant(*args)
    def __get_Gk(*args): return _moose.HHChannel___get_Gk(*args)
    def __set_Gk(*args): return _moose.HHChannel___set_Gk(*args)
    def __get_Ik(*args): return _moose.HHChannel___get_Ik(*args)
    def __set_Ik(*args): return _moose.HHChannel___set_Ik(*args)
    def __get_X(*args): return _moose.HHChannel___get_X(*args)
    def __set_X(*args): return _moose.HHChannel___set_X(*args)
    def __get_Y(*args): return _moose.HHChannel___get_Y(*args)
    def __set_Y(*args): return _moose.HHChannel___set_Y(*args)
    def __get_Z(*args): return _moose.HHChannel___get_Z(*args)
    def __set_Z(*args): return _moose.HHChannel___set_Z(*args)
    def __get_useConcentration(*args): return _moose.HHChannel___get_useConcentration(*args)
    def __set_useConcentration(*args): return _moose.HHChannel___set_useConcentration(*args)
    def __get_IkSrc(*args): return _moose.HHChannel___get_IkSrc(*args)
    def __set_IkSrc(*args): return _moose.HHChannel___set_IkSrc(*args)
    def __get_concen(*args): return _moose.HHChannel___get_concen(*args)
    def __set_concen(*args): return _moose.HHChannel___set_concen(*args)
    def createTable(*args): return _moose.HHChannel_createTable(*args)
    def tweakAlpha(*args): return _moose.HHChannel_tweakAlpha(*args)
    def tweakTau(*args): return _moose.HHChannel_tweakTau(*args)
    def setupAlpha(*args): return _moose.HHChannel_setupAlpha(*args)
    def setupTau(*args): return _moose.HHChannel_setupTau(*args)
    Gbar = _swig_property(_moose.HHChannel_Gbar_get, _moose.HHChannel_Gbar_set)
    Ek = _swig_property(_moose.HHChannel_Ek_get, _moose.HHChannel_Ek_set)
    Xpower = _swig_property(_moose.HHChannel_Xpower_get, _moose.HHChannel_Xpower_set)
    Ypower = _swig_property(_moose.HHChannel_Ypower_get, _moose.HHChannel_Ypower_set)
    Zpower = _swig_property(_moose.HHChannel_Zpower_get, _moose.HHChannel_Zpower_set)
    X = _swig_property(_moose.HHChannel_X_get, _moose.HHChannel_X_set)
    Y = _swig_property(_moose.HHChannel_Y_get, _moose.HHChannel_Y_set)
    Z = _swig_property(_moose.HHChannel_Z_get, _moose.HHChannel_Z_set)
    instant = _swig_property(_moose.HHChannel_instant_get, _moose.HHChannel_instant_set)
    Gk = _swig_property(_moose.HHChannel_Gk_get, _moose.HHChannel_Gk_set)
    Ik = _swig_property(_moose.HHChannel_Ik_get, _moose.HHChannel_Ik_set)
    useConcentration = _swig_property(_moose.HHChannel_useConcentration_get, _moose.HHChannel_useConcentration_set)
    concen = _swig_property(_moose.HHChannel_concen_get, _moose.HHChannel_concen_set)
HHChannel_swigregister = _moose.HHChannel_swigregister
HHChannel_swigregister(HHChannel)
HHChannel.className = _moose.cvar.HHChannel_className

class Mg_block(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Mg_block(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Mg_block
    __del__ = lambda self : None;
    def getType(*args): return _moose.Mg_block_getType(*args)
    def __get_KMg_A(*args): return _moose.Mg_block___get_KMg_A(*args)
    def __set_KMg_A(*args): return _moose.Mg_block___set_KMg_A(*args)
    def __get_KMg_B(*args): return _moose.Mg_block___get_KMg_B(*args)
    def __set_KMg_B(*args): return _moose.Mg_block___set_KMg_B(*args)
    def __get_CMg(*args): return _moose.Mg_block___get_CMg(*args)
    def __set_CMg(*args): return _moose.Mg_block___set_CMg(*args)
    def __get_Ik(*args): return _moose.Mg_block___get_Ik(*args)
    def __set_Ik(*args): return _moose.Mg_block___set_Ik(*args)
    def __get_Gk(*args): return _moose.Mg_block___get_Gk(*args)
    def __set_Gk(*args): return _moose.Mg_block___set_Gk(*args)
    def __get_Ek(*args): return _moose.Mg_block___get_Ek(*args)
    def __set_Ek(*args): return _moose.Mg_block___set_Ek(*args)
    def __get_Zk(*args): return _moose.Mg_block___get_Zk(*args)
    def __set_Zk(*args): return _moose.Mg_block___set_Zk(*args)
    KMg_A = _swig_property(_moose.Mg_block_KMg_A_get, _moose.Mg_block_KMg_A_set)
    K_MgB = _swig_property(_moose.Mg_block_K_MgB_get, _moose.Mg_block_K_MgB_set)
    CMg = _swig_property(_moose.Mg_block_CMg_get, _moose.Mg_block_CMg_set)
    Ik = _swig_property(_moose.Mg_block_Ik_get, _moose.Mg_block_Ik_set)
    Gk = _swig_property(_moose.Mg_block_Gk_get, _moose.Mg_block_Gk_set)
    Ek = _swig_property(_moose.Mg_block_Ek_get, _moose.Mg_block_Ek_set)
    Zk = _swig_property(_moose.Mg_block_Zk_get, _moose.Mg_block_Zk_set)
Mg_block_swigregister = _moose.Mg_block_swigregister
Mg_block_swigregister(Mg_block)
Mg_block.className = _moose.cvar.Mg_block_className

class Compartment(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Compartment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Compartment
    __del__ = lambda self : None;
    def getType(*args): return _moose.Compartment_getType(*args)
    def __get_Vm(*args): return _moose.Compartment___get_Vm(*args)
    def __set_Vm(*args): return _moose.Compartment___set_Vm(*args)
    def __get_Cm(*args): return _moose.Compartment___get_Cm(*args)
    def __set_Cm(*args): return _moose.Compartment___set_Cm(*args)
    def __get_Em(*args): return _moose.Compartment___get_Em(*args)
    def __set_Em(*args): return _moose.Compartment___set_Em(*args)
    def __get_Im(*args): return _moose.Compartment___get_Im(*args)
    def __set_Im(*args): return _moose.Compartment___set_Im(*args)
    def __get_inject(*args): return _moose.Compartment___get_inject(*args)
    def __set_inject(*args): return _moose.Compartment___set_inject(*args)
    def __get_initVm(*args): return _moose.Compartment___get_initVm(*args)
    def __set_initVm(*args): return _moose.Compartment___set_initVm(*args)
    def __get_Rm(*args): return _moose.Compartment___get_Rm(*args)
    def __set_Rm(*args): return _moose.Compartment___set_Rm(*args)
    def __get_Ra(*args): return _moose.Compartment___get_Ra(*args)
    def __set_Ra(*args): return _moose.Compartment___set_Ra(*args)
    def __get_diameter(*args): return _moose.Compartment___get_diameter(*args)
    def __set_diameter(*args): return _moose.Compartment___set_diameter(*args)
    def __get_length(*args): return _moose.Compartment___get_length(*args)
    def __set_length(*args): return _moose.Compartment___set_length(*args)
    def __get_x(*args): return _moose.Compartment___get_x(*args)
    def __set_x(*args): return _moose.Compartment___set_x(*args)
    def __get_y(*args): return _moose.Compartment___get_y(*args)
    def __set_y(*args): return _moose.Compartment___set_y(*args)
    def __get_z(*args): return _moose.Compartment___get_z(*args)
    def __set_z(*args): return _moose.Compartment___set_z(*args)
    Vm = _swig_property(_moose.Compartment_Vm_get, _moose.Compartment_Vm_set)
    Cm = _swig_property(_moose.Compartment_Cm_get, _moose.Compartment_Cm_set)
    Em = _swig_property(_moose.Compartment_Em_get, _moose.Compartment_Em_set)
    Im = _swig_property(_moose.Compartment_Im_get, _moose.Compartment_Im_set)
    inject = _swig_property(_moose.Compartment_inject_get, _moose.Compartment_inject_set)
    initVm = _swig_property(_moose.Compartment_initVm_get, _moose.Compartment_initVm_set)
    Rm = _swig_property(_moose.Compartment_Rm_get, _moose.Compartment_Rm_set)
    Ra = _swig_property(_moose.Compartment_Ra_get, _moose.Compartment_Ra_set)
    diameter = _swig_property(_moose.Compartment_diameter_get, _moose.Compartment_diameter_set)
    length = _swig_property(_moose.Compartment_length_get, _moose.Compartment_length_set)
    x = _swig_property(_moose.Compartment_x_get, _moose.Compartment_x_set)
    y = _swig_property(_moose.Compartment_y_get, _moose.Compartment_y_set)
    z = _swig_property(_moose.Compartment_z_get, _moose.Compartment_z_set)
Compartment_swigregister = _moose.Compartment_swigregister
Compartment_swigregister(Compartment)
Compartment.className = _moose.cvar.Compartment_className

class NeuroScan(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_NeuroScan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_NeuroScan
    __del__ = lambda self : None;
    def getType(*args): return _moose.NeuroScan_getType(*args)
    def __get_VDiv(*args): return _moose.NeuroScan___get_VDiv(*args)
    def __set_VDiv(*args): return _moose.NeuroScan___set_VDiv(*args)
    def __get_VMin(*args): return _moose.NeuroScan___get_VMin(*args)
    def __set_VMin(*args): return _moose.NeuroScan___set_VMin(*args)
    def __get_VMax(*args): return _moose.NeuroScan___get_VMax(*args)
    def __set_VMax(*args): return _moose.NeuroScan___set_VMax(*args)
    def __get_CaDiv(*args): return _moose.NeuroScan___get_CaDiv(*args)
    def __set_CaDiv(*args): return _moose.NeuroScan___set_CaDiv(*args)
    def __get_CaMin(*args): return _moose.NeuroScan___get_CaMin(*args)
    def __set_CaMin(*args): return _moose.NeuroScan___set_CaMin(*args)
    def __get_CaMax(*args): return _moose.NeuroScan___get_CaMax(*args)
    def __set_CaMax(*args): return _moose.NeuroScan___set_CaMax(*args)
    VDiv = _swig_property(_moose.NeuroScan_VDiv_get, _moose.NeuroScan_VDiv_set)
    VMin = _swig_property(_moose.NeuroScan_VMin_get, _moose.NeuroScan_VMin_set)
    VMax = _swig_property(_moose.NeuroScan_VMax_get, _moose.NeuroScan_VMax_set)
    CaDiv = _swig_property(_moose.NeuroScan_CaDiv_get, _moose.NeuroScan_CaDiv_set)
    CaMin = _swig_property(_moose.NeuroScan_CaMin_get, _moose.NeuroScan_CaMin_set)
    CaMax = _swig_property(_moose.NeuroScan_CaMax_get, _moose.NeuroScan_CaMax_set)
NeuroScan_swigregister = _moose.NeuroScan_swigregister
NeuroScan_swigregister(NeuroScan)
NeuroScan.className = _moose.cvar.NeuroScan_className

class HSolve(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_HSolve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HSolve
    __del__ = lambda self : None;
    def getType(*args): return _moose.HSolve_getType(*args)
    def __get_seed_path(*args): return _moose.HSolve___get_seed_path(*args)
    def __set_seed_path(*args): return _moose.HSolve___set_seed_path(*args)
    def __get_NDiv(*args): return _moose.HSolve___get_NDiv(*args)
    def __set_NDiv(*args): return _moose.HSolve___set_NDiv(*args)
    def __get_VLo(*args): return _moose.HSolve___get_VLo(*args)
    def __set_VLo(*args): return _moose.HSolve___set_VLo(*args)
    def __get_VHi(*args): return _moose.HSolve___get_VHi(*args)
    def __set_VHi(*args): return _moose.HSolve___set_VHi(*args)
    seedPath = _swig_property(_moose.HSolve_seedPath_get, _moose.HSolve_seedPath_set)
    NDiv = _swig_property(_moose.HSolve_NDiv_get, _moose.HSolve_NDiv_set)
    VLo = _swig_property(_moose.HSolve_VLo_get, _moose.HSolve_VLo_set)
    VHi = _swig_property(_moose.HSolve_VHi_get, _moose.HSolve_VHi_set)
HSolve_swigregister = _moose.HSolve_swigregister
HSolve_swigregister(HSolve)
HSolve.className = _moose.cvar.HSolve_className

class Kintegrator(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Kintegrator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Kintegrator
    __del__ = lambda self : None;
    def getType(*args): return _moose.Kintegrator_getType(*args)
    def __get_isInitiatilized(*args): return _moose.Kintegrator___get_isInitiatilized(*args)
    def __set_isInitiatilized(*args): return _moose.Kintegrator___set_isInitiatilized(*args)
    def imethod(*args): return _moose.Kintegrator_imethod(*args)
    isInitiatilized = _swig_property(_moose.Kintegrator_isInitiatilized_get, _moose.Kintegrator_isInitiatilized_set)
Kintegrator_swigregister = _moose.Kintegrator_swigregister
Kintegrator_swigregister(Kintegrator)
Kintegrator.className = _moose.cvar.Kintegrator_className

class MathFunc(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_MathFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_MathFunc
    __del__ = lambda self : None;
    def getType(*args): return _moose.MathFunc_getType(*args)
    def __get_mathML(*args): return _moose.MathFunc___get_mathML(*args)
    def __set_mathML(*args): return _moose.MathFunc___set_mathML(*args)
    def __get_function(*args): return _moose.MathFunc___get_function(*args)
    def __set_function(*args): return _moose.MathFunc___set_function(*args)
    def __get_result(*args): return _moose.MathFunc___get_result(*args)
    def __set_result(*args): return _moose.MathFunc___set_result(*args)
    mathML = _swig_property(_moose.MathFunc_mathML_get, _moose.MathFunc_mathML_set)
    function = _swig_property(_moose.MathFunc_function_get, _moose.MathFunc_function_set)
    result = _swig_property(_moose.MathFunc_result_get, _moose.MathFunc_result_set)
MathFunc_swigregister = _moose.MathFunc_swigregister
MathFunc_swigregister(MathFunc)
MathFunc.className = _moose.cvar.MathFunc_className

class Stoich(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Stoich(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Stoich
    __del__ = lambda self : None;
    def getType(*args): return _moose.Stoich_getType(*args)
    def __get_nMols(*args): return _moose.Stoich___get_nMols(*args)
    def __set_nMols(*args): return _moose.Stoich___set_nMols(*args)
    def __get_nVarMols(*args): return _moose.Stoich___get_nVarMols(*args)
    def __set_nVarMols(*args): return _moose.Stoich___set_nVarMols(*args)
    def __get_nSumTot(*args): return _moose.Stoich___get_nSumTot(*args)
    def __set_nSumTot(*args): return _moose.Stoich___set_nSumTot(*args)
    def __get_nBuffered(*args): return _moose.Stoich___get_nBuffered(*args)
    def __set_nBuffered(*args): return _moose.Stoich___set_nBuffered(*args)
    def __get_nReacs(*args): return _moose.Stoich___get_nReacs(*args)
    def __set_nReacs(*args): return _moose.Stoich___set_nReacs(*args)
    def __get_nEnz(*args): return _moose.Stoich___get_nEnz(*args)
    def __set_nEnz(*args): return _moose.Stoich___set_nEnz(*args)
    def __get_nMMenz(*args): return _moose.Stoich___get_nMMenz(*args)
    def __set_nMMenz(*args): return _moose.Stoich___set_nMMenz(*args)
    def __get_nExternalRates(*args): return _moose.Stoich___get_nExternalRates(*args)
    def __set_nExternalRates(*args): return _moose.Stoich___set_nExternalRates(*args)
    def __get_useOneWayReacs(*args): return _moose.Stoich___get_useOneWayReacs(*args)
    def __set_useOneWayReacs(*args): return _moose.Stoich___set_useOneWayReacs(*args)
    def path(*args): return _moose.Stoich_path(*args)
    def __get_rateVectorSize(*args): return _moose.Stoich___get_rateVectorSize(*args)
    def __set_rateVectorSize(*args): return _moose.Stoich___set_rateVectorSize(*args)
    nMols = _swig_property(_moose.Stoich_nMols_get, _moose.Stoich_nMols_set)
    nVarMols = _swig_property(_moose.Stoich_nVarMols_get, _moose.Stoich_nVarMols_set)
    nSumTot = _swig_property(_moose.Stoich_nSumTot_get, _moose.Stoich_nSumTot_set)
    nBuffered = _swig_property(_moose.Stoich_nBuffered_get, _moose.Stoich_nBuffered_set)
    nReacs = _swig_property(_moose.Stoich_nReacs_get, _moose.Stoich_nReacs_set)
    nEnz = _swig_property(_moose.Stoich_nEnz_get, _moose.Stoich_nEnz_set)
    nMMenz = _swig_property(_moose.Stoich_nMMenz_get, _moose.Stoich_nMMenz_set)
    nExternalRates = _swig_property(_moose.Stoich_nExternalRates_get, _moose.Stoich_nExternalRates_set)
    useOneWayReacs = _swig_property(_moose.Stoich_useOneWayReacs_get, _moose.Stoich_useOneWayReacs_set)
    rateVectorSize = _swig_property(_moose.Stoich_rateVectorSize_get, _moose.Stoich_rateVectorSize_set)
Stoich_swigregister = _moose.Stoich_swigregister
Stoich_swigregister(Stoich)
Stoich.className = _moose.cvar.Stoich_className

class KineticHub(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_KineticHub(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KineticHub
    __del__ = lambda self : None;
    def getType(*args): return _moose.KineticHub_getType(*args)
    def __get_nMol(*args): return _moose.KineticHub___get_nMol(*args)
    def __set_nMol(*args): return _moose.KineticHub___set_nMol(*args)
    def __get_nReac(*args): return _moose.KineticHub___get_nReac(*args)
    def __set_nReac(*args): return _moose.KineticHub___set_nReac(*args)
    def __get_nEnz(*args): return _moose.KineticHub___get_nEnz(*args)
    def __set_nEnz(*args): return _moose.KineticHub___set_nEnz(*args)
    def destroy(*args): return _moose.KineticHub_destroy(*args)
    def __get_molSum(*args): return _moose.KineticHub___get_molSum(*args)
    def __set_molSum(*args): return _moose.KineticHub___set_molSum(*args)
    nMol = _swig_property(_moose.KineticHub_nMol_get, _moose.KineticHub_nMol_set)
    nReac = _swig_property(_moose.KineticHub_nReac_get, _moose.KineticHub_nReac_set)
    nEnz = _swig_property(_moose.KineticHub_nEnz_get, _moose.KineticHub_nEnz_set)
    molSum = _swig_property(_moose.KineticHub_molSum_get, _moose.KineticHub_molSum_set)
KineticHub_swigregister = _moose.KineticHub_swigregister
KineticHub_swigregister(KineticHub)
KineticHub.className = _moose.cvar.KineticHub_className

class Enzyme(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Enzyme(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Enzyme
    __del__ = lambda self : None;
    def getType(*args): return _moose.Enzyme_getType(*args)
    def __get_k1(*args): return _moose.Enzyme___get_k1(*args)
    def __set_k1(*args): return _moose.Enzyme___set_k1(*args)
    def __get_k2(*args): return _moose.Enzyme___get_k2(*args)
    def __set_k2(*args): return _moose.Enzyme___set_k2(*args)
    def __get_k3(*args): return _moose.Enzyme___get_k3(*args)
    def __set_k3(*args): return _moose.Enzyme___set_k3(*args)
    def __get_Km(*args): return _moose.Enzyme___get_Km(*args)
    def __set_Km(*args): return _moose.Enzyme___set_Km(*args)
    def __get_kcat(*args): return _moose.Enzyme___get_kcat(*args)
    def __set_kcat(*args): return _moose.Enzyme___set_kcat(*args)
    def __get_mode(*args): return _moose.Enzyme___get_mode(*args)
    def __set_mode(*args): return _moose.Enzyme___set_mode(*args)
    def __get_scaleKm(*args): return _moose.Enzyme___get_scaleKm(*args)
    def __set_scaleKm(*args): return _moose.Enzyme___set_scaleKm(*args)
    def __get_scaleKcat(*args): return _moose.Enzyme___get_scaleKcat(*args)
    def __set_scaleKcat(*args): return _moose.Enzyme___set_scaleKcat(*args)
    def __get_intramol(*args): return _moose.Enzyme___get_intramol(*args)
    def __set_intramol(*args): return _moose.Enzyme___set_intramol(*args)
    k1 = _swig_property(_moose.Enzyme_k1_get, _moose.Enzyme_k1_set)
    k2 = _swig_property(_moose.Enzyme_k2_get, _moose.Enzyme_k2_set)
    k3 = _swig_property(_moose.Enzyme_k3_get, _moose.Enzyme_k3_set)
    Km = _swig_property(_moose.Enzyme_Km_get, _moose.Enzyme_Km_set)
    kcat = _swig_property(_moose.Enzyme_kcat_get, _moose.Enzyme_kcat_set)
    mode = _swig_property(_moose.Enzyme_mode_get, _moose.Enzyme_mode_set)
    scaleKm = _swig_property(_moose.Enzyme_scaleKm_get, _moose.Enzyme_scaleKm_set)
    scaleKcat = _swig_property(_moose.Enzyme_scaleKcat_get, _moose.Enzyme_scaleKcat_set)
    intramol = _swig_property(_moose.Enzyme_intramol_get, _moose.Enzyme_intramol_set)
Enzyme_swigregister = _moose.Enzyme_swigregister
Enzyme_swigregister(Enzyme)
Enzyme.className = _moose.cvar.Enzyme_className

class Reaction(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Reaction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Reaction
    __del__ = lambda self : None;
    def getType(*args): return _moose.Reaction_getType(*args)
    def __get_kf(*args): return _moose.Reaction___get_kf(*args)
    def __set_kf(*args): return _moose.Reaction___set_kf(*args)
    def __get_kb(*args): return _moose.Reaction___get_kb(*args)
    def __set_kb(*args): return _moose.Reaction___set_kb(*args)
    def __get_scaleKf(*args): return _moose.Reaction___get_scaleKf(*args)
    def __set_scaleKf(*args): return _moose.Reaction___set_scaleKf(*args)
    def __get_scaleKb(*args): return _moose.Reaction___get_scaleKb(*args)
    def __set_scaleKb(*args): return _moose.Reaction___set_scaleKb(*args)
    kf = _swig_property(_moose.Reaction_kf_get, _moose.Reaction_kf_set)
    kb = _swig_property(_moose.Reaction_kb_get, _moose.Reaction_kb_set)
    scaleKf = _swig_property(_moose.Reaction_scaleKf_get, _moose.Reaction_scaleKf_set)
    scaleKb = _swig_property(_moose.Reaction_scaleKb_get, _moose.Reaction_scaleKb_set)
Reaction_swigregister = _moose.Reaction_swigregister
Reaction_swigregister(Reaction)
Reaction.className = _moose.cvar.Reaction_className

class Molecule(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Molecule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Molecule
    __del__ = lambda self : None;
    def getType(*args): return _moose.Molecule_getType(*args)
    def __get_nInit(*args): return _moose.Molecule___get_nInit(*args)
    def __set_nInit(*args): return _moose.Molecule___set_nInit(*args)
    def __get_volumeScale(*args): return _moose.Molecule___get_volumeScale(*args)
    def __set_volumeScale(*args): return _moose.Molecule___set_volumeScale(*args)
    def __get_n(*args): return _moose.Molecule___get_n(*args)
    def __set_n(*args): return _moose.Molecule___set_n(*args)
    def __get_mode(*args): return _moose.Molecule___get_mode(*args)
    def __set_mode(*args): return _moose.Molecule___set_mode(*args)
    def __get_slave_enable(*args): return _moose.Molecule___get_slave_enable(*args)
    def __set_slave_enable(*args): return _moose.Molecule___set_slave_enable(*args)
    def __get_conc(*args): return _moose.Molecule___get_conc(*args)
    def __set_conc(*args): return _moose.Molecule___set_conc(*args)
    def __get_concInit(*args): return _moose.Molecule___get_concInit(*args)
    def __set_concInit(*args): return _moose.Molecule___set_concInit(*args)
    def __get_nSrc(*args): return _moose.Molecule___get_nSrc(*args)
    def __set_nSrc(*args): return _moose.Molecule___set_nSrc(*args)
    def __get_sumTotal(*args): return _moose.Molecule___get_sumTotal(*args)
    def __set_sumTotal(*args): return _moose.Molecule___set_sumTotal(*args)
    nInit = _swig_property(_moose.Molecule_nInit_get, _moose.Molecule_nInit_set)
    volumeScale = _swig_property(_moose.Molecule_volumeScale_get, _moose.Molecule_volumeScale_set)
    n = _swig_property(_moose.Molecule_n_get, _moose.Molecule_n_set)
    mode = _swig_property(_moose.Molecule_mode_get, _moose.Molecule_mode_set)
    slave_enable = _swig_property(_moose.Molecule_slave_enable_get, _moose.Molecule_slave_enable_set)
    conc = _swig_property(_moose.Molecule_conc_get, _moose.Molecule_conc_set)
    concInit = _swig_property(_moose.Molecule_concInit_get, _moose.Molecule_concInit_set)
    nSrc = _swig_property(_moose.Molecule_nSrc_get, _moose.Molecule_nSrc_set)
    sumTotal = _swig_property(_moose.Molecule_sumTotal_get, _moose.Molecule_sumTotal_set)
Molecule_swigregister = _moose.Molecule_swigregister
Molecule_swigregister(Molecule)
Molecule.className = _moose.cvar.Molecule_className

mtrand = _moose.mtrand
mtseed = _moose.mtseed
class Probability(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_Probability
    __del__ = lambda self : None;
    def getMean(*args): return _moose.Probability_getMean(*args)
    def getVariance(*args): return _moose.Probability_getVariance(*args)
    def getNextSample(*args): return _moose.Probability_getNextSample(*args)
Probability_swigregister = _moose.Probability_swigregister
Probability_swigregister(Probability)

class Binomial(Probability):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Binomial(*args)
        try: self.this.append(this)
        except: self.this = this
    def getN(*args): return _moose.Binomial_getN(*args)
    def getP(*args): return _moose.Binomial_getP(*args)
    def getMean(*args): return _moose.Binomial_getMean(*args)
    def getVariance(*args): return _moose.Binomial_getVariance(*args)
    def getNextSample(*args): return _moose.Binomial_getNextSample(*args)
    __swig_destroy__ = _moose.delete_Binomial
    __del__ = lambda self : None;
Binomial_swigregister = _moose.Binomial_swigregister
Binomial_swigregister(Binomial)

class Gamma(Probability):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Gamma(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(*args): return _moose.Gamma_getAlpha(*args)
    def getTheta(*args): return _moose.Gamma_getTheta(*args)
    def getMean(*args): return _moose.Gamma_getMean(*args)
    def getVariance(*args): return _moose.Gamma_getVariance(*args)
    def getNextSample(*args): return _moose.Gamma_getNextSample(*args)
    __swig_destroy__ = _moose.delete_Gamma
    __del__ = lambda self : None;
Gamma_swigregister = _moose.Gamma_swigregister
Gamma_swigregister(Gamma)

ALIAS = _moose.ALIAS
BOX_MUELLER = _moose.BOX_MUELLER
ZIGGURAT = _moose.ZIGGURAT
class Normal(Probability):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Normal(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMean(*args): return _moose.Normal_getMean(*args)
    def setMean(*args): return _moose.Normal_setMean(*args)
    def getVariance(*args): return _moose.Normal_getVariance(*args)
    def setVariance(*args): return _moose.Normal_setVariance(*args)
    def getMethod(*args): return _moose.Normal_getMethod(*args)
    def setMethod(*args): return _moose.Normal_setMethod(*args)
    def getNextSample(*args): return _moose.Normal_getNextSample(*args)
    __swig_destroy__ = _moose.delete_Normal
    __del__ = lambda self : None;
Normal_swigregister = _moose.Normal_swigregister
Normal_swigregister(Normal)

class Poisson(Probability):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Poisson(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Poisson
    __del__ = lambda self : None;
    def setMean(*args): return _moose.Poisson_setMean(*args)
    def getMean(*args): return _moose.Poisson_getMean(*args)
    def getVariance(*args): return _moose.Poisson_getVariance(*args)
    def getNextSample(*args): return _moose.Poisson_getNextSample(*args)
Poisson_swigregister = _moose.Poisson_swigregister
Poisson_swigregister(Poisson)

LOGARITHMIC = _moose.LOGARITHMIC
RANDOM_MINIMIZATION = _moose.RANDOM_MINIMIZATION
class Exponential(Probability):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Exponential(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMean(*args): return _moose.Exponential_getMean(*args)
    def getVariance(*args): return _moose.Exponential_getVariance(*args)
    def getNextSample(*args): return _moose.Exponential_getNextSample(*args)
    __swig_destroy__ = _moose.delete_Exponential
    __del__ = lambda self : None;
Exponential_swigregister = _moose.Exponential_swigregister
Exponential_swigregister(Exponential)

class RandGenerator(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_RandGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(*args): return _moose.RandGenerator_getType(*args)
    def __get_sample(*args): return _moose.RandGenerator___get_sample(*args)
    def __set_sample(*args): return _moose.RandGenerator___set_sample(*args)
    def __get_mean(*args): return _moose.RandGenerator___get_mean(*args)
    def __set_mean(*args): return _moose.RandGenerator___set_mean(*args)
    def __get_variance(*args): return _moose.RandGenerator___get_variance(*args)
    def __set_variance(*args): return _moose.RandGenerator___set_variance(*args)
    def __get_output(*args): return _moose.RandGenerator___get_output(*args)
    def __set_output(*args): return _moose.RandGenerator___set_output(*args)
    sample = _swig_property(_moose.RandGenerator_sample_get, _moose.RandGenerator_sample_set)
    mean = _swig_property(_moose.RandGenerator_mean_get, _moose.RandGenerator_mean_set)
    variance = _swig_property(_moose.RandGenerator_variance_get, _moose.RandGenerator_variance_set)
    output = _swig_property(_moose.RandGenerator_output_get, _moose.RandGenerator_output_set)
    __swig_destroy__ = _moose.delete_RandGenerator
    __del__ = lambda self : None;
RandGenerator_swigregister = _moose.RandGenerator_swigregister
RandGenerator_swigregister(RandGenerator)
RandGenerator.className = _moose.cvar.RandGenerator_className

class UniformRng(RandGenerator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_UniformRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_UniformRng
    __del__ = lambda self : None;
    def getType(*args): return _moose.UniformRng_getType(*args)
    def __get_min(*args): return _moose.UniformRng___get_min(*args)
    def __set_min(*args): return _moose.UniformRng___set_min(*args)
    def __get_max(*args): return _moose.UniformRng___get_max(*args)
    def __set_max(*args): return _moose.UniformRng___set_max(*args)
    mean = _swig_property(_moose.UniformRng_mean_get, _moose.UniformRng_mean_set)
    variance = _swig_property(_moose.UniformRng_variance_get, _moose.UniformRng_variance_set)
    min = _swig_property(_moose.UniformRng_min_get, _moose.UniformRng_min_set)
    max = _swig_property(_moose.UniformRng_max_get, _moose.UniformRng_max_set)
UniformRng_swigregister = _moose.UniformRng_swigregister
UniformRng_swigregister(UniformRng)
UniformRng.className = _moose.cvar.UniformRng_className

class GammaRng(RandGenerator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_GammaRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GammaRng
    __del__ = lambda self : None;
    def getType(*args): return _moose.GammaRng_getType(*args)
    def __get_alpha(*args): return _moose.GammaRng___get_alpha(*args)
    def __set_alpha(*args): return _moose.GammaRng___set_alpha(*args)
    def __get_theta(*args): return _moose.GammaRng___get_theta(*args)
    def __set_theta(*args): return _moose.GammaRng___set_theta(*args)
    alpha = _swig_property(_moose.GammaRng_alpha_get, _moose.GammaRng_alpha_set)
    theta = _swig_property(_moose.GammaRng_theta_get, _moose.GammaRng_theta_set)
GammaRng_swigregister = _moose.GammaRng_swigregister
GammaRng_swigregister(GammaRng)
GammaRng.className = _moose.cvar.GammaRng_className

class ExponentialRng(RandGenerator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_ExponentialRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_ExponentialRng
    __del__ = lambda self : None;
    def getType(*args): return _moose.ExponentialRng_getType(*args)
    def __get_method(*args): return _moose.ExponentialRng___get_method(*args)
    def __set_method(*args): return _moose.ExponentialRng___set_method(*args)
    mean = _swig_property(_moose.ExponentialRng_mean_get, _moose.ExponentialRng_mean_set)
    method = _swig_property(_moose.ExponentialRng_method_get, _moose.ExponentialRng_method_set)
ExponentialRng_swigregister = _moose.ExponentialRng_swigregister
ExponentialRng_swigregister(ExponentialRng)
ExponentialRng.className = _moose.cvar.ExponentialRng_className

class BinomialRng(RandGenerator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_BinomialRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_BinomialRng
    __del__ = lambda self : None;
    def getType(*args): return _moose.BinomialRng_getType(*args)
    def __get_n(*args): return _moose.BinomialRng___get_n(*args)
    def __set_n(*args): return _moose.BinomialRng___set_n(*args)
    def __get_p(*args): return _moose.BinomialRng___get_p(*args)
    def __set_p(*args): return _moose.BinomialRng___set_p(*args)
    n = _swig_property(_moose.BinomialRng_n_get, _moose.BinomialRng_n_set)
    p = _swig_property(_moose.BinomialRng_p_get, _moose.BinomialRng_p_set)
BinomialRng_swigregister = _moose.BinomialRng_swigregister
BinomialRng_swigregister(BinomialRng)
BinomialRng.className = _moose.cvar.BinomialRng_className

class PoissonRng(RandGenerator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_PoissonRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PoissonRng
    __del__ = lambda self : None;
    def getType(*args): return _moose.PoissonRng_getType(*args)
    mean = _swig_property(_moose.PoissonRng_mean_get, _moose.PoissonRng_mean_set)
PoissonRng_swigregister = _moose.PoissonRng_swigregister
PoissonRng_swigregister(PoissonRng)
PoissonRng.className = _moose.cvar.PoissonRng_className

class NormalRng(RandGenerator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_NormalRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_NormalRng
    __del__ = lambda self : None;
    def getType(*args): return _moose.NormalRng_getType(*args)
    def __get_method(*args): return _moose.NormalRng___get_method(*args)
    def __set_method(*args): return _moose.NormalRng___set_method(*args)
    mean = _swig_property(_moose.NormalRng_mean_get, _moose.NormalRng_mean_set)
    variance = _swig_property(_moose.NormalRng_variance_get, _moose.NormalRng_variance_set)
    method = _swig_property(_moose.NormalRng_method_get, _moose.NormalRng_method_set)
NormalRng_swigregister = _moose.NormalRng_swigregister
NormalRng_swigregister(NormalRng)
NormalRng.className = _moose.cvar.NormalRng_className

class KineticManager(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_KineticManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KineticManager
    __del__ = lambda self : None;
    def getType(*args): return _moose.KineticManager_getType(*args)
    def __get_autoMode(*args): return _moose.KineticManager___get_autoMode(*args)
    def __set_autoMode(*args): return _moose.KineticManager___set_autoMode(*args)
    def __get_stochastic(*args): return _moose.KineticManager___get_stochastic(*args)
    def __set_stochastic(*args): return _moose.KineticManager___set_stochastic(*args)
    def __get_spatial(*args): return _moose.KineticManager___get_spatial(*args)
    def __set_spatial(*args): return _moose.KineticManager___set_spatial(*args)
    def __get_method(*args): return _moose.KineticManager___get_method(*args)
    def __set_method(*args): return _moose.KineticManager___set_method(*args)
    def __get_variableDt(*args): return _moose.KineticManager___get_variableDt(*args)
    def __get_singleParticle(*args): return _moose.KineticManager___get_singleParticle(*args)
    def __get_multiscale(*args): return _moose.KineticManager___get_multiscale(*args)
    def __get_implicit(*args): return _moose.KineticManager___get_implicit(*args)
    def __get_description(*args): return _moose.KineticManager___get_description(*args)
    def __get_recommendedDt(*args): return _moose.KineticManager___get_recommendedDt(*args)
    def __get_eulerError(*args): return _moose.KineticManager___get_eulerError(*args)
    def __set_eulerError(*args): return _moose.KineticManager___set_eulerError(*args)
    autoMode = _swig_property(_moose.KineticManager_autoMode_get, _moose.KineticManager_autoMode_set)
    stochastic = _swig_property(_moose.KineticManager_stochastic_get, _moose.KineticManager_stochastic_set)
    spatial = _swig_property(_moose.KineticManager_spatial_get, _moose.KineticManager_spatial_set)
    method = _swig_property(_moose.KineticManager_method_get, _moose.KineticManager_method_set)
    variableDt = _swig_property(_moose.KineticManager_variableDt_get)
    singleParticle = _swig_property(_moose.KineticManager_singleParticle_get)
    multiscale = _swig_property(_moose.KineticManager_multiscale_get)
    implicit = _swig_property(_moose.KineticManager_implicit_get)
    description = _swig_property(_moose.KineticManager_description_get)
    recommendedDt = _swig_property(_moose.KineticManager_recommendedDt_get)
    eulerError = _swig_property(_moose.KineticManager_eulerError_get, _moose.KineticManager_eulerError_set)
KineticManager_swigregister = _moose.KineticManager_swigregister
KineticManager_swigregister(KineticManager)
KineticManager.className = _moose.cvar.KineticManager_className

class KinCompt(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_KinCompt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KinCompt
    __del__ = lambda self : None;
    def getType(*args): return _moose.KinCompt_getType(*args)
    def __get_volume(*args): return _moose.KinCompt___get_volume(*args)
    def __set_volume(*args): return _moose.KinCompt___set_volume(*args)
    def __get_area(*args): return _moose.KinCompt___get_area(*args)
    def __set_area(*args): return _moose.KinCompt___set_area(*args)
    def __get_perimeter(*args): return _moose.KinCompt___get_perimeter(*args)
    def __set_perimeter(*args): return _moose.KinCompt___set_perimeter(*args)
    def __get_size(*args): return _moose.KinCompt___get_size(*args)
    def __set_size(*args): return _moose.KinCompt___set_size(*args)
    def __get_numDimensions(*args): return _moose.KinCompt___get_numDimensions(*args)
    def __set_numDimensions(*args): return _moose.KinCompt___set_numDimensions(*args)
    volume = _swig_property(_moose.KinCompt_volume_get, _moose.KinCompt_volume_set)
    area = _swig_property(_moose.KinCompt_area_get, _moose.KinCompt_area_set)
    perimeter = _swig_property(_moose.KinCompt_perimeter_get, _moose.KinCompt_perimeter_set)
    size = _swig_property(_moose.KinCompt_size_get, _moose.KinCompt_size_set)
    numDimensions = _swig_property(_moose.KinCompt_numDimensions_get, _moose.KinCompt_numDimensions_set)
KinCompt_swigregister = _moose.KinCompt_swigregister
KinCompt_swigregister(KinCompt)
KinCompt.className = _moose.cvar.KinCompt_className

class Panel(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Panel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Panel
    __del__ = lambda self : None;
    def getType(*args): return _moose.Panel_getType(*args)
    def __get_nPts(*args): return _moose.Panel___get_nPts(*args)
    def __get_nDims(*args): return _moose.Panel___get_nDims(*args)
    def __get_nNeighbors(*args): return _moose.Panel___get_nNeighbors(*args)
    def __get_shapeId(*args): return _moose.Panel___get_shapeId(*args)
    def __get_coords(*args): return _moose.Panel___get_coords(*args)
    nPts = _swig_property(_moose.Panel_nPts_get)
    nDims = _swig_property(_moose.Panel_nDims_get)
    nNeighbors = _swig_property(_moose.Panel_nNeighbors_get)
    shapeId = _swig_property(_moose.Panel_shapeId_get)
    coords = _swig_property(_moose.Panel_coords_get)
Panel_swigregister = _moose.Panel_swigregister
Panel_swigregister(Panel)
Panel.className = _moose.cvar.Panel_className

class DiskPanel(Panel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_DiskPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_DiskPanel
    __del__ = lambda self : None;
    def getType(*args): return _moose.DiskPanel_getType(*args)
DiskPanel_swigregister = _moose.DiskPanel_swigregister
DiskPanel_swigregister(DiskPanel)
DiskPanel.className = _moose.cvar.DiskPanel_className

class CylPanel(Panel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_CylPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_CylPanel
    __del__ = lambda self : None;
    def getType(*args): return _moose.CylPanel_getType(*args)
CylPanel_swigregister = _moose.CylPanel_swigregister
CylPanel_swigregister(CylPanel)
CylPanel.className = _moose.cvar.CylPanel_className

class HemispherePanel(Panel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_HemispherePanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HemispherePanel
    __del__ = lambda self : None;
    def getType(*args): return _moose.HemispherePanel_getType(*args)
HemispherePanel_swigregister = _moose.HemispherePanel_swigregister
HemispherePanel_swigregister(HemispherePanel)
HemispherePanel.className = _moose.cvar.HemispherePanel_className

class SpherePanel(Panel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_SpherePanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SpherePanel
    __del__ = lambda self : None;
    def getType(*args): return _moose.SpherePanel_getType(*args)
SpherePanel_swigregister = _moose.SpherePanel_swigregister
SpherePanel_swigregister(SpherePanel)
SpherePanel.className = _moose.cvar.SpherePanel_className

class TriPanel(Panel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_TriPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_TriPanel
    __del__ = lambda self : None;
    def getType(*args): return _moose.TriPanel_getType(*args)
TriPanel_swigregister = _moose.TriPanel_swigregister
TriPanel_swigregister(TriPanel)
TriPanel.className = _moose.cvar.TriPanel_className

class RectPanel(Panel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_RectPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_RectPanel
    __del__ = lambda self : None;
    def getType(*args): return _moose.RectPanel_getType(*args)
RectPanel_swigregister = _moose.RectPanel_swigregister
RectPanel_swigregister(RectPanel)
RectPanel.className = _moose.cvar.RectPanel_className

class Surface(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Surface(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Surface
    __del__ = lambda self : None;
    def getType(*args): return _moose.Surface_getType(*args)
    def __get_volume(*args): return _moose.Surface___get_volume(*args)
    volume = _swig_property(_moose.Surface_volume_get)
Surface_swigregister = _moose.Surface_swigregister
Surface_swigregister(Surface)
Surface.className = _moose.cvar.Surface_className

class Geometry(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Geometry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Geometry
    __del__ = lambda self : None;
    def getType(*args): return _moose.Geometry_getType(*args)
    def __get_epsilon(*args): return _moose.Geometry___get_epsilon(*args)
    def __set_epsilon(*args): return _moose.Geometry___set_epsilon(*args)
    def __get_neighdist(*args): return _moose.Geometry___get_neighdist(*args)
    def __set_neighdist(*args): return _moose.Geometry___set_neighdist(*args)
    epsilon = _swig_property(_moose.Geometry_epsilon_get, _moose.Geometry_epsilon_set)
    neighdist = _swig_property(_moose.Geometry_neighdist_get, _moose.Geometry_neighdist_set)
Geometry_swigregister = _moose.Geometry_swigregister
Geometry_swigregister(Geometry)
Geometry.className = _moose.cvar.Geometry_className

class Adaptor(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_Adaptor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Adaptor
    __del__ = lambda self : None;
    def getType(*args): return _moose.Adaptor_getType(*args)
    def __get_inputOffset(*args): return _moose.Adaptor___get_inputOffset(*args)
    def __set_inputOffset(*args): return _moose.Adaptor___set_inputOffset(*args)
    def __get_outputOffset(*args): return _moose.Adaptor___get_outputOffset(*args)
    def __set_outputOffset(*args): return _moose.Adaptor___set_outputOffset(*args)
    def __get_scale(*args): return _moose.Adaptor___get_scale(*args)
    def __set_scale(*args): return _moose.Adaptor___set_scale(*args)
    def __get_output(*args): return _moose.Adaptor___get_output(*args)
    inputOffset = _swig_property(_moose.Adaptor_inputOffset_get, _moose.Adaptor_inputOffset_set)
    outputOffset = _swig_property(_moose.Adaptor_outputOffset_get, _moose.Adaptor_outputOffset_set)
    scale = _swig_property(_moose.Adaptor_scale_get, _moose.Adaptor_scale_set)
    output = _swig_property(_moose.Adaptor_output_get)
Adaptor_swigregister = _moose.Adaptor_swigregister
Adaptor_swigregister(Adaptor)
Adaptor.className = _moose.cvar.Adaptor_className

class SigNeur(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_SigNeur(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SigNeur
    __del__ = lambda self : None;
    def getType(*args): return _moose.SigNeur_getType(*args)
    def __get_cellProto(*args): return _moose.SigNeur___get_cellProto(*args)
    def __set_cellProto(*args): return _moose.SigNeur___set_cellProto(*args)
    def __get_spineProto(*args): return _moose.SigNeur___get_spineProto(*args)
    def __set_spineProto(*args): return _moose.SigNeur___set_spineProto(*args)
    def __get_dendProto(*args): return _moose.SigNeur___get_dendProto(*args)
    def __set_dendProto(*args): return _moose.SigNeur___set_dendProto(*args)
    def __get_somaProto(*args): return _moose.SigNeur___get_somaProto(*args)
    def __set_somaProto(*args): return _moose.SigNeur___set_somaProto(*args)
    def __get_cell(*args): return _moose.SigNeur___get_cell(*args)
    def __get_spine(*args): return _moose.SigNeur___get_spine(*args)
    def __get_dend(*args): return _moose.SigNeur___get_dend(*args)
    def __get_soma(*args): return _moose.SigNeur___get_soma(*args)
    def __get_cellMethod(*args): return _moose.SigNeur___get_cellMethod(*args)
    def __set_cellMethod(*args): return _moose.SigNeur___set_cellMethod(*args)
    def __get_spineMethod(*args): return _moose.SigNeur___get_spineMethod(*args)
    def __set_spineMethod(*args): return _moose.SigNeur___set_spineMethod(*args)
    def __get_dendMethod(*args): return _moose.SigNeur___get_dendMethod(*args)
    def __set_dendMethod(*args): return _moose.SigNeur___set_dendMethod(*args)
    def __get_somaMethod(*args): return _moose.SigNeur___get_somaMethod(*args)
    def __set_somaMethod(*args): return _moose.SigNeur___set_somaMethod(*args)
    def __get_sigDt(*args): return _moose.SigNeur___get_sigDt(*args)
    def __set_sigDt(*args): return _moose.SigNeur___set_sigDt(*args)
    def __get_cellDt(*args): return _moose.SigNeur___get_cellDt(*args)
    def __set_cellDt(*args): return _moose.SigNeur___set_cellDt(*args)
    def __get_Dscale(*args): return _moose.SigNeur___get_Dscale(*args)
    def __set_Dscale(*args): return _moose.SigNeur___set_Dscale(*args)
    def __get_lambda(*args): return _moose.SigNeur___get_lambda(*args)
    def __set_lambda(*args): return _moose.SigNeur___set_lambda(*args)
    def __get_parallelMode(*args): return _moose.SigNeur___get_parallelMode(*args)
    def __set_parallelMode(*args): return _moose.SigNeur___set_parallelMode(*args)
    def __get_updateStep(*args): return _moose.SigNeur___get_updateStep(*args)
    def __set_updateStep(*args): return _moose.SigNeur___set_updateStep(*args)
    def __get_calciumScale(*args): return _moose.SigNeur___get_calciumScale(*args)
    def __set_calciumScale(*args): return _moose.SigNeur___set_calciumScale(*args)
    def __get_dendInclude(*args): return _moose.SigNeur___get_dendInclude(*args)
    def __set_dendInclude(*args): return _moose.SigNeur___set_dendInclude(*args)
    def __get_dendExclude(*args): return _moose.SigNeur___get_dendExclude(*args)
    def __set_dendExclude(*args): return _moose.SigNeur___set_dendExclude(*args)
    cellProto = _swig_property(_moose.SigNeur_cellProto_get, _moose.SigNeur_cellProto_set)
    spineProto = _swig_property(_moose.SigNeur_spineProto_get, _moose.SigNeur_spineProto_set)
    dendProto = _swig_property(_moose.SigNeur_dendProto_get, _moose.SigNeur_dendProto_set)
    somaProto = _swig_property(_moose.SigNeur_somaProto_get, _moose.SigNeur_somaProto_set)
    cell = _swig_property(_moose.SigNeur_cell_get)
    spine = _swig_property(_moose.SigNeur_spine_get)
    dend = _swig_property(_moose.SigNeur_dend_get)
    soma = _swig_property(_moose.SigNeur_soma_get)
    cellMethod = _swig_property(_moose.SigNeur_cellMethod_get, _moose.SigNeur_cellMethod_set)
    spineMethod = _swig_property(_moose.SigNeur_spineMethod_get, _moose.SigNeur_spineMethod_set)
    dendMethod = _swig_property(_moose.SigNeur_dendMethod_get, _moose.SigNeur_dendMethod_set)
    somaMethod = _swig_property(_moose.SigNeur_somaMethod_get, _moose.SigNeur_somaMethod_set)
    sigDt = _swig_property(_moose.SigNeur_sigDt_get, _moose.SigNeur_sigDt_set)
    cellDt = _swig_property(_moose.SigNeur_cellDt_get, _moose.SigNeur_cellDt_set)
    Dscale = _swig_property(_moose.SigNeur_Dscale_get, _moose.SigNeur_Dscale_set)
    lambda_ = _swig_property(_moose.SigNeur_lambda__get, _moose.SigNeur_lambda__set)
    parallelMode = _swig_property(_moose.SigNeur_parallelMode_get, _moose.SigNeur_parallelMode_set)
    updateStep = _swig_property(_moose.SigNeur_updateStep_get, _moose.SigNeur_updateStep_set)
    calciumScale = _swig_property(_moose.SigNeur_calciumScale_get, _moose.SigNeur_calciumScale_set)
    dendInclude = _swig_property(_moose.SigNeur_dendInclude_get, _moose.SigNeur_dendInclude_set)
    dendExclude = _swig_property(_moose.SigNeur_dendExclude_get, _moose.SigNeur_dendExclude_set)
SigNeur_swigregister = _moose.SigNeur_swigregister
SigNeur_swigregister(SigNeur)
SigNeur.className = _moose.cvar.SigNeur_className

class AscFile(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_AscFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_AscFile
    __del__ = lambda self : None;
    def getType(*args): return _moose.AscFile_getType(*args)
    def __get_fileName(*args): return _moose.AscFile___get_fileName(*args)
    def __set_fileName(*args): return _moose.AscFile___set_fileName(*args)
    def __get_appendFlag(*args): return _moose.AscFile___get_appendFlag(*args)
    def __set_appendFlag(*args): return _moose.AscFile___set_appendFlag(*args)
    fileName = _swig_property(_moose.AscFile_fileName_get, _moose.AscFile_fileName_set)
    appendFlag = _swig_property(_moose.AscFile_appendFlag_get, _moose.AscFile_appendFlag_set)
AscFile_swigregister = _moose.AscFile_swigregister
AscFile_swigregister(AscFile)
AscFile.className = _moose.cvar.AscFile_className

class DifShell(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_DifShell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_DifShell
    __del__ = lambda self : None;
    def getType(*args): return _moose.DifShell_getType(*args)
    def __get_C(*args): return _moose.DifShell___get_C(*args)
    def __get_Ceq(*args): return _moose.DifShell___get_Ceq(*args)
    def __set_Ceq(*args): return _moose.DifShell___set_Ceq(*args)
    def __get_D(*args): return _moose.DifShell___get_D(*args)
    def __set_D(*args): return _moose.DifShell___set_D(*args)
    def __get_valence(*args): return _moose.DifShell___get_valence(*args)
    def __set_valence(*args): return _moose.DifShell___set_valence(*args)
    def __get_leak(*args): return _moose.DifShell___get_leak(*args)
    def __set_leak(*args): return _moose.DifShell___set_leak(*args)
    def __get_shapeMode(*args): return _moose.DifShell___get_shapeMode(*args)
    def __set_shapeMode(*args): return _moose.DifShell___set_shapeMode(*args)
    def __get_length(*args): return _moose.DifShell___get_length(*args)
    def __set_length(*args): return _moose.DifShell___set_length(*args)
    def __get_diameter(*args): return _moose.DifShell___get_diameter(*args)
    def __set_diameter(*args): return _moose.DifShell___set_diameter(*args)
    def __get_thickness(*args): return _moose.DifShell___get_thickness(*args)
    def __set_thickness(*args): return _moose.DifShell___set_thickness(*args)
    def __get_volume(*args): return _moose.DifShell___get_volume(*args)
    def __set_volume(*args): return _moose.DifShell___set_volume(*args)
    def __get_outerArea(*args): return _moose.DifShell___get_outerArea(*args)
    def __set_outerArea(*args): return _moose.DifShell___set_outerArea(*args)
    def __get_innerArea(*args): return _moose.DifShell___get_innerArea(*args)
    def __set_innerArea(*args): return _moose.DifShell___set_innerArea(*args)
    C = _swig_property(_moose.DifShell_C_get)
    Ceq = _swig_property(_moose.DifShell_Ceq_get, _moose.DifShell_Ceq_set)
    D = _swig_property(_moose.DifShell_D_get, _moose.DifShell_D_set)
    valence = _swig_property(_moose.DifShell_valence_get, _moose.DifShell_valence_set)
    leak = _swig_property(_moose.DifShell_leak_get, _moose.DifShell_leak_set)
    shapeMode = _swig_property(_moose.DifShell_shapeMode_get, _moose.DifShell_shapeMode_set)
    length = _swig_property(_moose.DifShell_length_get, _moose.DifShell_length_set)
    diameter = _swig_property(_moose.DifShell_diameter_get, _moose.DifShell_diameter_set)
    thickness = _swig_property(_moose.DifShell_thickness_get, _moose.DifShell_thickness_set)
    volume = _swig_property(_moose.DifShell_volume_get, _moose.DifShell_volume_set)
    outerArea = _swig_property(_moose.DifShell_outerArea_get, _moose.DifShell_outerArea_set)
    innerArea = _swig_property(_moose.DifShell_innerArea_get, _moose.DifShell_innerArea_set)
DifShell_swigregister = _moose.DifShell_swigregister
DifShell_swigregister(DifShell)
DifShell.className = _moose.cvar.DifShell_className

class GssaStoich(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_GssaStoich(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GssaStoich
    __del__ = lambda self : None;
    def getType(*args): return _moose.GssaStoich_getType(*args)
    def __get_method(*args): return _moose.GssaStoich___get_method(*args)
    def __set_method(*args): return _moose.GssaStoich___set_method(*args)
    def __get_path(*args): return _moose.GssaStoich___get_path(*args)
    def __set_path(*args): return _moose.GssaStoich___set_path(*args)
    method = _swig_property(_moose.GssaStoich_method_get, _moose.GssaStoich_method_set)
    path = _swig_property(_moose.GssaStoich_path_get, _moose.GssaStoich_path_set)
GssaStoich_swigregister = _moose.GssaStoich_swigregister
GssaStoich_swigregister(GssaStoich)
GssaStoich.className = _moose.cvar.GssaStoich_className

class TauPump(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_TauPump(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_TauPump
    __del__ = lambda self : None;
    def getType(*args): return _moose.TauPump_getType(*args)
    def __get_pumpRate(*args): return _moose.TauPump___get_pumpRate(*args)
    def __set_pumpRate(*args): return _moose.TauPump___set_pumpRate(*args)
    def __get_eqConc(*args): return _moose.TauPump___get_eqConc(*args)
    def __set_eqConc(*args): return _moose.TauPump___set_eqConc(*args)
    def __get_TA(*args): return _moose.TauPump___get_TA(*args)
    def __set_TA(*args): return _moose.TauPump___set_TA(*args)
    def __get_TB(*args): return _moose.TauPump___get_TB(*args)
    def __set_TB(*args): return _moose.TauPump___set_TB(*args)
    def __get_TC(*args): return _moose.TauPump___get_TC(*args)
    def __set_TC(*args): return _moose.TauPump___set_TC(*args)
    def __get_TV(*args): return _moose.TauPump___get_TV(*args)
    def __set_TV(*args): return _moose.TauPump___set_TV(*args)
    pumpRate = _swig_property(_moose.TauPump_pumpRate_get, _moose.TauPump_pumpRate_set)
    eqConc = _swig_property(_moose.TauPump_eqConc_get, _moose.TauPump_eqConc_set)
    TA = _swig_property(_moose.TauPump_TA_get, _moose.TauPump_TA_set)
    TB = _swig_property(_moose.TauPump_TB_get, _moose.TauPump_TB_set)
    TC = _swig_property(_moose.TauPump_TC_get, _moose.TauPump_TC_set)
    TV = _swig_property(_moose.TauPump_TV_get, _moose.TauPump_TV_set)
TauPump_swigregister = _moose.TauPump_swigregister
TauPump_swigregister(TauPump)
TauPump.className = _moose.cvar.TauPump_className

class TimeTable(PyMooseBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _moose.new_TimeTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_TimeTable
    __del__ = lambda self : None;
    def getType(*args): return _moose.TimeTable_getType(*args)
    def __get_maxTime(*args): return _moose.TimeTable___get_maxTime(*args)
    def __set_maxTime(*args): return _moose.TimeTable___set_maxTime(*args)
    def __get_tableVector(*args): return _moose.TimeTable___get_tableVector(*args)
    def __set_tableVector(*args): return _moose.TimeTable___set_tableVector(*args)
    def __get_tableSize(*args): return _moose.TimeTable___get_tableSize(*args)
    maxTime = _swig_property(_moose.TimeTable_maxTime_get, _moose.TimeTable_maxTime_set)
    tableVector = _swig_property(_moose.TimeTable_tableVector_get)
    tableSize = _swig_property(_moose.TimeTable_tableSize_get)
TimeTable_swigregister = _moose.TimeTable_swigregister
TimeTable_swigregister(TimeTable)
TimeTable.className = _moose.cvar.TimeTable_className



