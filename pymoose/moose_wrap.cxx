/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.33
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_THREADS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE

#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Python.h has to appear first */
#include <Python.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic CAPI SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "3"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The swig conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old swig versions, you usually write code as:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit as:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   that seems to be the same, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   requires also to SWIG_ConvertPtr to return new result values, as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   swig errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()


 */
#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))


/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif




#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif
/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif


/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif


/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);
    PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_Format(PyExc_RuntimeError, mesg);
  }
}



#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif


/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(ptr, type, flags)
#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         PySwigClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, (char *) msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, (char*) name, obj);
  Py_DECREF(obj);                            
}

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* PySwigClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
} PySwigClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  PySwigClientData *data = (PySwigClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  PySwigClientData *data = desc ? (PySwigClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME PySwigClientData * 
PySwigClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    PySwigClientData *data = (PySwigClientData *)malloc(sizeof(PySwigClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    return data;
  }
}

SWIGRUNTIME void 
PySwigClientData_Del(PySwigClientData* data)
{
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== PySwigObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
} PySwigObject;

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0) {
      PyObject *ofmt = PyString_FromString(fmt);
      if (ofmt) {
	res = PyString_Format(ofmt,args);
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
PySwigObject_repr(PySwigObject *v)
#else
PySwigObject_repr(PySwigObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *hex = PySwigObject_hex(v);    
  PyObject *repr = PyString_FromFormat("<Swig Object of type '%s' at 0x%s>", name, PyString_AsString(hex));
  Py_DECREF(hex);
  if (v->next) {
#ifdef METH_NOARGS
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next);
#else
    PyObject *nrep = PySwigObject_repr((PySwigObject *)v->next, args);
#endif
    PyString_ConcatAndDel(&repr,nrep);
  }
  return repr;  
}

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
#ifdef METH_NOARGS
  PyObject *repr = PySwigObject_repr(v);
#else
  PyObject *repr = PySwigObject_repr(v, NULL);
#endif
  if (repr) {
    fputs(PyString_AsString(repr), fp);
    Py_DECREF(repr);
    return 0; 
  } else {
    return 1; 
  }
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->ty->name, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

SWIGRUNTIME PyTypeObject* _PySwigObject_type(void);

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigObject_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type())
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
PySwigObject_dealloc(PyObject *v)
{
  PySwigObject *sobj = (PySwigObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own) {
    swig_type_info *ty = sobj->ty;
    PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporal object to carry the destroy operation */
	PyObject *tmp = PySwigObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } else {
      const char *name = SWIG_TypePrettyName(ty);
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", name);
#endif
    }
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
PySwigObject_append(PyObject* v, PyObject* next)
{
  PySwigObject *sobj = (PySwigObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!PySwigObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
PySwigObject_next(PyObject* v)
#else
PySwigObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_disown(PyObject *v)
#else
PySwigObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
PySwigObject_acquire(PyObject *v)
#else
PySwigObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  PySwigObject *sobj = (PySwigObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
PySwigObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#else
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      PySwigObject *sobj = (PySwigObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v);
	} else {
	  PySwigObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  PySwigObject_acquire(v,args);
	} else {
	  PySwigObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_NOARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)PySwigObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)PySwigObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)PySwigObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)PySwigObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)PySwigObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)PySwigObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
PySwigObject_getattr(PySwigObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
_PySwigObject_type(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject pyswigobject_type;  
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */
	(char *)"PySwigObject",		    /* tp_name */
	sizeof(PySwigObject),		    /* tp_basicsize */
	0,			            /* tp_itemsize */
	(destructor)PySwigObject_dealloc,   /* tp_dealloc */
	(printfunc)PySwigObject_print,	    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
	(getattrfunc)PySwigObject_getattr,  /* tp_getattr */ 
#else
	(getattrfunc)0,			    /* tp_getattr */ 
#endif
	(setattrfunc)0,			    /* tp_setattr */ 
	(cmpfunc)PySwigObject_compare,	    /* tp_compare */ 
	(reprfunc)PySwigObject_repr,	    /* tp_repr */    
	&PySwigObject_as_number,	    /* tp_as_number */
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */
	(hashfunc)0,			    /* tp_hash */
	(ternaryfunc)0,			    /* tp_call */
	(reprfunc)PySwigObject_str,	    /* tp_str */
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigobject_doc, 	            /* tp_doc */        
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	swigobject_methods,		    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0,	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigobject_type = tmp;
    pyswigobject_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_New(void *ptr, swig_type_info *ty, int own)
{
  PySwigObject *sobj = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->ty->name);
  } else {
    return PyString_FromString(v->ty->name);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* _PySwigPacked_type(void);

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = _PySwigPacked_type();
  return type;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == _PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

SWIGRUNTIME void
PySwigPacked_dealloc(PyObject *v)
{
  if (PySwigPacked_Check(v)) {
    PySwigPacked *sobj = (PySwigPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
_PySwigPacked_type(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type;
  static int type_init = 0;  
  if (!type_init) {
    const PyTypeObject tmp
      = {
	PyObject_HEAD_INIT(NULL)
	0,				    /* ob_size */	
	(char *)"PySwigPacked",		    /* tp_name */	
	sizeof(PySwigPacked),		    /* tp_basicsize */	
	0,				    /* tp_itemsize */	
	(destructor)PySwigPacked_dealloc,   /* tp_dealloc */	
	(printfunc)PySwigPacked_print,	    /* tp_print */   	
	(getattrfunc)0,			    /* tp_getattr */ 	
	(setattrfunc)0,			    /* tp_setattr */ 	
	(cmpfunc)PySwigPacked_compare,	    /* tp_compare */ 	
	(reprfunc)PySwigPacked_repr,	    /* tp_repr */    	
	0,	                            /* tp_as_number */	
	0,				    /* tp_as_sequence */
	0,				    /* tp_as_mapping */	
	(hashfunc)0,			    /* tp_hash */	
	(ternaryfunc)0,			    /* tp_call */	
	(reprfunc)PySwigPacked_str,	    /* tp_str */	
	PyObject_GenericGetAttr,            /* tp_getattro */
	0,				    /* tp_setattro */
	0,		                    /* tp_as_buffer */
	Py_TPFLAGS_DEFAULT,	            /* tp_flags */
	swigpacked_doc, 	            /* tp_doc */
	0,                                  /* tp_traverse */
	0,                                  /* tp_clear */
	0,                                  /* tp_richcompare */
	0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
	0,                                  /* tp_iter */
	0,                                  /* tp_iternext */
	0,		                    /* tp_methods */ 
	0,			            /* tp_members */
	0,				    /* tp_getset */	    	
	0,			            /* tp_base */	        
	0,				    /* tp_dict */	    	
	0,				    /* tp_descr_get */  	
	0,				    /* tp_descr_set */  	
	0,				    /* tp_dictoffset */ 	
	0,				    /* tp_init */	    	
	0,				    /* tp_alloc */	    	
	0,			            /* tp_new */	    	
	0, 	                            /* tp_free */	   
        0,                                  /* tp_is_gc */  
	0,				    /* tp_bases */   
	0,				    /* tp_mro */
	0,				    /* tp_cache */   
 	0,				    /* tp_subclasses */
	0,				    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
	0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
	0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
    pyswigpacked_type = tmp;
    pyswigpacked_type.ob_type = &PyType_Type;
    type_init = 1;
  }
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  PySwigPacked *sobj = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (PySwigPacked_Check(obj)) {
    PySwigPacked *sobj = (PySwigPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
  return PyString_FromString("this");
}

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  static PyObject *SWIG_STATIC_POINTER(swig_this) = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

SWIGRUNTIME PySwigObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  if (PySwigObject_Check(pyobj)) {
    return (PySwigObject *) pyobj;
  } else {
    PyObject *obj = 0;
#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
    if (PyInstance_Check(pyobj)) {
      obj = _PyInstance_Lookup(pyobj, SWIG_This());      
    } else {
      PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
      } else {
#ifdef PyWeakref_CheckProxy
	if (PyWeakref_CheckProxy(pyobj)) {
	  PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	  return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
	}
#endif
	obj = PyObject_GetAttr(pyobj,SWIG_This());
	if (obj) {
	  Py_DECREF(obj);
	} else {
	  if (PyErr_Occurred()) PyErr_Clear();
	  return 0;
	}
      }
    }
#else
    obj = PyObject_GetAttr(pyobj,SWIG_This());
    if (obj) {
      Py_DECREF(obj);
    } else {
      if (PyErr_Occurred()) PyErr_Clear();
      return 0;
    }
#endif
    if (obj && !PySwigObject_Check(obj)) {
      /* a PyObject is called 'this', try to get the 'real this'
	 PySwigObject from it */ 
      return SWIG_Python_GetSwigThis(obj);
    }
    return (PySwigObject *)obj;
  }
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own) {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  if (!obj) return SWIG_ERROR;
  if (obj == Py_None) {
    if (ptr) *ptr = 0;
    return SWIG_OK;
  } else {
    PySwigObject *sobj = SWIG_Python_GetSwigThis(obj);
    while (sobj) {
      void *vptr = sobj->ptr;
      if (ty) {
	swig_type_info *to = sobj->ty;
	if (to == ty) {
	  /* no type cast needed */
	  if (ptr) *ptr = vptr;
	  break;
	} else {
	  swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
	  if (!tc) {
	    sobj = (PySwigObject *)sobj->next;
	  } else {
	    if (ptr) *ptr = SWIG_TypeCast(tc,vptr);
	    break;
	  }
	}
      } else {
	if (ptr) *ptr = vptr;
	break;
      }
    }
    if (sobj) {
      if (own) *own = sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
	sobj->own = 0;
      }
      return SWIG_OK;
    } else {
      int res = SWIG_ERROR;
      if (flags & SWIG_POINTER_IMPLICIT_CONV) {
	PySwigClientData *data = ty ? (PySwigClientData *) ty->clientdata : 0;
	if (data && !data->implicitconv) {
	  PyObject *klass = data->klass;
	  if (klass) {
	    PyObject *impconv;
	    data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
	    impconv = SWIG_Python_CallFunctor(klass, obj);
	    data->implicitconv = 0;
	    if (PyErr_Occurred()) {
	      PyErr_Clear();
	      impconv = 0;
	    }
	    if (impconv) {
	      PySwigObject *iobj = SWIG_Python_GetSwigThis(impconv);
	      if (iobj) {
		void *vptr;
		res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
		if (SWIG_IsOK(res)) {
		  if (ptr) {
		    *ptr = vptr;
		    /* transfer the ownership to 'ptr' */
		    iobj->own = 0;
		    res = SWIG_AddCast(res);
		    res = SWIG_AddNewMask(res);
		  } else {
		    res = SWIG_AddCast(res);		    
		  }
		}
	      }
	      Py_DECREF(impconv);
	    }
	  }
	}
      }
      return res;
    }
  }
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc) {
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
      if (!desc) return SWIG_ERROR;
    }
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (!tc) return SWIG_ERROR;
      *ptr = SWIG_TypeCast(tc,vptr);
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = PySwigPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, whitout calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(PySwigClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
    PyObject *dict = PyDict_New();
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst;
  PyObject *dict = PyDict_New();
  PyDict_SetItem(dict, SWIG_This(), swig_this);
  inst = PyInstance_NewRaw(data->newargs, dict);
  Py_DECREF(dict);
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args,(char*)"swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    PySwigObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      PySwigObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  if (!ptr) {
    return SWIG_Py_Void();
  } else {
    int own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
    PyObject *robj = PySwigObject_New(ptr, type, own);
    PySwigClientData *clientdata = type ? (PySwigClientData *)(type->clientdata) : 0;
    if (clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
      PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
      if (inst) {
	Py_DECREF(robj);
	robj = inst;
      }
    }
    return robj;
  }
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? PySwigPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
SWIG_Python_DestroyModule(void *vptr)
{
  swig_module_info *swig_module = (swig_module_info *) vptr;
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      PySwigClientData *data = (PySwigClientData *) ty->clientdata;
      if (data) PySwigClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = PyString_FromString(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
  } else {
    swig_module_info *swig_module = SWIG_Python_GetModule();
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  PySwigObject *v = (PySwigObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : (char*)"";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}


#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Binomial swig_types[0]
#define SWIGTYPE_p_Cinfo swig_types[1]
#define SWIGTYPE_p_Conn swig_types[2]
#define SWIGTYPE_p_Element swig_types[3]
#define SWIGTYPE_p_Exponential swig_types[4]
#define SWIGTYPE_p_Gamma swig_types[5]
#define SWIGTYPE_p_Id swig_types[6]
#define SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t swig_types[7]
#define SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_int_t swig_types[8]
#define SWIGTYPE_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t swig_types[9]
#define SWIGTYPE_p_Nid swig_types[10]
#define SWIGTYPE_p_Normal swig_types[11]
#define SWIGTYPE_p_Poisson swig_types[12]
#define SWIGTYPE_p_Probability swig_types[13]
#define SWIGTYPE_p_allocator_type swig_types[14]
#define SWIGTYPE_p_char swig_types[15]
#define SWIGTYPE_p_difference_type swig_types[16]
#define SWIGTYPE_p_m_Poisson__f___double swig_types[17]
#define SWIGTYPE_p_p_PyObject swig_types[18]
#define SWIGTYPE_p_pymoose__Adaptor swig_types[19]
#define SWIGTYPE_p_pymoose__AscFile swig_types[20]
#define SWIGTYPE_p_pymoose__BinSynchan swig_types[21]
#define SWIGTYPE_p_pymoose__BinomialRng swig_types[22]
#define SWIGTYPE_p_pymoose__CaConc swig_types[23]
#define SWIGTYPE_p_pymoose__Cell swig_types[24]
#define SWIGTYPE_p_pymoose__Class swig_types[25]
#define SWIGTYPE_p_pymoose__ClockJob swig_types[26]
#define SWIGTYPE_p_pymoose__ClockTick swig_types[27]
#define SWIGTYPE_p_pymoose__Compartment swig_types[28]
#define SWIGTYPE_p_pymoose__CylPanel swig_types[29]
#define SWIGTYPE_p_pymoose__DifShell swig_types[30]
#define SWIGTYPE_p_pymoose__DiskPanel swig_types[31]
#define SWIGTYPE_p_pymoose__Enzyme swig_types[32]
#define SWIGTYPE_p_pymoose__ExponentialRng swig_types[33]
#define SWIGTYPE_p_pymoose__GammaRng swig_types[34]
#define SWIGTYPE_p_pymoose__Geometry swig_types[35]
#define SWIGTYPE_p_pymoose__GssaStoich swig_types[36]
#define SWIGTYPE_p_pymoose__HHChannel swig_types[37]
#define SWIGTYPE_p_pymoose__HHGate swig_types[38]
#define SWIGTYPE_p_pymoose__HSolve swig_types[39]
#define SWIGTYPE_p_pymoose__HemispherePanel swig_types[40]
#define SWIGTYPE_p_pymoose__InterpolationTable swig_types[41]
#define SWIGTYPE_p_pymoose__KinCompt swig_types[42]
#define SWIGTYPE_p_pymoose__KineticHub swig_types[43]
#define SWIGTYPE_p_pymoose__KineticManager swig_types[44]
#define SWIGTYPE_p_pymoose__Kintegrator swig_types[45]
#define SWIGTYPE_p_pymoose__MathFunc swig_types[46]
#define SWIGTYPE_p_pymoose__Mg_block swig_types[47]
#define SWIGTYPE_p_pymoose__Molecule swig_types[48]
#define SWIGTYPE_p_pymoose__Nernst swig_types[49]
#define SWIGTYPE_p_pymoose__NeuroScan swig_types[50]
#define SWIGTYPE_p_pymoose__Neutral swig_types[51]
#define SWIGTYPE_p_pymoose__NormalRng swig_types[52]
#define SWIGTYPE_p_pymoose__Panel swig_types[53]
#define SWIGTYPE_p_pymoose__PoissonRng swig_types[54]
#define SWIGTYPE_p_pymoose__PulseGen swig_types[55]
#define SWIGTYPE_p_pymoose__PyMooseBase swig_types[56]
#define SWIGTYPE_p_pymoose__PyMooseContext swig_types[57]
#define SWIGTYPE_p_pymoose__RandGenerator swig_types[58]
#define SWIGTYPE_p_pymoose__RandomSpike swig_types[59]
#define SWIGTYPE_p_pymoose__Reaction swig_types[60]
#define SWIGTYPE_p_pymoose__RectPanel swig_types[61]
#define SWIGTYPE_p_pymoose__SigNeur swig_types[62]
#define SWIGTYPE_p_pymoose__SpherePanel swig_types[63]
#define SWIGTYPE_p_pymoose__SpikeGen swig_types[64]
#define SWIGTYPE_p_pymoose__StochSynchan swig_types[65]
#define SWIGTYPE_p_pymoose__Stoich swig_types[66]
#define SWIGTYPE_p_pymoose__Surface swig_types[67]
#define SWIGTYPE_p_pymoose__SynChan swig_types[68]
#define SWIGTYPE_p_pymoose__Table swig_types[69]
#define SWIGTYPE_p_pymoose__TableIterator swig_types[70]
#define SWIGTYPE_p_pymoose__TauPump swig_types[71]
#define SWIGTYPE_p_pymoose__TimeTable swig_types[72]
#define SWIGTYPE_p_pymoose__TriPanel swig_types[73]
#define SWIGTYPE_p_pymoose__UniformRng swig_types[74]
#define SWIGTYPE_p_size_type swig_types[75]
#define SWIGTYPE_p_std__invalid_argument swig_types[76]
#define SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t swig_types[77]
#define SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__allocator_type swig_types[78]
#define SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type swig_types[79]
#define SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t swig_types[80]
#define SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type swig_types[81]
#define SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t swig_types[82]
#define SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t__allocator_type swig_types[83]
#define SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t swig_types[84]
#define SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type swig_types[85]
#define SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t swig_types[86]
#define SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t__allocator_type swig_types[87]
#define SWIGTYPE_p_swig__PySwigIterator swig_types[88]
#define SWIGTYPE_p_value_type swig_types[89]
#define SWIGTYPE_p_void swig_types[90]
static swig_type_info *swig_types[92];
static swig_module_info swig_module = {swig_types, 91, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif

/*-----------------------------------------------
              @(target):= _moose.so
  ------------------------------------------------*/
#define SWIG_init    init_moose

#define SWIG_name    "_moose"

#define SWIGVERSION 0x010333 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class PyObject_ptr {
  protected:
    PyObject *_obj;

  public:
    PyObject_ptr() :_obj(0)
    {
    }

    PyObject_ptr(const PyObject_ptr& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    PyObject_ptr(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) Py_XINCREF(_obj);
    }
    
    PyObject_ptr & operator=(const PyObject_ptr& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~PyObject_ptr() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct PyObject_var : PyObject_ptr {
    PyObject_var(PyObject* obj = 0) : PyObject_ptr(obj, false) { }
    
    PyObject_var & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <string>


#include <iostream>


#include <stdexcept>


  
#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  define SWIG_STD_NOASSIGN_STL
#  define SWIG_STD_NOINSERT_TEMPLATE_STL
#  define SWIG_STD_NOITERATOR_TRAITS_STL
#endif

#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif




#include <string>
#include <stdexcept>

  
namespace swig {
  struct stop_iteration {
  };

  struct PySwigIterator {
  private:
    PyObject_ptr _seq;

  protected:
    PySwigIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~PySwigIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual PySwigIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual PySwigIterator *decr(size_t n = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const PySwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const PySwigIterator &x) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual PySwigIterator *copy() const = 0;

    PyObject *next()
    {
      PyObject *obj = value();
      incr();
      return obj;
    }

    PyObject *previous()
    {
      decr();
      return value();
    }

    PySwigIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const PySwigIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const PySwigIterator& x) const
    {
      return ! operator==(x);
    }
      
    PySwigIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    PySwigIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    PySwigIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    PySwigIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const PySwigIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static int init = 0;
      static swig_type_info* desc = 0;
      if (!init) {
	desc = SWIG_TypeQuery("swig::PySwigIterator *");
	init = 1;
      }	
      return desc;
    }    
  };
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t  (ptrdiff_t value)
{    
  return SWIG_From_long  (static_cast< long >(value));
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t (PyObject * obj, ptrdiff_t *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< ptrdiff_t >(v);
  return res;
}


#include <stdexcept>


#include <algorithm>


#include <vector>


	#define SWIG_FILE_WITH_INIT
	#include "../basecode/header.h"
	#include "../basecode/moose.h"
	#include "PyMooseContext.h"
	#include "PyMooseBase.h"
	#include "Neutral.h"
	#include "Class.h"
	#include "Cell.h"
	#include "Compartment.h"
	#include "Tick.h" 
	#include "ClockJob.h" 
	#include "Interpol.h"
	#include "TableIterator.h"
	#include "Table.h"
	#include "SynChan.h"
	#include "BinSynchan.h"
	#include "StochSynchan.h"
	#include "SpikeGen.h"
	#include "PulseGen.h"
	#include "RandomSpike.h"
	#include "Nernst.h"
	#include "CaConc.h"
	#include "HHGate.h"
	#include "HHChannel.h"
	#include "Mg_block.h"
	#include "Compartment.h"
	#include "NeuroScan.h"
	#include "HSolve.h"
	#include "Enzyme.h"
	#include "KineticHub.h"		
	#include "Kintegrator.h"
	#include "MathFunc.h"
	#include "Molecule.h"
	#include "Reaction.h"
	#include "Stoich.h"
	#include "KineticManager.h"
	#include "KinCompt.h"
	#include "Panel.h"
	#include "DiskPanel.h"
	#include "CylPanel.h"
	#include "HemispherePanel.h"
	#include "SpherePanel.h"
	#include "TriPanel.h"
	#include "RectPanel.h"
	#include "Surface.h"
	#include "Geometry.h"
 	#include "Adaptor.h"
 	#include "SigNeur.h"
	#include "AscFile.h"
	#include "DifShell.h"
	#include "GssaStoich.h"
	#include "TauPump.h"
	#include "TimeTable.h"
//	#include "../kinetics/SparseMatrix.h"
	#include "../utility/utility.h"
	/* Random number related utilities */
	#include "../randnum/randnum.h"
	/* These are the raw generic C++ classes - without any dependency on MOOSE */
	#include "../randnum/Probability.h"
	#include "../randnum/Binomial.h"
	#include "../randnum/Gamma.h"
	#include "../randnum/Normal.h"
	#include "../randnum/Poisson.h"
	#include "../randnum/Exponential.h"
	/* The following are moose classes */
	#include "RandGenerator.h"
	#include "BinomialRng.h"
	#include "GammaRng.h"
	#include "NormalRng.h"
	#include "PoissonRng.h"
	#include "ExponentialRng.h"
	#include "UniformRng.h"
#ifdef USE_NUMPY
#include <algorithm>
#ifndef PY_ARRAY_UNIQUE_SYMBOL
#define PY_ARRAY_UNIQUE_SYMBOL Py_Array_API_pymoose_
#endif
#include <numpy/arrayobject.h>
#endif //!USE_NUMPY
#include "../builtins/Interpol.h"



namespace swig {  
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };  
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> 
  struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }    
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }    
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category> 
  struct traits_as { };
 
  template <class Type, class Category> 
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_NewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      Type *p;
      int res = (SWIG_ConvertPtr(obj, (void**)&p, type_info<Type>(), 0) == SWIG_OK) ? SWIG_OLDOBJ : 0;
      if (SWIG_IsOK(res)) {
	if (val) *val = p;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	// Uninitialized return value, no Type() constructor required.
	static Type *v_def = (Type*) malloc(sizeof(Type));
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	memset(v_def,0,sizeof(Type));
	return *v_def;
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj, bool throw_error) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	if (throw_error) throw std::invalid_argument("bad type");
	return 0;
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj, bool te = false) {
    return traits_as<Type, typename traits<Type>::category>::as(obj, te);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>: public binary_function<PyObject *, PyObject *, bool>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_Compare(v, w) < 0;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::PyObject_ptr>: public binary_function<swig::PyObject_ptr, swig::PyObject_ptr, bool>
  {
    bool
    operator()(const swig::PyObject_ptr& v, const swig::PyObject_ptr& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::PyObject_var>: public binary_function<swig::PyObject_var, swig::PyObject_var, bool>
  {
    bool
    operator()(const swig::PyObject_var& v, const swig::PyObject_var& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  inline size_t
  check_index(ptrdiff_t i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    
    throw std::out_of_range("index out of range");
  }

  inline size_t
  slice_index(ptrdiff_t i, size_t size) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size) {
	return (size_t) (i + size);
      } else {
	throw std::out_of_range("index out of range");
      }
    } else {
      return ( (size_t) i < size ) ? ((size_t) i) : size;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size);
    typename Sequence::size_type jj = swig::slice_index(j, size);

    if (jj > ii) {
      typename Sequence::const_iterator vb = self->begin();
      typename Sequence::const_iterator ve = self->begin();
      std::advance(vb,ii);
      std::advance(ve,jj);
      return new Sequence(vb, ve);
    } else {
      return new Sequence();
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, const InputSeq& v) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj < ii) jj = ii;
    size_t ssize = jj - ii;
    if (ssize <= v.size()) {
      typename Sequence::iterator sb = self->begin();
      typename InputSeq::const_iterator vmid = v.begin();
      std::advance(sb,ii);
      std::advance(vmid, jj - ii);
      self->insert(std::copy(v.begin(), vmid, sb), vmid, v.end());
    } else {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
      self->insert(sb, v.begin(), v.end());
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j) {
    typename Sequence::size_type size = self->size();
    typename Sequence::size_type ii = swig::check_index(i, size, true);
    typename Sequence::size_type jj = swig::slice_index(j, size);
    if (jj > ii) {
      typename Sequence::iterator sb = self->begin();
      typename Sequence::iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      self->erase(sb,se);
    }
  }
}


#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std  {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };
#endif  

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }

} 
#endif


namespace swig {
  template<typename OutIterator>
  class PySwigIterator_T :  public PySwigIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef PySwigIterator_T<out_iterator> self_type;

    PySwigIterator_T(out_iterator curr, PyObject *seq)
      : PySwigIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const PySwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const PySwigIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class PySwigIteratorOpen_T :  public PySwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef PySwigIterator_T<out_iterator>  base;
    typedef PySwigIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    PySwigIteratorOpen_T(out_iterator curr, PyObject *seq)
      : PySwigIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    PySwigIterator *copy() const
    {
      return new self_type(*this);
    }

    PySwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

    PySwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class PySwigIteratorClosed_T :  public PySwigIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef PySwigIterator_T<out_iterator>  base;    
    typedef PySwigIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    PySwigIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : PySwigIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    PySwigIterator *copy() const
    {
      return new self_type(*this);
    }

    PySwigIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

    PySwigIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }

  private:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIter>
  inline PySwigIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new PySwigIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline PySwigIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new PySwigIteratorOpen_T<OutIter>(current, seq);
  }
}


namespace swig
{
  template <class T>
  struct PySequence_Ref
  {
    PySequence_Ref(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }
    
    operator T () const
    {
      swig::PyObject_var item = PySequence_GetItem(_seq, _index);
      try {
	return swig::as<T>(item, true);
      } catch (std::exception& e) {
	char msg[1024];
	sprintf(msg, "in sequence element %d ", _index);
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<T>());
	}
	SWIG_Python_AddErrorMsg(msg);
	SWIG_Python_AddErrorMsg(e.what());
	throw;
      }
    }

    PySequence_Ref& operator=(const T& v)
    {
      PySequence_SetItem(_seq, _index, swig::from<T>(v));
      return *this;
    }

  private:
    PyObject* _seq;
    int _index;
  };

  template <class T>
  struct PySequence_ArrowProxy
  {
    PySequence_ArrowProxy(const T& x): m_value(x) {}
    const T* operator->() const { return &m_value; }
    operator const T*() const { return &m_value; }
    T m_value;
  };

  template <class T, class Reference >
  struct PySequence_InputIterator
  {
    typedef PySequence_InputIterator<T, Reference > self;

    typedef std::random_access_iterator_tag iterator_category;
    typedef Reference reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;

    PySequence_InputIterator()
    {
    }

    PySequence_InputIterator(PyObject* seq, int index)
      : _seq(seq), _index(index)
    {
    }

    reference operator*() const
    {
      return reference(_seq, _index);
    }

    PySequence_ArrowProxy<T>
    operator->() const {
      return PySequence_ArrowProxy<T>(operator*());
    }

    bool operator==(const self& ri) const
    {
      return (_index == ri._index) && (_seq == ri._seq);
    }

    bool operator!=(const self& ri) const
    {
      return !(operator==(ri));
    }

    self& operator ++ ()
    {
      ++_index;
      return *this;
    }

    self& operator -- ()
    {
      --_index;
      return *this;
    }

    self& operator += (difference_type n)
    {
      _index += n;
      return *this;
    }

    self operator +(difference_type n) const
    {
      return self(_seq, _index + n);
    }

    self& operator -= (difference_type n)
    {
      _index -= n;
      return *this;
    }

    self operator -(difference_type n) const
    {
      return self(_seq, _index - n);
    }

    difference_type operator - (const self& ri) const
    {
      return _index - ri._index;
    }

    bool operator < (const self& ri) const
    {
      return _index < ri._index;
    }

    reference
    operator[](difference_type n) const
    {
      return reference(_seq, _index + n);
    }

  private:
    PyObject* _seq;
    difference_type _index;
  };

  template <class T>
  struct PySequence_Cont
  {
    typedef PySequence_Ref<T> reference;
    typedef const PySequence_Ref<T> const_reference;
    typedef T value_type;
    typedef T* pointer;
    typedef int difference_type;
    typedef int size_type;
    typedef const pointer const_pointer;
    typedef PySequence_InputIterator<T, reference> iterator;
    typedef PySequence_InputIterator<T, const_reference> const_iterator;

    PySequence_Cont(PyObject* seq) : _seq(0)
    {
      if (!PySequence_Check(seq)) {
	throw std::invalid_argument("a sequence is expected");
      }
      _seq = seq;
      Py_INCREF(_seq);
    }

    ~PySequence_Cont()
    {
      if (_seq) Py_DECREF(_seq);
    }

    size_type size() const
    {
      return static_cast<size_type>(PySequence_Size(_seq));
    }

    bool empty() const
    {
      return size() == 0;
    }

    iterator begin()
    {
      return iterator(_seq, 0);
    }

    const_iterator begin() const
    {
      return const_iterator(_seq, 0);
    }

    iterator end()
    {
      return iterator(_seq, size());
    }

    const_iterator end() const
    {
      return const_iterator(_seq, size());
    }

    reference operator[](difference_type n)
    {
      return reference(_seq, n);
    }

    const_reference operator[](difference_type n)  const
    {
      return const_reference(_seq, n);
    }

    bool check(bool set_err = true) const
    {
      int s = size();
      for (int i = 0; i < s; ++i) {
	swig::PyObject_var item = PySequence_GetItem(_seq, i);
	if (!swig::check<value_type>(item)) {
	  if (set_err) {
	    char msg[1024];
	    sprintf(msg, "in sequence element %d", i);
	    SWIG_Error(SWIG_RuntimeError, msg);
	  }
	  return false;
	}
      }
      return true;
    }

  private:
    PyObject* _seq;
  };

}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_int  (unsigned int value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


namespace swig {
  template <> struct traits<unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };  
  template <>  struct traits_asval<unsigned int > {   
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from<unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


namespace swig {
  template <class PySeq, class Seq>
  inline void
  assign(const PySeq& pyseq, Seq* seq) {
#ifdef SWIG_STD_NOASSIGN_STL
    typedef typename PySeq::value_type value_type;
    typename PySeq::const_iterator it = pyseq.begin();
    for (;it != pyseq.end(); ++it) {
      seq->insert(seq->end(),(value_type)(*it));
    }
#else
    seq->assign(pyseq.begin(), pyseq.end());
#endif
  }

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static int asptr(PyObject *obj, sequence **seq) {
      if (PySequence_Check(obj)) {
	try {
	  PySequence_Cont<value_type> pyseq(obj);
	  if (seq) {
	    sequence *pseq = new sequence();
	    assign(pyseq, pseq);
	    *seq = pseq;
	    return SWIG_NEWOBJ;
	  } else {
	    return pyseq.check() ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
	  if (seq) {
	    if (!PyErr_Occurred()) {
	      PyErr_SetString(PyExc_TypeError, e.what());
	    }
	  }
	  return SWIG_ERROR;
	}
      } else {
	sequence *p;
	if (SWIG_ConvertPtr(obj,(void**)&p,
			    swig::type_info<sequence>(),0) == SWIG_OK) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      }
      return SWIG_ERROR;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {






      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((int)size);
	int i = 0;
	for (const_iterator it = seq.begin();
	     it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<unsigned int, std::allocator<unsigned int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned int" "," "std::allocator<unsigned int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_unsigned_SS_int_Sg__iterator(std::vector<unsigned int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_unsigned_SS_int_Sg____nonzero__(std::vector<unsigned int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector<unsigned int >::size_type std_vector_Sl_unsigned_SS_int_Sg____len__(std::vector<unsigned int > const *self){
      return self->size();
    }

SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}

SWIGINTERN std::vector<unsigned int >::value_type std_vector_Sl_unsigned_SS_int_Sg__pop(std::vector<unsigned int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<unsigned int,std::allocator<unsigned int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector<unsigned int,std::allocator<unsigned int > > *std_vector_Sl_unsigned_SS_int_Sg____getslice__(std::vector<unsigned int > *self,std::vector<unsigned int >::difference_type i,std::vector<unsigned int >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setslice__(std::vector<unsigned int > *self,std::vector<unsigned int >::difference_type i,std::vector<unsigned int >::difference_type j,std::vector<unsigned int,std::allocator<unsigned int > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____delslice__(std::vector<unsigned int > *self,std::vector<unsigned int >::difference_type i,std::vector<unsigned int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____delitem__(std::vector<unsigned int > *self,std::vector<unsigned int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector<unsigned int >::value_type const &std_vector_Sl_unsigned_SS_int_Sg____getitem__(std::vector<unsigned int > const *self,std::vector<unsigned int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg____setitem__(std::vector<unsigned int > *self,std::vector<unsigned int >::difference_type i,std::vector<unsigned int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_unsigned_SS_int_Sg__append(std::vector<unsigned int > *self,std::vector<unsigned int >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


namespace swig {
  template <> struct traits<int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };  
  template <>  struct traits_asval<int > {   
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from<int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<int, std::allocator<int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator<int >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_int_Sg__iterator(std::vector<int > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_int_Sg____nonzero__(std::vector<int > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector<int >::size_type std_vector_Sl_int_Sg____len__(std::vector<int > const *self){
      return self->size();
    }
SWIGINTERN std::vector<int >::value_type std_vector_Sl_int_Sg__pop(std::vector<int > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<int,std::allocator<int > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector<int,std::allocator<int > > *std_vector_Sl_int_Sg____getslice__(std::vector<int > *self,std::vector<int >::difference_type i,std::vector<int >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____setslice__(std::vector<int > *self,std::vector<int >::difference_type i,std::vector<int >::difference_type j,std::vector<int,std::allocator<int > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delslice__(std::vector<int > *self,std::vector<int >::difference_type i,std::vector<int >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_int_Sg____delitem__(std::vector<int > *self,std::vector<int >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector<int >::value_type const &std_vector_Sl_int_Sg____getitem__(std::vector<int > const *self,std::vector<int >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_int_Sg____setitem__(std::vector<int > *self,std::vector<int >::difference_type i,std::vector<int >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_int_Sg__append(std::vector<int > *self,std::vector<int >::value_type const &x){
      self->push_back(x);
    }

  #define SWIG_From_double   PyFloat_FromDouble 


namespace swig {
  template <> struct traits<double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };  
  template <>  struct traits_asval<double > {   
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from<double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<double, std::allocator<double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator<double >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_double_Sg__iterator(std::vector<double > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_double_Sg____nonzero__(std::vector<double > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector<double >::size_type std_vector_Sl_double_Sg____len__(std::vector<double > const *self){
      return self->size();
    }
SWIGINTERN std::vector<double >::value_type std_vector_Sl_double_Sg__pop(std::vector<double > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<double,std::allocator<double > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector<double,std::allocator<double > > *std_vector_Sl_double_Sg____getslice__(std::vector<double > *self,std::vector<double >::difference_type i,std::vector<double >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____setslice__(std::vector<double > *self,std::vector<double >::difference_type i,std::vector<double >::difference_type j,std::vector<double,std::allocator<double > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delslice__(std::vector<double > *self,std::vector<double >::difference_type i,std::vector<double >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_double_Sg____delitem__(std::vector<double > *self,std::vector<double >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector<double >::value_type const &std_vector_Sl_double_Sg____getitem__(std::vector<double > const *self,std::vector<double >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_double_Sg____setitem__(std::vector<double > *self,std::vector<double >::difference_type i,std::vector<double >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_double_Sg__append(std::vector<double > *self,std::vector<double >::value_type const &x){
      self->push_back(x);
    }

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
  if (PyString_Check(obj)) {
    char *cstr; Py_ssize_t len;
    PyString_AsStringAndSize(obj, &cstr, &len);
    if (cptr)  {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
	*cptr = PyString_AsString(obj);
      }
    }
    if (psize) *psize = len + 1;
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_NewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  if (s.size()) {
    return SWIG_FromCharPtrAndSize(s.data(), s.size());
  } else {
    return SWIG_FromCharPtrAndSize(s.c_str(), 0);
  }
}


namespace swig {
  template <> struct traits<std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };  
  template <>  struct traits_asval<std::string > {   
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) { 
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from<std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector<std::string, std::allocator<std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator<std::string >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_std_string_Sg__iterator(std::vector<std::string > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_std_string_Sg____nonzero__(std::vector<std::string > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector<std::string >::size_type std_vector_Sl_std_string_Sg____len__(std::vector<std::string > const *self){
      return self->size();
    }
SWIGINTERN std::vector<std::string >::value_type std_vector_Sl_std_string_Sg__pop(std::vector<std::string > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<std::string,std::allocator<std::string > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector<std::string,std::allocator<std::string > > *std_vector_Sl_std_string_Sg____getslice__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setslice__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::difference_type j,std::vector<std::string,std::allocator<std::string > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delslice__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____delitem__(std::vector<std::string > *self,std::vector<std::string >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector<std::string >::value_type const &std_vector_Sl_std_string_Sg____getitem__(std::vector<std::string > const *self,std::vector<std::string >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_std_string_Sg____setitem__(std::vector<std::string > *self,std::vector<std::string >::difference_type i,std::vector<std::string >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_std_string_Sg__append(std::vector<std::string > *self,std::vector<std::string >::value_type const &x){
      self->push_back(x);
    }

  namespace swig {
    template <>  struct traits<Id > {
      typedef pointer_category category;
      static const char* type_name() { return"Id"; }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector<Id, std::allocator<Id > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "Id" "," "std::allocator<Id >" " >";
	  }
	};
      }
    
SWIGINTERN swig::PySwigIterator *std_vector_Sl_Id_Sg__iterator(std::vector<Id > *self,PyObject **PYTHON_SELF){
      return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
    }
SWIGINTERN bool std_vector_Sl_Id_Sg____nonzero__(std::vector<Id > const *self){
      return !(self->empty());
    }
SWIGINTERN std::vector<Id >::size_type std_vector_Sl_Id_Sg____len__(std::vector<Id > const *self){
      return self->size();
    }
SWIGINTERN std::vector<Id >::value_type std_vector_Sl_Id_Sg__pop(std::vector<Id > *self){
      if (self->size() == 0)
	throw std::out_of_range("pop from empty container");
      std::vector<Id,std::allocator<Id > >::value_type x = self->back();
      self->pop_back();
      return x;
    }
SWIGINTERN std::vector<Id,std::allocator<Id > > *std_vector_Sl_Id_Sg____getslice__(std::vector<Id > *self,std::vector<Id >::difference_type i,std::vector<Id >::difference_type j){
      return swig::getslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Id_Sg____setslice__(std::vector<Id > *self,std::vector<Id >::difference_type i,std::vector<Id >::difference_type j,std::vector<Id,std::allocator<Id > > const &v){
      swig::setslice(self, i, j, v);
    }
SWIGINTERN void std_vector_Sl_Id_Sg____delslice__(std::vector<Id > *self,std::vector<Id >::difference_type i,std::vector<Id >::difference_type j){
      swig::delslice(self, i, j);
    }
SWIGINTERN void std_vector_Sl_Id_Sg____delitem__(std::vector<Id > *self,std::vector<Id >::difference_type i){
      self->erase(swig::getpos(self,i));
    }
SWIGINTERN std::vector<Id >::value_type const &std_vector_Sl_Id_Sg____getitem__(std::vector<Id > const *self,std::vector<Id >::difference_type i){
      return *(swig::cgetpos(self, i));
    }
SWIGINTERN void std_vector_Sl_Id_Sg____setitem__(std::vector<Id > *self,std::vector<Id >::difference_type i,std::vector<Id >::value_type const &x){
      *(swig::getpos(self,i)) = x;
    }
SWIGINTERN void std_vector_Sl_Id_Sg__append(std::vector<Id > *self,std::vector<Id >::value_type const &x){
      self->push_back(x);
    }




SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


#define pymoose_PyMooseBase_id_get(self_) self_->__get_id()
  

#define pymoose_PyMooseBase_parent_get(self_) self_->__get_parent()
  

#define pymoose_PyMooseBase_className_get(self_) self_->__get_className()
  

#define pymoose_PyMooseBase_name_get(self_) self_->__get_name()
  

#define pymoose_PyMooseBase_path_get(self_) self_->__get_path()
  

#define pymoose_Neutral_child_get(self_) self_->__get_child()
#define pymoose_Neutral_child_set(self_, val_) self_->__set_child(val_)
  

#define pymoose_Class_name_get(self_) self_->__get_name()
#define pymoose_Class_name_set(self_, val_) self_->__set_name(val_)
  

#define pymoose_Class_author_get(self_) self_->__get_author()
  

#define pymoose_Class_description_get(self_) self_->__get_description()
  

#define pymoose_Class_tick_get(self_) self_->__get_tick()
#define pymoose_Class_tick_set(self_, val_) self_->__set_tick(val_)
  

#define pymoose_Class_stage_get(self_) self_->__get_stage()
#define pymoose_Class_stage_set(self_, val_) self_->__set_stage(val_)
  

#define pymoose_Cell_method_get(self_) self_->__get_method()
#define pymoose_Cell_method_set(self_, val_) self_->__set_method(val_)
  

#define pymoose_Cell_variableDt_get(self_) self_->__get_variableDt()
  

#define pymoose_Cell_implicit_get(self_) self_->__get_implicit()
  

#define pymoose_Cell_description_get(self_) self_->__get_description()
  

#define pymoose_ClockTick_dt_get(self_) self_->__get_dt()
#define pymoose_ClockTick_dt_set(self_, val_) self_->__set_dt(val_)
  

#define pymoose_ClockTick_stage_get(self_) self_->__get_stage()
#define pymoose_ClockTick_stage_set(self_, val_) self_->__set_stage(val_)
  

#define pymoose_ClockTick_ordinal_get(self_) self_->__get_ordinal()
#define pymoose_ClockTick_ordinal_set(self_, val_) self_->__set_ordinal(val_)
  

#define pymoose_ClockTick_nextTime_get(self_) self_->__get_nextTime()
#define pymoose_ClockTick_nextTime_set(self_, val_) self_->__set_nextTime(val_)
  

#define pymoose_ClockTick_updateDtSrc_get(self_) self_->__get_updateDtSrc()
#define pymoose_ClockTick_updateDtSrc_set(self_, val_) self_->__set_updateDtSrc(val_)
  

#define pymoose_ClockJob_runTime_get(self_) self_->__get_runTime()
#define pymoose_ClockJob_runTime_set(self_, val_) self_->__set_runTime(val_)
  

#define pymoose_ClockJob_currentTime_get(self_) self_->__get_currentTime()
#define pymoose_ClockJob_currentTime_set(self_, val_) self_->__set_currentTime(val_)
  

#define pymoose_ClockJob_nsteps_get(self_) self_->__get_nsteps()
#define pymoose_ClockJob_nsteps_set(self_, val_) self_->__set_nsteps(val_)
  

#define pymoose_ClockJob_currentStep_get(self_) self_->__get_currentStep()
#define pymoose_ClockJob_currentStep_set(self_, val_) self_->__set_currentStep(val_)
  

#define pymoose_ClockJob_start_get(self_) self_->__get_start()
#define pymoose_ClockJob_start_set(self_, val_) self_->__set_start(val_)
  

#define pymoose_ClockJob_step_get(self_) self_->__get_step()
#define pymoose_ClockJob_step_set(self_, val_) self_->__set_step(val_)
  

#define pymoose_InterpolationTable_xmin_get(self_) self_->__get_xmin()
#define pymoose_InterpolationTable_xmin_set(self_, val_) self_->__set_xmin(val_)
  

#define pymoose_InterpolationTable_xmax_get(self_) self_->__get_xmax()
#define pymoose_InterpolationTable_xmax_set(self_, val_) self_->__set_xmax(val_)
  

#define pymoose_InterpolationTable_xdivs_get(self_) self_->__get_xdivs()
#define pymoose_InterpolationTable_xdivs_set(self_, val_) self_->__set_xdivs(val_)
  

#define pymoose_InterpolationTable_mode_get(self_) self_->__get_mode()
#define pymoose_InterpolationTable_mode_set(self_, val_) self_->__set_mode(val_)
  

#define pymoose_InterpolationTable_dx_get(self_) self_->__get_dx()
#define pymoose_InterpolationTable_dx_set(self_, val_) self_->__set_dx(val_)
  

#define pymoose_InterpolationTable_sy_get(self_) self_->__get_sy()
#define pymoose_InterpolationTable_sy_set(self_, val_) self_->__set_sy(val_)
  

#define pymoose_InterpolationTable_calcMode_get(self_) self_->__get_calcMode()
#define pymoose_InterpolationTable_calcMode_set(self_, val_) self_->__set_calcMode(val_)
  

#define pymoose_Table_input_get(self_) self_->__get_input()
#define pymoose_Table_input_set(self_, val_) self_->__set_input(val_)
  

#define pymoose_Table_output_get(self_) self_->__get_output()
#define pymoose_Table_output_set(self_, val_) self_->__set_output(val_)
  

#define pymoose_Table_stepMode_get(self_) self_->__get_stepMode()
#define pymoose_Table_stepMode_set(self_, val_) self_->__set_stepMode(val_)
  

#define pymoose_Table_stepSize_get(self_) self_->__get_stepSize()
#define pymoose_Table_stepSize_set(self_, val_) self_->__set_stepSize(val_)
  

#define pymoose_Table_threshold_get(self_) self_->__get_threshold()
#define pymoose_Table_threshold_set(self_, val_) self_->__set_threshold(val_)
  

#define pymoose_SynChan_Gbar_get(self_) self_->__get_Gbar()
#define pymoose_SynChan_Gbar_set(self_, val_) self_->__set_Gbar(val_)
  

#define pymoose_SynChan_Ek_get(self_) self_->__get_Ek()
#define pymoose_SynChan_Ek_set(self_, val_) self_->__set_Ek(val_)
  

#define pymoose_SynChan_tau1_get(self_) self_->__get_tau1()
#define pymoose_SynChan_tau1_set(self_, val_) self_->__set_tau1(val_)
  

#define pymoose_SynChan_tau2_get(self_) self_->__get_tau2()
#define pymoose_SynChan_tau2_set(self_, val_) self_->__set_tau2(val_)
  

#define pymoose_SynChan_normalizeWeights_get(self_) self_->__get_normalizeWeights()
#define pymoose_SynChan_normalizeWeights_set(self_, val_) self_->__set_normalizeWeights(val_)
  

#define pymoose_SynChan_Gk_get(self_) self_->__get_Gk()
#define pymoose_SynChan_Gk_set(self_, val_) self_->__set_Gk(val_)
  

#define pymoose_SynChan_Ik_get(self_) self_->__get_Ik()
#define pymoose_SynChan_Ik_set(self_, val_) self_->__set_Ik(val_)
  

#define pymoose_SynChan_numSynapses_get(self_) self_->__get_numSynapses()
  

#define pymoose_SynChan_activation_get(self_) self_->__get_activation()
#define pymoose_SynChan_activation_set(self_, val_) self_->__set_activation(val_)
  

#define pymoose_SynChan_modulator_get(self_) self_->__get_modulator()
#define pymoose_SynChan_modulator_set(self_, val_) self_->__set_modulator(val_)
  

#define pymoose_BinSynchan_Gbar_get(self_) self_->__get_Gbar()
#define pymoose_BinSynchan_Gbar_set(self_, val_) self_->__set_Gbar(val_)
  

#define pymoose_BinSynchan_Ek_get(self_) self_->__get_Ek()
#define pymoose_BinSynchan_Ek_set(self_, val_) self_->__set_Ek(val_)
  

#define pymoose_BinSynchan_tau1_get(self_) self_->__get_tau1()
#define pymoose_BinSynchan_tau1_set(self_, val_) self_->__set_tau1(val_)
  

#define pymoose_BinSynchan_tau2_get(self_) self_->__get_tau2()
#define pymoose_BinSynchan_tau2_set(self_, val_) self_->__set_tau2(val_)
  

#define pymoose_BinSynchan_normalizeWeights_get(self_) self_->__get_normalizeWeights()
#define pymoose_BinSynchan_normalizeWeights_set(self_, val_) self_->__set_normalizeWeights(val_)
  

#define pymoose_BinSynchan_Gk_get(self_) self_->__get_Gk()
#define pymoose_BinSynchan_Gk_set(self_, val_) self_->__set_Gk(val_)
  

#define pymoose_BinSynchan_Ik_get(self_) self_->__get_Ik()
#define pymoose_BinSynchan_Ik_set(self_, val_) self_->__set_Ik(val_)
  

#define pymoose_BinSynchan_numSynapses_get(self_) self_->__get_numSynapses()
  

#define pymoose_BinSynchan_activation_get(self_) self_->__get_activation()
#define pymoose_BinSynchan_activation_set(self_, val_) self_->__set_activation(val_)
  

#define pymoose_BinSynchan_modulator_get(self_) self_->__get_modulator()
#define pymoose_BinSynchan_modulator_set(self_, val_) self_->__set_modulator(val_)
  

#define pymoose_StochSynchan_Gbar_get(self_) self_->__get_Gbar()
#define pymoose_StochSynchan_Gbar_set(self_, val_) self_->__set_Gbar(val_)
  

#define pymoose_StochSynchan_Ek_get(self_) self_->__get_Ek()
#define pymoose_StochSynchan_Ek_set(self_, val_) self_->__set_Ek(val_)
  

#define pymoose_StochSynchan_tau1_get(self_) self_->__get_tau1()
#define pymoose_StochSynchan_tau1_set(self_, val_) self_->__set_tau1(val_)
  

#define pymoose_StochSynchan_tau2_get(self_) self_->__get_tau2()
#define pymoose_StochSynchan_tau2_set(self_, val_) self_->__set_tau2(val_)
  

#define pymoose_StochSynchan_normalizeWeights_get(self_) self_->__get_normalizeWeights()
#define pymoose_StochSynchan_normalizeWeights_set(self_, val_) self_->__set_normalizeWeights(val_)
  

#define pymoose_StochSynchan_Gk_get(self_) self_->__get_Gk()
#define pymoose_StochSynchan_Gk_set(self_, val_) self_->__set_Gk(val_)
  

#define pymoose_StochSynchan_Ik_get(self_) self_->__get_Ik()
#define pymoose_StochSynchan_Ik_set(self_, val_) self_->__set_Ik(val_)
  

#define pymoose_StochSynchan_numSynapses_get(self_) self_->__get_numSynapses()
  

#define pymoose_StochSynchan_activation_get(self_) self_->__get_activation()
#define pymoose_StochSynchan_activation_set(self_, val_) self_->__set_activation(val_)
  

#define pymoose_StochSynchan_modulator_get(self_) self_->__get_modulator()
#define pymoose_StochSynchan_modulator_set(self_, val_) self_->__set_modulator(val_)
  

#define pymoose_SpikeGen_threshold_get(self_) self_->__get_threshold()
#define pymoose_SpikeGen_threshold_set(self_, val_) self_->__set_threshold(val_)
  

#define pymoose_SpikeGen_refractT_get(self_) self_->__get_refractT()
#define pymoose_SpikeGen_refractT_set(self_, val_) self_->__set_refractT(val_)
  

#define pymoose_SpikeGen_absRefractT_get(self_) self_->__get_absRefractT()
#define pymoose_SpikeGen_absRefractT_set(self_, val_) self_->__set_absRefractT(val_)
  

#define pymoose_SpikeGen_amplitude_get(self_) self_->__get_amplitude()
#define pymoose_SpikeGen_amplitude_set(self_, val_) self_->__set_amplitude(val_)
  

#define pymoose_SpikeGen_state_get(self_) self_->__get_state()
#define pymoose_SpikeGen_state_set(self_, val_) self_->__set_state(val_)
  

#define pymoose_SpikeGen_event_get(self_) self_->__get_event()
#define pymoose_SpikeGen_event_set(self_, val_) self_->__set_event(val_)
  

#define pymoose_SpikeGen_Vm_get(self_) self_->__get_Vm()
#define pymoose_SpikeGen_Vm_set(self_, val_) self_->__set_Vm(val_)
  

#define pymoose_RandomSpike_minAmp_get(self_) self_->__get_minAmp()
#define pymoose_RandomSpike_minAmp_set(self_, val_) self_->__set_minAmp(val_)
  

#define pymoose_RandomSpike_maxAmp_get(self_) self_->__get_maxAmp()
#define pymoose_RandomSpike_maxAmp_set(self_, val_) self_->__set_maxAmp(val_)
  

#define pymoose_RandomSpike_rate_get(self_) self_->__get_rate()
#define pymoose_RandomSpike_rate_set(self_, val_) self_->__set_rate(val_)
  

#define pymoose_RandomSpike_resetValue_get(self_) self_->__get_resetValue()
#define pymoose_RandomSpike_resetValue_set(self_, val_) self_->__set_resetValue(val_)
  

#define pymoose_RandomSpike_state_get(self_) self_->__get_state()
#define pymoose_RandomSpike_state_set(self_, val_) self_->__set_state(val_)
  

#define pymoose_RandomSpike_absRefract_get(self_) self_->__get_absRefract()
#define pymoose_RandomSpike_absRefract_set(self_, val_) self_->__set_absRefract(val_)
  

#define pymoose_RandomSpike_lastEvent_get(self_) self_->__get_lastEvent()
  

#define pymoose_RandomSpike_reset_get(self_) self_->__get_reset()
#define pymoose_RandomSpike_reset_set(self_, val_) self_->__set_reset(val_)
  

#define pymoose_PulseGen_firstLevel_get(self_) self_->__get_firstLevel()
#define pymoose_PulseGen_firstLevel_set(self_, val_) self_->__set_firstLevel(val_)
  

#define pymoose_PulseGen_firstWidth_get(self_) self_->__get_firstWidth()
#define pymoose_PulseGen_firstWidth_set(self_, val_) self_->__set_firstWidth(val_)
  

#define pymoose_PulseGen_firstDelay_get(self_) self_->__get_firstDelay()
#define pymoose_PulseGen_firstDelay_set(self_, val_) self_->__set_firstDelay(val_)
  

#define pymoose_PulseGen_secondLevel_get(self_) self_->__get_secondLevel()
#define pymoose_PulseGen_secondLevel_set(self_, val_) self_->__set_secondLevel(val_)
  

#define pymoose_PulseGen_secondWidth_get(self_) self_->__get_secondWidth()
#define pymoose_PulseGen_secondWidth_set(self_, val_) self_->__set_secondWidth(val_)
  

#define pymoose_PulseGen_secondDelay_get(self_) self_->__get_secondDelay()
#define pymoose_PulseGen_secondDelay_set(self_, val_) self_->__set_secondDelay(val_)
  

#define pymoose_PulseGen_baseLevel_get(self_) self_->__get_baseLevel()
#define pymoose_PulseGen_baseLevel_set(self_, val_) self_->__set_baseLevel(val_)
  

#define pymoose_PulseGen_output_get(self_) self_->__get_output()
  

#define pymoose_PulseGen_trigTime_get(self_) self_->__get_trigTime()
#define pymoose_PulseGen_trigTime_set(self_, val_) self_->__set_trigTime(val_)
  

#define pymoose_PulseGen_trigMode_get(self_) self_->__get_trigMode()
#define pymoose_PulseGen_trigMode_set(self_, val_) self_->__set_trigMode(val_)
  

#define pymoose_PulseGen_prevInput_get(self_) self_->__get_prevInput()
  

#define pymoose_Nernst_E_get(self_) self_->__get_E()
  

#define pymoose_Nernst_Temperature_get(self_) self_->__get_Temperature()
#define pymoose_Nernst_Temperature_set(self_, val_) self_->__set_Temperature(val_)
  

#define pymoose_Nernst_valence_get(self_) self_->__get_valence()
#define pymoose_Nernst_valence_set(self_, val_) self_->__set_valence(val_)
  

#define pymoose_Nernst_Cin_get(self_) self_->__get_Cin()
#define pymoose_Nernst_Cin_set(self_, val_) self_->__set_Cin(val_)
  

#define pymoose_Nernst_Cout_get(self_) self_->__get_Cout()
#define pymoose_Nernst_Cout_set(self_, val_) self_->__set_Cout(val_)
  

#define pymoose_Nernst_scale_get(self_) self_->__get_scale()
#define pymoose_Nernst_scale_set(self_, val_) self_->__set_scale(val_)
  

#define pymoose_CaConc_Ca_get(self_) self_->__get_Ca()
#define pymoose_CaConc_Ca_set(self_, val_) self_->__set_Ca(val_)
  

#define pymoose_CaConc_CaBasal_get(self_) self_->__get_CaBasal()
#define pymoose_CaConc_CaBasal_set(self_, val_) self_->__set_CaBasal(val_)
  

#define pymoose_CaConc_Ca_base_get(self_) self_->__get_Ca_base()
#define pymoose_CaConc_Ca_base_set(self_, val_) self_->__set_Ca_base(val_)
  

#define pymoose_CaConc_tau_get(self_) self_->__get_tau()
#define pymoose_CaConc_tau_set(self_, val_) self_->__set_tau(val_)
  

#define pymoose_CaConc_B_get(self_) self_->__get_B()
#define pymoose_CaConc_B_set(self_, val_) self_->__set_B(val_)
  

#define pymoose_HHGate_A_get(self_) self_->__get_A()
  

#define pymoose_HHGate_B_get(self_) self_->__get_B()
  

#define pymoose_HHChannel_Gbar_get(self_) self_->__get_Gbar()
#define pymoose_HHChannel_Gbar_set(self_, val_) self_->__set_Gbar(val_)
  

#define pymoose_HHChannel_Ek_get(self_) self_->__get_Ek()
#define pymoose_HHChannel_Ek_set(self_, val_) self_->__set_Ek(val_)
  

#define pymoose_HHChannel_Xpower_get(self_) self_->__get_Xpower()
#define pymoose_HHChannel_Xpower_set(self_, val_) self_->__set_Xpower(val_)
  

#define pymoose_HHChannel_Ypower_get(self_) self_->__get_Ypower()
#define pymoose_HHChannel_Ypower_set(self_, val_) self_->__set_Ypower(val_)
  

#define pymoose_HHChannel_Zpower_get(self_) self_->__get_Zpower()
#define pymoose_HHChannel_Zpower_set(self_, val_) self_->__set_Zpower(val_)
  

#define pymoose_HHChannel_X_get(self_) self_->__get_X()
#define pymoose_HHChannel_X_set(self_, val_) self_->__set_X(val_)
  

#define pymoose_HHChannel_Y_get(self_) self_->__get_Y()
#define pymoose_HHChannel_Y_set(self_, val_) self_->__set_Y(val_)
  

#define pymoose_HHChannel_Z_get(self_) self_->__get_Z()
#define pymoose_HHChannel_Z_set(self_, val_) self_->__set_Z(val_)
  

#define pymoose_HHChannel_instant_get(self_) self_->__get_instant()
#define pymoose_HHChannel_instant_set(self_, val_) self_->__set_instant(val_)
  

#define pymoose_HHChannel_Gk_get(self_) self_->__get_Gk()
#define pymoose_HHChannel_Gk_set(self_, val_) self_->__set_Gk(val_)
  

#define pymoose_HHChannel_Ik_get(self_) self_->__get_Ik()
  

#define pymoose_HHChannel_useConcentration_get(self_) self_->__get_useConcentration()
#define pymoose_HHChannel_useConcentration_set(self_, val_) self_->__set_useConcentration(val_)
  

#define pymoose_HHChannel_concen_get(self_) self_->__get_concen()
#define pymoose_HHChannel_concen_set(self_, val_) self_->__set_concen(val_)
  

#define pymoose_Mg_block_KMg_A_get(self_) self_->__get_KMg_A()
#define pymoose_Mg_block_KMg_A_set(self_, val_) self_->__set_KMg_A(val_)
  

#define pymoose_Mg_block_K_MgB_get(self_) self_->__get_KMg_B()
#define pymoose_Mg_block_K_MgB_set(self_, val_) self_->__set_KMg_B(val_)
  

#define pymoose_Mg_block_CMg_get(self_) self_->__get_CMg()
#define pymoose_Mg_block_CMg_set(self_, val_) self_->__set_CMg(val_)
  

#define pymoose_Mg_block_Ik_get(self_) self_->__get_Ik()
#define pymoose_Mg_block_Ik_set(self_, val_) self_->__set_Ik(val_)
  

#define pymoose_Mg_block_Gk_get(self_) self_->__get_Gk()
#define pymoose_Mg_block_Gk_set(self_, val_) self_->__set_Gk(val_)
  

#define pymoose_Mg_block_Ek_get(self_) self_->__get_Ek()
#define pymoose_Mg_block_Ek_set(self_, val_) self_->__set_Ek(val_)
  

#define pymoose_Mg_block_Zk_get(self_) self_->__get_Zk()
#define pymoose_Mg_block_Zk_set(self_, val_) self_->__set_Zk(val_)
  

#define pymoose_Compartment_Vm_get(self_) self_->__get_Vm()
#define pymoose_Compartment_Vm_set(self_, val_) self_->__set_Vm(val_)
  

#define pymoose_Compartment_Cm_get(self_) self_->__get_Cm()
#define pymoose_Compartment_Cm_set(self_, val_) self_->__set_Cm(val_)
  

#define pymoose_Compartment_Em_get(self_) self_->__get_Em()
#define pymoose_Compartment_Em_set(self_, val_) self_->__set_Em(val_)
  

#define pymoose_Compartment_Im_get(self_) self_->__get_Im()
#define pymoose_Compartment_Im_set(self_, val_) self_->__set_Im(val_)
  

#define pymoose_Compartment_inject_get(self_) self_->__get_inject()
#define pymoose_Compartment_inject_set(self_, val_) self_->__set_inject(val_)
  

#define pymoose_Compartment_initVm_get(self_) self_->__get_initVm()
#define pymoose_Compartment_initVm_set(self_, val_) self_->__set_initVm(val_)
  

#define pymoose_Compartment_Rm_get(self_) self_->__get_Rm()
#define pymoose_Compartment_Rm_set(self_, val_) self_->__set_Rm(val_)
  

#define pymoose_Compartment_Ra_get(self_) self_->__get_Ra()
#define pymoose_Compartment_Ra_set(self_, val_) self_->__set_Ra(val_)
  

#define pymoose_Compartment_diameter_get(self_) self_->__get_diameter()
#define pymoose_Compartment_diameter_set(self_, val_) self_->__set_diameter(val_)
  

#define pymoose_Compartment_length_get(self_) self_->__get_length()
#define pymoose_Compartment_length_set(self_, val_) self_->__set_length(val_)
  

#define pymoose_Compartment_x_get(self_) self_->__get_x()
#define pymoose_Compartment_x_set(self_, val_) self_->__set_x(val_)
  

#define pymoose_Compartment_y_get(self_) self_->__get_y()
#define pymoose_Compartment_y_set(self_, val_) self_->__set_y(val_)
  

#define pymoose_Compartment_z_get(self_) self_->__get_z()
#define pymoose_Compartment_z_set(self_, val_) self_->__set_z(val_)
  

#define pymoose_NeuroScan_VDiv_get(self_) self_->__get_VDiv()
#define pymoose_NeuroScan_VDiv_set(self_, val_) self_->__set_VDiv(val_)
  

#define pymoose_NeuroScan_VMin_get(self_) self_->__get_VMin()
#define pymoose_NeuroScan_VMin_set(self_, val_) self_->__set_VMin(val_)
  

#define pymoose_NeuroScan_VMax_get(self_) self_->__get_VMax()
#define pymoose_NeuroScan_VMax_set(self_, val_) self_->__set_VMax(val_)
  

#define pymoose_NeuroScan_CaDiv_get(self_) self_->__get_CaDiv()
#define pymoose_NeuroScan_CaDiv_set(self_, val_) self_->__set_CaDiv(val_)
  

#define pymoose_NeuroScan_CaMin_get(self_) self_->__get_CaMin()
#define pymoose_NeuroScan_CaMin_set(self_, val_) self_->__set_CaMin(val_)
  

#define pymoose_NeuroScan_CaMax_get(self_) self_->__get_CaMax()
#define pymoose_NeuroScan_CaMax_set(self_, val_) self_->__set_CaMax(val_)
  

#define pymoose_HSolve_seedPath_get(self_) self_->__get_seed_path()
#define pymoose_HSolve_seedPath_set(self_, val_) self_->__set_seed_path(val_)
  

#define pymoose_HSolve_NDiv_get(self_) self_->__get_NDiv()
#define pymoose_HSolve_NDiv_set(self_, val_) self_->__set_NDiv(val_)
  

#define pymoose_HSolve_VLo_get(self_) self_->__get_VLo()
#define pymoose_HSolve_VLo_set(self_, val_) self_->__set_VLo(val_)
  

#define pymoose_HSolve_VHi_get(self_) self_->__get_VHi()
#define pymoose_HSolve_VHi_set(self_, val_) self_->__set_VHi(val_)
  

#define pymoose_Kintegrator_isInitiatilized_get(self_) self_->__get_isInitiatilized()
#define pymoose_Kintegrator_isInitiatilized_set(self_, val_) self_->__set_isInitiatilized(val_)
  

#define pymoose_MathFunc_mathML_get(self_) self_->__get_mathML()
#define pymoose_MathFunc_mathML_set(self_, val_) self_->__set_mathML(val_)
  

#define pymoose_MathFunc_function_get(self_) self_->__get_function()
#define pymoose_MathFunc_function_set(self_, val_) self_->__set_function(val_)
  

#define pymoose_MathFunc_result_get(self_) self_->__get_result()
#define pymoose_MathFunc_result_set(self_, val_) self_->__set_result(val_)
  

#define pymoose_Stoich_nMols_get(self_) self_->__get_nMols()
  

#define pymoose_Stoich_nVarMols_get(self_) self_->__get_nVarMols()
  

#define pymoose_Stoich_nSumTot_get(self_) self_->__get_nSumTot()
  

#define pymoose_Stoich_nBuffered_get(self_) self_->__get_nBuffered()
  

#define pymoose_Stoich_nReacs_get(self_) self_->__get_nReacs()
  

#define pymoose_Stoich_nEnz_get(self_) self_->__get_nEnz()
  

#define pymoose_Stoich_nMMenz_get(self_) self_->__get_nMMenz()
  

#define pymoose_Stoich_nExternalRates_get(self_) self_->__get_nExternalRates()
  

#define pymoose_Stoich_useOneWayReacs_get(self_) self_->__get_useOneWayReacs()
#define pymoose_Stoich_useOneWayReacs_set(self_, val_) self_->__set_useOneWayReacs(val_)
  

#define pymoose_Stoich_rateVectorSize_get(self_) self_->__get_rateVectorSize()
  

#define pymoose_KineticHub_nMol_get(self_) self_->__get_nMol()
#define pymoose_KineticHub_nMol_set(self_, val_) self_->__set_nMol(val_)
  

#define pymoose_KineticHub_nReac_get(self_) self_->__get_nReac()
#define pymoose_KineticHub_nReac_set(self_, val_) self_->__set_nReac(val_)
  

#define pymoose_KineticHub_nEnz_get(self_) self_->__get_nEnz()
#define pymoose_KineticHub_nEnz_set(self_, val_) self_->__set_nEnz(val_)
  

#define pymoose_KineticHub_molSum_get(self_) self_->__get_molSum()
#define pymoose_KineticHub_molSum_set(self_, val_) self_->__set_molSum(val_)
  

#define pymoose_Enzyme_k1_get(self_) self_->__get_k1()
#define pymoose_Enzyme_k1_set(self_, val_) self_->__set_k1(val_)
  

#define pymoose_Enzyme_k2_get(self_) self_->__get_k2()
#define pymoose_Enzyme_k2_set(self_, val_) self_->__set_k2(val_)
  

#define pymoose_Enzyme_k3_get(self_) self_->__get_k3()
#define pymoose_Enzyme_k3_set(self_, val_) self_->__set_k3(val_)
  

#define pymoose_Enzyme_Km_get(self_) self_->__get_Km()
#define pymoose_Enzyme_Km_set(self_, val_) self_->__set_Km(val_)
  

#define pymoose_Enzyme_kcat_get(self_) self_->__get_kcat()
#define pymoose_Enzyme_kcat_set(self_, val_) self_->__set_kcat(val_)
  

#define pymoose_Enzyme_mode_get(self_) self_->__get_mode()
#define pymoose_Enzyme_mode_set(self_, val_) self_->__set_mode(val_)
  

#define pymoose_Reaction_kf_get(self_) self_->__get_kf()
#define pymoose_Reaction_kf_set(self_, val_) self_->__set_kf(val_)
  

#define pymoose_Reaction_kb_get(self_) self_->__get_kb()
#define pymoose_Reaction_kb_set(self_, val_) self_->__set_kb(val_)
  

#define pymoose_Reaction_scaleKf_get(self_) self_->__get_scaleKf()
#define pymoose_Reaction_scaleKf_set(self_, val_) self_->__set_scaleKf(val_)
  

#define pymoose_Reaction_scaleKb_get(self_) self_->__get_scaleKb()
#define pymoose_Reaction_scaleKb_set(self_, val_) self_->__set_scaleKb(val_)
  

#define pymoose_Molecule_nInit_get(self_) self_->__get_nInit()
#define pymoose_Molecule_nInit_set(self_, val_) self_->__set_nInit(val_)
  

#define pymoose_Molecule_volumeScale_get(self_) self_->__get_volumeScale()
#define pymoose_Molecule_volumeScale_set(self_, val_) self_->__set_volumeScale(val_)
  

#define pymoose_Molecule_n_get(self_) self_->__get_n()
#define pymoose_Molecule_n_set(self_, val_) self_->__set_n(val_)
  

#define pymoose_Molecule_mode_get(self_) self_->__get_mode()
#define pymoose_Molecule_mode_set(self_, val_) self_->__set_mode(val_)
  

#define pymoose_Molecule_slave_enable_get(self_) self_->__get_slave_enable()
#define pymoose_Molecule_slave_enable_set(self_, val_) self_->__set_slave_enable(val_)
  

#define pymoose_Molecule_conc_get(self_) self_->__get_conc()
#define pymoose_Molecule_conc_set(self_, val_) self_->__set_conc(val_)
  

#define pymoose_Molecule_concInit_get(self_) self_->__get_concInit()
#define pymoose_Molecule_concInit_set(self_, val_) self_->__set_concInit(val_)
  

#define pymoose_Molecule_nSrc_get(self_) self_->__get_nSrc()
#define pymoose_Molecule_nSrc_set(self_, val_) self_->__set_nSrc(val_)
  

#define pymoose_Molecule_sumTotal_get(self_) self_->__get_sumTotal()
#define pymoose_Molecule_sumTotal_set(self_, val_) self_->__set_sumTotal(val_)
  

#define pymoose_RandGenerator_sample_get(self_) self_->__get_sample()
  

#define pymoose_RandGenerator_mean_get(self_) self_->__get_mean()
  

#define pymoose_RandGenerator_variance_get(self_) self_->__get_variance()
  

#define pymoose_UniformRng_mean_get(self_) self_->__get_mean()
  

#define pymoose_UniformRng_variance_get(self_) self_->__get_variance()
  

#define pymoose_UniformRng_min_get(self_) self_->__get_min()
#define pymoose_UniformRng_min_set(self_, val_) self_->__set_min(val_)
  

#define pymoose_UniformRng_max_get(self_) self_->__get_max()
#define pymoose_UniformRng_max_set(self_, val_) self_->__set_max(val_)
  

#define pymoose_GammaRng_alpha_get(self_) self_->__get_alpha()
#define pymoose_GammaRng_alpha_set(self_, val_) self_->__set_alpha(val_)
  

#define pymoose_GammaRng_theta_get(self_) self_->__get_theta()
#define pymoose_GammaRng_theta_set(self_, val_) self_->__set_theta(val_)
  

#define pymoose_ExponentialRng_mean_get(self_) self_->__get_mean()
#define pymoose_ExponentialRng_mean_set(self_, val_) self_->__set_mean(val_)
  

#define pymoose_ExponentialRng_method_get(self_) self_->__get_method()
#define pymoose_ExponentialRng_method_set(self_, val_) self_->__set_method(val_)
  

#define pymoose_BinomialRng_n_get(self_) self_->__get_n()
#define pymoose_BinomialRng_n_set(self_, val_) self_->__set_n(val_)
  

#define pymoose_BinomialRng_p_get(self_) self_->__get_p()
#define pymoose_BinomialRng_p_set(self_, val_) self_->__set_p(val_)
  

#define pymoose_PoissonRng_mean_get(self_) self_->__get_mean()
#define pymoose_PoissonRng_mean_set(self_, val_) self_->__set_mean(val_)
  

#define pymoose_NormalRng_mean_get(self_) self_->__get_mean()
#define pymoose_NormalRng_mean_set(self_, val_) self_->__set_mean(val_)
  

#define pymoose_NormalRng_variance_get(self_) self_->__get_variance()
#define pymoose_NormalRng_variance_set(self_, val_) self_->__set_variance(val_)
  

#define pymoose_NormalRng_method_get(self_) self_->__get_method()
#define pymoose_NormalRng_method_set(self_, val_) self_->__set_method(val_)
  

#define pymoose_KineticManager_autoMode_get(self_) self_->__get_autoMode()
#define pymoose_KineticManager_autoMode_set(self_, val_) self_->__set_autoMode(val_)
  

#define pymoose_KineticManager_stochastic_get(self_) self_->__get_stochastic()
#define pymoose_KineticManager_stochastic_set(self_, val_) self_->__set_stochastic(val_)
  

#define pymoose_KineticManager_spatial_get(self_) self_->__get_spatial()
#define pymoose_KineticManager_spatial_set(self_, val_) self_->__set_spatial(val_)
  

#define pymoose_KineticManager_method_get(self_) self_->__get_method()
#define pymoose_KineticManager_method_set(self_, val_) self_->__set_method(val_)
  

#define pymoose_KineticManager_variableDt_get(self_) self_->__get_variableDt()
  

#define pymoose_KineticManager_singleParticle_get(self_) self_->__get_singleParticle()
  

#define pymoose_KineticManager_multiscale_get(self_) self_->__get_multiscale()
  

#define pymoose_KineticManager_implicit_get(self_) self_->__get_implicit()
  

#define pymoose_KineticManager_description_get(self_) self_->__get_description()
  

#define pymoose_KineticManager_recommendedDt_get(self_) self_->__get_recommendedDt()
  

#define pymoose_KineticManager_eulerError_get(self_) self_->__get_eulerError()
#define pymoose_KineticManager_eulerError_set(self_, val_) self_->__set_eulerError(val_)
  

#define pymoose_KinCompt_volume_get(self_) self_->__get_volume()
#define pymoose_KinCompt_volume_set(self_, val_) self_->__set_volume(val_)
  

#define pymoose_KinCompt_area_get(self_) self_->__get_area()
#define pymoose_KinCompt_area_set(self_, val_) self_->__set_area(val_)
  

#define pymoose_KinCompt_perimeter_get(self_) self_->__get_perimeter()
#define pymoose_KinCompt_perimeter_set(self_, val_) self_->__set_perimeter(val_)
  

#define pymoose_KinCompt_size_get(self_) self_->__get_size()
#define pymoose_KinCompt_size_set(self_, val_) self_->__set_size(val_)
  

#define pymoose_KinCompt_numDimensions_get(self_) self_->__get_numDimensions()
#define pymoose_KinCompt_numDimensions_set(self_, val_) self_->__set_numDimensions(val_)
  

#define pymoose_Panel_nPts_get(self_) self_->__get_nPts()
  

#define pymoose_Panel_nDims_get(self_) self_->__get_nDims()
  

#define pymoose_Panel_nNeighbors_get(self_) self_->__get_nNeighbors()
  

#define pymoose_Panel_shapeId_get(self_) self_->__get_shapeId()
  

#define pymoose_Panel_coords_get(self_) self_->__get_coords()
  

#define pymoose_Surface_volume_get(self_) self_->__get_volume()
  

#define pymoose_Geometry_epsilon_get(self_) self_->__get_epsilon()
#define pymoose_Geometry_epsilon_set(self_, val_) self_->__set_epsilon(val_)
  

#define pymoose_Geometry_neighdist_get(self_) self_->__get_neighdist()
#define pymoose_Geometry_neighdist_set(self_, val_) self_->__set_neighdist(val_)
  

#define pymoose_Adaptor_inputOffset_get(self_) self_->__get_inputOffset()
#define pymoose_Adaptor_inputOffset_set(self_, val_) self_->__set_inputOffset(val_)
  

#define pymoose_Adaptor_outputOffset_get(self_) self_->__get_outputOffset()
#define pymoose_Adaptor_outputOffset_set(self_, val_) self_->__set_outputOffset(val_)
  

#define pymoose_Adaptor_scale_get(self_) self_->__get_scale()
#define pymoose_Adaptor_scale_set(self_, val_) self_->__set_scale(val_)
  

#define pymoose_Adaptor_output_get(self_) self_->__get_output()
  

#define pymoose_SigNeur_cellProto_get(self_) self_->__get_cellProto()
#define pymoose_SigNeur_cellProto_set(self_, val_) self_->__set_cellProto(val_)
  

#define pymoose_SigNeur_spineProto_get(self_) self_->__get_spineProto()
#define pymoose_SigNeur_spineProto_set(self_, val_) self_->__set_spineProto(val_)
  

#define pymoose_SigNeur_dendProto_get(self_) self_->__get_dendProto()
#define pymoose_SigNeur_dendProto_set(self_, val_) self_->__set_dendProto(val_)
  

#define pymoose_SigNeur_somaProto_get(self_) self_->__get_somaProto()
#define pymoose_SigNeur_somaProto_set(self_, val_) self_->__set_somaProto(val_)
  

#define pymoose_SigNeur_cell_get(self_) self_->__get_cell()
  

#define pymoose_SigNeur_spine_get(self_) self_->__get_spine()
  

#define pymoose_SigNeur_dend_get(self_) self_->__get_dend()
  

#define pymoose_SigNeur_soma_get(self_) self_->__get_soma()
  

#define pymoose_SigNeur_cellMethod_get(self_) self_->__get_cellMethod()
#define pymoose_SigNeur_cellMethod_set(self_, val_) self_->__set_cellMethod(val_)
  

#define pymoose_SigNeur_spineMethod_get(self_) self_->__get_spineMethod()
#define pymoose_SigNeur_spineMethod_set(self_, val_) self_->__set_spineMethod(val_)
  

#define pymoose_SigNeur_dendMethod_get(self_) self_->__get_dendMethod()
#define pymoose_SigNeur_dendMethod_set(self_, val_) self_->__set_dendMethod(val_)
  

#define pymoose_SigNeur_somaMethod_get(self_) self_->__get_somaMethod()
#define pymoose_SigNeur_somaMethod_set(self_, val_) self_->__set_somaMethod(val_)
  

#define pymoose_SigNeur_sigDt_get(self_) self_->__get_sigDt()
#define pymoose_SigNeur_sigDt_set(self_, val_) self_->__set_sigDt(val_)
  

#define pymoose_SigNeur_cellDt_get(self_) self_->__get_cellDt()
#define pymoose_SigNeur_cellDt_set(self_, val_) self_->__set_cellDt(val_)
  

#define pymoose_SigNeur_Dscale_get(self_) self_->__get_Dscale()
#define pymoose_SigNeur_Dscale_set(self_, val_) self_->__set_Dscale(val_)
  

#define pymoose_SigNeur_lambda__get(self_) self_->__get_lambda()
#define pymoose_SigNeur_lambda__set(self_, val_) self_->__set_lambda(val_)
  

#define pymoose_SigNeur_parallelMode_get(self_) self_->__get_parallelMode()
#define pymoose_SigNeur_parallelMode_set(self_, val_) self_->__set_parallelMode(val_)
  

#define pymoose_SigNeur_updateStep_get(self_) self_->__get_updateStep()
#define pymoose_SigNeur_updateStep_set(self_, val_) self_->__set_updateStep(val_)
  

#define pymoose_SigNeur_calciumScale_get(self_) self_->__get_calciumScale()
#define pymoose_SigNeur_calciumScale_set(self_, val_) self_->__set_calciumScale(val_)
  

#define pymoose_SigNeur_dendInclude_get(self_) self_->__get_dendInclude()
#define pymoose_SigNeur_dendInclude_set(self_, val_) self_->__set_dendInclude(val_)
  

#define pymoose_SigNeur_dendExclude_get(self_) self_->__get_dendExclude()
#define pymoose_SigNeur_dendExclude_set(self_, val_) self_->__set_dendExclude(val_)
  

#define pymoose_AscFile_fileName_get(self_) self_->__get_fileName()
#define pymoose_AscFile_fileName_set(self_, val_) self_->__set_fileName(val_)
  

#define pymoose_AscFile_appendFlag_get(self_) self_->__get_appendFlag()
#define pymoose_AscFile_appendFlag_set(self_, val_) self_->__set_appendFlag(val_)
  

#define pymoose_DifShell_C_get(self_) self_->__get_C()
  

#define pymoose_DifShell_Ceq_get(self_) self_->__get_Ceq()
#define pymoose_DifShell_Ceq_set(self_, val_) self_->__set_Ceq(val_)
  

#define pymoose_DifShell_D_get(self_) self_->__get_D()
#define pymoose_DifShell_D_set(self_, val_) self_->__set_D(val_)
  

#define pymoose_DifShell_valence_get(self_) self_->__get_valence()
#define pymoose_DifShell_valence_set(self_, val_) self_->__set_valence(val_)
  

#define pymoose_DifShell_leak_get(self_) self_->__get_leak()
#define pymoose_DifShell_leak_set(self_, val_) self_->__set_leak(val_)
  

#define pymoose_DifShell_shapeMode_get(self_) self_->__get_shapeMode()
#define pymoose_DifShell_shapeMode_set(self_, val_) self_->__set_shapeMode(val_)
  

#define pymoose_DifShell_length_get(self_) self_->__get_length()
#define pymoose_DifShell_length_set(self_, val_) self_->__set_length(val_)
  

#define pymoose_DifShell_diameter_get(self_) self_->__get_diameter()
#define pymoose_DifShell_diameter_set(self_, val_) self_->__set_diameter(val_)
  

#define pymoose_DifShell_thickness_get(self_) self_->__get_thickness()
#define pymoose_DifShell_thickness_set(self_, val_) self_->__set_thickness(val_)
  

#define pymoose_DifShell_volume_get(self_) self_->__get_volume()
#define pymoose_DifShell_volume_set(self_, val_) self_->__set_volume(val_)
  

#define pymoose_DifShell_outerArea_get(self_) self_->__get_outerArea()
#define pymoose_DifShell_outerArea_set(self_, val_) self_->__set_outerArea(val_)
  

#define pymoose_DifShell_innerArea_get(self_) self_->__get_innerArea()
#define pymoose_DifShell_innerArea_set(self_, val_) self_->__set_innerArea(val_)
  

#define pymoose_GssaStoich_method_get(self_) self_->__get_method()
#define pymoose_GssaStoich_method_set(self_, val_) self_->__set_method(val_)
  

#define pymoose_GssaStoich_path_get(self_) self_->__get_path()
#define pymoose_GssaStoich_path_set(self_, val_) self_->__set_path(val_)
  

#define pymoose_TauPump_pumpRate_get(self_) self_->__get_pumpRate()
#define pymoose_TauPump_pumpRate_set(self_, val_) self_->__set_pumpRate(val_)
  

#define pymoose_TauPump_eqConc_get(self_) self_->__get_eqConc()
#define pymoose_TauPump_eqConc_set(self_, val_) self_->__set_eqConc(val_)
  

#define pymoose_TauPump_TA_get(self_) self_->__get_TA()
#define pymoose_TauPump_TA_set(self_, val_) self_->__set_TA(val_)
  

#define pymoose_TauPump_TB_get(self_) self_->__get_TB()
#define pymoose_TauPump_TB_set(self_, val_) self_->__set_TB(val_)
  

#define pymoose_TauPump_TC_get(self_) self_->__get_TC()
#define pymoose_TauPump_TC_set(self_, val_) self_->__set_TC(val_)
  

#define pymoose_TauPump_TV_get(self_) self_->__get_TV()
#define pymoose_TauPump_TV_set(self_, val_) self_->__set_TV(val_)
  

#define pymoose_TimeTable_maxTime_get(self_) self_->__get_maxTime()
#define pymoose_TimeTable_maxTime_set(self_, val_) self_->__set_maxTime(val_)
  

#define pymoose_TimeTable_tableVector_get(self_) self_->__get_tableVector()
#define pymoose_TimeTable_tableVector_set(self_, val_) self_->__set_tableVector(val_)
  

#define pymoose_TimeTable_tableSize_get(self_) self_->__get_tableSize()
  
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_delete_PySwigIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_PySwigIterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PySwigIterator" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  PyObject *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_value",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_value" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (PyObject *)((swig::PySwigIterator const *)arg1)->value();
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = result;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_incr",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_incr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (swig::PySwigIterator *)(arg1)->incr(arg2);
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_incr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_incr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (swig::PySwigIterator *)(arg1)->incr();
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_incr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_PySwigIterator_incr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PySwigIterator_incr__SWIG_0(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_incr'.\n  Possible C/C++ prototypes are:\n""    incr(swig::PySwigIterator *,size_t)\n""    incr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  size_t arg2 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_decr",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_decr" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (swig::PySwigIterator *)(arg1)->decr(arg2);
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_decr",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_decr" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (swig::PySwigIterator *)(arg1)->decr();
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_decr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_PySwigIterator_decr__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PySwigIterator_decr__SWIG_0(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PySwigIterator_decr'.\n  Possible C/C++ prototypes are:\n""    decr(swig::PySwigIterator *,size_t)\n""    decr(swig::PySwigIterator *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  ptrdiff_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_distance",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_distance" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_distance" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = ((swig::PySwigIterator const *)arg1)->distance((swig::PySwigIterator const &)*arg2);
    }
    catch(std::invalid_argument &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_equal",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_equal" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator_equal" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (bool)((swig::PySwigIterator const *)arg1)->equal((swig::PySwigIterator const &)*arg2);
    }
    catch(std::invalid_argument &_e) {
      SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast< const std::invalid_argument& >(_e))),SWIGTYPE_p_std__invalid_argument,SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_copy",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_copy" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->copy();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  PyObject *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_next",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_next" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (PyObject *)(arg1)->next();
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = result;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  PyObject *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_previous",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_previous" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (PyObject *)(arg1)->previous();
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = result;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator_advance",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator_advance" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (swig::PySwigIterator *)(arg1)->advance(arg2);
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___eq__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___eq__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___eq__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((swig::PySwigIterator const *)arg1)->operator ==((swig::PySwigIterator const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___ne__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___ne__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___ne__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((swig::PySwigIterator const *)arg1)->operator !=((swig::PySwigIterator const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___iadd__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___iadd__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      {
        swig::PySwigIterator &_result_ref = (arg1)->operator +=(arg2);
        result = (swig::PySwigIterator *) &_result_ref;
      }
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___isub__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___isub__" "', argument " "1"" of type '" "swig::PySwigIterator *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      {
        swig::PySwigIterator &_result_ref = (arg1)->operator -=(arg2);
        result = (swig::PySwigIterator *) &_result_ref;
      }
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___add__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___add__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator +(arg2);
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  ptrdiff_t arg2 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___sub__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
  } 
  arg2 = static_cast< ptrdiff_t >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (swig::PySwigIterator *)((swig::PySwigIterator const *)arg1)->operator -(arg2);
    }
    catch(swig::stop_iteration &_e) {
      {
        (void)_e;
        SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
        SWIG_fail;
      }
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  swig::PySwigIterator *arg1 = (swig::PySwigIterator *) 0 ;
  swig::PySwigIterator *arg2 = 0 ;
  ptrdiff_t result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PySwigIterator___sub__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_swig__PySwigIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PySwigIterator___sub__" "', argument " "1"" of type '" "swig::PySwigIterator const *""'"); 
  }
  arg1 = reinterpret_cast< swig::PySwigIterator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_swig__PySwigIterator,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PySwigIterator___sub__" "', argument " "2"" of type '" "swig::PySwigIterator const &""'"); 
  }
  arg2 = reinterpret_cast< swig::PySwigIterator * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((swig::PySwigIterator const *)arg1)->operator -((swig::PySwigIterator const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_ptrdiff_t(static_cast< ptrdiff_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PySwigIterator___sub__(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__PySwigIterator, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PySwigIterator___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__PySwigIterator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PySwigIterator___sub____SWIG_0(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *PySwigIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_swig__PySwigIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_uint_vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_iterator" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::PySwigIterator *)std_vector_Sl_unsigned_SS_int_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector___nonzero__" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_unsigned_SS_int_Sg____nonzero__((std::vector<unsigned int > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector___len__" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_unsigned_SS_int_Sg____len__((std::vector<unsigned int > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::value_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_pop" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (std::vector<unsigned int >::value_type)std_vector_Sl_unsigned_SS_int_Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::difference_type arg2 ;
  std::vector<unsigned int >::difference_type arg3 ;
  std::vector<unsigned int,std::allocator<unsigned int > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector___getslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector___getslice__" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector___getslice__" "', argument " "2"" of type '" "std::vector<unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint_vector___getslice__" "', argument " "3"" of type '" "std::vector<unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<unsigned int >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (std::vector<unsigned int,std::allocator<unsigned int > > *)std_vector_Sl_unsigned_SS_int_Sg____getslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::difference_type arg2 ;
  std::vector<unsigned int >::difference_type arg3 ;
  std::vector<unsigned int,std::allocator<unsigned int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector___setslice__",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector___setslice__" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector___setslice__" "', argument " "2"" of type '" "std::vector<unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint_vector___setslice__" "', argument " "3"" of type '" "std::vector<unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<unsigned int >::difference_type >(val3);
  {
    std::vector<unsigned int,std::allocator<unsigned int > > *ptr = (std::vector<unsigned int,std::allocator<unsigned int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "uint_vector___setslice__" "', argument " "4"" of type '" "std::vector<unsigned int,std::allocator<unsigned int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "uint_vector___setslice__" "', argument " "4"" of type '" "std::vector<unsigned int,std::allocator<unsigned int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_unsigned_SS_int_Sg____setslice__(arg1,arg2,arg3,(std::vector<unsigned int,std::allocator<unsigned int > > const &)*arg4);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    catch(std::invalid_argument &_e) {
      SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::difference_type arg2 ;
  std::vector<unsigned int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector___delslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector___delslice__" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector___delslice__" "', argument " "2"" of type '" "std::vector<unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint_vector___delslice__" "', argument " "3"" of type '" "std::vector<unsigned int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<unsigned int >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_unsigned_SS_int_Sg____delslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector___delitem__" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector___delitem__" "', argument " "2"" of type '" "std::vector<unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_unsigned_SS_int_Sg____delitem__(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::difference_type arg2 ;
  std::vector<unsigned int >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector___getitem__" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector___getitem__" "', argument " "2"" of type '" "std::vector<unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      {
        std::vector<unsigned int >::value_type const &_result_ref = std_vector_Sl_unsigned_SS_int_Sg____getitem__((std::vector<unsigned int > const *)arg1,arg2);
        result = (std::vector<unsigned int >::value_type *) &_result_ref;
      }
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::difference_type arg2 ;
  std::vector<unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector<unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector___setitem__" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector___setitem__" "', argument " "2"" of type '" "std::vector<unsigned int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint_vector___setitem__" "', argument " "3"" of type '" "std::vector<unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector<unsigned int >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_unsigned_SS_int_Sg____setitem__(arg1,arg2,(unsigned int const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector<unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_append",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_append" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector_append" "', argument " "2"" of type '" "std::vector<unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector<unsigned int >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_unsigned_SS_int_Sg__append(arg1,(unsigned int const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_uint_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_uint_vector",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<unsigned int > *)new std::vector<unsigned int >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_uint_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = 0 ;
  std::vector<unsigned int > *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_uint_vector",1,1,&obj0)) SWIG_fail;
  {
    std::vector<unsigned int,std::allocator<unsigned int > > *ptr = (std::vector<unsigned int,std::allocator<unsigned int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_uint_vector" "', argument " "1"" of type '" "std::vector<unsigned int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_uint_vector" "', argument " "1"" of type '" "std::vector<unsigned int > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<unsigned int > *)new std::vector<unsigned int >((std::vector<unsigned int > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_empty" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::vector<unsigned int > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_size" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<unsigned int > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_clear" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_swap",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_swap" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "uint_vector_swap" "', argument " "2"" of type '" "std::vector<unsigned int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "uint_vector_swap" "', argument " "2"" of type '" "std::vector<unsigned int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<unsigned int > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  SwigValueWrapper< std::allocator<unsigned int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_get_allocator" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<unsigned int > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector<unsigned int >::allocator_type(static_cast< const std::vector<unsigned int >::allocator_type& >(result))), SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_begin" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_begin" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<unsigned int > const *)arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_uint_vector_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_uint_vector_begin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'uint_vector_begin'.\n  Possible C/C++ prototypes are:\n""    begin(std::vector<unsigned int > *)\n""    begin(std::vector<unsigned int > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_end" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_end" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<unsigned int > const *)arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_uint_vector_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_uint_vector_end__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'uint_vector_end'.\n  Possible C/C++ prototypes are:\n""    end(std::vector<unsigned int > *)\n""    end(std::vector<unsigned int > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_rbegin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_rbegin" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_rbegin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_rbegin" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<unsigned int > const *)arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_rbegin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_uint_vector_rbegin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_uint_vector_rbegin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'uint_vector_rbegin'.\n  Possible C/C++ prototypes are:\n""    rbegin(std::vector<unsigned int > *)\n""    rbegin(std::vector<unsigned int > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_rend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_rend" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_rend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_rend" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<unsigned int > const *)arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_rend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_uint_vector_rend__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_uint_vector_rend__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'uint_vector_rend'.\n  Possible C/C++ prototypes are:\n""    rend(std::vector<unsigned int > *)\n""    rend(std::vector<unsigned int > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_uint_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int >::size_type arg1 ;
  std::vector<unsigned int > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_uint_vector",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_uint_vector" "', argument " "1"" of type '" "std::vector<unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector<unsigned int >::size_type >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<unsigned int > *)new std::vector<unsigned int >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_pop_back" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->pop_back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_resize" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector_resize" "', argument " "2"" of type '" "std::vector<unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::iterator arg2 ;
  std::vector<unsigned int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_erase" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_erase" "', argument " "2"" of type '" "std::vector<unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_erase" "', argument " "2"" of type '" "std::vector<unsigned int >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::iterator arg2 ;
  std::vector<unsigned int >::iterator arg3 ;
  std::vector<unsigned int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_erase" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_erase" "', argument " "2"" of type '" "std::vector<unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_erase" "', argument " "2"" of type '" "std::vector<unsigned int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_erase" "', argument " "3"" of type '" "std::vector<unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_erase" "', argument " "3"" of type '" "std::vector<unsigned int >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_uint_vector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter) != 0));
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_uint_vector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'uint_vector_erase'.\n  Possible C/C++ prototypes are:\n""    erase(std::vector<unsigned int > *,std::vector<unsigned int >::iterator)\n""    erase(std::vector<unsigned int > *,std::vector<unsigned int >::iterator,std::vector<unsigned int >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_uint_vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int >::size_type arg1 ;
  std::vector<unsigned int >::value_type *arg2 = 0 ;
  std::vector<unsigned int > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector<unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_uint_vector",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_uint_vector" "', argument " "1"" of type '" "std::vector<unsigned int >::size_type""'");
  } 
  arg1 = static_cast< std::vector<unsigned int >::size_type >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_uint_vector" "', argument " "2"" of type '" "std::vector<unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector<unsigned int >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<unsigned int > *)new std::vector<unsigned int >(arg1,(std::vector<unsigned int >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_uint_vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_uint_vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_uint_vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_uint_vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_uint_vector__SWIG_3(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_uint_vector'.\n  Possible C/C++ prototypes are:\n""    std::vector<(unsigned int)>()\n""    std::vector<(unsigned int)>(std::vector<unsigned int > const &)\n""    std::vector<(unsigned int)>(std::vector<unsigned int >::size_type)\n""    std::vector<(unsigned int)>(std::vector<unsigned int >::size_type,std::vector<unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector<unsigned int >::value_type temp2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_push_back",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_push_back" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector_push_back" "', argument " "2"" of type '" "std::vector<unsigned int >::value_type""'");
  } 
  temp2 = static_cast< std::vector<unsigned int >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->push_back((std::vector<unsigned int >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_front" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<unsigned int >::value_type const &_result_ref = ((std::vector<unsigned int > const *)arg1)->front();
      result = (std::vector<unsigned int >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_back" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<unsigned int >::value_type const &_result_ref = ((std::vector<unsigned int > const *)arg1)->back();
      result = (std::vector<unsigned int >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type arg2 ;
  std::vector<unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector<unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_assign",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_assign" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector_assign" "', argument " "2"" of type '" "std::vector<unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint_vector_assign" "', argument " "3"" of type '" "std::vector<unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector<unsigned int >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,(std::vector<unsigned int >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type arg2 ;
  std::vector<unsigned int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector<unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_resize" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector_resize" "', argument " "2"" of type '" "std::vector<unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::size_type >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint_vector_resize" "', argument " "3"" of type '" "std::vector<unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector<unsigned int >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,(std::vector<unsigned int >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_uint_vector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_uint_vector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'uint_vector_resize'.\n  Possible C/C++ prototypes are:\n""    resize(std::vector<unsigned int > *,std::vector<unsigned int >::size_type)\n""    resize(std::vector<unsigned int > *,std::vector<unsigned int >::size_type,std::vector<unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::iterator arg2 ;
  std::vector<unsigned int >::value_type *arg3 = 0 ;
  std::vector<unsigned int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  std::vector<unsigned int >::value_type temp3 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_insert" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_insert" "', argument " "2"" of type '" "std::vector<unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_insert" "', argument " "2"" of type '" "std::vector<unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint_vector_insert" "', argument " "3"" of type '" "std::vector<unsigned int >::value_type""'");
  } 
  temp3 = static_cast< std::vector<unsigned int >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->insert(arg2,(std::vector<unsigned int >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<unsigned int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::iterator arg2 ;
  std::vector<unsigned int >::size_type arg3 ;
  std::vector<unsigned int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector<unsigned int >::value_type temp4 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_insert" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_insert" "', argument " "2"" of type '" "std::vector<unsigned int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "uint_vector_insert" "', argument " "2"" of type '" "std::vector<unsigned int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "uint_vector_insert" "', argument " "3"" of type '" "std::vector<unsigned int >::size_type""'");
  } 
  arg3 = static_cast< std::vector<unsigned int >::size_type >(val3);
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "uint_vector_insert" "', argument " "4"" of type '" "std::vector<unsigned int >::value_type""'");
  } 
  temp4 = static_cast< std::vector<unsigned int >::value_type >(val4);
  arg4 = &temp4;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->insert(arg2,arg3,(std::vector<unsigned int >::value_type const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_uint_vector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<unsigned int,std::allocator<unsigned int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<unsigned int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_uint_vector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'uint_vector_insert'.\n  Possible C/C++ prototypes are:\n""    insert(std::vector<unsigned int > *,std::vector<unsigned int >::iterator,std::vector<unsigned int >::value_type const &)\n""    insert(std::vector<unsigned int > *,std::vector<unsigned int >::iterator,std::vector<unsigned int >::size_type,std::vector<unsigned int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_reserve",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_reserve" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "uint_vector_reserve" "', argument " "2"" of type '" "std::vector<unsigned int >::size_type""'");
  } 
  arg2 = static_cast< std::vector<unsigned int >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_uint_vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  std::vector<unsigned int >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"uint_vector_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "uint_vector_capacity" "', argument " "1"" of type '" "std::vector<unsigned int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<unsigned int > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_uint_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<unsigned int > *arg1 = (std::vector<unsigned int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_uint_vector",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_uint_vector" "', argument " "1"" of type '" "std::vector<unsigned int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<unsigned int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *uint_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_int_vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_iterator" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::PySwigIterator *)std_vector_Sl_int_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector___nonzero__" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_int_Sg____nonzero__((std::vector<int > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector___len__" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_int_Sg____len__((std::vector<int > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::value_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_pop" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (std::vector<int >::value_type)std_vector_Sl_int_Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::difference_type arg2 ;
  std::vector<int >::difference_type arg3 ;
  std::vector<int,std::allocator<int > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector___getslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector___getslice__" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector___getslice__" "', argument " "2"" of type '" "std::vector<int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int_vector___getslice__" "', argument " "3"" of type '" "std::vector<int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<int >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (std::vector<int,std::allocator<int > > *)std_vector_Sl_int_Sg____getslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::difference_type arg2 ;
  std::vector<int >::difference_type arg3 ;
  std::vector<int,std::allocator<int > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector___setslice__",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector___setslice__" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector___setslice__" "', argument " "2"" of type '" "std::vector<int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int_vector___setslice__" "', argument " "3"" of type '" "std::vector<int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<int >::difference_type >(val3);
  {
    std::vector<int,std::allocator<int > > *ptr = (std::vector<int,std::allocator<int > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "int_vector___setslice__" "', argument " "4"" of type '" "std::vector<int,std::allocator<int > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "int_vector___setslice__" "', argument " "4"" of type '" "std::vector<int,std::allocator<int > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_int_Sg____setslice__(arg1,arg2,arg3,(std::vector<int,std::allocator<int > > const &)*arg4);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    catch(std::invalid_argument &_e) {
      SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::difference_type arg2 ;
  std::vector<int >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector___delslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector___delslice__" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector___delslice__" "', argument " "2"" of type '" "std::vector<int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int_vector___delslice__" "', argument " "3"" of type '" "std::vector<int >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<int >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_int_Sg____delslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector___delitem__" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector___delitem__" "', argument " "2"" of type '" "std::vector<int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<int >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_int_Sg____delitem__(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::difference_type arg2 ;
  std::vector<int >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector___getitem__" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector___getitem__" "', argument " "2"" of type '" "std::vector<int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<int >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      {
        std::vector<int >::value_type const &_result_ref = std_vector_Sl_int_Sg____getitem__((std::vector<int > const *)arg1,arg2);
        result = (std::vector<int >::value_type *) &_result_ref;
      }
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::difference_type arg2 ;
  std::vector<int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector<int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector___setitem__" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector___setitem__" "', argument " "2"" of type '" "std::vector<int >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<int >::difference_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int_vector___setitem__" "', argument " "3"" of type '" "std::vector<int >::value_type""'");
  } 
  temp3 = static_cast< std::vector<int >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_int_Sg____setitem__(arg1,arg2,(int const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector<int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_append",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_append" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_append" "', argument " "2"" of type '" "std::vector<int >::value_type""'");
  } 
  temp2 = static_cast< std::vector<int >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_int_Sg__append(arg1,(int const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_int_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_int_vector",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<int > *)new std::vector<int >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_int_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = 0 ;
  std::vector<int > *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_int_vector",1,1,&obj0)) SWIG_fail;
  {
    std::vector<int,std::allocator<int > > *ptr = (std::vector<int,std::allocator<int > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_int_vector" "', argument " "1"" of type '" "std::vector<int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_int_vector" "', argument " "1"" of type '" "std::vector<int > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<int > *)new std::vector<int >((std::vector<int > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_empty" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::vector<int > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_size" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<int > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_clear" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_swap",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_swap" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "int_vector_swap" "', argument " "2"" of type '" "std::vector<int > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "int_vector_swap" "', argument " "2"" of type '" "std::vector<int > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<int > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  SwigValueWrapper< std::allocator<int > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_get_allocator" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<int > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector<int >::allocator_type(static_cast< const std::vector<int >::allocator_type& >(result))), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_begin" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_begin" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<int > const *)arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_int_vector_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_int_vector_begin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'int_vector_begin'.\n  Possible C/C++ prototypes are:\n""    begin(std::vector<int > *)\n""    begin(std::vector<int > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_end" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_end" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<int > const *)arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_int_vector_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_int_vector_end__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'int_vector_end'.\n  Possible C/C++ prototypes are:\n""    end(std::vector<int > *)\n""    end(std::vector<int > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_rbegin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_rbegin" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_rbegin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_rbegin" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<int > const *)arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_rbegin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_int_vector_rbegin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_int_vector_rbegin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'int_vector_rbegin'.\n  Possible C/C++ prototypes are:\n""    rbegin(std::vector<int > *)\n""    rbegin(std::vector<int > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_rend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_rend" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_rend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_rend" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<int > const *)arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_rend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_int_vector_rend__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_int_vector_rend__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'int_vector_rend'.\n  Possible C/C++ prototypes are:\n""    rend(std::vector<int > *)\n""    rend(std::vector<int > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_int_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int >::size_type arg1 ;
  std::vector<int > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_int_vector",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_int_vector" "', argument " "1"" of type '" "std::vector<int >::size_type""'");
  } 
  arg1 = static_cast< std::vector<int >::size_type >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<int > *)new std::vector<int >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_pop_back" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->pop_back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_resize" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_resize" "', argument " "2"" of type '" "std::vector<int >::size_type""'");
  } 
  arg2 = static_cast< std::vector<int >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::iterator arg2 ;
  std::vector<int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_erase" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_erase" "', argument " "2"" of type '" "std::vector<int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_erase" "', argument " "2"" of type '" "std::vector<int >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::iterator arg2 ;
  std::vector<int >::iterator arg3 ;
  std::vector<int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_erase" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_erase" "', argument " "2"" of type '" "std::vector<int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_erase" "', argument " "2"" of type '" "std::vector<int >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_erase" "', argument " "3"" of type '" "std::vector<int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_erase" "', argument " "3"" of type '" "std::vector<int >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter) != 0));
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_int_vector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter) != 0));
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_int_vector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'int_vector_erase'.\n  Possible C/C++ prototypes are:\n""    erase(std::vector<int > *,std::vector<int >::iterator)\n""    erase(std::vector<int > *,std::vector<int >::iterator,std::vector<int >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_int_vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int >::size_type arg1 ;
  std::vector<int >::value_type *arg2 = 0 ;
  std::vector<int > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector<int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_int_vector",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_int_vector" "', argument " "1"" of type '" "std::vector<int >::size_type""'");
  } 
  arg1 = static_cast< std::vector<int >::size_type >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_int_vector" "', argument " "2"" of type '" "std::vector<int >::value_type""'");
  } 
  temp2 = static_cast< std::vector<int >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<int > *)new std::vector<int >(arg1,(std::vector<int >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_int_vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_int_vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_int_vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_int_vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_int_vector__SWIG_3(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_int_vector'.\n  Possible C/C++ prototypes are:\n""    std::vector<(int)>()\n""    std::vector<(int)>(std::vector<int > const &)\n""    std::vector<(int)>(std::vector<int >::size_type)\n""    std::vector<(int)>(std::vector<int >::size_type,std::vector<int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector<int >::value_type temp2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_push_back",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_push_back" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_push_back" "', argument " "2"" of type '" "std::vector<int >::value_type""'");
  } 
  temp2 = static_cast< std::vector<int >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->push_back((std::vector<int >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_front" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<int >::value_type const &_result_ref = ((std::vector<int > const *)arg1)->front();
      result = (std::vector<int >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_back" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<int >::value_type const &_result_ref = ((std::vector<int > const *)arg1)->back();
      result = (std::vector<int >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type arg2 ;
  std::vector<int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector<int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_assign",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_assign" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_assign" "', argument " "2"" of type '" "std::vector<int >::size_type""'");
  } 
  arg2 = static_cast< std::vector<int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int_vector_assign" "', argument " "3"" of type '" "std::vector<int >::value_type""'");
  } 
  temp3 = static_cast< std::vector<int >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,(std::vector<int >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type arg2 ;
  std::vector<int >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector<int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_resize" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_resize" "', argument " "2"" of type '" "std::vector<int >::size_type""'");
  } 
  arg2 = static_cast< std::vector<int >::size_type >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int_vector_resize" "', argument " "3"" of type '" "std::vector<int >::value_type""'");
  } 
  temp3 = static_cast< std::vector<int >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,(std::vector<int >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_int_vector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_int_vector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'int_vector_resize'.\n  Possible C/C++ prototypes are:\n""    resize(std::vector<int > *,std::vector<int >::size_type)\n""    resize(std::vector<int > *,std::vector<int >::size_type,std::vector<int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::iterator arg2 ;
  std::vector<int >::value_type *arg3 = 0 ;
  std::vector<int >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  std::vector<int >::value_type temp3 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_insert" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_insert" "', argument " "2"" of type '" "std::vector<int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_insert" "', argument " "2"" of type '" "std::vector<int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int_vector_insert" "', argument " "3"" of type '" "std::vector<int >::value_type""'");
  } 
  temp3 = static_cast< std::vector<int >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->insert(arg2,(std::vector<int >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<int >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::iterator arg2 ;
  std::vector<int >::size_type arg3 ;
  std::vector<int >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector<int >::value_type temp4 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_insert" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_insert" "', argument " "2"" of type '" "std::vector<int >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<int >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "int_vector_insert" "', argument " "2"" of type '" "std::vector<int >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "int_vector_insert" "', argument " "3"" of type '" "std::vector<int >::size_type""'");
  } 
  arg3 = static_cast< std::vector<int >::size_type >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "int_vector_insert" "', argument " "4"" of type '" "std::vector<int >::value_type""'");
  } 
  temp4 = static_cast< std::vector<int >::value_type >(val4);
  arg4 = &temp4;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->insert(arg2,arg3,(std::vector<int >::value_type const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_int_vector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<int,std::allocator<int > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<int >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_int_vector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'int_vector_insert'.\n  Possible C/C++ prototypes are:\n""    insert(std::vector<int > *,std::vector<int >::iterator,std::vector<int >::value_type const &)\n""    insert(std::vector<int > *,std::vector<int >::iterator,std::vector<int >::size_type,std::vector<int >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_reserve",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_reserve" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "int_vector_reserve" "', argument " "2"" of type '" "std::vector<int >::size_type""'");
  } 
  arg2 = static_cast< std::vector<int >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_int_vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"int_vector_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "int_vector_capacity" "', argument " "1"" of type '" "std::vector<int > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<int > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_int_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_int_vector",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_int_vector" "', argument " "1"" of type '" "std::vector<int > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<int > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *int_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorTint_std__allocatorTint_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_double_vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_iterator" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::PySwigIterator *)std_vector_Sl_double_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector___nonzero__" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_double_Sg____nonzero__((std::vector<double > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector___len__" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_double_Sg____len__((std::vector<double > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::value_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_pop" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (std::vector<double >::value_type)std_vector_Sl_double_Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::difference_type arg2 ;
  std::vector<double >::difference_type arg3 ;
  std::vector<double,std::allocator<double > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector___getslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector___getslice__" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector___getslice__" "', argument " "2"" of type '" "std::vector<double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "double_vector___getslice__" "', argument " "3"" of type '" "std::vector<double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<double >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (std::vector<double,std::allocator<double > > *)std_vector_Sl_double_Sg____getslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::difference_type arg2 ;
  std::vector<double >::difference_type arg3 ;
  std::vector<double,std::allocator<double > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector___setslice__",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector___setslice__" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector___setslice__" "', argument " "2"" of type '" "std::vector<double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "double_vector___setslice__" "', argument " "3"" of type '" "std::vector<double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<double >::difference_type >(val3);
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "double_vector___setslice__" "', argument " "4"" of type '" "std::vector<double,std::allocator<double > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "double_vector___setslice__" "', argument " "4"" of type '" "std::vector<double,std::allocator<double > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_double_Sg____setslice__(arg1,arg2,arg3,(std::vector<double,std::allocator<double > > const &)*arg4);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    catch(std::invalid_argument &_e) {
      SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::difference_type arg2 ;
  std::vector<double >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector___delslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector___delslice__" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector___delslice__" "', argument " "2"" of type '" "std::vector<double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "double_vector___delslice__" "', argument " "3"" of type '" "std::vector<double >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<double >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_double_Sg____delslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector___delitem__" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector___delitem__" "', argument " "2"" of type '" "std::vector<double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<double >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_double_Sg____delitem__(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::difference_type arg2 ;
  std::vector<double >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector___getitem__" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector___getitem__" "', argument " "2"" of type '" "std::vector<double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<double >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      {
        std::vector<double >::value_type const &_result_ref = std_vector_Sl_double_Sg____getitem__((std::vector<double > const *)arg1,arg2);
        result = (std::vector<double >::value_type *) &_result_ref;
      }
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::difference_type arg2 ;
  std::vector<double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  std::vector<double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector___setitem__" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector___setitem__" "', argument " "2"" of type '" "std::vector<double >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<double >::difference_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "double_vector___setitem__" "', argument " "3"" of type '" "std::vector<double >::value_type""'");
  } 
  temp3 = static_cast< std::vector<double >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_double_Sg____setitem__(arg1,arg2,(double const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector<double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_append",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_append" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector_append" "', argument " "2"" of type '" "std::vector<double >::value_type""'");
  } 
  temp2 = static_cast< std::vector<double >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_double_Sg__append(arg1,(double const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_double_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_double_vector",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<double > *)new std::vector<double >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_double_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = 0 ;
  std::vector<double > *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_double_vector",1,1,&obj0)) SWIG_fail;
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_double_vector" "', argument " "1"" of type '" "std::vector<double > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_double_vector" "', argument " "1"" of type '" "std::vector<double > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<double > *)new std::vector<double >((std::vector<double > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_empty" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::vector<double > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_size" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<double > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_clear" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_swap",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_swap" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "double_vector_swap" "', argument " "2"" of type '" "std::vector<double > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "double_vector_swap" "', argument " "2"" of type '" "std::vector<double > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<double > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  SwigValueWrapper< std::allocator<double > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_get_allocator" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<double > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector<double >::allocator_type(static_cast< const std::vector<double >::allocator_type& >(result))), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_begin" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_begin" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<double > const *)arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_double_vector_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_double_vector_begin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'double_vector_begin'.\n  Possible C/C++ prototypes are:\n""    begin(std::vector<double > *)\n""    begin(std::vector<double > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_end" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_end" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<double > const *)arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_double_vector_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_double_vector_end__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'double_vector_end'.\n  Possible C/C++ prototypes are:\n""    end(std::vector<double > *)\n""    end(std::vector<double > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_rbegin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_rbegin" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_rbegin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_rbegin" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<double > const *)arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_rbegin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_double_vector_rbegin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_double_vector_rbegin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'double_vector_rbegin'.\n  Possible C/C++ prototypes are:\n""    rbegin(std::vector<double > *)\n""    rbegin(std::vector<double > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_rend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_rend" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_rend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_rend" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<double > const *)arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_rend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_double_vector_rend__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_double_vector_rend__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'double_vector_rend'.\n  Possible C/C++ prototypes are:\n""    rend(std::vector<double > *)\n""    rend(std::vector<double > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_double_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double >::size_type arg1 ;
  std::vector<double > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_double_vector",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_double_vector" "', argument " "1"" of type '" "std::vector<double >::size_type""'");
  } 
  arg1 = static_cast< std::vector<double >::size_type >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<double > *)new std::vector<double >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_pop_back" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->pop_back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_resize" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector_resize" "', argument " "2"" of type '" "std::vector<double >::size_type""'");
  } 
  arg2 = static_cast< std::vector<double >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::iterator arg2 ;
  std::vector<double >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_erase" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_erase" "', argument " "2"" of type '" "std::vector<double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_erase" "', argument " "2"" of type '" "std::vector<double >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::iterator arg2 ;
  std::vector<double >::iterator arg3 ;
  std::vector<double >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_erase" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_erase" "', argument " "2"" of type '" "std::vector<double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_erase" "', argument " "2"" of type '" "std::vector<double >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_erase" "', argument " "3"" of type '" "std::vector<double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_erase" "', argument " "3"" of type '" "std::vector<double >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter) != 0));
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_double_vector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter) != 0));
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_double_vector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'double_vector_erase'.\n  Possible C/C++ prototypes are:\n""    erase(std::vector<double > *,std::vector<double >::iterator)\n""    erase(std::vector<double > *,std::vector<double >::iterator,std::vector<double >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_double_vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double >::size_type arg1 ;
  std::vector<double >::value_type *arg2 = 0 ;
  std::vector<double > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  std::vector<double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_double_vector",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_double_vector" "', argument " "1"" of type '" "std::vector<double >::size_type""'");
  } 
  arg1 = static_cast< std::vector<double >::size_type >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_double_vector" "', argument " "2"" of type '" "std::vector<double >::value_type""'");
  } 
  temp2 = static_cast< std::vector<double >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<double > *)new std::vector<double >(arg1,(std::vector<double >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_double_vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_double_vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_double_vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_double_vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_double_vector__SWIG_3(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_double_vector'.\n  Possible C/C++ prototypes are:\n""    std::vector<(double)>()\n""    std::vector<(double)>(std::vector<double > const &)\n""    std::vector<(double)>(std::vector<double >::size_type)\n""    std::vector<(double)>(std::vector<double >::size_type,std::vector<double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector<double >::value_type temp2 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_push_back",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_push_back" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector_push_back" "', argument " "2"" of type '" "std::vector<double >::value_type""'");
  } 
  temp2 = static_cast< std::vector<double >::value_type >(val2);
  arg2 = &temp2;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->push_back((std::vector<double >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_front" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<double >::value_type const &_result_ref = ((std::vector<double > const *)arg1)->front();
      result = (std::vector<double >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_back" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<double >::value_type const &_result_ref = ((std::vector<double > const *)arg1)->back();
      result = (std::vector<double >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type arg2 ;
  std::vector<double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector<double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_assign",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_assign" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector_assign" "', argument " "2"" of type '" "std::vector<double >::size_type""'");
  } 
  arg2 = static_cast< std::vector<double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "double_vector_assign" "', argument " "3"" of type '" "std::vector<double >::value_type""'");
  } 
  temp3 = static_cast< std::vector<double >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,(std::vector<double >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type arg2 ;
  std::vector<double >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  std::vector<double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_resize" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector_resize" "', argument " "2"" of type '" "std::vector<double >::size_type""'");
  } 
  arg2 = static_cast< std::vector<double >::size_type >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "double_vector_resize" "', argument " "3"" of type '" "std::vector<double >::value_type""'");
  } 
  temp3 = static_cast< std::vector<double >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,(std::vector<double >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_double_vector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_double_vector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'double_vector_resize'.\n  Possible C/C++ prototypes are:\n""    resize(std::vector<double > *,std::vector<double >::size_type)\n""    resize(std::vector<double > *,std::vector<double >::size_type,std::vector<double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::iterator arg2 ;
  std::vector<double >::value_type *arg3 = 0 ;
  std::vector<double >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  std::vector<double >::value_type temp3 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_insert" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_insert" "', argument " "2"" of type '" "std::vector<double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_insert" "', argument " "2"" of type '" "std::vector<double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "double_vector_insert" "', argument " "3"" of type '" "std::vector<double >::value_type""'");
  } 
  temp3 = static_cast< std::vector<double >::value_type >(val3);
  arg3 = &temp3;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->insert(arg2,(std::vector<double >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<double >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::iterator arg2 ;
  std::vector<double >::size_type arg3 ;
  std::vector<double >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  std::vector<double >::value_type temp4 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_insert" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_insert" "', argument " "2"" of type '" "std::vector<double >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<double >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "double_vector_insert" "', argument " "2"" of type '" "std::vector<double >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "double_vector_insert" "', argument " "3"" of type '" "std::vector<double >::size_type""'");
  } 
  arg3 = static_cast< std::vector<double >::size_type >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "double_vector_insert" "', argument " "4"" of type '" "std::vector<double >::value_type""'");
  } 
  temp4 = static_cast< std::vector<double >::value_type >(val4);
  arg4 = &temp4;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->insert(arg2,arg3,(std::vector<double >::value_type const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_double_vector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<double,std::allocator<double > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<double >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_double_vector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'double_vector_insert'.\n  Possible C/C++ prototypes are:\n""    insert(std::vector<double > *,std::vector<double >::iterator,std::vector<double >::value_type const &)\n""    insert(std::vector<double > *,std::vector<double >::iterator,std::vector<double >::size_type,std::vector<double >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_reserve",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_reserve" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "double_vector_reserve" "', argument " "2"" of type '" "std::vector<double >::size_type""'");
  } 
  arg2 = static_cast< std::vector<double >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_double_vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"double_vector_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "double_vector_capacity" "', argument " "1"" of type '" "std::vector<double > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<double > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_double_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_double_vector",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_double_vector" "', argument " "1"" of type '" "std::vector<double > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<double > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *double_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_string_vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_iterator" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::PySwigIterator *)std_vector_Sl_std_string_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector___nonzero__" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_std_string_Sg____nonzero__((std::vector<std::string > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector___len__" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_std_string_Sg____len__((std::vector<std::string > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::value_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_pop" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = std_vector_Sl_std_string_Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::difference_type arg2 ;
  std::vector<std::string >::difference_type arg3 ;
  std::vector<std::string,std::allocator<std::string > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector___getslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector___getslice__" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector___getslice__" "', argument " "2"" of type '" "std::vector<std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_vector___getslice__" "', argument " "3"" of type '" "std::vector<std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<std::string >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (std::vector<std::string,std::allocator<std::string > > *)std_vector_Sl_std_string_Sg____getslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::difference_type arg2 ;
  std::vector<std::string >::difference_type arg3 ;
  std::vector<std::string,std::allocator<std::string > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector___setslice__",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector___setslice__" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector___setslice__" "', argument " "2"" of type '" "std::vector<std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_vector___setslice__" "', argument " "3"" of type '" "std::vector<std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<std::string >::difference_type >(val3);
  {
    std::vector<std::string,std::allocator<std::string > > *ptr = (std::vector<std::string,std::allocator<std::string > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_vector___setslice__" "', argument " "4"" of type '" "std::vector<std::string,std::allocator<std::string > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector___setslice__" "', argument " "4"" of type '" "std::vector<std::string,std::allocator<std::string > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_std_string_Sg____setslice__(arg1,arg2,arg3,(std::vector<std::string,std::allocator<std::string > > const &)*arg4);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    catch(std::invalid_argument &_e) {
      SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::difference_type arg2 ;
  std::vector<std::string >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector___delslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector___delslice__" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector___delslice__" "', argument " "2"" of type '" "std::vector<std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_vector___delslice__" "', argument " "3"" of type '" "std::vector<std::string >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<std::string >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_std_string_Sg____delslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector___delitem__" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector___delitem__" "', argument " "2"" of type '" "std::vector<std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_std_string_Sg____delitem__(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::difference_type arg2 ;
  std::vector<std::string >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector___getitem__" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector___getitem__" "', argument " "2"" of type '" "std::vector<std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      {
        std::vector<std::string >::value_type const &_result_ref = std_vector_Sl_std_string_Sg____getitem__((std::vector<std::string > const *)arg1,arg2);
        result = (std::vector<std::string >::value_type *) &_result_ref;
      }
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::difference_type arg2 ;
  std::vector<std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector___setitem__" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector___setitem__" "', argument " "2"" of type '" "std::vector<std::string >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::difference_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_vector___setitem__" "', argument " "3"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector___setitem__" "', argument " "3"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_std_string_Sg____setitem__(arg1,arg2,(std::string const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_append",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_append" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_vector_append" "', argument " "2"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector_append" "', argument " "2"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_std_string_Sg__append(arg1,(std::string const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_string_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_string_vector",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<std::string > *)new std::vector<std::string >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_string_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = 0 ;
  std::vector<std::string > *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_string_vector",1,1,&obj0)) SWIG_fail;
  {
    std::vector<std::string,std::allocator<std::string > > *ptr = (std::vector<std::string,std::allocator<std::string > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_string_vector" "', argument " "1"" of type '" "std::vector<std::string > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string_vector" "', argument " "1"" of type '" "std::vector<std::string > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<std::string > *)new std::vector<std::string >((std::vector<std::string > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_empty" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::vector<std::string > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_size" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<std::string > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_clear" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_swap",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_swap" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_vector_swap" "', argument " "2"" of type '" "std::vector<std::string > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector_swap" "', argument " "2"" of type '" "std::vector<std::string > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<std::string > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  SwigValueWrapper< std::allocator<std::string > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_get_allocator" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<std::string > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector<std::string >::allocator_type(static_cast< const std::vector<std::string >::allocator_type& >(result))), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_begin" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_begin" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<std::string > const *)arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_string_vector_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_string_vector_begin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'string_vector_begin'.\n  Possible C/C++ prototypes are:\n""    begin(std::vector<std::string > *)\n""    begin(std::vector<std::string > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_end" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_end" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<std::string > const *)arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_string_vector_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_string_vector_end__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'string_vector_end'.\n  Possible C/C++ prototypes are:\n""    end(std::vector<std::string > *)\n""    end(std::vector<std::string > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_rbegin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_rbegin" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_rbegin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_rbegin" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<std::string > const *)arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_rbegin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_string_vector_rbegin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_string_vector_rbegin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'string_vector_rbegin'.\n  Possible C/C++ prototypes are:\n""    rbegin(std::vector<std::string > *)\n""    rbegin(std::vector<std::string > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_rend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_rend" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_rend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_rend" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<std::string > const *)arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_rend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_string_vector_rend__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_string_vector_rend__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'string_vector_rend'.\n  Possible C/C++ prototypes are:\n""    rend(std::vector<std::string > *)\n""    rend(std::vector<std::string > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_string_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string >::size_type arg1 ;
  std::vector<std::string > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_string_vector",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_string_vector" "', argument " "1"" of type '" "std::vector<std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector<std::string >::size_type >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_pop_back" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->pop_back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_resize" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector_resize" "', argument " "2"" of type '" "std::vector<std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::iterator arg2 ;
  std::vector<std::string >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_erase" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_erase" "', argument " "2"" of type '" "std::vector<std::string >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<std::string >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_erase" "', argument " "2"" of type '" "std::vector<std::string >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::iterator arg2 ;
  std::vector<std::string >::iterator arg3 ;
  std::vector<std::string >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_erase" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_erase" "', argument " "2"" of type '" "std::vector<std::string >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<std::string >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_erase" "', argument " "2"" of type '" "std::vector<std::string >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_erase" "', argument " "3"" of type '" "std::vector<std::string >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<std::string >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_erase" "', argument " "3"" of type '" "std::vector<std::string >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter) != 0));
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_string_vector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter) != 0));
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_string_vector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'string_vector_erase'.\n  Possible C/C++ prototypes are:\n""    erase(std::vector<std::string > *,std::vector<std::string >::iterator)\n""    erase(std::vector<std::string > *,std::vector<std::string >::iterator,std::vector<std::string >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_string_vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string >::size_type arg1 ;
  std::vector<std::string >::value_type *arg2 = 0 ;
  std::vector<std::string > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_string_vector",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_string_vector" "', argument " "1"" of type '" "std::vector<std::string >::size_type""'");
  } 
  arg1 = static_cast< std::vector<std::string >::size_type >(val1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_string_vector" "', argument " "2"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_string_vector" "', argument " "2"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<std::string > *)new std::vector<std::string >(arg1,(std::vector<std::string >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_string_vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_string_vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_string_vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_string_vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_string_vector__SWIG_3(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_string_vector'.\n  Possible C/C++ prototypes are:\n""    std::vector<(std::string)>()\n""    std::vector<(std::string)>(std::vector<std::string > const &)\n""    std::vector<(std::string)>(std::vector<std::string >::size_type)\n""    std::vector<(std::string)>(std::vector<std::string >::size_type,std::vector<std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_push_back",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_push_back" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "string_vector_push_back" "', argument " "2"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector_push_back" "', argument " "2"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->push_back((std::vector<std::string >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_front" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<std::string >::value_type const &_result_ref = ((std::vector<std::string > const *)arg1)->front();
      result = (std::vector<std::string >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_back" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<std::string >::value_type const &_result_ref = ((std::vector<std::string > const *)arg1)->back();
      result = (std::vector<std::string >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type arg2 ;
  std::vector<std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_assign",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_assign" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector_assign" "', argument " "2"" of type '" "std::vector<std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_vector_assign" "', argument " "3"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector_assign" "', argument " "3"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,(std::vector<std::string >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type arg2 ;
  std::vector<std::string >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_resize" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector_resize" "', argument " "2"" of type '" "std::vector<std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::size_type >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_vector_resize" "', argument " "3"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector_resize" "', argument " "3"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,(std::vector<std::string >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_string_vector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_string_vector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'string_vector_resize'.\n  Possible C/C++ prototypes are:\n""    resize(std::vector<std::string > *,std::vector<std::string >::size_type)\n""    resize(std::vector<std::string > *,std::vector<std::string >::size_type,std::vector<std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::iterator arg2 ;
  std::vector<std::string >::value_type *arg3 = 0 ;
  std::vector<std::string >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_insert" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_insert" "', argument " "2"" of type '" "std::vector<std::string >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<std::string >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_insert" "', argument " "2"" of type '" "std::vector<std::string >::iterator""'");
    }
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "string_vector_insert" "', argument " "3"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector_insert" "', argument " "3"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->insert(arg2,(std::vector<std::string >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<std::string >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::iterator arg2 ;
  std::vector<std::string >::size_type arg3 ;
  std::vector<std::string >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_insert" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_insert" "', argument " "2"" of type '" "std::vector<std::string >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<std::string >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "string_vector_insert" "', argument " "2"" of type '" "std::vector<std::string >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "string_vector_insert" "', argument " "3"" of type '" "std::vector<std::string >::size_type""'");
  } 
  arg3 = static_cast< std::vector<std::string >::size_type >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "string_vector_insert" "', argument " "4"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "string_vector_insert" "', argument " "4"" of type '" "std::vector<std::string >::value_type const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->insert(arg2,arg3,(std::vector<std::string >::value_type const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_string_vector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<std::string,std::allocator<std::string > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<std::string >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_string_vector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'string_vector_insert'.\n  Possible C/C++ prototypes are:\n""    insert(std::vector<std::string > *,std::vector<std::string >::iterator,std::vector<std::string >::value_type const &)\n""    insert(std::vector<std::string > *,std::vector<std::string >::iterator,std::vector<std::string >::size_type,std::vector<std::string >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_reserve",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_reserve" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "string_vector_reserve" "', argument " "2"" of type '" "std::vector<std::string >::size_type""'");
  } 
  arg2 = static_cast< std::vector<std::string >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_string_vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"string_vector_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "string_vector_capacity" "', argument " "1"" of type '" "std::vector<std::string > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<std::string > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_string_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_string_vector",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_string_vector" "', argument " "1"" of type '" "std::vector<std::string > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<std::string > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *string_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Id_vector_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  PyObject **arg2 = (PyObject **) 0 ;
  swig::PySwigIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  arg2 = &obj0;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_iterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_iterator" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (swig::PySwigIterator *)std_vector_Sl_Id_Sg__iterator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__PySwigIterator, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector___nonzero__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector___nonzero__" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)std_vector_Sl_Id_Sg____nonzero__((std::vector<Id > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector___len__" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = std_vector_Sl_Id_Sg____len__((std::vector<Id > const *)arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::value_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_pop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_pop" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = std_vector_Sl_Id_Sg__pop(arg1);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector<Id >::value_type(static_cast< const std::vector<Id >::value_type& >(result))), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::difference_type arg2 ;
  std::vector<Id >::difference_type arg3 ;
  std::vector<Id,std::allocator<Id > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector___getslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector___getslice__" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector___getslice__" "', argument " "2"" of type '" "std::vector<Id >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Id_vector___getslice__" "', argument " "3"" of type '" "std::vector<Id >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<Id >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      result = (std::vector<Id,std::allocator<Id > > *)std_vector_Sl_Id_Sg____getslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector___setslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::difference_type arg2 ;
  std::vector<Id >::difference_type arg3 ;
  std::vector<Id,std::allocator<Id > > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector___setslice__",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector___setslice__" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector___setslice__" "', argument " "2"" of type '" "std::vector<Id >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Id_vector___setslice__" "', argument " "3"" of type '" "std::vector<Id >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<Id >::difference_type >(val3);
  {
    std::vector<Id,std::allocator<Id > > *ptr = (std::vector<Id,std::allocator<Id > > *)0;
    res4 = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Id_vector___setslice__" "', argument " "4"" of type '" "std::vector<Id,std::allocator<Id > > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_vector___setslice__" "', argument " "4"" of type '" "std::vector<Id,std::allocator<Id > > const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_Id_Sg____setslice__(arg1,arg2,arg3,(std::vector<Id,std::allocator<Id > > const &)*arg4);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    catch(std::invalid_argument &_e) {
      SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::difference_type arg2 ;
  std::vector<Id >::difference_type arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  ptrdiff_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector___delslice__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector___delslice__" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector___delslice__" "', argument " "2"" of type '" "std::vector<Id >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::difference_type >(val2);
  ecode3 = SWIG_AsVal_ptrdiff_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Id_vector___delslice__" "', argument " "3"" of type '" "std::vector<Id >::difference_type""'");
  } 
  arg3 = static_cast< std::vector<Id >::difference_type >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_Id_Sg____delslice__(arg1,arg2,arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector___delitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::difference_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector___delitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector___delitem__" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector___delitem__" "', argument " "2"" of type '" "std::vector<Id >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_Id_Sg____delitem__(arg1,arg2);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::difference_type arg2 ;
  std::vector<Id >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector___getitem__" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector___getitem__" "', argument " "2"" of type '" "std::vector<Id >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::difference_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      {
        std::vector<Id >::value_type const &_result_ref = std_vector_Sl_Id_Sg____getitem__((std::vector<Id > const *)arg1,arg2);
        result = (std::vector<Id >::value_type *) &_result_ref;
      }
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::difference_type arg2 ;
  std::vector<Id >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ptrdiff_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector___setitem__" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_ptrdiff_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector___setitem__" "', argument " "2"" of type '" "std::vector<Id >::difference_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::difference_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Id_vector___setitem__" "', argument " "3"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_vector___setitem__" "', argument " "3"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector<Id >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    try {
      std_vector_Sl_Id_Sg____setitem__(arg1,arg2,(Id const &)*arg3);
    }
    catch(std::out_of_range &_e) {
      SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
    }
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_append",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_append" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id_vector_append" "', argument " "2"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_vector_append" "', argument " "2"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<Id >::value_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    std_vector_Sl_Id_Sg__append(arg1,(Id const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id_vector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id_vector",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<Id > *)new std::vector<Id >();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id_vector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = 0 ;
  std::vector<Id > *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id_vector",1,1,&obj0)) SWIG_fail;
  {
    std::vector<Id,std::allocator<Id > > *ptr = (std::vector<Id,std::allocator<Id > > *)0;
    res1 = swig::asptr(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Id_vector" "', argument " "1"" of type '" "std::vector<Id > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Id_vector" "', argument " "1"" of type '" "std::vector<Id > const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<Id > *)new std::vector<Id >((std::vector<Id > const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_empty" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((std::vector<Id > const *)arg1)->empty();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_size" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<Id > const *)arg1)->size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_clear" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->clear();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_swap",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_swap" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id_vector_swap" "', argument " "2"" of type '" "std::vector<Id > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_vector_swap" "', argument " "2"" of type '" "std::vector<Id > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<Id > * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->swap(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  SwigValueWrapper< std::allocator<Id > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_get_allocator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_get_allocator" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<Id > const *)arg1)->get_allocator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new std::vector<Id >::allocator_type(static_cast< const std::vector<Id >::allocator_type& >(result))), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__allocator_type, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_begin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_begin" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_begin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_begin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_begin" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<Id > const *)arg1)->begin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_begin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_vector_begin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_vector_begin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Id_vector_begin'.\n  Possible C/C++ prototypes are:\n""    begin(std::vector<Id > *)\n""    begin(std::vector<Id > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_end__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_end" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_end__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::const_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_end" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<Id > const *)arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::const_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_end(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_vector_end__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_vector_end__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Id_vector_end'.\n  Possible C/C++ prototypes are:\n""    end(std::vector<Id > *)\n""    end(std::vector<Id > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_rbegin__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_rbegin" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_rbegin__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_rbegin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_rbegin" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<Id > const *)arg1)->rbegin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_rbegin(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_vector_rbegin__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_vector_rbegin__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Id_vector_rbegin'.\n  Possible C/C++ prototypes are:\n""    rbegin(std::vector<Id > *)\n""    rbegin(std::vector<Id > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_rend__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_rend" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_rend__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::const_reverse_iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_rend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_rend" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<Id > const *)arg1)->rend();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::const_reverse_iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_rend(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_vector_rend__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_vector_rend__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Id_vector_rend'.\n  Possible C/C++ prototypes are:\n""    rend(std::vector<Id > *)\n""    rend(std::vector<Id > const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id_vector__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id >::size_type arg1 ;
  std::vector<Id > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id_vector",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Id_vector" "', argument " "1"" of type '" "std::vector<Id >::size_type""'");
  } 
  arg1 = static_cast< std::vector<Id >::size_type >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<Id > *)new std::vector<Id >(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_pop_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_pop_back" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->pop_back();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_resize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_resize" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector_resize" "', argument " "2"" of type '" "std::vector<Id >::size_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::iterator arg2 ;
  std::vector<Id >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_erase",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_erase" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_erase" "', argument " "2"" of type '" "std::vector<Id >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<Id >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_erase" "', argument " "2"" of type '" "std::vector<Id >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::iterator arg2 ;
  std::vector<Id >::iterator arg3 ;
  std::vector<Id >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  swig::PySwigIterator *iter3 = 0 ;
  int res3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_erase",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_erase" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_erase" "', argument " "2"" of type '" "std::vector<Id >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<Id >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_erase" "', argument " "2"" of type '" "std::vector<Id >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, SWIG_as_voidptrptr(&iter3), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res3) || !iter3) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_erase" "', argument " "3"" of type '" "std::vector<Id >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<Id >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter3);
    if (iter_t) {
      arg3 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_erase" "', argument " "3"" of type '" "std::vector<Id >::iterator""'");
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->erase(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_erase(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter) != 0));
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_Id_vector_erase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter) != 0));
      if (_v) {
        swig::PySwigIterator *iter = 0;
        int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
        _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter) != 0));
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_Id_vector_erase__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Id_vector_erase'.\n  Possible C/C++ prototypes are:\n""    erase(std::vector<Id > *,std::vector<Id >::iterator)\n""    erase(std::vector<Id > *,std::vector<Id >::iterator,std::vector<Id >::iterator)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id_vector__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id >::size_type arg1 ;
  std::vector<Id >::value_type *arg2 = 0 ;
  std::vector<Id > *result = 0 ;
  size_t val1 ;
  int ecode1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id_vector",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_size_t(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Id_vector" "', argument " "1"" of type '" "std::vector<Id >::size_type""'");
  } 
  arg1 = static_cast< std::vector<Id >::size_type >(val1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Id_vector" "', argument " "2"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Id_vector" "', argument " "2"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<Id >::value_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (std::vector<Id > *)new std::vector<Id >(arg1,(std::vector<Id >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id_vector(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_Id_vector__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Id_vector__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Id_vector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_size_t(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Id_vector__SWIG_3(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Id_vector'.\n  Possible C/C++ prototypes are:\n""    std::vector<(Id)>()\n""    std::vector<(Id)>(std::vector<Id > const &)\n""    std::vector<(Id)>(std::vector<Id >::size_type)\n""    std::vector<(Id)>(std::vector<Id >::size_type,std::vector<Id >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::value_type *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_push_back",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_push_back" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id_vector_push_back" "', argument " "2"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_vector_push_back" "', argument " "2"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<Id >::value_type * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->push_back((std::vector<Id >::value_type const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_front",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_front" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<Id >::value_type const &_result_ref = ((std::vector<Id > const *)arg1)->front();
      result = (std::vector<Id >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::value_type *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_back",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_back" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<Id >::value_type const &_result_ref = ((std::vector<Id > const *)arg1)->back();
      result = (std::vector<Id >::value_type *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::size_type arg2 ;
  std::vector<Id >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_assign",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_assign" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector_assign" "', argument " "2"" of type '" "std::vector<Id >::size_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Id_vector_assign" "', argument " "3"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_vector_assign" "', argument " "3"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector<Id >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->assign(arg2,(std::vector<Id >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::size_type arg2 ;
  std::vector<Id >::value_type *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_resize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_resize" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector_resize" "', argument " "2"" of type '" "std::vector<Id >::size_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::size_type >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Id_vector_resize" "', argument " "3"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_vector_resize" "', argument " "3"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector<Id >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resize(arg2,(std::vector<Id >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_resize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_Id_vector_resize__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_size_t(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_Id_vector_resize__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Id_vector_resize'.\n  Possible C/C++ prototypes are:\n""    resize(std::vector<Id > *,std::vector<Id >::size_type)\n""    resize(std::vector<Id > *,std::vector<Id >::size_type,std::vector<Id >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::iterator arg2 ;
  std::vector<Id >::value_type *arg3 = 0 ;
  std::vector<Id >::iterator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_insert" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_insert" "', argument " "2"" of type '" "std::vector<Id >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<Id >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_insert" "', argument " "2"" of type '" "std::vector<Id >::iterator""'");
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Id_vector_insert" "', argument " "3"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_vector_insert" "', argument " "3"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  arg3 = reinterpret_cast< std::vector<Id >::value_type * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->insert(arg2,(std::vector<Id >::value_type const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast< const std::vector<Id >::iterator & >(result)),
    swig::PySwigIterator::descriptor(),SWIG_POINTER_OWN);
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::iterator arg2 ;
  std::vector<Id >::size_type arg3 ;
  std::vector<Id >::value_type *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  swig::PySwigIterator *iter2 = 0 ;
  int res2 ;
  size_t val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_insert",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_insert" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, SWIG_as_voidptrptr(&iter2), swig::PySwigIterator::descriptor(), 0);
  if (!SWIG_IsOK(res2) || !iter2) {
    SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_insert" "', argument " "2"" of type '" "std::vector<Id >::iterator""'");
  } else {
    swig::PySwigIterator_T<std::vector<Id >::iterator > *iter_t = dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter2);
    if (iter_t) {
      arg2 = iter_t->get_current();
    } else {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Id_vector_insert" "', argument " "2"" of type '" "std::vector<Id >::iterator""'");
    }
  }
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Id_vector_insert" "', argument " "3"" of type '" "std::vector<Id >::size_type""'");
  } 
  arg3 = static_cast< std::vector<Id >::size_type >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Id_vector_insert" "', argument " "4"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_vector_insert" "', argument " "4"" of type '" "std::vector<Id >::value_type const &""'"); 
  }
  arg4 = reinterpret_cast< std::vector<Id >::value_type * >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->insert(arg2,arg3,(std::vector<Id >::value_type const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_insert(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter) != 0));
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_Id_vector_insert__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    int res = swig::asptr(argv[0], (std::vector<Id,std::allocator<Id > >**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      swig::PySwigIterator *iter = 0;
      int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::PySwigIterator::descriptor(), 0);
      _v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::PySwigIterator_T<std::vector<Id >::iterator > *>(iter) != 0));
      if (_v) {
        {
          int res = SWIG_AsVal_size_t(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t__value_type, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_Id_vector_insert__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Id_vector_insert'.\n  Possible C/C++ prototypes are:\n""    insert(std::vector<Id > *,std::vector<Id >::iterator,std::vector<Id >::value_type const &)\n""    insert(std::vector<Id > *,std::vector<Id >::iterator,std::vector<Id >::size_type,std::vector<Id >::value_type const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::size_type arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_reserve",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_reserve" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_vector_reserve" "', argument " "2"" of type '" "std::vector<Id >::size_type""'");
  } 
  arg2 = static_cast< std::vector<Id >::size_type >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reserve(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_vector_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  std::vector<Id >::size_type result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_vector_capacity",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_vector_capacity" "', argument " "1"" of type '" "std::vector<Id > const *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((std::vector<Id > const *)arg1)->capacity();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Id_vector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id > *arg1 = (std::vector<Id > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Id_vector",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Id_vector" "', argument " "1"" of type '" "std::vector<Id > *""'"); 
  }
  arg1 = reinterpret_cast< std::vector<Id > * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Id_vector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorTId_std__allocatorTId_t_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_getParBuf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conn *arg1 = (Conn *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"getParBuf",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getParBuf" "', argument " "1"" of type '" "Conn const *""'"); 
  }
  arg1 = reinterpret_cast< Conn * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getParBuf" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (void *)getParBuf((Conn const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_getAsyncParBuf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conn *arg1 = (Conn *) 0 ;
  unsigned int arg2 ;
  void *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"getAsyncParBuf",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getAsyncParBuf" "', argument " "1"" of type '" "Conn const *""'"); 
  }
  arg1 = reinterpret_cast< Conn * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getAsyncParBuf" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (void *)getAsyncParBuf((Conn const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_initNeutralCinfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Cinfo *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"initNeutralCinfo",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Cinfo *)initNeutralCinfo();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Cinfo, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_separateString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector<std::string,std::allocator<std::string > > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"separateString",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "separateString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "separateString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "separateString" "', argument " "2"" of type '" "std::vector<std::string,std::allocator<std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "separateString" "', argument " "2"" of type '" "std::vector<std::string,std::allocator<std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<std::string,std::allocator<std::string > > * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "separateString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "separateString" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    separateString((std::string const &)*arg1,*arg2,(std::string const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_parseString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::vector<std::string,std::allocator<std::string > > *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  int res1 = SWIG_OLDOBJ ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"parseString",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "parseString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseString" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorTstd__string_std__allocatorTstd__string_t_t,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "parseString" "', argument " "2"" of type '" "std::vector<std::string,std::allocator<std::string > > &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "parseString" "', argument " "2"" of type '" "std::vector<std::string,std::allocator<std::string > > &""'"); 
  }
  arg2 = reinterpret_cast< std::vector<std::string,std::allocator<std::string > > * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "parseString" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    parseString((std::string const &)*arg1,*arg2,(char const *)arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)new Id();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nid arg1 ;
  Id *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Nid,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Id" "', argument " "1"" of type '" "Nid""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Id" "', argument " "1"" of type '" "Nid""'");
    } else {
      Nid * temp = reinterpret_cast< Nid * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)new Id(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Id *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Id" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Id" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Id" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Id" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)new Id((std::string const &)*arg1,(std::string const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Id *result = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Id" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Id" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)new Id((std::string const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Id" "', argument " "1"" of type '" "Id *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_localId__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Id result;
  int res1 = SWIG_OLDOBJ ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_localId",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_localId" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_localId" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id_localId" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_localId" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::localId((std::string const &)*arg1,(std::string const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_localId__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Id result;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_localId",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_localId" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_localId" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::localId((std::string const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_localId(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_localId__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_Id_localId__SWIG_0(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Id_localId'.\n  Possible C/C++ prototypes are:\n""    localId(std::string const &,std::string const &)\n""    Id::localId(std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_childId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  Id result;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_childId",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_childId" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_childId" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::childId(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_scratchId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_scratchId",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::scratchId();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_makeIdOnNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  Id result;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_makeIdOnNode",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Id_makeIdOnNode" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::makeIdOnNode(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_shellId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_shellId",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::shellId();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_postId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  Id result;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_postId",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Id_postId" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::postId(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_assignIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  unsigned int arg2 ;
  Id result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_assignIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_assignIndex" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_assignIndex" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((Id const *)arg1)->assignIndex(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_nextScratchId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_nextScratchId",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::nextScratchId();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_redefineScratchIds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  Nid arg2 ;
  bool result;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_redefineScratchIds",2,2,&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_redefineScratchIds" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_redefineScratchIds" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Nid,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id_redefineScratchIds" "', argument " "2"" of type '" "Nid""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_redefineScratchIds" "', argument " "2"" of type '" "Nid""'");
    } else {
      Nid * temp = reinterpret_cast< Nid * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)Id::redefineScratchIds(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_regularizeScratch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_regularizeScratch",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    Id::regularizeScratch();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_allotMainIdBlock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int result;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_allotMainIdBlock",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Id_allotMainIdBlock" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_allotMainIdBlock" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)Id::allotMainIdBlock(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_path__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_path",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_path" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id_path" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_path" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((Id const *)arg1)->path((std::string const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_path__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_path",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_path" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((Id const *)arg1)->path();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_path(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Id_path__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_Id_path__SWIG_0(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Id_path'.\n  Possible C/C++ prototypes are:\n""    path(Id const *,std::string const &)\n""    path(Id const *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_id" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((Id const *)arg1)->id();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_index(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_index",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_index" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((Id const *)arg1)->index();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_node",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_node" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((Id const *)arg1)->node();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_isGlobal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_isGlobal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_isGlobal" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->isGlobal();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_setGlobal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_setGlobal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_setGlobal" "', argument " "1"" of type '" "Id *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setGlobal();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_setNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_setNode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_setNode" "', argument " "1"" of type '" "Id *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Id_setNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setNode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_lastId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_lastId",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::lastId();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_badId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_badId",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::badId();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_str2Id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  Id result;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_str2Id",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_str2Id" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_str2Id" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::str2Id((std::string const &)*arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_id2str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  std::string result;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_id2str",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_id2str" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id_id2str" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = Id::id2str(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_bad(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_bad",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_bad" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->bad();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_good(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_good",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_good" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->good();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_zero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_zero",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_zero" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->zero();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_outOfRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_outOfRange",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_outOfRange" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->outOfRange();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_isScratch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_isScratch",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_isScratch" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->isScratch();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_isProxy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_isProxy",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_isProxy" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->isProxy();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  Id *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id___eq__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id___eq__" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id___eq__" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id___eq__" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->operator ==((Id const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  Id *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id___ne__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id___ne__" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id___ne__" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id___ne__" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->operator !=((Id const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id___lt__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  Id *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id___lt__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id___lt__" "', argument " "1"" of type '" "Id const *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id___lt__" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Id___lt__" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((Id const *)arg1)->operator <((Id const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Id_setElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = (Id *) 0 ;
  Element *arg2 = (Element *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Id_setElement",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Id, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Id_setElement" "', argument " "1"" of type '" "Id *""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Element, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Id_setElement" "', argument " "2"" of type '" "Element *""'"); 
  }
  arg2 = reinterpret_cast< Element * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)(arg1)->setElement(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN int Swig_var_Id_AnyIndex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Id_AnyIndex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Id_AnyIndex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Id::AnyIndex));
  return pyobj;
}


SWIGINTERN int Swig_var_Id_BadIndex_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Id_BadIndex is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Id_BadIndex_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Id::BadIndex));
  return pyobj;
}


SWIGINTERN int Swig_var_Id_GlobalNode_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Id_GlobalNode is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Id_GlobalNode_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(Id::GlobalNode));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Id__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  Id *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Id" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Id" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)new Id(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  Id *result = 0 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Id",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Id" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)new Id(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Id(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_Id__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Nid, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Id__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Id__SWIG_5(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Id__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Id__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Id__SWIG_2(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Id'.\n  Possible C/C++ prototypes are:\n""    Id()\n""    Id(Nid)\n""    Id(std::string const &,std::string const &)\n""    Id(std::string const &)\n""    Id(unsigned int,unsigned int)\n""    Id(unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *Id_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Id, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Nid__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nid *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nid",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Nid *)new Nid();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Nid, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nid__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  Nid *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nid",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Nid" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nid" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Nid *)new Nid(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Nid, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nid__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  unsigned int arg2 ;
  Nid *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nid",2,2,&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Nid" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nid" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Nid" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Nid *)new Nid(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Nid, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nid(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_Nid__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Nid__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Nid__SWIG_2(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Nid'.\n  Possible C/C++ prototypes are:\n""    Nid()\n""    Nid(Id)\n""    Nid(Id,unsigned int)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nid_node(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nid *arg1 = (Nid *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nid_node",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Nid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nid_node" "', argument " "1"" of type '" "Nid const *""'"); 
  }
  arg1 = reinterpret_cast< Nid * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((Nid const *)arg1)->node();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nid_setNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nid *arg1 = (Nid *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nid_setNode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Nid, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nid_setNode" "', argument " "1"" of type '" "Nid *""'"); 
  }
  arg1 = reinterpret_cast< Nid * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nid_setNode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setNode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Nid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Nid *arg1 = (Nid *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Nid",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Nid, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Nid" "', argument " "1"" of type '" "Nid *""'"); 
  }
  arg1 = reinterpret_cast< Nid * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Nid_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Nid, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PyMooseContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PyMooseContext",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PyMooseContext *)new pymoose::PyMooseContext();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PyMooseContext, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PyMooseContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_PyMooseContext",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PyMooseContext" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getCwe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getCwe",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getCwe" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->getCwe();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setCwe__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setCwe",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setCwe" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_setCwe" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_setCwe" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setCwe(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setCwe__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setCwe",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setCwe" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setCwe" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setCwe(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setCwe(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_setCwe__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_setCwe__SWIG_1(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_setCwe'.\n  Possible C/C++ prototypes are:\n""    setCwe(pymoose::PyMooseContext *,Id)\n""    setCwe(pymoose::PyMooseContext *,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getShell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getShell",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getShell" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->getShell();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_id" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->id();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_create__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  Id arg4 ;
  Id result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_create",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_create" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_create" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_create" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PyMooseContext_create" "', argument " "4"" of type '" "Id""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_create" "', argument " "4"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->create(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_create__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  Id result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_create",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_create" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_create" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_create" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->create(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_create(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_create__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_Id, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseContext_create__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_create'.\n  Possible C/C++ prototypes are:\n""    create(pymoose::PyMooseContext *,std::string,std::string,Id)\n""    create(pymoose::PyMooseContext *,std::string,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_destroy",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_destroy" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_destroy" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_destroy" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)(arg1)->destroy(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_end",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_end" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->end();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_recvCwe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conn *arg1 = (Conn *) 0 ;
  Id arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_recvCwe",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_recvCwe" "', argument " "1"" of type '" "Conn const *""'"); 
  }
  arg1 = reinterpret_cast< Conn * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_recvCwe" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_recvCwe" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseContext::recvCwe((Conn const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_recvElist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conn *arg1 = (Conn *) 0 ;
  std::vector<Id,std::allocator<Id > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_recvElist",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_recvElist" "', argument " "1"" of type '" "Conn const *""'"); 
  }
  arg1 = reinterpret_cast< Conn * >(argp1);
  {
    std::vector<Id,std::allocator<Id > > *ptr = (std::vector<Id,std::allocator<Id > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_recvElist" "', argument " "2"" of type '" "std::vector<Id,std::allocator<Id > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseContext::recvElist((Conn const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_recvCreate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conn *arg1 = (Conn *) 0 ;
  Id arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_recvCreate",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_recvCreate" "', argument " "1"" of type '" "Conn const *""'"); 
  }
  arg1 = reinterpret_cast< Conn * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_recvCreate" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_recvCreate" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseContext::recvCreate((Conn const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_recvField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conn *arg1 = (Conn *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_recvField",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_recvField" "', argument " "1"" of type '" "Conn const *""'"); 
  }
  arg1 = reinterpret_cast< Conn * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_recvField" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseContext::recvField((Conn const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_recvWildcardList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conn *arg1 = (Conn *) 0 ;
  std::vector<Id,std::allocator<Id > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_recvWildcardList",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_recvWildcardList" "', argument " "1"" of type '" "Conn const *""'"); 
  }
  arg1 = reinterpret_cast< Conn * >(argp1);
  {
    std::vector<Id,std::allocator<Id > > *ptr = (std::vector<Id,std::allocator<Id > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_recvWildcardList" "', argument " "2"" of type '" "std::vector<Id,std::allocator<Id > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseContext::recvWildcardList((Conn const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_recvClocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conn *arg1 = (Conn *) 0 ;
  std::vector<double,std::allocator<double > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_recvClocks",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_recvClocks" "', argument " "1"" of type '" "Conn const *""'"); 
  }
  arg1 = reinterpret_cast< Conn * >(argp1);
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_recvClocks" "', argument " "2"" of type '" "std::vector<double,std::allocator<double > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseContext::recvClocks((Conn const *)arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_recvMessageList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Conn *arg1 = (Conn *) 0 ;
  std::vector<Id,std::allocator<Id > > arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_recvMessageList",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Conn, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_recvMessageList" "', argument " "1"" of type '" "Conn const *""'"); 
  }
  arg1 = reinterpret_cast< Conn * >(argp1);
  {
    std::vector<Id,std::allocator<Id > > *ptr = (std::vector<Id,std::allocator<Id > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_recvMessageList" "', argument " "2"" of type '" "std::vector<Id,std::allocator<Id > >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_recvMessageList" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseContext::recvMessageList((Conn const *)arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createPyMooseContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  pymoose::PyMooseContext *result = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createPyMooseContext",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createPyMooseContext" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createPyMooseContext" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PyMooseContext *)pymoose::PyMooseContext::createPyMooseContext(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_destroyPyMooseContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_destroyPyMooseContext",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_destroyPyMooseContext" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseContext::destroyPyMooseContext(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_loadG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_loadG",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_loadG" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_loadG" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->loadG(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_runG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_runG",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_runG" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_runG" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->runG(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  std::string arg3 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getField",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getField" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_getField" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_getField" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_getField" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->getField(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setField(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setField",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setField" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_setField" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_setField" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setField" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setField" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setField(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getMessageList__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  std::string arg3 ;
  bool arg4 ;
  std::vector<std::string,std::allocator<std::string > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getMessageList",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getMessageList" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_getMessageList" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_getMessageList" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_getMessageList" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_getMessageList" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->getMessageList(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator<std::string > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getMessageList__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  bool arg3 ;
  std::vector<std::string,std::allocator<std::string > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getMessageList",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getMessageList" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_getMessageList" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_getMessageList" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PyMooseContext_getMessageList" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->getMessageList(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator<std::string > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getMessageList(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_getMessageList__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseContext_getMessageList__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_getMessageList'.\n  Possible C/C++ prototypes are:\n""    getMessageList(pymoose::PyMooseContext *,Id,std::string,bool)\n""    getMessageList(pymoose::PyMooseContext *,Id,bool)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getParent",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getParent" "', argument " "1"" of type '" "pymoose::PyMooseContext const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_getParent" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_getParent" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id const &_result_ref = ((pymoose::PyMooseContext const *)arg1)->getParent(arg2);
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getPath",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getPath" "', argument " "1"" of type '" "pymoose::PyMooseContext const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_getPath" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_getPath" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::PyMooseContext const *)arg1)->getPath(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getName" "', argument " "1"" of type '" "pymoose::PyMooseContext const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_getName" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_getName" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::PyMooseContext const *)arg1)->getName(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getChildren__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  std::vector<Id,std::allocator<Id > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getChildren",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getChildren" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_getChildren" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_getChildren" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->getChildren(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<Id,std::allocator<Id > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getChildren__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::vector<Id,std::allocator<Id > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getChildren",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getChildren" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_getChildren" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->getChildren(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<Id,std::allocator<Id > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getChildren(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_getChildren__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_getChildren__SWIG_1(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_getChildren'.\n  Possible C/C++ prototypes are:\n""    getChildren(pymoose::PyMooseContext *,Id)\n""    getChildren(pymoose::PyMooseContext *,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_pathToId__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  Id result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_pathToId",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_pathToId" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_pathToId" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PyMooseContext_pathToId" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->pathToId(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_pathToId__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  Id result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_pathToId",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_pathToId" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_pathToId" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->pathToId(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_pathToId(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_pathToId__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_pathToId__SWIG_0(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_pathToId'.\n  Possible C/C++ prototypes are:\n""    pathToId(pymoose::PyMooseContext *,std::string,bool)\n""    pathToId(pymoose::PyMooseContext *,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_srandom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_srandom",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "PyMooseContext_srandom" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseContext::srandom(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_step__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_step",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_step" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyMooseContext_step" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->step(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_step__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_step",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_step" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyMooseContext_step" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->step(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_step__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_step",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_step" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->step();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_step(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_PyMooseContext_step__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_step__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_step__SWIG_0(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_step'.\n  Possible C/C++ prototypes are:\n""    step(pymoose::PyMooseContext *,double)\n""    step(pymoose::PyMooseContext *,long)\n""    step(pymoose::PyMooseContext *)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_reset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_reset" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reset();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_stop" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->stop();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setClock__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  int arg2 ;
  double arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setClock",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setClock" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyMooseContext_setClock" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PyMooseContext_setClock" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_setClock" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setClock(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setClock__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setClock",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setClock" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyMooseContext_setClock" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PyMooseContext_setClock" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setClock(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setClock(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_setClock__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseContext_setClock__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_setClock'.\n  Possible C/C++ prototypes are:\n""    setClock(pymoose::PyMooseContext *,int,double,int)\n""    setClock(pymoose::PyMooseContext *,int,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_getClocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::vector<double,std::allocator<double > > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_getClocks",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_getClocks" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<double,std::allocator<double > > &_result_ref = (arg1)->getClocks();
      result = (std::vector<double,std::allocator<double > > *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_useClock__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_useClock",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_useClock" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_useClock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_useClock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_useClock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_useClock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PyMooseContext_useClock" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_useClock" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->useClock((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_useClock__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_useClock",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_useClock" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_useClock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_useClock" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_useClock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_useClock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->useClock((std::string const &)*arg2,(std::string const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_useClock__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_useClock",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_useClock" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyMooseContext_useClock" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_useClock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_useClock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PyMooseContext_useClock" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_useClock" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->useClock(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  if (SWIG_IsNewObj(res4)) delete arg4;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_useClock__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_useClock",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_useClock" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyMooseContext_useClock" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_useClock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_useClock" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->useClock(arg2,(std::string const &)*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_useClock(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_useClock__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_useClock__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseContext_useClock__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseContext_useClock__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_useClock'.\n  Possible C/C++ prototypes are:\n""    useClock(pymoose::PyMooseContext *,std::string const &,std::string const &,std::string const &)\n""    useClock(pymoose::PyMooseContext *,std::string const &,std::string const &)\n""    useClock(pymoose::PyMooseContext *,int,std::string const &,std::string const &)\n""    useClock(pymoose::PyMooseContext *,int,std::string const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_addTask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_addTask",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_addTask" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_addTask" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->addTask(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_do_deep_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  std::string arg3 ;
  Id *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_do_deep_copy",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_do_deep_copy" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_do_deep_copy" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_do_deep_copy" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_do_deep_copy" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PyMooseContext_do_deep_copy" "', argument " "4"" of type '" "Id const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_do_deep_copy" "', argument " "4"" of type '" "Id const &""'"); 
  }
  arg4 = reinterpret_cast< Id * >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->do_deep_copy((Id const &)*arg2,arg3,(Id const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_deepCopy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  std::string arg3 ;
  Id *arg4 = 0 ;
  Id result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_deepCopy",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_deepCopy" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_deepCopy" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_deepCopy" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_deepCopy" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PyMooseContext_deepCopy" "', argument " "4"" of type '" "Id const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_deepCopy" "', argument " "4"" of type '" "Id const &""'"); 
  }
  arg4 = reinterpret_cast< Id * >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->deepCopy((Id const &)*arg2,arg3,(Id const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_move(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  std::string arg3 ;
  Id *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_move",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_move" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_move" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_move" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_move" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PyMooseContext_move" "', argument " "4"" of type '" "Id const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_move" "', argument " "4"" of type '" "Id const &""'"); 
  }
  arg4 = reinterpret_cast< Id * >(argp4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->move((Id const &)*arg2,arg3,(Id const &)*arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_connect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  std::string arg3 ;
  Id *arg4 = 0 ;
  std::string arg5 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_connect",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_connect" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_connect" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_connect" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_connect" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "PyMooseContext_connect" "', argument " "4"" of type '" "Id const &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_connect" "', argument " "4"" of type '" "Id const &""'"); 
  }
  arg4 = reinterpret_cast< Id * >(argp4);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_connect" "', argument " "5"" of type '" "std::string""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)(arg1)->connect((Id const &)*arg2,arg3,(Id const &)*arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setupAlpha__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector<double,std::allocator<double > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setupAlpha",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setupAlpha" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupAlpha" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupAlpha" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupAlpha" "', argument " "4"" of type '" "std::vector<double,std::allocator<double > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setupAlpha__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setupAlpha",16,16,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setupAlpha" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupAlpha" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupAlpha" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_setupAlpha" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_setupAlpha" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_setupAlpha" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_setupAlpha" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PyMooseContext_setupAlpha" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PyMooseContext_setupAlpha" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "PyMooseContext_setupAlpha" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "PyMooseContext_setupAlpha" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "PyMooseContext_setupAlpha" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "PyMooseContext_setupAlpha" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "PyMooseContext_setupAlpha" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "PyMooseContext_setupAlpha" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(obj15, &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "PyMooseContext_setupAlpha" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setupTau__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector<double,std::allocator<double > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setupTau",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setupTau" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupTau" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupTau" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupTau" "', argument " "4"" of type '" "std::vector<double,std::allocator<double > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setupTau__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  double arg16 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  double val16 ;
  int ecode16 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  PyObject * obj15 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setupTau",16,16,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14,&obj15)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setupTau" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupTau" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupTau" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_setupTau" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_setupTau" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_setupTau" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_setupTau" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PyMooseContext_setupTau" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PyMooseContext_setupTau" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "PyMooseContext_setupTau" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "PyMooseContext_setupTau" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "PyMooseContext_setupTau" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "PyMooseContext_setupTau" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "PyMooseContext_setupTau" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "PyMooseContext_setupTau" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  ecode16 = SWIG_AsVal_double(obj15, &val16);
  if (!SWIG_IsOK(ecode16)) {
    SWIG_exception_fail(SWIG_ArgError(ecode16), "in method '" "PyMooseContext_setupTau" "', argument " "16"" of type '" "double""'");
  } 
  arg16 = static_cast< double >(val16);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_tweakAlpha__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_tweakAlpha",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_tweakAlpha" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_tweakAlpha" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_tweakAlpha" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tweakAlpha(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_tweakTau__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_tweakTau",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_tweakTau" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_tweakTau" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_tweakTau" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tweakTau(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_tabFill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_tabFill",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_tabFill" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_tabFill" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_tabFill" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PyMooseContext_tabFill" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_tabFill" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tabFill((Id const &)*arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setupAlpha__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  std::vector<double,std::allocator<double > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setupAlpha",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setupAlpha" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_setupAlpha" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_setupAlpha" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupAlpha" "', argument " "3"" of type '" "std::vector<double,std::allocator<double > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha((Id const &)*arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setupAlpha(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[17];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 16); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator<double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_setupAlpha__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator<double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseContext_setupAlpha__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 16) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_double(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  {
                                    int res = SWIG_AsVal_double(argv[15], NULL);
                                    _v = SWIG_CheckState(res);
                                  }
                                  if (_v) {
                                    SWIG_PYTHON_THREAD_END_BLOCK;
                                    return _wrap_PyMooseContext_setupAlpha__SWIG_1(self, args);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_setupAlpha'.\n  Possible C/C++ prototypes are:\n""    setupAlpha(pymoose::PyMooseContext *,std::string,std::string,std::vector<double,std::allocator<double > >)\n""    setupAlpha(pymoose::PyMooseContext *,std::string,std::string,double,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupAlpha(pymoose::PyMooseContext *,Id const &,std::vector<double,std::allocator<double > >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setupTau__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  std::vector<double,std::allocator<double > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_setupTau",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_setupTau" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_setupTau" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_setupTau" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_setupTau" "', argument " "3"" of type '" "std::vector<double,std::allocator<double > >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau((Id const &)*arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_setupTau(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[17];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 16); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator<double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_setupTau__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator<double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseContext_setupTau__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 16) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_double(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  {
                                    int res = SWIG_AsVal_double(argv[15], NULL);
                                    _v = SWIG_CheckState(res);
                                  }
                                  if (_v) {
                                    SWIG_PYTHON_THREAD_END_BLOCK;
                                    return _wrap_PyMooseContext_setupTau__SWIG_1(self, args);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_setupTau'.\n  Possible C/C++ prototypes are:\n""    setupTau(pymoose::PyMooseContext *,std::string,std::string,std::vector<double,std::allocator<double > >)\n""    setupTau(pymoose::PyMooseContext *,std::string,std::string,double,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupTau(pymoose::PyMooseContext *,Id const &,std::vector<double,std::allocator<double > >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_tweakAlpha__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_tweakAlpha",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_tweakAlpha" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_tweakAlpha" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_tweakAlpha" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tweakAlpha((Id const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_tweakAlpha(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_tweakAlpha__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_tweakAlpha__SWIG_0(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_tweakAlpha'.\n  Possible C/C++ prototypes are:\n""    tweakAlpha(pymoose::PyMooseContext *,std::string,std::string)\n""    tweakAlpha(pymoose::PyMooseContext *,Id const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_tweakTau__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_tweakTau",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_tweakTau" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_tweakTau" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_tweakTau" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tweakTau((Id const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_tweakTau(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_tweakTau__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_tweakTau__SWIG_0(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_tweakTau'.\n  Possible C/C++ prototypes are:\n""    tweakTau(pymoose::PyMooseContext *,std::string,std::string)\n""    tweakTau(pymoose::PyMooseContext *,Id const &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_readCell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_readCell",8,8,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_readCell" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_readCell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_readCell" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_readCell" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_readCell" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_readCell" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_readCell" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PyMooseContext_readCell" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->readCell(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_readCell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::vector<double,std::allocator<double > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_readCell",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_readCell" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_readCell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_readCell" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_readCell" "', argument " "4"" of type '" "std::vector<double,std::allocator<double > >""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->readCell(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_readCell__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_readCell",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_readCell" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_readCell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_readCell" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->readCell(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_readCell(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[9];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 8); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_readCell__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = swig::asptr(argv[3], (std::vector<double,std::allocator<double > >**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseContext_readCell__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    SWIG_PYTHON_THREAD_END_BLOCK;
                    return _wrap_PyMooseContext_readCell__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_readCell'.\n  Possible C/C++ prototypes are:\n""    readCell(pymoose::PyMooseContext *,std::string,std::string,double,double,double,double,double)\n""    readCell(pymoose::PyMooseContext *,std::string,std::string,std::vector<double,std::allocator<double > >)\n""    readCell(pymoose::PyMooseContext *,std::string,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_exists__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_exists",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_exists" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_exists" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_exists" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)(arg1)->exists((Id const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_exists__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_exists",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_exists" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_exists" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)(arg1)->exists(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_exists(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_exists__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseContext_exists__SWIG_1(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_exists'.\n  Possible C/C++ prototypes are:\n""    exists(pymoose::PyMooseContext *,Id const &)\n""    exists(pymoose::PyMooseContext *,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  bool arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  bool val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",10,10,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_createMap" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PyMooseContext_createMap" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PyMooseContext_createMap" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_bool(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "PyMooseContext_createMap" "', argument " "10"" of type '" "bool""'");
  } 
  arg10 = static_cast< bool >(val10);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",9,9,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_createMap" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PyMooseContext_createMap" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PyMooseContext_createMap" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",8,8,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_createMap" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PyMooseContext_createMap" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",7,7,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_createMap" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6,arg7);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  double arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",6,6,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val4 ;
  int ecode4 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_unsigned_SS_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "unsigned int""'");
  } 
  arg4 = static_cast< unsigned int >(val4);
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  Id arg3 ;
  std::string arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",10,10,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "unsigned int""'");
  } 
  arg6 = static_cast< unsigned int >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_createMap" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PyMooseContext_createMap" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PyMooseContext_createMap" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "PyMooseContext_createMap" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  Id arg3 ;
  std::string arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",9,9,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "unsigned int""'");
  } 
  arg6 = static_cast< unsigned int >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_createMap" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PyMooseContext_createMap" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "PyMooseContext_createMap" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  Id arg3 ;
  std::string arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  double arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",8,8,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "unsigned int""'");
  } 
  arg6 = static_cast< unsigned int >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_createMap" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "PyMooseContext_createMap" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  Id arg3 ;
  std::string arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",7,7,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "unsigned int""'");
  } 
  arg6 = static_cast< unsigned int >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PyMooseContext_createMap" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6,arg7);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  Id arg3 ;
  std::string arg4 ;
  unsigned int arg5 ;
  unsigned int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  unsigned int val5 ;
  int ecode5 = 0 ;
  unsigned int val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",6,6,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "unsigned int""'");
  } 
  arg5 = static_cast< unsigned int >(val5);
  ecode6 = SWIG_AsVal_unsigned_SS_int(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PyMooseContext_createMap" "', argument " "6"" of type '" "unsigned int""'");
  } 
  arg6 = static_cast< unsigned int >(val6);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5,arg6);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap__SWIG_11(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id arg2 ;
  Id arg3 ;
  std::string arg4 ;
  std::vector<double,std::allocator<double > > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_createMap",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_createMap" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_createMap" "', argument " "3"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj4, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_createMap" "', argument " "5"" of type '" "std::vector<double,std::allocator<double > >""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createMap(arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_createMap(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[11];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 10); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = swig::asptr(argv[4], (std::vector<double,std::allocator<double > >**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              SWIG_PYTHON_THREAD_END_BLOCK;
              return _wrap_PyMooseContext_createMap__SWIG_11(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              SWIG_PYTHON_THREAD_END_BLOCK;
              return _wrap_PyMooseContext_createMap__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                SWIG_PYTHON_THREAD_END_BLOCK;
                return _wrap_PyMooseContext_createMap__SWIG_10(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                SWIG_PYTHON_THREAD_END_BLOCK;
                return _wrap_PyMooseContext_createMap__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  SWIG_PYTHON_THREAD_END_BLOCK;
                  return _wrap_PyMooseContext_createMap__SWIG_9(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  SWIG_PYTHON_THREAD_END_BLOCK;
                  return _wrap_PyMooseContext_createMap__SWIG_3(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    SWIG_PYTHON_THREAD_END_BLOCK;
                    return _wrap_PyMooseContext_createMap__SWIG_8(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    SWIG_PYTHON_THREAD_END_BLOCK;
                    return _wrap_PyMooseContext_createMap__SWIG_2(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      SWIG_PYTHON_THREAD_END_BLOCK;
                      return _wrap_PyMooseContext_createMap__SWIG_7(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      SWIG_PYTHON_THREAD_END_BLOCK;
                      return _wrap_PyMooseContext_createMap__SWIG_1(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_unsigned_SS_int(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        SWIG_PYTHON_THREAD_END_BLOCK;
                        return _wrap_PyMooseContext_createMap__SWIG_6(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 10) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_unsigned_SS_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_unsigned_SS_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_bool(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        SWIG_PYTHON_THREAD_END_BLOCK;
                        return _wrap_PyMooseContext_createMap__SWIG_0(self, args);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_createMap'.\n  Possible C/C++ prototypes are:\n""    createMap(pymoose::PyMooseContext *,std::string,std::string,unsigned int,unsigned int,double,double,double,double,bool)\n""    createMap(pymoose::PyMooseContext *,std::string,std::string,unsigned int,unsigned int,double,double,double,double)\n""    createMap(pymoose::PyMooseContext *,std::string,std::string,unsigned int,unsigned int,double,double,double)\n""    createMap(pymoose::PyMooseContext *,std::string,std::string,unsigned int,unsigned int,double,double)\n""    createMap(pymoose::PyMooseContext *,std::string,std::string,unsigned int,unsigned int,double)\n""    createMap(pymoose::PyMooseContext *,std::string,std::string,unsigned int,unsigned int)\n""    createMap(pymoose::PyMooseContext *,Id,Id,std::string,unsigned int,unsigned int,double,double,double,double)\n""    createMap(pymoose::PyMooseContext *,Id,Id,std::string,unsigned int,unsigned int,double,double,double)\n""    createMap(pymoose::PyMooseContext *,Id,Id,std::string,unsigned int,unsigned int,double,double)\n""    createMap(pymoose::PyMooseContext *,Id,Id,std::string,unsigned int,unsigned int,double)\n""    createMap(pymoose::PyMooseContext *,Id,Id,std::string,unsigned int,unsigned int)\n""    createMap(pymoose::PyMooseContext *,Id,Id,std::string,std::vector<double,std::allocator<double > >)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_planarConnect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_planarConnect",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_planarConnect" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_planarConnect" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_planarConnect" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PyMooseContext_planarConnect" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->planarConnect(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_planarConnect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_planarConnect",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_planarConnect" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_planarConnect" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_planarConnect" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->planarConnect(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_planarConnect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseContext_planarConnect__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseContext, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseContext_planarConnect__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseContext_planarConnect'.\n  Possible C/C++ prototypes are:\n""    planarConnect(pymoose::PyMooseContext *,std::string,std::string,double)\n""    planarConnect(pymoose::PyMooseContext *,std::string,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_plannarDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_plannarDelay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_plannarDelay" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_plannarDelay" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PyMooseContext_plannarDelay" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->plannarDelay(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_planarWeight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_planarWeight",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_planarWeight" "', argument " "1"" of type '" "pymoose::PyMooseContext *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseContext_planarWeight" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PyMooseContext_planarWeight" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->planarWeight(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  Id *arg2 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_className",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_className" "', argument " "1"" of type '" "pymoose::PyMooseContext const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_className" "', argument " "2"" of type '" "Id const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_className" "', argument " "2"" of type '" "Id const &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::PyMooseContext const *)arg1)->className((Id const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseContext_doc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *arg1 = (pymoose::PyMooseContext *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseContext_doc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseContext_doc" "', argument " "1"" of type '" "pymoose::PyMooseContext const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseContext * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseContext_doc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseContext_doc" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::PyMooseContext const *)arg1)->doc((std::string const &)*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN int Swig_var_PyMooseContext_separator_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PyMooseContext_separator is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PyMooseContext_separator_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::PyMooseContext::separator));
  return pyobj;
}


SWIGINTERN PyObject *PyMooseContext_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__PyMooseContext, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_PyMooseBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_PyMooseBase",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PyMooseBase" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  bool result;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_destroy",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_destroy" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseBase_destroy" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose::PyMooseBase::destroy(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_endSimulation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_endSimulation",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseBase::endSimulation();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_getType" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_getSeparator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_getSeparator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_getSeparator" "', argument " "1"" of type '" "pymoose::PyMooseBase const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = ((pymoose::PyMooseBase const *)arg1)->getSeparator();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_getContext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseContext *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_getContext",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PyMooseContext *)pymoose::PyMooseBase::getContext();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PyMooseContext, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase___get_className(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase___get_className",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase___get_className" "', argument " "1"" of type '" "pymoose::PyMooseBase const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::PyMooseBase const *)arg1)->__get_className();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_children(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::vector<Id > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_children",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_children" "', argument " "1"" of type '" "pymoose::PyMooseBase const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::PyMooseBase const *)arg1)->children();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<Id,std::allocator<Id > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase___get_parent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase___get_parent",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase___get_parent" "', argument " "1"" of type '" "pymoose::PyMooseBase const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)((pymoose::PyMooseBase const *)arg1)->__get_parent();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase___get_path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase___get_path",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase___get_path" "', argument " "1"" of type '" "pymoose::PyMooseBase const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::PyMooseBase const *)arg1)->__get_path();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase___get_id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase___get_id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase___get_id" "', argument " "1"" of type '" "pymoose::PyMooseBase const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)((pymoose::PyMooseBase const *)arg1)->__get_id();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase___get_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase___get_name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase___get_name" "', argument " "1"" of type '" "pymoose::PyMooseBase const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::PyMooseBase const *)arg1)->__get_name();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_useClock__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  int arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_useClock",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_useClock" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyMooseBase_useClock" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_useClock" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->useClock(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_useClock__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_useClock",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_useClock" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyMooseBase_useClock" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->useClock(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_useClock__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  Id arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_useClock",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_useClock" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseBase_useClock" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseBase_useClock" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_useClock" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->useClock(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_useClock__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  Id arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_useClock",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_useClock" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PyMooseBase_useClock" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseBase_useClock" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->useClock(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_useClock(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseBase_useClock__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseBase_useClock__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseBase_useClock__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_PyMooseBase_useClock__SWIG_0(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseBase_useClock'.\n  Possible C/C++ prototypes are:\n""    useClock(pymoose::PyMooseBase *,int,std::string)\n""    useClock(pymoose::PyMooseBase *,int)\n""    useClock(pymoose::PyMooseBase *,Id,std::string)\n""    useClock(pymoose::PyMooseBase *,Id)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_connect__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = (pymoose::PyMooseBase *) 0 ;
  std::string arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_connect",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_connect" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_connect" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseBase_connect" "', argument " "3"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_connect" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)(arg1)->connect(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_connect__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string arg2 ;
  Id arg3 ;
  std::string arg4 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_connect",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_connect" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_connect" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "PyMooseBase_connect" "', argument " "3"" of type '" "Id""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseBase_connect" "', argument " "3"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_connect" "', argument " "4"" of type '" "std::string""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)(arg1)->connect(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_connect(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 4); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseBase_connect__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            SWIG_PYTHON_THREAD_END_BLOCK;
            return _wrap_PyMooseBase_connect__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseBase_connect'.\n  Possible C/C++ prototypes are:\n""    connect(pymoose::PyMooseBase *,std::string,pymoose::PyMooseBase *,std::string)\n""    connect(pymoose::PyMooseBase *,std::string,Id,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_getMessageList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  std::vector<std::string,std::allocator<std::string > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_getMessageList",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_getMessageList" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_getMessageList" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PyMooseBase_getMessageList" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->getMessageList(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator<std::string > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_inMessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::vector<std::string,std::allocator<std::string > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_inMessages",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_inMessages" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->inMessages();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator<std::string > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_outMessages(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::vector<std::string,std::allocator<std::string > > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_outMessages",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_outMessages" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->outMessages();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<std::string,std::allocator<std::string > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_exists__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  bool result;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_exists",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_exists" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseBase_exists" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose::PyMooseBase::exists(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_exists__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool result;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_exists",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_exists" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose::PyMooseBase::exists(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_exists(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_PyMooseBase_exists__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_PyMooseBase_exists__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseBase_exists'.\n  Possible C/C++ prototypes are:\n""    exists(Id)\n""    pymoose::PyMooseBase::exists(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_le(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<Id,std::allocator<Id > > result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_le",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = pymoose::PyMooseBase::le();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<Id,std::allocator<Id > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_pwe(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_pwe",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = pymoose::PyMooseBase::pwe();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_ce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  Id result;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_ce",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_ce" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseBase_ce" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = pymoose::PyMooseBase::ce(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_ce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id result;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_ce",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_ce" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = pymoose::PyMooseBase::ce(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_ce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_PyMooseBase_ce__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_PyMooseBase_ce__SWIG_1(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseBase_ce'.\n  Possible C/C++ prototypes are:\n""    ce(Id)\n""    pymoose::PyMooseBase::ce(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_pathToId__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  bool arg2 ;
  Id result;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_pathToId",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_pathToId" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PyMooseBase_pathToId" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = pymoose::PyMooseBase::pathToId(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_pathToId__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id result;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_pathToId",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "PyMooseBase_pathToId" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = pymoose::PyMooseBase::pathToId(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_pathToId(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_PyMooseBase_pathToId__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_PyMooseBase_pathToId__SWIG_0(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'PyMooseBase_pathToId'.\n  Possible C/C++ prototypes are:\n""    pathToId(std::string,bool)\n""    pymoose::PyMooseBase::pathToId(std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_idToPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  std::string result;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_idToPath",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_idToPath" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseBase_idToPath" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = pymoose::PyMooseBase::idToPath(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_getParent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  Id result;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_getParent",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_getParent" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseBase_getParent" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = pymoose::PyMooseBase::getParent(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj((new Id(static_cast< const Id& >(result))), SWIGTYPE_p_Id, SWIG_POINTER_OWN |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_getChildren(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  std::vector<Id,std::allocator<Id > > result;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_getChildren",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_getChildren" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PyMooseBase_getChildren" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = pymoose::PyMooseBase::getChildren(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<Id,std::allocator<Id > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_initSimulation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_initSimulation",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose::PyMooseBase::initSimulation();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_id_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_id_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_id_get" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)pymoose_PyMooseBase_id_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_parent_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_parent_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_parent_get" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Id *)pymoose_PyMooseBase_parent_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_className_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_className_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_className_get" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_PyMooseBase_className_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_name_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_name_get" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_PyMooseBase_name_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PyMooseBase_path_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PyMooseBase *arg1 = (pymoose::PyMooseBase *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PyMooseBase_path_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PyMooseBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PyMooseBase_path_get" "', argument " "1"" of type '" "pymoose::PyMooseBase *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PyMooseBase * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_PyMooseBase_path_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *PyMooseBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__PyMooseBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Neutral_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Neutral_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Neutral_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Neutral::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Neutral__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Neutral *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Neutral",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Neutral" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Neutral *)new pymoose::Neutral(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Neutral__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Neutral *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Neutral",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Neutral" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Neutral *)new pymoose::Neutral(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Neutral__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Neutral *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Neutral",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Neutral" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Neutral" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Neutral *)new pymoose::Neutral(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Neutral__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Neutral *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Neutral",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Neutral" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Neutral" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Neutral *)new pymoose::Neutral(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Neutral__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  pymoose::Neutral *result = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Neutral",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Neutral" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Neutral" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Neutral *)new pymoose::Neutral(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Neutral__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Neutral *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Neutral",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Neutral,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Neutral" "', argument " "1"" of type '" "pymoose::Neutral const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "1"" of type '" "pymoose::Neutral const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Neutral" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Neutral" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Neutral *)new pymoose::Neutral((pymoose::Neutral const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Neutral__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Neutral *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Neutral",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Neutral,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Neutral" "', argument " "1"" of type '" "pymoose::Neutral const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "1"" of type '" "pymoose::Neutral const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Neutral" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Neutral" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Neutral *)new pymoose::Neutral((pymoose::Neutral const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Neutral__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Neutral *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Neutral",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Neutral" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Neutral" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Neutral" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Neutral *)new pymoose::Neutral((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Neutral__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Neutral *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Neutral",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Neutral,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Neutral" "', argument " "1"" of type '" "pymoose::Neutral const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Neutral" "', argument " "1"" of type '" "pymoose::Neutral const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Neutral" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Neutral *)new pymoose::Neutral((pymoose::Neutral const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Neutral(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Neutral__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Neutral__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Neutral, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Neutral__SWIG_8(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Neutral__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Neutral__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Neutral__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Neutral, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Neutral__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Neutral__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Neutral, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Neutral__SWIG_5(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Neutral'.\n  Possible C/C++ prototypes are:\n""    pymoose::Neutral(Id)\n""    pymoose::Neutral(std::string)\n""    pymoose::Neutral(std::string,Id)\n""    pymoose::Neutral(std::string,pymoose::PyMooseBase &)\n""    pymoose::Neutral(std::string,std::string)\n""    pymoose::Neutral(pymoose::Neutral const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Neutral(pymoose::Neutral const &,std::string,Id &)\n""    pymoose::Neutral(Id const &,std::string,Id &)\n""    pymoose::Neutral(pymoose::Neutral const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Neutral(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = (pymoose::Neutral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Neutral",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Neutral, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Neutral" "', argument " "1"" of type '" "pymoose::Neutral *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Neutral_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = (pymoose::Neutral *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Neutral_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Neutral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neutral_getType" "', argument " "1"" of type '" "pymoose::Neutral *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Neutral___get_childSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = (pymoose::Neutral *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Neutral___get_childSrc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Neutral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neutral___get_childSrc" "', argument " "1"" of type '" "pymoose::Neutral const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::Neutral const *)arg1)->__get_childSrc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Neutral___set_childSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = (pymoose::Neutral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Neutral___set_childSrc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Neutral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neutral___set_childSrc" "', argument " "1"" of type '" "pymoose::Neutral *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neutral___set_childSrc" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_childSrc(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Neutral___get_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = (pymoose::Neutral *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Neutral___get_child",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Neutral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neutral___get_child" "', argument " "1"" of type '" "pymoose::Neutral const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::Neutral const *)arg1)->__get_child();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Neutral___set_child(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = (pymoose::Neutral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Neutral___set_child",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Neutral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neutral___set_child" "', argument " "1"" of type '" "pymoose::Neutral *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neutral___set_child" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_child(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Neutral_child_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = (pymoose::Neutral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Neutral_child_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Neutral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neutral_child_set" "', argument " "1"" of type '" "pymoose::Neutral *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Neutral_child_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Neutral_child_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Neutral_child_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Neutral *arg1 = (pymoose::Neutral *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Neutral_child_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Neutral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Neutral_child_get" "', argument " "1"" of type '" "pymoose::Neutral *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Neutral * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_Neutral_child_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Neutral_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Neutral, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Class_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Class_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Class_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Class::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Class__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Class *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Class",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Class" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Class *)new pymoose::Class(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Class, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Class__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  pymoose::Class *result = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Class",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Class" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Class" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Class *)new pymoose::Class(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Class, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Class__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Class *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Class",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Class" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Class" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Class *)new pymoose::Class(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Class, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Class__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Class *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Class",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Class" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Class" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Class *)new pymoose::Class(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Class, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Class__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Class *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Class",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Class,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Class" "', argument " "1"" of type '" "pymoose::Class const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "1"" of type '" "pymoose::Class const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Class" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Class" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Class *)new pymoose::Class((pymoose::Class const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Class, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Class__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Class *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Class",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Class,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Class" "', argument " "1"" of type '" "pymoose::Class const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "1"" of type '" "pymoose::Class const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Class" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Class" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Class *)new pymoose::Class((pymoose::Class const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Class, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Class__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Class *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Class",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Class" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Class" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Class" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Class *)new pymoose::Class((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Class, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Class__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Class *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Class",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Class,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Class" "', argument " "1"" of type '" "pymoose::Class const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Class" "', argument " "1"" of type '" "pymoose::Class const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Class" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Class *)new pymoose::Class((pymoose::Class const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Class, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Class(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Class__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Class, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Class__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Class__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Class__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Class__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Class, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Class__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Class__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Class, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Class__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Class'.\n  Possible C/C++ prototypes are:\n""    pymoose::Class(Id)\n""    pymoose::Class(std::string,std::string)\n""    pymoose::Class(std::string,Id)\n""    pymoose::Class(std::string,pymoose::PyMooseBase &)\n""    pymoose::Class(pymoose::Class const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Class(pymoose::Class const &,std::string,Id &)\n""    pymoose::Class(Id const &,std::string,Id &)\n""    pymoose::Class(pymoose::Class const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Class(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Class",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Class" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class_getType" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class___set_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class___set_name",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class___set_name" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Class___set_name" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_name(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class___get_author(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class___get_author",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class___get_author" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->__get_author();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class___get_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class___get_description",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class___get_description" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->__get_description();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class___get_tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class___get_tick",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class___get_tick" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)(arg1)->__get_tick();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class___set_tick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class___set_tick",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class___set_tick" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Class___set_tick" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_tick(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class___get_stage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class___get_stage",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class___get_stage" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)(arg1)->__get_stage();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class___set_stage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class___set_stage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class___set_stage" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Class___set_stage" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_stage(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class___get_clock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class___get_clock",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class___get_clock" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->__get_clock();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class_setClock(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class_setClock",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class_setClock" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Class_setClock" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Class_setClock" "', argument " "3"" of type '" "std::string""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setClock(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class_name_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class_name_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class_name_get" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_Class_name_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class_author_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class_author_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class_author_get" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_Class_author_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class_description_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class_description_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class_description_get" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_Class_description_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class_tick_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class_tick_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class_tick_set" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Class_tick_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Class_tick_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class_tick_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class_tick_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class_tick_get" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Class_tick_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class_stage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class_stage_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class_stage_set" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Class_stage_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Class_stage_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Class_stage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Class *arg1 = (pymoose::Class *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Class_stage_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Class, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Class_stage_get" "', argument " "1"" of type '" "pymoose::Class *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Class * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Class_stage_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Class_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Class, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Cell_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Cell_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Cell_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Cell::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Cell *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Cell",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cell" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Cell *)new pymoose::Cell(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Cell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Cell *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Cell",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Cell" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Cell *)new pymoose::Cell(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Cell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Cell *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Cell",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Cell" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cell" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Cell *)new pymoose::Cell(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Cell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Cell *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Cell",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Cell" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Cell" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Cell *)new pymoose::Cell(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Cell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Cell",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Cell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cell" "', argument " "1"" of type '" "pymoose::Cell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "1"" of type '" "pymoose::Cell const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Cell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cell" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Cell *)new pymoose::Cell((pymoose::Cell const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Cell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Cell",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Cell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cell" "', argument " "1"" of type '" "pymoose::Cell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "1"" of type '" "pymoose::Cell const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Cell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cell" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Cell *)new pymoose::Cell((pymoose::Cell const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Cell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Cell",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cell" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Cell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Cell" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Cell *)new pymoose::Cell((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Cell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Cell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Cell",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Cell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Cell" "', argument " "1"" of type '" "pymoose::Cell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Cell" "', argument " "1"" of type '" "pymoose::Cell const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Cell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Cell *)new pymoose::Cell((pymoose::Cell const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Cell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Cell(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Cell__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Cell__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Cell__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Cell__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Cell__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Cell__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Cell__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Cell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Cell__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Cell'.\n  Possible C/C++ prototypes are:\n""    pymoose::Cell(Id)\n""    pymoose::Cell(std::string)\n""    pymoose::Cell(std::string,Id)\n""    pymoose::Cell(std::string,pymoose::PyMooseBase &)\n""    pymoose::Cell(pymoose::Cell const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Cell(pymoose::Cell const &,std::string,Id &)\n""    pymoose::Cell(Id const &,std::string,Id &)\n""    pymoose::Cell(pymoose::Cell const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Cell",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Cell" "', argument " "1"" of type '" "pymoose::Cell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_getType" "', argument " "1"" of type '" "pymoose::Cell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell___set_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell___set_method",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell___set_method" "', argument " "1"" of type '" "pymoose::Cell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Cell___set_method" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_method(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell___get_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell___get_method",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell___get_method" "', argument " "1"" of type '" "pymoose::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::Cell const *)arg1)->__get_method();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell___get_variableDt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell___get_variableDt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell___get_variableDt" "', argument " "1"" of type '" "pymoose::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::Cell const *)arg1)->__get_variableDt();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell___get_implicit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell___get_implicit",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell___get_implicit" "', argument " "1"" of type '" "pymoose::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::Cell const *)arg1)->__get_implicit();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell___get_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell___get_description",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell___get_description" "', argument " "1"" of type '" "pymoose::Cell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::Cell const *)arg1)->__get_description();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_method_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell_method_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_method_set" "', argument " "1"" of type '" "pymoose::Cell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Cell_method_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Cell_method_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Cell_method_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_method_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell_method_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_method_get" "', argument " "1"" of type '" "pymoose::Cell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_Cell_method_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_variableDt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell_variableDt_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_variableDt_get" "', argument " "1"" of type '" "pymoose::Cell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_Cell_variableDt_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_implicit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell_implicit_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_implicit_get" "', argument " "1"" of type '" "pymoose::Cell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_Cell_implicit_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Cell_description_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Cell *arg1 = (pymoose::Cell *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Cell_description_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Cell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Cell_description_get" "', argument " "1"" of type '" "pymoose::Cell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Cell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_Cell_description_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Cell_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Cell, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ClockTick_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClockTick_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ClockTick_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::ClockTick::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ClockTick__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::ClockTick *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockTick",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockTick" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockTick *)new pymoose::ClockTick(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockTick, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockTick__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::ClockTick *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockTick",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockTick" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockTick *)new pymoose::ClockTick(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockTick, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockTick__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::ClockTick *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockTick",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockTick" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClockTick" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockTick *)new pymoose::ClockTick(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockTick, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockTick__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::ClockTick *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockTick",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockTick" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClockTick" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockTick *)new pymoose::ClockTick(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockTick, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockTick__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::ClockTick *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockTick",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__ClockTick,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockTick" "', argument " "1"" of type '" "pymoose::ClockTick const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "1"" of type '" "pymoose::ClockTick const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockTick" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClockTick" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockTick *)new pymoose::ClockTick((pymoose::ClockTick const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockTick, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockTick__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::ClockTick *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockTick",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__ClockTick,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockTick" "', argument " "1"" of type '" "pymoose::ClockTick const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "1"" of type '" "pymoose::ClockTick const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockTick" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClockTick" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockTick *)new pymoose::ClockTick((pymoose::ClockTick const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockTick, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockTick__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::ClockTick *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockTick",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockTick" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockTick" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClockTick" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockTick *)new pymoose::ClockTick((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockTick, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockTick__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = 0 ;
  std::string arg2 ;
  pymoose::ClockTick *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockTick",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__ClockTick,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockTick" "', argument " "1"" of type '" "pymoose::ClockTick const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockTick" "', argument " "1"" of type '" "pymoose::ClockTick const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockTick" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockTick *)new pymoose::ClockTick((pymoose::ClockTick const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockTick, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockTick(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_ClockTick__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_ClockTick__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__ClockTick, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_ClockTick__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_ClockTick__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_ClockTick__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__ClockTick, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_ClockTick__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_ClockTick__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__ClockTick, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_ClockTick__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ClockTick'.\n  Possible C/C++ prototypes are:\n""    pymoose::ClockTick(Id)\n""    pymoose::ClockTick(std::string)\n""    pymoose::ClockTick(std::string,Id)\n""    pymoose::ClockTick(std::string,pymoose::PyMooseBase &)\n""    pymoose::ClockTick(pymoose::ClockTick const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::ClockTick(pymoose::ClockTick const &,std::string,Id &)\n""    pymoose::ClockTick(Id const &,std::string,Id &)\n""    pymoose::ClockTick(pymoose::ClockTick const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClockTick(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_ClockTick",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClockTick" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_getType" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___get_dt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___get_dt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___get_dt" "', argument " "1"" of type '" "pymoose::ClockTick const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::ClockTick const *)arg1)->__get_dt();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___set_dt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___set_dt",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___set_dt" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick___set_dt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_dt(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___get_stage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___get_stage",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___get_stage" "', argument " "1"" of type '" "pymoose::ClockTick const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::ClockTick const *)arg1)->__get_stage();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___set_stage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___set_stage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___set_stage" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick___set_stage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_stage(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___get_ordinal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___get_ordinal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___get_ordinal" "', argument " "1"" of type '" "pymoose::ClockTick const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::ClockTick const *)arg1)->__get_ordinal();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___set_ordinal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___set_ordinal",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___set_ordinal" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick___set_ordinal" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_ordinal(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___get_nextTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___get_nextTime",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___get_nextTime" "', argument " "1"" of type '" "pymoose::ClockTick const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::ClockTick const *)arg1)->__get_nextTime();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___set_nextTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___set_nextTime",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___set_nextTime" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick___set_nextTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nextTime(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___set_path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___set_path",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___set_path" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ClockTick___set_path" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_path(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___get_updateDtSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___get_updateDtSrc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___get_updateDtSrc" "', argument " "1"" of type '" "pymoose::ClockTick const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::ClockTick const *)arg1)->__get_updateDtSrc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick___set_updateDtSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick___set_updateDtSrc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick___set_updateDtSrc" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick___set_updateDtSrc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_updateDtSrc(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_dt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_dt_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_dt_set" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick_dt_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockTick_dt_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_dt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_dt_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_dt_get" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_ClockTick_dt_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_stage_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_stage_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_stage_set" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick_stage_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockTick_stage_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_stage_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_stage_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_stage_get" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_ClockTick_stage_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_ordinal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_ordinal_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_ordinal_set" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick_ordinal_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockTick_ordinal_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_ordinal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_ordinal_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_ordinal_get" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_ClockTick_ordinal_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_nextTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_nextTime_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_nextTime_set" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick_nextTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockTick_nextTime_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_nextTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_nextTime_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_nextTime_get" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_ClockTick_nextTime_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_updateDtSrc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_updateDtSrc_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_updateDtSrc_set" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockTick_updateDtSrc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockTick_updateDtSrc_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockTick_updateDtSrc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockTick *arg1 = (pymoose::ClockTick *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockTick_updateDtSrc_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockTick, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockTick_updateDtSrc_get" "', argument " "1"" of type '" "pymoose::ClockTick *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockTick * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_ClockTick_updateDtSrc_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ClockTick_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__ClockTick, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ClockJob_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ClockJob_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ClockJob_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::ClockJob::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ClockJob__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::ClockJob *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockJob",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockJob" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockJob *)new pymoose::ClockJob(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockJob, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockJob__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::ClockJob *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockJob",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockJob" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockJob *)new pymoose::ClockJob(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockJob, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockJob__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::ClockJob *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockJob",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockJob" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClockJob" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockJob *)new pymoose::ClockJob(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockJob, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockJob__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::ClockJob *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockJob",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockJob" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ClockJob" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockJob *)new pymoose::ClockJob(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockJob, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockJob__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::ClockJob *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockJob",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__ClockJob,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockJob" "', argument " "1"" of type '" "pymoose::ClockJob const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "1"" of type '" "pymoose::ClockJob const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockJob" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClockJob" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockJob *)new pymoose::ClockJob((pymoose::ClockJob const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockJob, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockJob__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::ClockJob *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockJob",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__ClockJob,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockJob" "', argument " "1"" of type '" "pymoose::ClockJob const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "1"" of type '" "pymoose::ClockJob const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockJob" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClockJob" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockJob *)new pymoose::ClockJob((pymoose::ClockJob const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockJob, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockJob__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::ClockJob *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockJob",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockJob" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockJob" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ClockJob" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockJob *)new pymoose::ClockJob((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockJob, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockJob__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = 0 ;
  std::string arg2 ;
  pymoose::ClockJob *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ClockJob",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__ClockJob,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ClockJob" "', argument " "1"" of type '" "pymoose::ClockJob const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ClockJob" "', argument " "1"" of type '" "pymoose::ClockJob const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ClockJob" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ClockJob *)new pymoose::ClockJob((pymoose::ClockJob const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ClockJob, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ClockJob(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_ClockJob__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_ClockJob__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__ClockJob, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_ClockJob__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_ClockJob__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_ClockJob__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__ClockJob, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_ClockJob__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_ClockJob__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__ClockJob, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_ClockJob__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ClockJob'.\n  Possible C/C++ prototypes are:\n""    pymoose::ClockJob(Id)\n""    pymoose::ClockJob(std::string)\n""    pymoose::ClockJob(std::string,Id)\n""    pymoose::ClockJob(std::string,pymoose::PyMooseBase &)\n""    pymoose::ClockJob(pymoose::ClockJob const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::ClockJob(pymoose::ClockJob const &,std::string,Id &)\n""    pymoose::ClockJob(Id const &,std::string,Id &)\n""    pymoose::ClockJob(pymoose::ClockJob const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ClockJob(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_ClockJob",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ClockJob" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_getType" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___get_runTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___get_runTime",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___get_runTime" "', argument " "1"" of type '" "pymoose::ClockJob const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::ClockJob const *)arg1)->__get_runTime();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___set_runTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___set_runTime",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___set_runTime" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob___set_runTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_runTime(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___get_currentTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___get_currentTime",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___get_currentTime" "', argument " "1"" of type '" "pymoose::ClockJob const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::ClockJob const *)arg1)->__get_currentTime();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___set_currentTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___set_currentTime",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___set_currentTime" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob___set_currentTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_currentTime(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___get_nsteps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___get_nsteps",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___get_nsteps" "', argument " "1"" of type '" "pymoose::ClockJob const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::ClockJob const *)arg1)->__get_nsteps();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___set_nsteps(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___set_nsteps",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___set_nsteps" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob___set_nsteps" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nsteps(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___get_currentStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___get_currentStep",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___get_currentStep" "', argument " "1"" of type '" "pymoose::ClockJob const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::ClockJob const *)arg1)->__get_currentStep();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___set_currentStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___set_currentStep",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___set_currentStep" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob___set_currentStep" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_currentStep(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___get_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___get_start",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___get_start" "', argument " "1"" of type '" "pymoose::ClockJob const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::ClockJob const *)arg1)->__get_start();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___set_start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___set_start",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___set_start" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob___set_start" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_start(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___get_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___get_step",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___get_step" "', argument " "1"" of type '" "pymoose::ClockJob const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::ClockJob const *)arg1)->__get_step();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob___set_step(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob___set_step",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob___set_step" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob___set_step" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_step(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_resched(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_resched",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_resched" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->resched();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_reinit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_reinit",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_reinit" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->reinit();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_stop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_stop",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_stop" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->stop();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_getClocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::vector<double > *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_getClocks",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<double > &_result_ref = pymoose::ClockJob::getClocks();
      result = (std::vector<double > *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorTdouble_std__allocatorTdouble_t_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_runTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_runTime_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_runTime_set" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob_runTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockJob_runTime_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_runTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_runTime_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_runTime_get" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_ClockJob_runTime_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_currentTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_currentTime_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_currentTime_set" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob_currentTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockJob_currentTime_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_currentTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_currentTime_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_currentTime_get" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_ClockJob_currentTime_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_nsteps_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_nsteps_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_nsteps_set" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob_nsteps_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockJob_nsteps_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_nsteps_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_nsteps_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_nsteps_get" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_ClockJob_nsteps_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_currentStep_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_currentStep_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_currentStep_set" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob_currentStep_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockJob_currentStep_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_currentStep_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_currentStep_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_currentStep_get" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_ClockJob_currentStep_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_start_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_start_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_start_set" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob_start_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockJob_start_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_start_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_start_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_start_get" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_ClockJob_start_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_step_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_step_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_step_set" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ClockJob_step_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ClockJob_step_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ClockJob_step_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ClockJob *arg1 = (pymoose::ClockJob *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ClockJob_step_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ClockJob, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ClockJob_step_get" "', argument " "1"" of type '" "pymoose::ClockJob *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ClockJob * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_ClockJob_step_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ClockJob_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__ClockJob, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_InterpolationTable_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable InterpolationTable_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_InterpolationTable_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::InterpolationTable::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_InterpolationTable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_InterpolationTable",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)new pymoose::InterpolationTable(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolationTable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::InterpolationTable *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_InterpolationTable",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)new pymoose::InterpolationTable(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolationTable__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_InterpolationTable",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_InterpolationTable" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)new pymoose::InterpolationTable(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolationTable__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_InterpolationTable",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_InterpolationTable" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)new pymoose::InterpolationTable(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolationTable__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_InterpolationTable",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__InterpolationTable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "pymoose::InterpolationTable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "pymoose::InterpolationTable const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InterpolationTable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InterpolationTable" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)new pymoose::InterpolationTable((pymoose::InterpolationTable const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolationTable__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_InterpolationTable",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__InterpolationTable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "pymoose::InterpolationTable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "pymoose::InterpolationTable const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InterpolationTable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InterpolationTable" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)new pymoose::InterpolationTable((pymoose::InterpolationTable const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolationTable__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_InterpolationTable",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InterpolationTable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_InterpolationTable" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)new pymoose::InterpolationTable((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolationTable__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = 0 ;
  std::string arg2 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_InterpolationTable",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__InterpolationTable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "pymoose::InterpolationTable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_InterpolationTable" "', argument " "1"" of type '" "pymoose::InterpolationTable const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_InterpolationTable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)new pymoose::InterpolationTable((pymoose::InterpolationTable const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_InterpolationTable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_InterpolationTable__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_InterpolationTable__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__InterpolationTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_InterpolationTable__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_InterpolationTable__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_InterpolationTable__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__InterpolationTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_InterpolationTable__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_InterpolationTable__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__InterpolationTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_InterpolationTable__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_InterpolationTable'.\n  Possible C/C++ prototypes are:\n""    pymoose::InterpolationTable(Id)\n""    pymoose::InterpolationTable(std::string)\n""    pymoose::InterpolationTable(std::string,Id)\n""    pymoose::InterpolationTable(std::string,pymoose::PyMooseBase &)\n""    pymoose::InterpolationTable(pymoose::InterpolationTable const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::InterpolationTable(pymoose::InterpolationTable const &,std::string,Id &)\n""    pymoose::InterpolationTable(Id const &,std::string,Id &)\n""    pymoose::InterpolationTable(pymoose::InterpolationTable const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_InterpolationTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_InterpolationTable",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_InterpolationTable" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_getType" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___get_xmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___get_xmin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___get_xmin" "', argument " "1"" of type '" "pymoose::InterpolationTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::InterpolationTable const *)arg1)->__get_xmin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___set_xmin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___set_xmin",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___set_xmin" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable___set_xmin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_xmin(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___get_xmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___get_xmax",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___get_xmax" "', argument " "1"" of type '" "pymoose::InterpolationTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::InterpolationTable const *)arg1)->__get_xmax();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___set_xmax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___set_xmax",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___set_xmax" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable___set_xmax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_xmax(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___get_xdivs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___get_xdivs",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___get_xdivs" "', argument " "1"" of type '" "pymoose::InterpolationTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::InterpolationTable const *)arg1)->__get_xdivs();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___set_xdivs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___set_xdivs",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___set_xdivs" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable___set_xdivs" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_xdivs(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___get_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___get_mode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___get_mode" "', argument " "1"" of type '" "pymoose::InterpolationTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::InterpolationTable const *)arg1)->__get_mode();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___set_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___set_mode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___set_mode" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable___set_mode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_mode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___get_dx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___get_dx",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___get_dx" "', argument " "1"" of type '" "pymoose::InterpolationTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::InterpolationTable const *)arg1)->__get_dx();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___set_dx(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___set_dx",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___set_dx" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable___set_dx" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_dx(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___get_sy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___get_sy",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___get_sy" "', argument " "1"" of type '" "pymoose::InterpolationTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::InterpolationTable const *)arg1)->__get_sy();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___set_sy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___set_sy",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___set_sy" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable___set_sy" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_sy(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  unsigned int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___getitem__" "', argument " "1"" of type '" "pymoose::InterpolationTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable___getitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::InterpolationTable const *)arg1)->__getitem__(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___setitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___setitem__",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___setitem__" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable___setitem__" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterpolationTable___setitem__" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__setitem__(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  pymoose::TableIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___iter__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___iter__" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TableIterator *)(arg1)->__iter__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TableIterator, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___len__" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)(arg1)->__len__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___get_calcMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___get_calcMode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___get_calcMode" "', argument " "1"" of type '" "pymoose::InterpolationTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::InterpolationTable const *)arg1)->__get_calcMode();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable___set_calcMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable___set_calcMode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable___set_calcMode" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable___set_calcMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_calcMode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_dumpFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_dumpFile",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_dumpFile" "', argument " "1"" of type '" "pymoose::InterpolationTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::InterpolationTable const *)arg1)->dumpFile();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_dumpFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  std::string arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_dumpFile",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_dumpFile" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "InterpolationTable_dumpFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterpolationTable_dumpFile" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->dumpFile(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_dumpFile__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_dumpFile",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_dumpFile" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "InterpolationTable_dumpFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->dumpFile(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_dumpFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__InterpolationTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_InterpolationTable_dumpFile__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__InterpolationTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_InterpolationTable_dumpFile__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__InterpolationTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_InterpolationTable_dumpFile__SWIG_1(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'InterpolationTable_dumpFile'.\n  Possible C/C++ prototypes are:\n""    dumpFile(pymoose::InterpolationTable const *)\n""    dumpFile(pymoose::InterpolationTable *,std::string,bool)\n""    dumpFile(pymoose::InterpolationTable *,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_tabFill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_tabFill",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_tabFill" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable_tabFill" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "InterpolationTable_tabFill" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tabFill(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_xmin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_xmin_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_xmin_set" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable_xmin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_InterpolationTable_xmin_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_xmin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_xmin_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_xmin_get" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_InterpolationTable_xmin_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_xmax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_xmax_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_xmax_set" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable_xmax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_InterpolationTable_xmax_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_xmax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_xmax_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_xmax_get" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_InterpolationTable_xmax_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_xdivs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_xdivs_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_xdivs_set" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable_xdivs_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_InterpolationTable_xdivs_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_xdivs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_xdivs_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_xdivs_get" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_InterpolationTable_xdivs_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_mode_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_mode_set" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable_mode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_InterpolationTable_mode_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_mode_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_mode_get" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_InterpolationTable_mode_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_dx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_dx_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_dx_set" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable_dx_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_InterpolationTable_dx_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_dx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_dx_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_dx_get" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_InterpolationTable_dx_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_sy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_sy_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_sy_set" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable_sy_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_InterpolationTable_sy_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_sy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_sy_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_sy_get" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_InterpolationTable_sy_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_calcMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_calcMode_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_calcMode_set" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "InterpolationTable_calcMode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_InterpolationTable_calcMode_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InterpolationTable_calcMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"InterpolationTable_calcMode_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "InterpolationTable_calcMode_get" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_InterpolationTable_calcMode_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *InterpolationTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__InterpolationTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TableIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::InterpolationTable *arg1 = (pymoose::InterpolationTable *) 0 ;
  pymoose::TableIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TableIterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TableIterator" "', argument " "1"" of type '" "pymoose::InterpolationTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::InterpolationTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TableIterator *)new pymoose::TableIterator(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TableIterator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TableIterator___iter__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TableIterator *arg1 = (pymoose::TableIterator *) 0 ;
  pymoose::TableIterator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TableIterator___iter__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TableIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TableIterator___iter__" "', argument " "1"" of type '" "pymoose::TableIterator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TableIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TableIterator *)(arg1)->__iter__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TableIterator, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TableIterator___hasNext__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TableIterator *arg1 = (pymoose::TableIterator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TableIterator___hasNext__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TableIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TableIterator___hasNext__" "', argument " "1"" of type '" "pymoose::TableIterator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TableIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)(arg1)->__hasNext__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TableIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TableIterator *arg1 = (pymoose::TableIterator *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TableIterator___next__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TableIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TableIterator___next__" "', argument " "1"" of type '" "pymoose::TableIterator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TableIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)(arg1)->__next__();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TableIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TableIterator *arg1 = (pymoose::TableIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_TableIterator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TableIterator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TableIterator" "', argument " "1"" of type '" "pymoose::TableIterator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TableIterator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *TableIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__TableIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Table_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Table_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Table_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Table::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Table *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Table",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Table" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Table *)new pymoose::Table(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Table, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Table *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Table",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Table" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Table *)new pymoose::Table(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Table, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Table *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Table",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Table" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Table" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Table *)new pymoose::Table(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Table, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Table *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Table",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Table" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Table" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Table *)new pymoose::Table(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Table, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Table *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Table",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Table,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Table" "', argument " "1"" of type '" "pymoose::Table const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "1"" of type '" "pymoose::Table const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Table" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Table" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Table *)new pymoose::Table((pymoose::Table const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Table, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Table *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Table",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Table,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Table" "', argument " "1"" of type '" "pymoose::Table const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "1"" of type '" "pymoose::Table const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Table" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Table" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Table *)new pymoose::Table((pymoose::Table const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Table, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Table *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Table",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Table" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Table" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Table" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Table *)new pymoose::Table((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Table, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Table *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Table",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Table,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Table" "', argument " "1"" of type '" "pymoose::Table const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Table" "', argument " "1"" of type '" "pymoose::Table const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Table" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Table *)new pymoose::Table((pymoose::Table const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Table, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Table(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Table__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Table__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Table__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Table__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Table__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Table__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Table__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Table, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Table__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Table'.\n  Possible C/C++ prototypes are:\n""    pymoose::Table(Id)\n""    pymoose::Table(std::string)\n""    pymoose::Table(std::string,Id)\n""    pymoose::Table(std::string,pymoose::PyMooseBase &)\n""    pymoose::Table(pymoose::Table const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Table(pymoose::Table const &,std::string,Id &)\n""    pymoose::Table(Id const &,std::string,Id &)\n""    pymoose::Table(pymoose::Table const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Table(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Table",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Table" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_getType" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___get_input(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___get_input",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___get_input" "', argument " "1"" of type '" "pymoose::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Table const *)arg1)->__get_input();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___set_input(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___set_input",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___set_input" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table___set_input" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_input(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___get_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___get_output",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___get_output" "', argument " "1"" of type '" "pymoose::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Table const *)arg1)->__get_output();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___set_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___set_output",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___set_output" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table___set_output" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_output(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___get_stepMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___get_stepMode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___get_stepMode" "', argument " "1"" of type '" "pymoose::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::Table const *)arg1)->__get_stepMode();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___set_stepMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___set_stepMode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___set_stepMode" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table___set_stepMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_stepMode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___get_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___get_stepSize",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___get_stepSize" "', argument " "1"" of type '" "pymoose::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Table const *)arg1)->__get_stepSize();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___set_stepSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___set_stepSize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___set_stepSize" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table___set_stepSize" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_stepSize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___get_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___get_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___get_threshold" "', argument " "1"" of type '" "pymoose::Table const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Table const *)arg1)->__get_threshold();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table___set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table___set_threshold",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table___set_threshold" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table___set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_threshold(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_createTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  int arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_createTable",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_createTable" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_createTable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Table_createTable" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Table_createTable" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createTable(arg2,arg3,arg4);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_input_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_input_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_input_set" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_input_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Table_input_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_input_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_input_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_input_get" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Table_input_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_output_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_output_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_output_set" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_output_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Table_output_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_output_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_output_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_output_get" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Table_output_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_stepMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_stepMode_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_stepMode_set" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_stepMode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Table_stepMode_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_stepMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_stepMode_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_stepMode_get" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_Table_stepMode_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_stepSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_stepSize_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_stepSize_set" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_stepSize_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Table_stepSize_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_stepSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_stepSize_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_stepSize_get" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Table_stepSize_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_threshold_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_threshold_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_threshold_set" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Table_threshold_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Table_threshold_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Table_threshold_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Table *arg1 = (pymoose::Table *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Table_threshold_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Table, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Table_threshold_get" "', argument " "1"" of type '" "pymoose::Table *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Table * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Table_threshold_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Table_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Table, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_SynChan_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SynChan_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SynChan_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::SynChan::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_SynChan__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::SynChan *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SynChan",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SynChan" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SynChan *)new pymoose::SynChan(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SynChan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynChan__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::SynChan *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SynChan",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SynChan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SynChan *)new pymoose::SynChan(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SynChan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynChan__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::SynChan *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SynChan",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SynChan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SynChan" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SynChan *)new pymoose::SynChan(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SynChan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynChan__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::SynChan *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SynChan",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SynChan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SynChan" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SynChan *)new pymoose::SynChan(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SynChan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynChan__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::SynChan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SynChan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SynChan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SynChan" "', argument " "1"" of type '" "pymoose::SynChan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "1"" of type '" "pymoose::SynChan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SynChan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SynChan" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SynChan *)new pymoose::SynChan((pymoose::SynChan const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SynChan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynChan__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::SynChan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SynChan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SynChan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SynChan" "', argument " "1"" of type '" "pymoose::SynChan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "1"" of type '" "pymoose::SynChan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SynChan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SynChan" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SynChan *)new pymoose::SynChan((pymoose::SynChan const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SynChan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynChan__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::SynChan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SynChan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SynChan" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SynChan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SynChan" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SynChan *)new pymoose::SynChan((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SynChan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynChan__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = 0 ;
  std::string arg2 ;
  pymoose::SynChan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SynChan",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SynChan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SynChan" "', argument " "1"" of type '" "pymoose::SynChan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SynChan" "', argument " "1"" of type '" "pymoose::SynChan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SynChan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SynChan *)new pymoose::SynChan((pymoose::SynChan const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SynChan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SynChan(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_SynChan__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_SynChan__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SynChan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SynChan__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SynChan__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SynChan__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SynChan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SynChan__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SynChan__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SynChan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SynChan__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SynChan'.\n  Possible C/C++ prototypes are:\n""    pymoose::SynChan(Id)\n""    pymoose::SynChan(std::string)\n""    pymoose::SynChan(std::string,Id)\n""    pymoose::SynChan(std::string,pymoose::PyMooseBase &)\n""    pymoose::SynChan(pymoose::SynChan const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::SynChan(pymoose::SynChan const &,std::string,Id &)\n""    pymoose::SynChan(Id const &,std::string,Id &)\n""    pymoose::SynChan(pymoose::SynChan const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SynChan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_SynChan",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SynChan" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_getType" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_Gbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_Gbar",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_Gbar" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_Gbar();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_Gbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_Gbar",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_Gbar" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_Gbar" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Gbar(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_Ek",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_Ek" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_Ek();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_Ek",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_Ek" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_Ek" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ek(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_tau1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_tau1",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_tau1" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_tau1();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_tau1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_tau1",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_tau1" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_tau1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_tau1(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_tau2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_tau2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_tau2" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_tau2();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_tau2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_tau2",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_tau2" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_tau2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_tau2(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_normalizeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_normalizeWeights",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_normalizeWeights" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::SynChan const *)arg1)->__get_normalizeWeights();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_normalizeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_normalizeWeights",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_normalizeWeights" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_normalizeWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_normalizeWeights(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_Gk",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_Gk" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_Gk();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_Gk",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_Gk" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_Gk" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Gk(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_Ik",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_Ik" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_Ik();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_Ik",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_Ik" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_Ik" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ik(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_numSynapses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_numSynapses",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_numSynapses" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::SynChan const *)arg1)->__get_numSynapses();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_numSynapses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_numSynapses",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_numSynapses" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_numSynapses" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_numSynapses(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_weight",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_weight" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_weight();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_weight",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_weight" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_weight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_weight(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_delay",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_delay" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_delay();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_delay" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_delay" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_delay(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_IkSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_IkSrc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_IkSrc" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_IkSrc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_IkSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_IkSrc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_IkSrc" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_IkSrc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_IkSrc(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_synapse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_synapse",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_synapse" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_synapse();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_synapse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_synapse",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_synapse" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_synapse" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_synapse(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_activation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_activation",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_activation" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_activation();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_activation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_activation",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_activation" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_activation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_activation(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___get_modulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___get_modulator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___get_modulator" "', argument " "1"" of type '" "pymoose::SynChan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SynChan const *)arg1)->__get_modulator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan___set_modulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan___set_modulator",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan___set_modulator" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan___set_modulator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_modulator(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_Gbar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_Gbar_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_Gbar_set" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan_Gbar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SynChan_Gbar_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_Gbar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_Gbar_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_Gbar_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SynChan_Gbar_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_Ek_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_Ek_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_Ek_set" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan_Ek_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SynChan_Ek_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_Ek_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_Ek_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_Ek_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SynChan_Ek_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_tau1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_tau1_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_tau1_set" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan_tau1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SynChan_tau1_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_tau1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_tau1_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_tau1_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SynChan_tau1_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_tau2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_tau2_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_tau2_set" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan_tau2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SynChan_tau2_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_tau2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_tau2_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_tau2_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SynChan_tau2_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_normalizeWeights_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_normalizeWeights_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_normalizeWeights_set" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan_normalizeWeights_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SynChan_normalizeWeights_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_normalizeWeights_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_normalizeWeights_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_normalizeWeights_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_SynChan_normalizeWeights_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_Gk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_Gk_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_Gk_set" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan_Gk_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SynChan_Gk_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_Gk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_Gk_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_Gk_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SynChan_Gk_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_Ik_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_Ik_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_Ik_set" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan_Ik_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SynChan_Ik_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_Ik_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_Ik_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_Ik_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SynChan_Ik_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_numSynapses_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_numSynapses_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_numSynapses_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_SynChan_numSynapses_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_activation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_activation_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_activation_set" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan_activation_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SynChan_activation_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_activation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_activation_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_activation_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SynChan_activation_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_modulator_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_modulator_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_modulator_set" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SynChan_modulator_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SynChan_modulator_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SynChan_modulator_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SynChan *arg1 = (pymoose::SynChan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SynChan_modulator_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SynChan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SynChan_modulator_get" "', argument " "1"" of type '" "pymoose::SynChan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SynChan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SynChan_modulator_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *SynChan_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__SynChan, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_BinSynchan_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BinSynchan_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BinSynchan_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::BinSynchan::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_BinSynchan__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::Id arg1 ;
  pymoose::BinSynchan *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinSynchan",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinSynchan" "', argument " "1"" of type '" "::Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "1"" of type '" "::Id""'");
    } else {
      ::Id * temp = reinterpret_cast< ::Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchan *)new pymoose::BinSynchan(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinSynchan__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::BinSynchan *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinSynchan",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinSynchan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchan *)new pymoose::BinSynchan(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinSynchan__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  ::Id arg2 ;
  pymoose::BinSynchan *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinSynchan",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinSynchan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BinSynchan" "', argument " "2"" of type '" "::Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "2"" of type '" "::Id""'");
    } else {
      ::Id * temp = reinterpret_cast< ::Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchan *)new pymoose::BinSynchan(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinSynchan__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::BinSynchan *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinSynchan",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinSynchan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BinSynchan" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchan *)new pymoose::BinSynchan(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinSynchan__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::BinSynchan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinSynchan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__BinSynchan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinSynchan" "', argument " "1"" of type '" "pymoose::BinSynchan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "1"" of type '" "pymoose::BinSynchan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinSynchan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BinSynchan" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchan *)new pymoose::BinSynchan((pymoose::BinSynchan const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinSynchan__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::BinSynchan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinSynchan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__BinSynchan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinSynchan" "', argument " "1"" of type '" "pymoose::BinSynchan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "1"" of type '" "pymoose::BinSynchan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinSynchan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BinSynchan" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchan *)new pymoose::BinSynchan((pymoose::BinSynchan const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinSynchan__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::BinSynchan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinSynchan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinSynchan" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinSynchan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BinSynchan" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchan *)new pymoose::BinSynchan((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinSynchan__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = 0 ;
  std::string arg2 ;
  pymoose::BinSynchan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinSynchan",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__BinSynchan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinSynchan" "', argument " "1"" of type '" "pymoose::BinSynchan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinSynchan" "', argument " "1"" of type '" "pymoose::BinSynchan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinSynchan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchan *)new pymoose::BinSynchan((pymoose::BinSynchan const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinSynchan(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_BinSynchan__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_BinSynchan__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__BinSynchan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_BinSynchan__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_BinSynchan__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_BinSynchan__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__BinSynchan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_BinSynchan__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_BinSynchan__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__BinSynchan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_BinSynchan__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_BinSynchan'.\n  Possible C/C++ prototypes are:\n""    pymoose::BinSynchan(::Id)\n""    pymoose::BinSynchan(std::string)\n""    pymoose::BinSynchan(std::string,::Id)\n""    pymoose::BinSynchan(std::string,pymoose::PyMooseBase &)\n""    pymoose::BinSynchan(pymoose::BinSynchan const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::BinSynchan(pymoose::BinSynchan const &,std::string,Id &)\n""    pymoose::BinSynchan(Id const &,std::string,Id &)\n""    pymoose::BinSynchan(pymoose::BinSynchan const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BinSynchan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_BinSynchan",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BinSynchan" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_getType" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_Gbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_Gbar",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_Gbar" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_Gbar();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_Gbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_Gbar",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_Gbar" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_Gbar" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Gbar(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_Ek",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_Ek" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_Ek();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_Ek",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_Ek" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_Ek" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ek(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_tau1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_tau1",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_tau1" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_tau1();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_tau1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_tau1",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_tau1" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_tau1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_tau1(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_tau2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_tau2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_tau2" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_tau2();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_tau2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_tau2",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_tau2" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_tau2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_tau2(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_normalizeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_normalizeWeights",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_normalizeWeights" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::BinSynchan const *)arg1)->__get_normalizeWeights();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_normalizeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_normalizeWeights",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_normalizeWeights" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_normalizeWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_normalizeWeights(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_Gk",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_Gk" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_Gk();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_Gk",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_Gk" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_Gk" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Gk(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_Ik",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_Ik" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_Ik();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_Ik",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_Ik" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_Ik" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ik(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_numSynapses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_numSynapses",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_numSynapses" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::BinSynchan const *)arg1)->__get_numSynapses();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_numSynapses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_numSynapses",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_numSynapses" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_numSynapses" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BinSynchan___set_numSynapses" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_numSynapses(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_weight",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_weight" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___get_weight" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_weight(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_weight",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_weight" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_weight" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BinSynchan___set_weight" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_weight(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_delay" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___get_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_delay(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_delay" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BinSynchan___set_delay" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_delay(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_poolSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_poolSize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_poolSize" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___get_poolSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::BinSynchan const *)arg1)->__get_poolSize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_poolSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_poolSize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_poolSize" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_poolSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BinSynchan___set_poolSize" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_poolSize(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_releaseP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_releaseP",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_releaseP" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___get_releaseP" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_releaseP(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_releaseP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_releaseP",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_releaseP" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_releaseP" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BinSynchan___set_releaseP" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_releaseP(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_releaseCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_releaseCount",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_releaseCount" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___get_releaseCount" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_releaseCount(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_releaseCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_releaseCount",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_releaseCount" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_releaseCount" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BinSynchan___set_releaseCount" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_releaseCount(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_synapse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_synapse",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_synapse" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_synapse();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_synapse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_synapse",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_synapse" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_synapse" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_synapse(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_activation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_activation",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_activation" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_activation();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_activation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_activation",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_activation" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_activation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_activation(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___get_modulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___get_modulator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___get_modulator" "', argument " "1"" of type '" "pymoose::BinSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinSynchan const *)arg1)->__get_modulator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan___set_modulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan___set_modulator",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan___set_modulator" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan___set_modulator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_modulator(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_weight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanDoubleArray *arg2 = (pymoose::BinSynchanDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_weight_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_weight_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinSynchan_weight_set" "', argument " "2"" of type '" "pymoose::BinSynchanDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< pymoose::BinSynchanDoubleArray * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->weight = arg2;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_weight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanDoubleArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_weight_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_weight_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchanDoubleArray *) ((arg1)->weight);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_delay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanDoubleArray *arg2 = (pymoose::BinSynchanDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_delay_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_delay_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinSynchan_delay_set" "', argument " "2"" of type '" "pymoose::BinSynchanDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< pymoose::BinSynchanDoubleArray * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->delay = arg2;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_delay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanDoubleArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_delay_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_delay_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchanDoubleArray *) ((arg1)->delay);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_releaseP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanDoubleArray *arg2 = (pymoose::BinSynchanDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_releaseP_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_releaseP_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinSynchan_releaseP_set" "', argument " "2"" of type '" "pymoose::BinSynchanDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< pymoose::BinSynchanDoubleArray * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->releaseP = arg2;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_releaseP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanDoubleArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_releaseP_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_releaseP_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchanDoubleArray *) ((arg1)->releaseP);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_poolSize_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanIntArray *arg2 = (pymoose::BinSynchanIntArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_poolSize_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_poolSize_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_int_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinSynchan_poolSize_set" "', argument " "2"" of type '" "pymoose::BinSynchanIntArray *""'"); 
  }
  arg2 = reinterpret_cast< pymoose::BinSynchanIntArray * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->poolSize = arg2;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_poolSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanIntArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_poolSize_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_poolSize_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchanIntArray *) ((arg1)->poolSize);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_int_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_releaseCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanDoubleArray *arg2 = (pymoose::BinSynchanDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_releaseCount_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_releaseCount_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "BinSynchan_releaseCount_set" "', argument " "2"" of type '" "pymoose::BinSynchanDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< pymoose::BinSynchanDoubleArray * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->releaseCount = arg2;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_releaseCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  pymoose::BinSynchanDoubleArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_releaseCount_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_releaseCount_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinSynchanDoubleArray *) ((arg1)->releaseCount);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_Gbar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_Gbar_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_Gbar_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan_Gbar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinSynchan_Gbar_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_Gbar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_Gbar_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_Gbar_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_BinSynchan_Gbar_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_Ek_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_Ek_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_Ek_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan_Ek_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinSynchan_Ek_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_Ek_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_Ek_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_Ek_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_BinSynchan_Ek_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_tau1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_tau1_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_tau1_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan_tau1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinSynchan_tau1_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_tau1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_tau1_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_tau1_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_BinSynchan_tau1_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_tau2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_tau2_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_tau2_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan_tau2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinSynchan_tau2_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_tau2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_tau2_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_tau2_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_BinSynchan_tau2_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_normalizeWeights_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_normalizeWeights_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_normalizeWeights_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan_normalizeWeights_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinSynchan_normalizeWeights_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_normalizeWeights_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_normalizeWeights_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_normalizeWeights_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_BinSynchan_normalizeWeights_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_Gk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_Gk_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_Gk_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan_Gk_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinSynchan_Gk_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_Gk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_Gk_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_Gk_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_BinSynchan_Gk_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_Ik_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_Ik_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_Ik_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan_Ik_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinSynchan_Ik_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_Ik_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_Ik_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_Ik_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_BinSynchan_Ik_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_numSynapses_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_numSynapses_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_numSynapses_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_BinSynchan_numSynapses_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_activation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_activation_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_activation_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan_activation_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinSynchan_activation_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_activation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_activation_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_activation_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_BinSynchan_activation_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_modulator_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_modulator_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_modulator_set" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinSynchan_modulator_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinSynchan_modulator_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinSynchan_modulator_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinSynchan *arg1 = (pymoose::BinSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinSynchan_modulator_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinSynchan_modulator_get" "', argument " "1"" of type '" "pymoose::BinSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_BinSynchan_modulator_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *BinSynchan_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__BinSynchan, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_StochSynchan_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable StochSynchan_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_StochSynchan_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::StochSynchan::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_StochSynchan__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::StochSynchan *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_StochSynchan",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StochSynchan" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchan *)new pymoose::StochSynchan(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__StochSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StochSynchan__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::StochSynchan *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_StochSynchan",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StochSynchan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchan *)new pymoose::StochSynchan(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__StochSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StochSynchan__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::StochSynchan *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_StochSynchan",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StochSynchan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StochSynchan" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchan *)new pymoose::StochSynchan(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__StochSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StochSynchan__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::StochSynchan *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_StochSynchan",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StochSynchan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_StochSynchan" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchan *)new pymoose::StochSynchan(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__StochSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StochSynchan__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::StochSynchan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_StochSynchan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__StochSynchan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StochSynchan" "', argument " "1"" of type '" "pymoose::StochSynchan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "1"" of type '" "pymoose::StochSynchan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StochSynchan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_StochSynchan" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchan *)new pymoose::StochSynchan((pymoose::StochSynchan const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__StochSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StochSynchan__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::StochSynchan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_StochSynchan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__StochSynchan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StochSynchan" "', argument " "1"" of type '" "pymoose::StochSynchan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "1"" of type '" "pymoose::StochSynchan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StochSynchan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_StochSynchan" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchan *)new pymoose::StochSynchan((pymoose::StochSynchan const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__StochSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StochSynchan__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::StochSynchan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_StochSynchan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StochSynchan" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StochSynchan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_StochSynchan" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchan *)new pymoose::StochSynchan((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__StochSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StochSynchan__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = 0 ;
  std::string arg2 ;
  pymoose::StochSynchan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_StochSynchan",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__StochSynchan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StochSynchan" "', argument " "1"" of type '" "pymoose::StochSynchan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_StochSynchan" "', argument " "1"" of type '" "pymoose::StochSynchan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_StochSynchan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchan *)new pymoose::StochSynchan((pymoose::StochSynchan const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__StochSynchan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_StochSynchan(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_StochSynchan__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_StochSynchan__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__StochSynchan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_StochSynchan__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_StochSynchan__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_StochSynchan__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__StochSynchan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_StochSynchan__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_StochSynchan__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__StochSynchan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_StochSynchan__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_StochSynchan'.\n  Possible C/C++ prototypes are:\n""    pymoose::StochSynchan(Id)\n""    pymoose::StochSynchan(std::string)\n""    pymoose::StochSynchan(std::string,Id)\n""    pymoose::StochSynchan(std::string,pymoose::PyMooseBase &)\n""    pymoose::StochSynchan(pymoose::StochSynchan const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::StochSynchan(pymoose::StochSynchan const &,std::string,Id &)\n""    pymoose::StochSynchan(Id const &,std::string,Id &)\n""    pymoose::StochSynchan(pymoose::StochSynchan const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_StochSynchan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_StochSynchan",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StochSynchan" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_getType" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_Gbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_Gbar",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_Gbar" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_Gbar();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_Gbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_Gbar",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_Gbar" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_Gbar" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Gbar(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_Ek",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_Ek" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_Ek();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_Ek",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_Ek" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_Ek" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ek(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_tau1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_tau1",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_tau1" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_tau1();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_tau1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_tau1",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_tau1" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_tau1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_tau1(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_tau2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_tau2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_tau2" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_tau2();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_tau2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_tau2",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_tau2" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_tau2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_tau2(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_normalizeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_normalizeWeights",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_normalizeWeights" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::StochSynchan const *)arg1)->__get_normalizeWeights();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_normalizeWeights(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_normalizeWeights",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_normalizeWeights" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_normalizeWeights" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_normalizeWeights(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_Gk",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_Gk" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_Gk();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_Gk",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_Gk" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_Gk" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Gk(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_Ik",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_Ik" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_Ik();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_Ik",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_Ik" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_Ik" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ik(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_numSynapses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_numSynapses",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_numSynapses" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::StochSynchan const *)arg1)->__get_numSynapses();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_numSynapses(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_numSynapses",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_numSynapses" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_numSynapses" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StochSynchan___set_numSynapses" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_numSynapses(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_weight",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_weight" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___get_weight" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_weight(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_weight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_weight",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_weight" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_weight" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StochSynchan___set_weight" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_weight(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_delay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_delay" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___get_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_delay(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_delay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_delay",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_delay" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_delay" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StochSynchan___set_delay" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_delay(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_releaseP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_releaseP",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_releaseP" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___get_releaseP" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_releaseP(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_releaseP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_releaseP",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_releaseP" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_releaseP" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StochSynchan___set_releaseP" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_releaseP(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_releaseCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int arg2 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_releaseCount",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_releaseCount" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___get_releaseCount" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_releaseCount(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_releaseCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_releaseCount",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_releaseCount" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_releaseCount" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "StochSynchan___set_releaseCount" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_releaseCount(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_synapse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_synapse",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_synapse" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_synapse();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_synapse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_synapse",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_synapse" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_synapse" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_synapse(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_activation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_activation",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_activation" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_activation();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_activation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_activation",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_activation" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_activation" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_activation(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___get_modulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___get_modulator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___get_modulator" "', argument " "1"" of type '" "pymoose::StochSynchan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::StochSynchan const *)arg1)->__get_modulator();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan___set_modulator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan___set_modulator",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan___set_modulator" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan___set_modulator" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_modulator(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_weight_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  pymoose::StochSynchanDoubleArray *arg2 = (pymoose::StochSynchanDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_weight_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_weight_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StochSynchan_weight_set" "', argument " "2"" of type '" "pymoose::StochSynchanDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< pymoose::StochSynchanDoubleArray * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->weight = arg2;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_weight_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  pymoose::StochSynchanDoubleArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_weight_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_weight_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchanDoubleArray *) ((arg1)->weight);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_delay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  pymoose::StochSynchanDoubleArray *arg2 = (pymoose::StochSynchanDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_delay_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_delay_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StochSynchan_delay_set" "', argument " "2"" of type '" "pymoose::StochSynchanDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< pymoose::StochSynchanDoubleArray * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->delay = arg2;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_delay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  pymoose::StochSynchanDoubleArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_delay_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_delay_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchanDoubleArray *) ((arg1)->delay);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_releaseP_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  pymoose::StochSynchanDoubleArray *arg2 = (pymoose::StochSynchanDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_releaseP_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_releaseP_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StochSynchan_releaseP_set" "', argument " "2"" of type '" "pymoose::StochSynchanDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< pymoose::StochSynchanDoubleArray * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->releaseP = arg2;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_releaseP_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  pymoose::StochSynchanDoubleArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_releaseP_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_releaseP_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchanDoubleArray *) ((arg1)->releaseP);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_releaseCount_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  pymoose::StochSynchanDoubleArray *arg2 = (pymoose::StochSynchanDoubleArray *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_releaseCount_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_releaseCount_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StochSynchan_releaseCount_set" "', argument " "2"" of type '" "pymoose::StochSynchanDoubleArray *""'"); 
  }
  arg2 = reinterpret_cast< pymoose::StochSynchanDoubleArray * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    if (arg1) (arg1)->releaseCount = arg2;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_releaseCount_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  pymoose::StochSynchanDoubleArray *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_releaseCount_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_releaseCount_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::StochSynchanDoubleArray *) ((arg1)->releaseCount);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_Gbar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_Gbar_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_Gbar_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan_Gbar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_StochSynchan_Gbar_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_Gbar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_Gbar_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_Gbar_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_StochSynchan_Gbar_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_Ek_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_Ek_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_Ek_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan_Ek_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_StochSynchan_Ek_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_Ek_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_Ek_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_Ek_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_StochSynchan_Ek_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_tau1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_tau1_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_tau1_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan_tau1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_StochSynchan_tau1_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_tau1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_tau1_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_tau1_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_StochSynchan_tau1_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_tau2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_tau2_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_tau2_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan_tau2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_StochSynchan_tau2_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_tau2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_tau2_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_tau2_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_StochSynchan_tau2_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_normalizeWeights_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_normalizeWeights_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_normalizeWeights_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan_normalizeWeights_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_StochSynchan_normalizeWeights_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_normalizeWeights_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_normalizeWeights_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_normalizeWeights_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_StochSynchan_normalizeWeights_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_Gk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_Gk_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_Gk_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan_Gk_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_StochSynchan_Gk_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_Gk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_Gk_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_Gk_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_StochSynchan_Gk_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_Ik_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_Ik_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_Ik_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan_Ik_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_StochSynchan_Ik_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_Ik_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_Ik_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_Ik_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_StochSynchan_Ik_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_numSynapses_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_numSynapses_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_numSynapses_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_StochSynchan_numSynapses_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_activation_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_activation_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_activation_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan_activation_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_StochSynchan_activation_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_activation_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_activation_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_activation_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_StochSynchan_activation_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_modulator_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_modulator_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_modulator_set" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StochSynchan_modulator_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_StochSynchan_modulator_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StochSynchan_modulator_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::StochSynchan *arg1 = (pymoose::StochSynchan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"StochSynchan_modulator_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__StochSynchan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StochSynchan_modulator_get" "', argument " "1"" of type '" "pymoose::StochSynchan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::StochSynchan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_StochSynchan_modulator_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *StochSynchan_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__StochSynchan, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_SpikeGen_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SpikeGen_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SpikeGen_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::SpikeGen::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_SpikeGen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::SpikeGen *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpikeGen",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpikeGen" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpikeGen *)new pymoose::SpikeGen(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpikeGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpikeGen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::SpikeGen *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpikeGen",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpikeGen" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpikeGen *)new pymoose::SpikeGen(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpikeGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpikeGen__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::SpikeGen *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpikeGen",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpikeGen" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpikeGen" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpikeGen *)new pymoose::SpikeGen(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpikeGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpikeGen__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::SpikeGen *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpikeGen",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpikeGen" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpikeGen" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpikeGen *)new pymoose::SpikeGen(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpikeGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpikeGen__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::SpikeGen *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpikeGen",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SpikeGen,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpikeGen" "', argument " "1"" of type '" "pymoose::SpikeGen const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "1"" of type '" "pymoose::SpikeGen const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpikeGen" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpikeGen" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpikeGen *)new pymoose::SpikeGen((pymoose::SpikeGen const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpikeGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpikeGen__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::SpikeGen *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpikeGen",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SpikeGen,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpikeGen" "', argument " "1"" of type '" "pymoose::SpikeGen const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "1"" of type '" "pymoose::SpikeGen const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpikeGen" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpikeGen" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpikeGen *)new pymoose::SpikeGen((pymoose::SpikeGen const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpikeGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpikeGen__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::SpikeGen *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpikeGen",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpikeGen" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpikeGen" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpikeGen" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpikeGen *)new pymoose::SpikeGen((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpikeGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpikeGen__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = 0 ;
  std::string arg2 ;
  pymoose::SpikeGen *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpikeGen",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SpikeGen,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpikeGen" "', argument " "1"" of type '" "pymoose::SpikeGen const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpikeGen" "', argument " "1"" of type '" "pymoose::SpikeGen const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpikeGen" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpikeGen *)new pymoose::SpikeGen((pymoose::SpikeGen const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpikeGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpikeGen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_SpikeGen__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_SpikeGen__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SpikeGen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SpikeGen__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SpikeGen__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SpikeGen__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SpikeGen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SpikeGen__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SpikeGen__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SpikeGen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SpikeGen__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SpikeGen'.\n  Possible C/C++ prototypes are:\n""    pymoose::SpikeGen(Id)\n""    pymoose::SpikeGen(std::string)\n""    pymoose::SpikeGen(std::string,Id)\n""    pymoose::SpikeGen(std::string,pymoose::PyMooseBase &)\n""    pymoose::SpikeGen(pymoose::SpikeGen const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::SpikeGen(pymoose::SpikeGen const &,std::string,Id &)\n""    pymoose::SpikeGen(Id const &,std::string,Id &)\n""    pymoose::SpikeGen(pymoose::SpikeGen const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpikeGen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_SpikeGen",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpikeGen" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_getType" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___get_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___get_threshold",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___get_threshold" "', argument " "1"" of type '" "pymoose::SpikeGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SpikeGen const *)arg1)->__get_threshold();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___set_threshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___set_threshold",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___set_threshold" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen___set_threshold" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_threshold(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___get_refractT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___get_refractT",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___get_refractT" "', argument " "1"" of type '" "pymoose::SpikeGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SpikeGen const *)arg1)->__get_refractT();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___set_refractT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___set_refractT",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___set_refractT" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen___set_refractT" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_refractT(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___get_absRefractT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___get_absRefractT",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___get_absRefractT" "', argument " "1"" of type '" "pymoose::SpikeGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SpikeGen const *)arg1)->__get_absRefractT();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___set_absRefractT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___set_absRefractT",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___set_absRefractT" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen___set_absRefractT" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_absRefractT(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___get_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___get_amplitude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___get_amplitude" "', argument " "1"" of type '" "pymoose::SpikeGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SpikeGen const *)arg1)->__get_amplitude();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___set_amplitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___set_amplitude",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___set_amplitude" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen___set_amplitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_amplitude(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___get_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___get_state",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___get_state" "', argument " "1"" of type '" "pymoose::SpikeGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SpikeGen const *)arg1)->__get_state();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___set_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___set_state",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___set_state" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen___set_state" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_state(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___get_event(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___get_event",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___get_event" "', argument " "1"" of type '" "pymoose::SpikeGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SpikeGen const *)arg1)->__get_event();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___set_event(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___set_event",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___set_event" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen___set_event" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_event(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___get_Vm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___get_Vm",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___get_Vm" "', argument " "1"" of type '" "pymoose::SpikeGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SpikeGen const *)arg1)->__get_Vm();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen___set_Vm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen___set_Vm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen___set_Vm" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen___set_Vm" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Vm(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_threshold_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_threshold_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_threshold_set" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen_threshold_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SpikeGen_threshold_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_threshold_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_threshold_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_threshold_get" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SpikeGen_threshold_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_refractT_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_refractT_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_refractT_set" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen_refractT_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SpikeGen_refractT_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_refractT_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_refractT_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_refractT_get" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SpikeGen_refractT_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_absRefractT_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_absRefractT_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_absRefractT_set" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen_absRefractT_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SpikeGen_absRefractT_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_absRefractT_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_absRefractT_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_absRefractT_get" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SpikeGen_absRefractT_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_amplitude_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_amplitude_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_amplitude_set" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen_amplitude_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SpikeGen_amplitude_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_amplitude_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_amplitude_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_amplitude_get" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SpikeGen_amplitude_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_state_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_state_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_state_set" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen_state_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SpikeGen_state_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_state_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_state_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_state_get" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SpikeGen_state_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_event_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_event_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_event_set" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen_event_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SpikeGen_event_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_event_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_event_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_event_get" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SpikeGen_event_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_Vm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_Vm_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_Vm_set" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SpikeGen_Vm_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SpikeGen_Vm_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpikeGen_Vm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpikeGen *arg1 = (pymoose::SpikeGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpikeGen_Vm_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpikeGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpikeGen_Vm_get" "', argument " "1"" of type '" "pymoose::SpikeGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpikeGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SpikeGen_Vm_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *SpikeGen_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__SpikeGen, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_RandomSpike_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RandomSpike_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RandomSpike_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::RandomSpike::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_RandomSpike__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::RandomSpike *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandomSpike",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomSpike" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandomSpike *)new pymoose::RandomSpike(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandomSpike, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomSpike__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::RandomSpike *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandomSpike",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandomSpike" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandomSpike *)new pymoose::RandomSpike(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandomSpike, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomSpike__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::RandomSpike *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandomSpike",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandomSpike" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RandomSpike" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandomSpike *)new pymoose::RandomSpike(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandomSpike, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomSpike__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::RandomSpike *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandomSpike",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandomSpike" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RandomSpike" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandomSpike *)new pymoose::RandomSpike(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandomSpike, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomSpike__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::RandomSpike *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandomSpike",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__RandomSpike,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomSpike" "', argument " "1"" of type '" "pymoose::RandomSpike const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "1"" of type '" "pymoose::RandomSpike const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandomSpike" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RandomSpike" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandomSpike *)new pymoose::RandomSpike((pymoose::RandomSpike const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandomSpike, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomSpike__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::RandomSpike *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandomSpike",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__RandomSpike,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomSpike" "', argument " "1"" of type '" "pymoose::RandomSpike const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "1"" of type '" "pymoose::RandomSpike const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandomSpike" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RandomSpike" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandomSpike *)new pymoose::RandomSpike((pymoose::RandomSpike const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandomSpike, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomSpike__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::RandomSpike *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandomSpike",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomSpike" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandomSpike" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RandomSpike" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandomSpike *)new pymoose::RandomSpike((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandomSpike, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomSpike__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = 0 ;
  std::string arg2 ;
  pymoose::RandomSpike *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandomSpike",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__RandomSpike,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandomSpike" "', argument " "1"" of type '" "pymoose::RandomSpike const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandomSpike" "', argument " "1"" of type '" "pymoose::RandomSpike const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandomSpike" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandomSpike *)new pymoose::RandomSpike((pymoose::RandomSpike const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandomSpike, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandomSpike(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_RandomSpike__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_RandomSpike__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__RandomSpike, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_RandomSpike__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_RandomSpike__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_RandomSpike__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__RandomSpike, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RandomSpike__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RandomSpike__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__RandomSpike, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RandomSpike__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_RandomSpike'.\n  Possible C/C++ prototypes are:\n""    pymoose::RandomSpike(Id)\n""    pymoose::RandomSpike(std::string)\n""    pymoose::RandomSpike(std::string,Id)\n""    pymoose::RandomSpike(std::string,pymoose::PyMooseBase &)\n""    pymoose::RandomSpike(pymoose::RandomSpike const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::RandomSpike(pymoose::RandomSpike const &,std::string,Id &)\n""    pymoose::RandomSpike(Id const &,std::string,Id &)\n""    pymoose::RandomSpike(pymoose::RandomSpike const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RandomSpike(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_RandomSpike",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RandomSpike" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_getType" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___get_minAmp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___get_minAmp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___get_minAmp" "', argument " "1"" of type '" "pymoose::RandomSpike const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandomSpike const *)arg1)->__get_minAmp();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___set_minAmp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___set_minAmp",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___set_minAmp" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike___set_minAmp" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_minAmp(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___get_maxAmp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___get_maxAmp",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___get_maxAmp" "', argument " "1"" of type '" "pymoose::RandomSpike const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandomSpike const *)arg1)->__get_maxAmp();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___set_maxAmp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___set_maxAmp",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___set_maxAmp" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike___set_maxAmp" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_maxAmp(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___get_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___get_rate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___get_rate" "', argument " "1"" of type '" "pymoose::RandomSpike const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandomSpike const *)arg1)->__get_rate();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___set_rate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___set_rate",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___set_rate" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike___set_rate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_rate(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___get_resetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___get_resetValue",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___get_resetValue" "', argument " "1"" of type '" "pymoose::RandomSpike const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandomSpike const *)arg1)->__get_resetValue();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___set_resetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___set_resetValue",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___set_resetValue" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike___set_resetValue" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_resetValue(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___get_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___get_state",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___get_state" "', argument " "1"" of type '" "pymoose::RandomSpike const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandomSpike const *)arg1)->__get_state();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___set_state(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___set_state",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___set_state" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike___set_state" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_state(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___get_absRefract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___get_absRefract",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___get_absRefract" "', argument " "1"" of type '" "pymoose::RandomSpike const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandomSpike const *)arg1)->__get_absRefract();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___set_absRefract(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___set_absRefract",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___set_absRefract" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike___set_absRefract" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_absRefract(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___get_lastEvent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___get_lastEvent",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___get_lastEvent" "', argument " "1"" of type '" "pymoose::RandomSpike const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandomSpike const *)arg1)->__get_lastEvent();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___get_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___get_reset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___get_reset" "', argument " "1"" of type '" "pymoose::RandomSpike const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::RandomSpike const *)arg1)->__get_reset();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike___set_reset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike___set_reset",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike___set_reset" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike___set_reset" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_reset(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_minAmp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_minAmp_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_minAmp_set" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike_minAmp_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_RandomSpike_minAmp_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_minAmp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_minAmp_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_minAmp_get" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandomSpike_minAmp_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_maxAmp_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_maxAmp_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_maxAmp_set" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike_maxAmp_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_RandomSpike_maxAmp_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_maxAmp_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_maxAmp_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_maxAmp_get" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandomSpike_maxAmp_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_rate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_rate_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_rate_set" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike_rate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_RandomSpike_rate_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_rate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_rate_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_rate_get" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandomSpike_rate_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_resetValue_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_resetValue_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_resetValue_set" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike_resetValue_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_RandomSpike_resetValue_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_resetValue_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_resetValue_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_resetValue_get" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandomSpike_resetValue_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_state_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_state_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_state_set" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike_state_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_RandomSpike_state_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_state_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_state_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_state_get" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandomSpike_state_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_absRefract_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_absRefract_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_absRefract_set" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike_absRefract_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_RandomSpike_absRefract_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_absRefract_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_absRefract_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_absRefract_get" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandomSpike_absRefract_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_lastEvent_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_lastEvent_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_lastEvent_get" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandomSpike_lastEvent_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_reset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_reset_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_reset_set" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandomSpike_reset_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_RandomSpike_reset_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandomSpike_reset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandomSpike *arg1 = (pymoose::RandomSpike *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandomSpike_reset_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandomSpike, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandomSpike_reset_get" "', argument " "1"" of type '" "pymoose::RandomSpike *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandomSpike * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_RandomSpike_reset_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *RandomSpike_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__RandomSpike, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_PulseGen_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PulseGen_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PulseGen_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::PulseGen::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_PulseGen__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::PulseGen *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PulseGen",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PulseGen" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PulseGen *)new pymoose::PulseGen(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PulseGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PulseGen__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PulseGen *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PulseGen",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PulseGen" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PulseGen *)new pymoose::PulseGen(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PulseGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PulseGen__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::PulseGen *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PulseGen",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PulseGen" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PulseGen" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PulseGen *)new pymoose::PulseGen(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PulseGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PulseGen__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::PulseGen *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PulseGen",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PulseGen" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PulseGen" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PulseGen *)new pymoose::PulseGen(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PulseGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PulseGen__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::PulseGen *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PulseGen",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__PulseGen,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PulseGen" "', argument " "1"" of type '" "pymoose::PulseGen const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "1"" of type '" "pymoose::PulseGen const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PulseGen" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PulseGen" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PulseGen *)new pymoose::PulseGen((pymoose::PulseGen const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PulseGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PulseGen__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::PulseGen *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PulseGen",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__PulseGen,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PulseGen" "', argument " "1"" of type '" "pymoose::PulseGen const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "1"" of type '" "pymoose::PulseGen const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PulseGen" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PulseGen" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PulseGen *)new pymoose::PulseGen((pymoose::PulseGen const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PulseGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PulseGen__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::PulseGen *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PulseGen",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PulseGen" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PulseGen" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PulseGen" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PulseGen *)new pymoose::PulseGen((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PulseGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PulseGen__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PulseGen *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PulseGen",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__PulseGen,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PulseGen" "', argument " "1"" of type '" "pymoose::PulseGen const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PulseGen" "', argument " "1"" of type '" "pymoose::PulseGen const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PulseGen" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PulseGen *)new pymoose::PulseGen((pymoose::PulseGen const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PulseGen, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PulseGen(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_PulseGen__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_PulseGen__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__PulseGen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_PulseGen__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_PulseGen__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_PulseGen__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__PulseGen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_PulseGen__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_PulseGen__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__PulseGen, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_PulseGen__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_PulseGen'.\n  Possible C/C++ prototypes are:\n""    pymoose::PulseGen(Id)\n""    pymoose::PulseGen(std::string)\n""    pymoose::PulseGen(std::string,Id)\n""    pymoose::PulseGen(std::string,pymoose::PyMooseBase &)\n""    pymoose::PulseGen(pymoose::PulseGen const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::PulseGen(pymoose::PulseGen const &,std::string,Id &)\n""    pymoose::PulseGen(Id const &,std::string,Id &)\n""    pymoose::PulseGen(pymoose::PulseGen const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PulseGen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_PulseGen",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PulseGen" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_getType" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_firstLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_firstLevel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_firstLevel" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::PulseGen const *)arg1)->__get_firstLevel();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___set_firstLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___set_firstLevel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___set_firstLevel" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen___set_firstLevel" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_firstLevel(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_firstWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_firstWidth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_firstWidth" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::PulseGen const *)arg1)->__get_firstWidth();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___set_firstWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___set_firstWidth",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___set_firstWidth" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen___set_firstWidth" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_firstWidth(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_firstDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_firstDelay",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_firstDelay" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::PulseGen const *)arg1)->__get_firstDelay();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___set_firstDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___set_firstDelay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___set_firstDelay" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen___set_firstDelay" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_firstDelay(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_secondLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_secondLevel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_secondLevel" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::PulseGen const *)arg1)->__get_secondLevel();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___set_secondLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___set_secondLevel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___set_secondLevel" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen___set_secondLevel" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_secondLevel(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_secondWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_secondWidth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_secondWidth" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::PulseGen const *)arg1)->__get_secondWidth();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___set_secondWidth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___set_secondWidth",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___set_secondWidth" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen___set_secondWidth" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_secondWidth(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_secondDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_secondDelay",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_secondDelay" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::PulseGen const *)arg1)->__get_secondDelay();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___set_secondDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___set_secondDelay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___set_secondDelay" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen___set_secondDelay" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_secondDelay(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_baseLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_baseLevel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_baseLevel" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::PulseGen const *)arg1)->__get_baseLevel();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___set_baseLevel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___set_baseLevel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___set_baseLevel" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen___set_baseLevel" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_baseLevel(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_output",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_output" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::PulseGen const *)arg1)->__get_output();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_trigTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_trigTime",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_trigTime" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::PulseGen const *)arg1)->__get_trigTime();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___set_trigTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___set_trigTime",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___set_trigTime" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen___set_trigTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_trigTime(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_trigMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_trigMode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_trigMode" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::PulseGen const *)arg1)->__get_trigMode();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___set_trigMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___set_trigMode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___set_trigMode" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen___set_trigMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_trigMode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen___get_prevInput(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen___get_prevInput",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen___get_prevInput" "', argument " "1"" of type '" "pymoose::PulseGen const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::PulseGen const *)arg1)->__get_prevInput();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_firstLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_firstLevel_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_firstLevel_set" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen_firstLevel_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_PulseGen_firstLevel_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_firstLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_firstLevel_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_firstLevel_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PulseGen_firstLevel_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_firstWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_firstWidth_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_firstWidth_set" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen_firstWidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_PulseGen_firstWidth_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_firstWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_firstWidth_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_firstWidth_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PulseGen_firstWidth_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_firstDelay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_firstDelay_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_firstDelay_set" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen_firstDelay_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_PulseGen_firstDelay_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_firstDelay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_firstDelay_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_firstDelay_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PulseGen_firstDelay_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_secondLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_secondLevel_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_secondLevel_set" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen_secondLevel_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_PulseGen_secondLevel_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_secondLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_secondLevel_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_secondLevel_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PulseGen_secondLevel_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_secondWidth_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_secondWidth_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_secondWidth_set" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen_secondWidth_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_PulseGen_secondWidth_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_secondWidth_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_secondWidth_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_secondWidth_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PulseGen_secondWidth_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_secondDelay_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_secondDelay_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_secondDelay_set" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen_secondDelay_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_PulseGen_secondDelay_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_secondDelay_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_secondDelay_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_secondDelay_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PulseGen_secondDelay_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_baseLevel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_baseLevel_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_baseLevel_set" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen_baseLevel_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_PulseGen_baseLevel_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_baseLevel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_baseLevel_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_baseLevel_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PulseGen_baseLevel_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_output_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_output_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_output_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PulseGen_output_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_trigTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_trigTime_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_trigTime_set" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen_trigTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_PulseGen_trigTime_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_trigTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_trigTime_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_trigTime_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PulseGen_trigTime_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_trigMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_trigMode_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_trigMode_set" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PulseGen_trigMode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_PulseGen_trigMode_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_trigMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_trigMode_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_trigMode_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_PulseGen_trigMode_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PulseGen_prevInput_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PulseGen *arg1 = (pymoose::PulseGen *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PulseGen_prevInput_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PulseGen, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PulseGen_prevInput_get" "', argument " "1"" of type '" "pymoose::PulseGen *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PulseGen * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_PulseGen_prevInput_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *PulseGen_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__PulseGen, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Nernst_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Nernst_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Nernst_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Nernst::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Nernst__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Nernst *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nernst",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Nernst" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Nernst *)new pymoose::Nernst(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Nernst, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nernst__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Nernst *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nernst",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Nernst" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Nernst *)new pymoose::Nernst(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Nernst, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nernst__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Nernst *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nernst",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Nernst" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Nernst" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Nernst *)new pymoose::Nernst(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Nernst, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nernst__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Nernst *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nernst",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Nernst" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Nernst" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Nernst *)new pymoose::Nernst(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Nernst, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nernst__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Nernst *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nernst",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Nernst,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Nernst" "', argument " "1"" of type '" "pymoose::Nernst const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "1"" of type '" "pymoose::Nernst const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Nernst" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Nernst" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Nernst *)new pymoose::Nernst((pymoose::Nernst const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Nernst, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nernst__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Nernst *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nernst",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Nernst,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Nernst" "', argument " "1"" of type '" "pymoose::Nernst const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "1"" of type '" "pymoose::Nernst const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Nernst" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Nernst" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Nernst *)new pymoose::Nernst((pymoose::Nernst const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Nernst, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nernst__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Nernst *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nernst",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Nernst" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Nernst" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Nernst" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Nernst *)new pymoose::Nernst((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Nernst, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nernst__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Nernst *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Nernst",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Nernst,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Nernst" "', argument " "1"" of type '" "pymoose::Nernst const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Nernst" "', argument " "1"" of type '" "pymoose::Nernst const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Nernst" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Nernst *)new pymoose::Nernst((pymoose::Nernst const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Nernst, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Nernst(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Nernst__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Nernst__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Nernst, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Nernst__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Nernst__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Nernst__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Nernst, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Nernst__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Nernst__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Nernst, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Nernst__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Nernst'.\n  Possible C/C++ prototypes are:\n""    pymoose::Nernst(Id)\n""    pymoose::Nernst(std::string)\n""    pymoose::Nernst(std::string,Id)\n""    pymoose::Nernst(std::string,pymoose::PyMooseBase &)\n""    pymoose::Nernst(pymoose::Nernst const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Nernst(pymoose::Nernst const &,std::string,Id &)\n""    pymoose::Nernst(Id const &,std::string,Id &)\n""    pymoose::Nernst(pymoose::Nernst const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Nernst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Nernst",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Nernst" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_getType" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___get_E(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___get_E",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___get_E" "', argument " "1"" of type '" "pymoose::Nernst const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Nernst const *)arg1)->__get_E();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___set_E(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___set_E",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___set_E" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst___set_E" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_E(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___get_Temperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___get_Temperature",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___get_Temperature" "', argument " "1"" of type '" "pymoose::Nernst const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Nernst const *)arg1)->__get_Temperature();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___set_Temperature(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___set_Temperature",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___set_Temperature" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst___set_Temperature" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Temperature(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___get_valence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___get_valence",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___get_valence" "', argument " "1"" of type '" "pymoose::Nernst const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::Nernst const *)arg1)->__get_valence();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___set_valence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___set_valence",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___set_valence" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst___set_valence" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_valence(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___get_Cin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___get_Cin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___get_Cin" "', argument " "1"" of type '" "pymoose::Nernst const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Nernst const *)arg1)->__get_Cin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___set_Cin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___set_Cin",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___set_Cin" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst___set_Cin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Cin(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___get_Cout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___get_Cout",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___get_Cout" "', argument " "1"" of type '" "pymoose::Nernst const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Nernst const *)arg1)->__get_Cout();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___set_Cout(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___set_Cout",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___set_Cout" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst___set_Cout" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Cout(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___get_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___get_scale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___get_scale" "', argument " "1"" of type '" "pymoose::Nernst const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Nernst const *)arg1)->__get_scale();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___set_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___set_scale",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___set_scale" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst___set_scale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_scale(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___get_ESrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___get_ESrc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___get_ESrc" "', argument " "1"" of type '" "pymoose::Nernst const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Nernst const *)arg1)->__get_ESrc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___set_ESrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___set_ESrc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___set_ESrc" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst___set_ESrc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_ESrc(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___get_CinMsg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___get_CinMsg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___get_CinMsg" "', argument " "1"" of type '" "pymoose::Nernst const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Nernst const *)arg1)->__get_CinMsg();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___set_CinMsg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___set_CinMsg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___set_CinMsg" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst___set_CinMsg" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_CinMsg(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___get_CoutMsg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___get_CoutMsg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___get_CoutMsg" "', argument " "1"" of type '" "pymoose::Nernst const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Nernst const *)arg1)->__get_CoutMsg();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst___set_CoutMsg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst___set_CoutMsg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst___set_CoutMsg" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst___set_CoutMsg" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_CoutMsg(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_E_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_E_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_E_get" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Nernst_E_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_Temperature_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_Temperature_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_Temperature_set" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst_Temperature_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Nernst_Temperature_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_Temperature_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_Temperature_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_Temperature_get" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Nernst_Temperature_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_valence_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_valence_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_valence_set" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst_valence_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Nernst_valence_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_valence_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_valence_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_valence_get" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_Nernst_valence_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_Cin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_Cin_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_Cin_set" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst_Cin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Nernst_Cin_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_Cin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_Cin_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_Cin_get" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Nernst_Cin_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_Cout_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_Cout_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_Cout_set" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst_Cout_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Nernst_Cout_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_Cout_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_Cout_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_Cout_get" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Nernst_Cout_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_scale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_scale_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_scale_set" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Nernst_scale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Nernst_scale_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Nernst_scale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Nernst *arg1 = (pymoose::Nernst *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Nernst_scale_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Nernst, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Nernst_scale_get" "', argument " "1"" of type '" "pymoose::Nernst *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Nernst * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Nernst_scale_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Nernst_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Nernst, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_CaConc_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CaConc_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CaConc_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::CaConc::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_CaConc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::Id arg1 ;
  pymoose::CaConc *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CaConc",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CaConc" "', argument " "1"" of type '" "::Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "1"" of type '" "::Id""'");
    } else {
      ::Id * temp = reinterpret_cast< ::Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CaConc *)new pymoose::CaConc(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CaConc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CaConc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::CaConc *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CaConc",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CaConc" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CaConc *)new pymoose::CaConc(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CaConc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CaConc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  ::Id arg2 ;
  pymoose::CaConc *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CaConc",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CaConc" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CaConc" "', argument " "2"" of type '" "::Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "2"" of type '" "::Id""'");
    } else {
      ::Id * temp = reinterpret_cast< ::Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CaConc *)new pymoose::CaConc(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CaConc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CaConc__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::CaConc *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CaConc",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CaConc" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CaConc" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CaConc *)new pymoose::CaConc(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CaConc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CaConc__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::CaConc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CaConc",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__CaConc,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CaConc" "', argument " "1"" of type '" "pymoose::CaConc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "1"" of type '" "pymoose::CaConc const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CaConc" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CaConc" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CaConc *)new pymoose::CaConc((pymoose::CaConc const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CaConc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CaConc__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::CaConc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CaConc",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__CaConc,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CaConc" "', argument " "1"" of type '" "pymoose::CaConc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "1"" of type '" "pymoose::CaConc const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CaConc" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CaConc" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CaConc *)new pymoose::CaConc((pymoose::CaConc const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CaConc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CaConc__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::CaConc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CaConc",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CaConc" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CaConc" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CaConc" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CaConc *)new pymoose::CaConc((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CaConc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CaConc__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = 0 ;
  std::string arg2 ;
  pymoose::CaConc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CaConc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__CaConc,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CaConc" "', argument " "1"" of type '" "pymoose::CaConc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CaConc" "', argument " "1"" of type '" "pymoose::CaConc const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CaConc" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CaConc *)new pymoose::CaConc((pymoose::CaConc const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CaConc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CaConc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_CaConc__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_CaConc__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__CaConc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_CaConc__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_CaConc__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_CaConc__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__CaConc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_CaConc__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_CaConc__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__CaConc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_CaConc__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_CaConc'.\n  Possible C/C++ prototypes are:\n""    pymoose::CaConc(::Id)\n""    pymoose::CaConc(std::string)\n""    pymoose::CaConc(std::string,::Id)\n""    pymoose::CaConc(std::string,pymoose::PyMooseBase &)\n""    pymoose::CaConc(pymoose::CaConc const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::CaConc(pymoose::CaConc const &,std::string,Id &)\n""    pymoose::CaConc(Id const &,std::string,Id &)\n""    pymoose::CaConc(pymoose::CaConc const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CaConc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_CaConc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CaConc" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_getType" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___get_Ca(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___get_Ca",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___get_Ca" "', argument " "1"" of type '" "pymoose::CaConc const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::CaConc const *)arg1)->__get_Ca();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___set_Ca(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___set_Ca",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___set_Ca" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc___set_Ca" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ca(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___get_CaBasal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___get_CaBasal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___get_CaBasal" "', argument " "1"" of type '" "pymoose::CaConc const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::CaConc const *)arg1)->__get_CaBasal();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___set_CaBasal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___set_CaBasal",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___set_CaBasal" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc___set_CaBasal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_CaBasal(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___get_Ca_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___get_Ca_base",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___get_Ca_base" "', argument " "1"" of type '" "pymoose::CaConc const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::CaConc const *)arg1)->__get_Ca_base();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___set_Ca_base(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___set_Ca_base",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___set_Ca_base" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc___set_Ca_base" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ca_base(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___get_tau(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___get_tau",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___get_tau" "', argument " "1"" of type '" "pymoose::CaConc const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::CaConc const *)arg1)->__get_tau();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___set_tau(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___set_tau",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___set_tau" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc___set_tau" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_tau(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___get_B(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___get_B",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___get_B" "', argument " "1"" of type '" "pymoose::CaConc const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::CaConc const *)arg1)->__get_B();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc___set_B(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc___set_B",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc___set_B" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc___set_B" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_B(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_Ca_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_Ca_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_Ca_set" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc_Ca_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_CaConc_Ca_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_Ca_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_Ca_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_Ca_get" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_CaConc_Ca_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_CaBasal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_CaBasal_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_CaBasal_set" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc_CaBasal_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_CaConc_CaBasal_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_CaBasal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_CaBasal_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_CaBasal_get" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_CaConc_CaBasal_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_Ca_base_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_Ca_base_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_Ca_base_set" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc_Ca_base_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_CaConc_Ca_base_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_Ca_base_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_Ca_base_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_Ca_base_get" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_CaConc_Ca_base_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_tau_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_tau_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_tau_set" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc_tau_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_CaConc_tau_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_tau_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_tau_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_tau_get" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_CaConc_tau_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_B_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_B_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_B_set" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CaConc_B_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_CaConc_B_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CaConc_B_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CaConc *arg1 = (pymoose::CaConc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CaConc_B_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CaConc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CaConc_B_get" "', argument " "1"" of type '" "pymoose::CaConc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CaConc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_CaConc_B_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *CaConc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__CaConc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_HHGate_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HHGate_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HHGate_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::HHGate::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_HHGate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::HHGate *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHGate",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHGate" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHGate *)new pymoose::HHGate(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHGate, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHGate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::HHGate *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHGate",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHGate" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHGate *)new pymoose::HHGate(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHGate, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHGate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::HHGate *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHGate",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHGate" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HHGate" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHGate *)new pymoose::HHGate(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHGate, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHGate__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::HHGate *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHGate",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHGate" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HHGate" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHGate *)new pymoose::HHGate(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHGate, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHGate__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::HHGate *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHGate",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HHGate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHGate" "', argument " "1"" of type '" "pymoose::HHGate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "1"" of type '" "pymoose::HHGate const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHGate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HHGate" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHGate *)new pymoose::HHGate((pymoose::HHGate const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHGate, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHGate__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::HHGate *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHGate",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HHGate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHGate" "', argument " "1"" of type '" "pymoose::HHGate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "1"" of type '" "pymoose::HHGate const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHGate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HHGate" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHGate *)new pymoose::HHGate((pymoose::HHGate const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHGate, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHGate__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::HHGate *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHGate",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHGate" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHGate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HHGate" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHGate *)new pymoose::HHGate((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHGate, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHGate__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = 0 ;
  std::string arg2 ;
  pymoose::HHGate *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHGate",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HHGate,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHGate" "', argument " "1"" of type '" "pymoose::HHGate const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHGate" "', argument " "1"" of type '" "pymoose::HHGate const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHGate" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHGate *)new pymoose::HHGate((pymoose::HHGate const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHGate, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHGate(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_HHGate__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_HHGate__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HHGate__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HHGate__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HHGate__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HHGate__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HHGate__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HHGate__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_HHGate'.\n  Possible C/C++ prototypes are:\n""    pymoose::HHGate(Id)\n""    pymoose::HHGate(std::string)\n""    pymoose::HHGate(std::string,Id)\n""    pymoose::HHGate(std::string,pymoose::PyMooseBase &)\n""    pymoose::HHGate(pymoose::HHGate const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::HHGate(pymoose::HHGate const &,std::string,Id &)\n""    pymoose::HHGate(Id const &,std::string,Id &)\n""    pymoose::HHGate(pymoose::HHGate const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HHGate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_HHGate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HHGate" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_getType" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate___get_A(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate___get_A",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate___get_A" "', argument " "1"" of type '" "pymoose::HHGate const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)((pymoose::HHGate const *)arg1)->__get_A();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate___get_B(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate___get_B",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate___get_B" "', argument " "1"" of type '" "pymoose::HHGate const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)((pymoose::HHGate const *)arg1)->__get_B();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_tabFill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_tabFill",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_tabFill" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHGate_tabFill" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHGate_tabFill" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tabFill(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupAlpha__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_setupAlpha",14,14,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_setupAlpha" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHGate_setupAlpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHGate_setupAlpha" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHGate_setupAlpha" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHGate_setupAlpha" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHGate_setupAlpha" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHGate_setupAlpha" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHGate_setupAlpha" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHGate_setupAlpha" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHGate_setupAlpha" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHGate_setupAlpha" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHGate_setupAlpha" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHGate_setupAlpha" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "HHGate_setupAlpha" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupAlpha__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_setupAlpha",13,13,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_setupAlpha" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHGate_setupAlpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHGate_setupAlpha" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHGate_setupAlpha" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHGate_setupAlpha" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHGate_setupAlpha" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHGate_setupAlpha" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHGate_setupAlpha" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHGate_setupAlpha" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHGate_setupAlpha" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHGate_setupAlpha" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHGate_setupAlpha" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHGate_setupAlpha" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupAlpha__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_setupAlpha",12,12,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_setupAlpha" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHGate_setupAlpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHGate_setupAlpha" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHGate_setupAlpha" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHGate_setupAlpha" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHGate_setupAlpha" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHGate_setupAlpha" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHGate_setupAlpha" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHGate_setupAlpha" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHGate_setupAlpha" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHGate_setupAlpha" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHGate_setupAlpha" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupAlpha__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_setupAlpha",11,11,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_setupAlpha" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHGate_setupAlpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHGate_setupAlpha" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHGate_setupAlpha" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHGate_setupAlpha" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHGate_setupAlpha" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHGate_setupAlpha" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHGate_setupAlpha" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHGate_setupAlpha" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHGate_setupAlpha" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHGate_setupAlpha" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupAlpha(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[15];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 14); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          SWIG_PYTHON_THREAD_END_BLOCK;
                          return _wrap_HHGate_setupAlpha__SWIG_3(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            SWIG_PYTHON_THREAD_END_BLOCK;
                            return _wrap_HHGate_setupAlpha__SWIG_2(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              SWIG_PYTHON_THREAD_END_BLOCK;
                              return _wrap_HHGate_setupAlpha__SWIG_1(self, args);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                SWIG_PYTHON_THREAD_END_BLOCK;
                                return _wrap_HHGate_setupAlpha__SWIG_0(self, args);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'HHGate_setupAlpha'.\n  Possible C/C++ prototypes are:\n""    setupAlpha(pymoose::HHGate *,double,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupAlpha(pymoose::HHGate *,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupAlpha(pymoose::HHGate *,double,double,double,double,double,double,double,double,double,double,double)\n""    setupAlpha(pymoose::HHGate *,double,double,double,double,double,double,double,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupTau__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_setupTau",14,14,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_setupTau" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHGate_setupTau" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHGate_setupTau" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHGate_setupTau" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHGate_setupTau" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHGate_setupTau" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHGate_setupTau" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHGate_setupTau" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHGate_setupTau" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHGate_setupTau" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHGate_setupTau" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHGate_setupTau" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHGate_setupTau" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "HHGate_setupTau" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupTau__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_setupTau",13,13,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_setupTau" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHGate_setupTau" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHGate_setupTau" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHGate_setupTau" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHGate_setupTau" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHGate_setupTau" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHGate_setupTau" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHGate_setupTau" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHGate_setupTau" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHGate_setupTau" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHGate_setupTau" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHGate_setupTau" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHGate_setupTau" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupTau__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_setupTau",12,12,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_setupTau" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHGate_setupTau" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHGate_setupTau" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHGate_setupTau" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHGate_setupTau" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHGate_setupTau" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHGate_setupTau" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHGate_setupTau" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHGate_setupTau" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHGate_setupTau" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHGate_setupTau" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHGate_setupTau" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupTau__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_setupTau",11,11,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_setupTau" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHGate_setupTau" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHGate_setupTau" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHGate_setupTau" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHGate_setupTau" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHGate_setupTau" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHGate_setupTau" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHGate_setupTau" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHGate_setupTau" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHGate_setupTau" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHGate_setupTau" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_setupTau(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[15];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 14); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 11) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          SWIG_PYTHON_THREAD_END_BLOCK;
                          return _wrap_HHGate_setupTau__SWIG_3(self, args);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            SWIG_PYTHON_THREAD_END_BLOCK;
                            return _wrap_HHGate_setupTau__SWIG_2(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              SWIG_PYTHON_THREAD_END_BLOCK;
                              return _wrap_HHGate_setupTau__SWIG_1(self, args);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHGate, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                SWIG_PYTHON_THREAD_END_BLOCK;
                                return _wrap_HHGate_setupTau__SWIG_0(self, args);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'HHGate_setupTau'.\n  Possible C/C++ prototypes are:\n""    setupTau(pymoose::HHGate *,double,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupTau(pymoose::HHGate *,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupTau(pymoose::HHGate *,double,double,double,double,double,double,double,double,double,double,double)\n""    setupTau(pymoose::HHGate *,double,double,double,double,double,double,double,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_tweakAlpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_tweakAlpha",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_tweakAlpha" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tweakAlpha();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_tweakTau(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_tweakTau",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_tweakTau" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tweakTau();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_A_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_A_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_A_get" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)pymoose_HHGate_A_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHGate_B_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHGate *arg1 = (pymoose::HHGate *) 0 ;
  pymoose::InterpolationTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHGate_B_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHGate, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHGate_B_get" "', argument " "1"" of type '" "pymoose::HHGate *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHGate * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::InterpolationTable *)pymoose_HHGate_B_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__InterpolationTable, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *HHGate_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__HHGate, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_HHChannel_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HHChannel_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HHChannel_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::HHChannel::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_HHChannel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::HHChannel *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHChannel",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHChannel" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHChannel *)new pymoose::HHChannel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHChannel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHChannel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::HHChannel *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHChannel",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHChannel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHChannel *)new pymoose::HHChannel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHChannel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHChannel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::HHChannel *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHChannel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHChannel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HHChannel" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHChannel *)new pymoose::HHChannel(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHChannel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHChannel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::HHChannel *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHChannel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHChannel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HHChannel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHChannel *)new pymoose::HHChannel(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHChannel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHChannel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::HHChannel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHChannel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HHChannel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHChannel" "', argument " "1"" of type '" "pymoose::HHChannel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "1"" of type '" "pymoose::HHChannel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHChannel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HHChannel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHChannel *)new pymoose::HHChannel((pymoose::HHChannel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHChannel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHChannel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::HHChannel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHChannel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HHChannel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHChannel" "', argument " "1"" of type '" "pymoose::HHChannel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "1"" of type '" "pymoose::HHChannel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHChannel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HHChannel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHChannel *)new pymoose::HHChannel((pymoose::HHChannel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHChannel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHChannel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::HHChannel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHChannel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHChannel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHChannel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HHChannel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHChannel *)new pymoose::HHChannel((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHChannel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHChannel__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::HHChannel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HHChannel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HHChannel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HHChannel" "', argument " "1"" of type '" "pymoose::HHChannel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HHChannel" "', argument " "1"" of type '" "pymoose::HHChannel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HHChannel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HHChannel *)new pymoose::HHChannel((pymoose::HHChannel const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HHChannel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HHChannel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_HHChannel__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_HHChannel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HHChannel__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HHChannel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HHChannel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HHChannel__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HHChannel__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HHChannel__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_HHChannel'.\n  Possible C/C++ prototypes are:\n""    pymoose::HHChannel(Id)\n""    pymoose::HHChannel(std::string)\n""    pymoose::HHChannel(std::string,Id)\n""    pymoose::HHChannel(std::string,pymoose::PyMooseBase &)\n""    pymoose::HHChannel(pymoose::HHChannel const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::HHChannel(pymoose::HHChannel const &,std::string,Id &)\n""    pymoose::HHChannel(Id const &,std::string,Id &)\n""    pymoose::HHChannel(pymoose::HHChannel const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HHChannel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_HHChannel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HHChannel" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_getType" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_Gbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_Gbar",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_Gbar" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_Gbar();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_Gbar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_Gbar",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_Gbar" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_Gbar" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Gbar(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_Ek",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_Ek" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_Ek();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_Ek",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_Ek" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_Ek" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ek(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_Xpower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_Xpower",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_Xpower" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_Xpower();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_Xpower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_Xpower",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_Xpower" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_Xpower" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Xpower(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_Ypower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_Ypower",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_Ypower" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_Ypower();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_Ypower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_Ypower",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_Ypower" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_Ypower" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ypower(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_Zpower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_Zpower",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_Zpower" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_Zpower();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_Zpower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_Zpower",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_Zpower" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_Zpower" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Zpower(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_instant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_instant",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_instant" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::HHChannel const *)arg1)->__get_instant();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_instant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_instant",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_instant" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_instant" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_instant(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_Gk",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_Gk" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_Gk();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_Gk",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_Gk" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_Gk" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Gk(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_Ik",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_Ik" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_Ik();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_Ik",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_Ik" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_Ik" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ik(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_X(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_X",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_X" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_X();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_X(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_X",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_X" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_X" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_X(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_Y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_Y",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_Y" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_Y();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_Y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_Y",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_Y" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_Y" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Y(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_Z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_Z",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_Z" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_Z();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_Z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_Z",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_Z" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_Z" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Z(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_useConcentration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_useConcentration",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_useConcentration" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::HHChannel const *)arg1)->__get_useConcentration();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_useConcentration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_useConcentration",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_useConcentration" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_useConcentration" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_useConcentration(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_IkSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_IkSrc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_IkSrc" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_IkSrc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_IkSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_IkSrc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_IkSrc" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_IkSrc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_IkSrc(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___get_concen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___get_concen",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___get_concen" "', argument " "1"" of type '" "pymoose::HHChannel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HHChannel const *)arg1)->__get_concen();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel___set_concen(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel___set_concen",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel___set_concen" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel___set_concen" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_concen(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_createTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  unsigned int arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_createTable",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_createTable" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_createTable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHChannel_createTable" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHChannel_createTable" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHChannel_createTable" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->createTable(arg2,arg3,arg4,arg5);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_tweakAlpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_tweakAlpha",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_tweakAlpha" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_tweakAlpha" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tweakAlpha(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_tweakTau(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_tweakTau",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_tweakTau" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_tweakTau" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->tweakTau(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupAlpha__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  std::vector<double > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupAlpha",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupAlpha" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupAlpha" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupAlpha" "', argument " "3"" of type '" "std::vector<double >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupAlpha__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupAlpha",15,15,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupAlpha" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupAlpha" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHChannel_setupAlpha" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHChannel_setupAlpha" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHChannel_setupAlpha" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHChannel_setupAlpha" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHChannel_setupAlpha" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHChannel_setupAlpha" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHChannel_setupAlpha" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHChannel_setupAlpha" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHChannel_setupAlpha" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHChannel_setupAlpha" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHChannel_setupAlpha" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "HHChannel_setupAlpha" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "HHChannel_setupAlpha" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupAlpha__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupAlpha",14,14,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupAlpha" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupAlpha" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHChannel_setupAlpha" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHChannel_setupAlpha" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHChannel_setupAlpha" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHChannel_setupAlpha" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHChannel_setupAlpha" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHChannel_setupAlpha" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHChannel_setupAlpha" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHChannel_setupAlpha" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHChannel_setupAlpha" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHChannel_setupAlpha" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHChannel_setupAlpha" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "HHChannel_setupAlpha" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupAlpha__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupAlpha",13,13,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupAlpha" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupAlpha" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHChannel_setupAlpha" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHChannel_setupAlpha" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHChannel_setupAlpha" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHChannel_setupAlpha" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHChannel_setupAlpha" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHChannel_setupAlpha" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHChannel_setupAlpha" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHChannel_setupAlpha" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHChannel_setupAlpha" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHChannel_setupAlpha" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHChannel_setupAlpha" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupAlpha__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupAlpha",12,12,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupAlpha" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupAlpha" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHChannel_setupAlpha" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHChannel_setupAlpha" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHChannel_setupAlpha" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHChannel_setupAlpha" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHChannel_setupAlpha" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHChannel_setupAlpha" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHChannel_setupAlpha" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHChannel_setupAlpha" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHChannel_setupAlpha" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHChannel_setupAlpha" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupAlpha(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupAlpha(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[16];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 15); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator<double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_HHChannel_setupAlpha__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            SWIG_PYTHON_THREAD_END_BLOCK;
                            return _wrap_HHChannel_setupAlpha__SWIG_4(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              SWIG_PYTHON_THREAD_END_BLOCK;
                              return _wrap_HHChannel_setupAlpha__SWIG_3(self, args);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                SWIG_PYTHON_THREAD_END_BLOCK;
                                return _wrap_HHChannel_setupAlpha__SWIG_2(self, args);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 15) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_double(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  SWIG_PYTHON_THREAD_END_BLOCK;
                                  return _wrap_HHChannel_setupAlpha__SWIG_1(self, args);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'HHChannel_setupAlpha'.\n  Possible C/C++ prototypes are:\n""    setupAlpha(pymoose::HHChannel *,std::string,std::vector<double >)\n""    setupAlpha(pymoose::HHChannel *,std::string,double,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupAlpha(pymoose::HHChannel *,std::string,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupAlpha(pymoose::HHChannel *,std::string,double,double,double,double,double,double,double,double,double,double,double)\n""    setupAlpha(pymoose::HHChannel *,std::string,double,double,double,double,double,double,double,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupTau__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  std::vector<double > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupTau",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupTau" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupTau" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupTau" "', argument " "3"" of type '" "std::vector<double >""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupTau__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  double arg15 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  double val15 ;
  int ecode15 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  PyObject * obj14 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupTau",15,15,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13,&obj14)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupTau" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupTau" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHChannel_setupTau" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHChannel_setupTau" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHChannel_setupTau" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHChannel_setupTau" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHChannel_setupTau" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHChannel_setupTau" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHChannel_setupTau" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHChannel_setupTau" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHChannel_setupTau" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHChannel_setupTau" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHChannel_setupTau" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "HHChannel_setupTau" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  ecode15 = SWIG_AsVal_double(obj14, &val15);
  if (!SWIG_IsOK(ecode15)) {
    SWIG_exception_fail(SWIG_ArgError(ecode15), "in method '" "HHChannel_setupTau" "', argument " "15"" of type '" "double""'");
  } 
  arg15 = static_cast< double >(val15);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupTau__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  double arg14 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  double val14 ;
  int ecode14 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  PyObject * obj13 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupTau",14,14,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12,&obj13)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupTau" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupTau" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHChannel_setupTau" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHChannel_setupTau" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHChannel_setupTau" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHChannel_setupTau" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHChannel_setupTau" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHChannel_setupTau" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHChannel_setupTau" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHChannel_setupTau" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHChannel_setupTau" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHChannel_setupTau" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHChannel_setupTau" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  ecode14 = SWIG_AsVal_double(obj13, &val14);
  if (!SWIG_IsOK(ecode14)) {
    SWIG_exception_fail(SWIG_ArgError(ecode14), "in method '" "HHChannel_setupTau" "', argument " "14"" of type '" "double""'");
  } 
  arg14 = static_cast< double >(val14);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupTau__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  double arg13 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  double val13 ;
  int ecode13 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  PyObject * obj12 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupTau",13,13,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11,&obj12)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupTau" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupTau" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHChannel_setupTau" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHChannel_setupTau" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHChannel_setupTau" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHChannel_setupTau" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHChannel_setupTau" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHChannel_setupTau" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHChannel_setupTau" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHChannel_setupTau" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHChannel_setupTau" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHChannel_setupTau" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  ecode13 = SWIG_AsVal_double(obj12, &val13);
  if (!SWIG_IsOK(ecode13)) {
    SWIG_exception_fail(SWIG_ArgError(ecode13), "in method '" "HHChannel_setupTau" "', argument " "13"" of type '" "double""'");
  } 
  arg13 = static_cast< double >(val13);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupTau__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  std::string arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  double arg9 ;
  double arg10 ;
  double arg11 ;
  double arg12 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  double val9 ;
  int ecode9 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  double val11 ;
  int ecode11 = 0 ;
  double val12 ;
  int ecode12 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  PyObject * obj9 = 0 ;
  PyObject * obj10 = 0 ;
  PyObject * obj11 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_setupTau",12,12,&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8,&obj9,&obj10,&obj11)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_setupTau" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HHChannel_setupTau" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode3 = SWIG_AsVal_double(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "HHChannel_setupTau" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "HHChannel_setupTau" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "HHChannel_setupTau" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "HHChannel_setupTau" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "HHChannel_setupTau" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "HHChannel_setupTau" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_double(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "HHChannel_setupTau" "', argument " "9"" of type '" "double""'");
  } 
  arg9 = static_cast< double >(val9);
  ecode10 = SWIG_AsVal_double(obj9, &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "HHChannel_setupTau" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  ecode11 = SWIG_AsVal_double(obj10, &val11);
  if (!SWIG_IsOK(ecode11)) {
    SWIG_exception_fail(SWIG_ArgError(ecode11), "in method '" "HHChannel_setupTau" "', argument " "11"" of type '" "double""'");
  } 
  arg11 = static_cast< double >(val11);
  ecode12 = SWIG_AsVal_double(obj11, &val12);
  if (!SWIG_IsOK(ecode12)) {
    SWIG_exception_fail(SWIG_ArgError(ecode12), "in method '" "HHChannel_setupTau" "', argument " "12"" of type '" "double""'");
  } 
  arg12 = static_cast< double >(val12);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setupTau(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_setupTau(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[16];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 15); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = swig::asptr(argv[2], (std::vector<double,std::allocator<double > >**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_HHChannel_setupTau__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 12) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            SWIG_PYTHON_THREAD_END_BLOCK;
                            return _wrap_HHChannel_setupTau__SWIG_4(self, args);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 13) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              SWIG_PYTHON_THREAD_END_BLOCK;
                              return _wrap_HHChannel_setupTau__SWIG_3(self, args);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 14) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                SWIG_PYTHON_THREAD_END_BLOCK;
                                return _wrap_HHChannel_setupTau__SWIG_2(self, args);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 15) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__HHChannel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_double(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_double(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_double(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      {
                        int res = SWIG_AsVal_double(argv[9], NULL);
                        _v = SWIG_CheckState(res);
                      }
                      if (_v) {
                        {
                          int res = SWIG_AsVal_double(argv[10], NULL);
                          _v = SWIG_CheckState(res);
                        }
                        if (_v) {
                          {
                            int res = SWIG_AsVal_double(argv[11], NULL);
                            _v = SWIG_CheckState(res);
                          }
                          if (_v) {
                            {
                              int res = SWIG_AsVal_double(argv[12], NULL);
                              _v = SWIG_CheckState(res);
                            }
                            if (_v) {
                              {
                                int res = SWIG_AsVal_double(argv[13], NULL);
                                _v = SWIG_CheckState(res);
                              }
                              if (_v) {
                                {
                                  int res = SWIG_AsVal_double(argv[14], NULL);
                                  _v = SWIG_CheckState(res);
                                }
                                if (_v) {
                                  SWIG_PYTHON_THREAD_END_BLOCK;
                                  return _wrap_HHChannel_setupTau__SWIG_1(self, args);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'HHChannel_setupTau'.\n  Possible C/C++ prototypes are:\n""    setupTau(pymoose::HHChannel *,std::string,std::vector<double >)\n""    setupTau(pymoose::HHChannel *,std::string,double,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupTau(pymoose::HHChannel *,std::string,double,double,double,double,double,double,double,double,double,double,double,double)\n""    setupTau(pymoose::HHChannel *,std::string,double,double,double,double,double,double,double,double,double,double,double)\n""    setupTau(pymoose::HHChannel *,std::string,double,double,double,double,double,double,double,double,double,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Gbar_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Gbar_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Gbar_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_Gbar_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_Gbar_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Gbar_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Gbar_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Gbar_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_Gbar_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Ek_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Ek_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Ek_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_Ek_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_Ek_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Ek_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Ek_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Ek_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_Ek_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Xpower_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Xpower_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Xpower_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_Xpower_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_Xpower_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Xpower_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Xpower_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Xpower_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_Xpower_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Ypower_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Ypower_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Ypower_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_Ypower_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_Ypower_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Ypower_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Ypower_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Ypower_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_Ypower_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Zpower_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Zpower_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Zpower_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_Zpower_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_Zpower_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Zpower_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Zpower_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Zpower_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_Zpower_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_X_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_X_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_X_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_X_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_X_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_X_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_X_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_X_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_X_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Y_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Y_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_Y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_Y_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Y_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Y_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_Y_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Z_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Z_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_Z_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_Z_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Z_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Z_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_Z_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_instant_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_instant_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_instant_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_instant_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_instant_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_instant_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_instant_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_instant_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_HHChannel_instant_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Gk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Gk_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Gk_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_Gk_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_Gk_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Gk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Gk_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Gk_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_Gk_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_Ik_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_Ik_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_Ik_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_Ik_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_useConcentration_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_useConcentration_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_useConcentration_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_useConcentration_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_useConcentration_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_useConcentration_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_useConcentration_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_useConcentration_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_HHChannel_useConcentration_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_concen_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_concen_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_concen_set" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HHChannel_concen_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HHChannel_concen_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HHChannel_concen_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HHChannel *arg1 = (pymoose::HHChannel *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HHChannel_concen_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HHChannel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HHChannel_concen_get" "', argument " "1"" of type '" "pymoose::HHChannel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HHChannel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HHChannel_concen_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *HHChannel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__HHChannel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Mg_block_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Mg_block_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Mg_block_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Mg_block::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Mg_block__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Mg_block *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Mg_block",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mg_block" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Mg_block *)new pymoose::Mg_block(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Mg_block, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mg_block__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Mg_block *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Mg_block",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Mg_block" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Mg_block *)new pymoose::Mg_block(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Mg_block, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mg_block__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Mg_block *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Mg_block",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Mg_block" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Mg_block" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Mg_block *)new pymoose::Mg_block(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Mg_block, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mg_block__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Mg_block *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Mg_block",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Mg_block" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Mg_block" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Mg_block *)new pymoose::Mg_block(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Mg_block, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mg_block__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Mg_block *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Mg_block",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Mg_block,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mg_block" "', argument " "1"" of type '" "pymoose::Mg_block const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "1"" of type '" "pymoose::Mg_block const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Mg_block" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Mg_block" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Mg_block *)new pymoose::Mg_block((pymoose::Mg_block const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Mg_block, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mg_block__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Mg_block *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Mg_block",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Mg_block,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mg_block" "', argument " "1"" of type '" "pymoose::Mg_block const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "1"" of type '" "pymoose::Mg_block const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Mg_block" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Mg_block" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Mg_block *)new pymoose::Mg_block((pymoose::Mg_block const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Mg_block, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mg_block__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Mg_block *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Mg_block",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mg_block" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Mg_block" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Mg_block" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Mg_block *)new pymoose::Mg_block((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Mg_block, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mg_block__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Mg_block *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Mg_block",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Mg_block,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Mg_block" "', argument " "1"" of type '" "pymoose::Mg_block const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Mg_block" "', argument " "1"" of type '" "pymoose::Mg_block const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Mg_block" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Mg_block *)new pymoose::Mg_block((pymoose::Mg_block const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Mg_block, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Mg_block(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Mg_block__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Mg_block__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Mg_block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Mg_block__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Mg_block__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Mg_block__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Mg_block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Mg_block__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Mg_block__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Mg_block, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Mg_block__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Mg_block'.\n  Possible C/C++ prototypes are:\n""    pymoose::Mg_block(Id)\n""    pymoose::Mg_block(std::string)\n""    pymoose::Mg_block(std::string,Id)\n""    pymoose::Mg_block(std::string,pymoose::PyMooseBase &)\n""    pymoose::Mg_block(pymoose::Mg_block const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Mg_block(pymoose::Mg_block const &,std::string,Id &)\n""    pymoose::Mg_block(Id const &,std::string,Id &)\n""    pymoose::Mg_block(pymoose::Mg_block const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Mg_block(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Mg_block",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Mg_block" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_getType" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___get_KMg_A(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___get_KMg_A",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___get_KMg_A" "', argument " "1"" of type '" "pymoose::Mg_block const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Mg_block const *)arg1)->__get_KMg_A();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___set_KMg_A(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___set_KMg_A",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___set_KMg_A" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block___set_KMg_A" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_KMg_A(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___get_KMg_B(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___get_KMg_B",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___get_KMg_B" "', argument " "1"" of type '" "pymoose::Mg_block const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Mg_block const *)arg1)->__get_KMg_B();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___set_KMg_B(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___set_KMg_B",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___set_KMg_B" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block___set_KMg_B" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_KMg_B(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___get_CMg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___get_CMg",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___get_CMg" "', argument " "1"" of type '" "pymoose::Mg_block const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Mg_block const *)arg1)->__get_CMg();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___set_CMg(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___set_CMg",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___set_CMg" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block___set_CMg" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_CMg(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___get_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___get_Ik",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___get_Ik" "', argument " "1"" of type '" "pymoose::Mg_block const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Mg_block const *)arg1)->__get_Ik();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___set_Ik(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___set_Ik",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___set_Ik" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block___set_Ik" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ik(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___get_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___get_Gk",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___get_Gk" "', argument " "1"" of type '" "pymoose::Mg_block const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Mg_block const *)arg1)->__get_Gk();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___set_Gk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___set_Gk",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___set_Gk" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block___set_Gk" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Gk(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___get_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___get_Ek",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___get_Ek" "', argument " "1"" of type '" "pymoose::Mg_block const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Mg_block const *)arg1)->__get_Ek();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___set_Ek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___set_Ek",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___set_Ek" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block___set_Ek" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ek(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___get_Zk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___get_Zk",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___get_Zk" "', argument " "1"" of type '" "pymoose::Mg_block const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Mg_block const *)arg1)->__get_Zk();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block___set_Zk(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block___set_Zk",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block___set_Zk" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block___set_Zk" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Zk(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_KMg_A_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_KMg_A_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_KMg_A_set" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block_KMg_A_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Mg_block_KMg_A_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_KMg_A_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_KMg_A_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_KMg_A_get" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Mg_block_KMg_A_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_K_MgB_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_K_MgB_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_K_MgB_set" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block_K_MgB_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Mg_block_K_MgB_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_K_MgB_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_K_MgB_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_K_MgB_get" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Mg_block_K_MgB_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_CMg_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_CMg_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_CMg_set" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block_CMg_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Mg_block_CMg_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_CMg_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_CMg_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_CMg_get" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Mg_block_CMg_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_Ik_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_Ik_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_Ik_set" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block_Ik_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Mg_block_Ik_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_Ik_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_Ik_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_Ik_get" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Mg_block_Ik_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_Gk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_Gk_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_Gk_set" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block_Gk_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Mg_block_Gk_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_Gk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_Gk_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_Gk_get" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Mg_block_Gk_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_Ek_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_Ek_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_Ek_set" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block_Ek_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Mg_block_Ek_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_Ek_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_Ek_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_Ek_get" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Mg_block_Ek_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_Zk_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_Zk_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_Zk_set" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Mg_block_Zk_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Mg_block_Zk_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Mg_block_Zk_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Mg_block *arg1 = (pymoose::Mg_block *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Mg_block_Zk_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Mg_block, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Mg_block_Zk_get" "', argument " "1"" of type '" "pymoose::Mg_block *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Mg_block * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Mg_block_Zk_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Mg_block_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Mg_block, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Compartment_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Compartment_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Compartment_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Compartment::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Compartment__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ::Id arg1 ;
  pymoose::Compartment *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Compartment",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Compartment" "', argument " "1"" of type '" "::Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "1"" of type '" "::Id""'");
    } else {
      ::Id * temp = reinterpret_cast< ::Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Compartment *)new pymoose::Compartment(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Compartment, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Compartment__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Compartment *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Compartment",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Compartment" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Compartment *)new pymoose::Compartment(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Compartment, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Compartment__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  ::Id arg2 ;
  pymoose::Compartment *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Compartment",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Compartment" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Compartment" "', argument " "2"" of type '" "::Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "2"" of type '" "::Id""'");
    } else {
      ::Id * temp = reinterpret_cast< ::Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Compartment *)new pymoose::Compartment(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Compartment, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Compartment__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Compartment *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Compartment",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Compartment" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Compartment" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Compartment *)new pymoose::Compartment(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Compartment, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Compartment__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Compartment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Compartment",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Compartment,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Compartment" "', argument " "1"" of type '" "pymoose::Compartment const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "1"" of type '" "pymoose::Compartment const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Compartment" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Compartment" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Compartment *)new pymoose::Compartment((pymoose::Compartment const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Compartment, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Compartment__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Compartment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Compartment",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Compartment,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Compartment" "', argument " "1"" of type '" "pymoose::Compartment const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "1"" of type '" "pymoose::Compartment const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Compartment" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Compartment" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Compartment *)new pymoose::Compartment((pymoose::Compartment const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Compartment, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Compartment__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Compartment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Compartment",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Compartment" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Compartment" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Compartment" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Compartment *)new pymoose::Compartment((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Compartment, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Compartment__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Compartment *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Compartment",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Compartment,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Compartment" "', argument " "1"" of type '" "pymoose::Compartment const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Compartment" "', argument " "1"" of type '" "pymoose::Compartment const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Compartment" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Compartment *)new pymoose::Compartment((pymoose::Compartment const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Compartment, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Compartment(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Compartment__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Compartment__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Compartment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Compartment__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Compartment__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Compartment__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Compartment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Compartment__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Compartment__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Compartment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Compartment__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Compartment'.\n  Possible C/C++ prototypes are:\n""    pymoose::Compartment(::Id)\n""    pymoose::Compartment(std::string)\n""    pymoose::Compartment(std::string,::Id)\n""    pymoose::Compartment(std::string,pymoose::PyMooseBase &)\n""    pymoose::Compartment(pymoose::Compartment const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Compartment(pymoose::Compartment const &,std::string,Id &)\n""    pymoose::Compartment(Id const &,std::string,Id &)\n""    pymoose::Compartment(pymoose::Compartment const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Compartment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Compartment",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Compartment" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_getType" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_Vm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_Vm",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_Vm" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_Vm();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_Vm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_Vm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_Vm" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_Vm" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Vm(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_Cm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_Cm",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_Cm" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_Cm();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_Cm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_Cm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_Cm" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_Cm" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Cm(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_Em(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_Em",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_Em" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_Em();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_Em(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_Em",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_Em" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_Em" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Em(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_Im(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_Im",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_Im" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_Im();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_Im(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_Im",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_Im" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_Im" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Im(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_inject",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_inject" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_inject();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_inject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_inject",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_inject" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_inject" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_inject(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_initVm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_initVm",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_initVm" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_initVm();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_initVm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_initVm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_initVm" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_initVm" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_initVm(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_Rm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_Rm",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_Rm" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_Rm();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_Rm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_Rm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_Rm" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_Rm" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Rm(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_Ra(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_Ra",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_Ra" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_Ra();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_Ra(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_Ra",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_Ra" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_Ra" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ra(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_diameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_diameter",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_diameter" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_diameter();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_diameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_diameter",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_diameter" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_diameter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_diameter(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_length",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_length" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_length();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_length",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_length" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_length" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_length(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_x",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_x" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_x();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_x(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_x",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_x" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_x" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_x(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_y",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_y" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_y();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_y",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_y" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_y" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_y(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___get_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___get_z",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___get_z" "', argument " "1"" of type '" "pymoose::Compartment const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Compartment const *)arg1)->__get_z();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment___set_z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment___set_z",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment___set_z" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment___set_z" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_z(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Vm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Vm_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Vm_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_Vm_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_Vm_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Vm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Vm_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Vm_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_Vm_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Cm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Cm_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Cm_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_Cm_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_Cm_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Cm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Cm_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Cm_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_Cm_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Em_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Em_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Em_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_Em_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_Em_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Em_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Em_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Em_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_Em_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Im_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Im_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Im_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_Im_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_Im_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Im_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Im_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Im_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_Im_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_inject_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_inject_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_inject_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_inject_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_inject_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_inject_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_inject_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_inject_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_inject_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_initVm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_initVm_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_initVm_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_initVm_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_initVm_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_initVm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_initVm_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_initVm_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_initVm_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Rm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Rm_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Rm_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_Rm_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_Rm_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Rm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Rm_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Rm_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_Rm_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Ra_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Ra_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Ra_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_Ra_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_Ra_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_Ra_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_Ra_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_Ra_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_Ra_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_diameter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_diameter_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_diameter_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_diameter_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_diameter_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_diameter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_diameter_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_diameter_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_diameter_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_length_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_length_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_length_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_length_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_length_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_length_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_length_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_x_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_x_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_x_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_x_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_x_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_x_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_x_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_y_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_y_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_y_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_y_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_y_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_y_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_y_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_z_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_z_set" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Compartment_z_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Compartment_z_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Compartment_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Compartment *arg1 = (pymoose::Compartment *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Compartment_z_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Compartment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Compartment_z_get" "', argument " "1"" of type '" "pymoose::Compartment *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Compartment * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Compartment_z_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Compartment_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Compartment, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_NeuroScan_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NeuroScan_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NeuroScan_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::NeuroScan::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_NeuroScan__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::NeuroScan *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NeuroScan",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeuroScan" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NeuroScan *)new pymoose::NeuroScan(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NeuroScan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeuroScan__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::NeuroScan *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NeuroScan",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NeuroScan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NeuroScan *)new pymoose::NeuroScan(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NeuroScan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeuroScan__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::NeuroScan *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NeuroScan",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NeuroScan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeuroScan" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NeuroScan *)new pymoose::NeuroScan(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NeuroScan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeuroScan__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::NeuroScan *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NeuroScan",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NeuroScan" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NeuroScan" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NeuroScan *)new pymoose::NeuroScan(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NeuroScan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeuroScan__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::NeuroScan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NeuroScan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__NeuroScan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeuroScan" "', argument " "1"" of type '" "pymoose::NeuroScan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "1"" of type '" "pymoose::NeuroScan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NeuroScan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NeuroScan" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NeuroScan *)new pymoose::NeuroScan((pymoose::NeuroScan const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NeuroScan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeuroScan__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::NeuroScan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NeuroScan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__NeuroScan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeuroScan" "', argument " "1"" of type '" "pymoose::NeuroScan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "1"" of type '" "pymoose::NeuroScan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NeuroScan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NeuroScan" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NeuroScan *)new pymoose::NeuroScan((pymoose::NeuroScan const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NeuroScan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeuroScan__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = 0 ;
  std::string arg2 ;
  pymoose::NeuroScan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NeuroScan",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__NeuroScan,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeuroScan" "', argument " "1"" of type '" "pymoose::NeuroScan const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "1"" of type '" "pymoose::NeuroScan const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NeuroScan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NeuroScan *)new pymoose::NeuroScan((pymoose::NeuroScan const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NeuroScan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeuroScan__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::NeuroScan *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NeuroScan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NeuroScan" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NeuroScan" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NeuroScan" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NeuroScan" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NeuroScan *)new pymoose::NeuroScan((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NeuroScan, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NeuroScan(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_NeuroScan__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_NeuroScan__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__NeuroScan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_NeuroScan__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_NeuroScan__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_NeuroScan__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__NeuroScan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_NeuroScan__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__NeuroScan, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_NeuroScan__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_NeuroScan__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_NeuroScan'.\n  Possible C/C++ prototypes are:\n""    pymoose::NeuroScan(Id)\n""    pymoose::NeuroScan(std::string)\n""    pymoose::NeuroScan(std::string,Id)\n""    pymoose::NeuroScan(std::string,pymoose::PyMooseBase &)\n""    pymoose::NeuroScan(pymoose::NeuroScan const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::NeuroScan(pymoose::NeuroScan const &,std::string,Id &)\n""    pymoose::NeuroScan(pymoose::NeuroScan const &,std::string)\n""    pymoose::NeuroScan(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NeuroScan(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_NeuroScan",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NeuroScan" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_getType" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___get_VDiv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___get_VDiv",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___get_VDiv" "', argument " "1"" of type '" "pymoose::NeuroScan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::NeuroScan const *)arg1)->__get_VDiv();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___set_VDiv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___set_VDiv",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___set_VDiv" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan___set_VDiv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_VDiv(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___get_VMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___get_VMin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___get_VMin" "', argument " "1"" of type '" "pymoose::NeuroScan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::NeuroScan const *)arg1)->__get_VMin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___set_VMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___set_VMin",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___set_VMin" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan___set_VMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_VMin(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___get_VMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___get_VMax",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___get_VMax" "', argument " "1"" of type '" "pymoose::NeuroScan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::NeuroScan const *)arg1)->__get_VMax();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___set_VMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___set_VMax",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___set_VMax" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan___set_VMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_VMax(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___get_CaDiv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___get_CaDiv",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___get_CaDiv" "', argument " "1"" of type '" "pymoose::NeuroScan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::NeuroScan const *)arg1)->__get_CaDiv();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___set_CaDiv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___set_CaDiv",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___set_CaDiv" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan___set_CaDiv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_CaDiv(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___get_CaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___get_CaMin",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___get_CaMin" "', argument " "1"" of type '" "pymoose::NeuroScan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::NeuroScan const *)arg1)->__get_CaMin();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___set_CaMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___set_CaMin",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___set_CaMin" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan___set_CaMin" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_CaMin(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___get_CaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___get_CaMax",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___get_CaMax" "', argument " "1"" of type '" "pymoose::NeuroScan const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::NeuroScan const *)arg1)->__get_CaMax();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan___set_CaMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan___set_CaMax",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan___set_CaMax" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan___set_CaMax" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_CaMax(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_VDiv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_VDiv_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_VDiv_set" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan_VDiv_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_NeuroScan_VDiv_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_VDiv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_VDiv_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_VDiv_get" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_NeuroScan_VDiv_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_VMin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_VMin_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_VMin_set" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan_VMin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_NeuroScan_VMin_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_VMin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_VMin_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_VMin_get" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_NeuroScan_VMin_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_VMax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_VMax_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_VMax_set" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan_VMax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_NeuroScan_VMax_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_VMax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_VMax_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_VMax_get" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_NeuroScan_VMax_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_CaDiv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_CaDiv_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_CaDiv_set" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan_CaDiv_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_NeuroScan_CaDiv_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_CaDiv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_CaDiv_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_CaDiv_get" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_NeuroScan_CaDiv_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_CaMin_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_CaMin_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_CaMin_set" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan_CaMin_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_NeuroScan_CaMin_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_CaMin_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_CaMin_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_CaMin_get" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_NeuroScan_CaMin_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_CaMax_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_CaMax_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_CaMax_set" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NeuroScan_CaMax_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_NeuroScan_CaMax_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NeuroScan_CaMax_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NeuroScan *arg1 = (pymoose::NeuroScan *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NeuroScan_CaMax_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NeuroScan, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NeuroScan_CaMax_get" "', argument " "1"" of type '" "pymoose::NeuroScan *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NeuroScan * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_NeuroScan_CaMax_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *NeuroScan_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__NeuroScan, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_HSolve_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HSolve_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HSolve_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::HSolve::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_HSolve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::HSolve *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HSolve",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HSolve" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HSolve *)new pymoose::HSolve(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HSolve, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HSolve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::HSolve *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HSolve",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HSolve" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HSolve *)new pymoose::HSolve(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HSolve, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HSolve__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::HSolve *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HSolve",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HSolve" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HSolve" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HSolve *)new pymoose::HSolve(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HSolve, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HSolve__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::HSolve *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HSolve",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HSolve" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HSolve" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HSolve *)new pymoose::HSolve(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HSolve, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HSolve__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::HSolve *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HSolve",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HSolve,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HSolve" "', argument " "1"" of type '" "pymoose::HSolve const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "1"" of type '" "pymoose::HSolve const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HSolve" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HSolve" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HSolve *)new pymoose::HSolve((pymoose::HSolve const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HSolve, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HSolve__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::HSolve *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HSolve",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HSolve,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HSolve" "', argument " "1"" of type '" "pymoose::HSolve const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "1"" of type '" "pymoose::HSolve const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HSolve" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HSolve" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HSolve *)new pymoose::HSolve((pymoose::HSolve const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HSolve, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HSolve__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::HSolve *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HSolve",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HSolve" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HSolve" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HSolve" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HSolve *)new pymoose::HSolve((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HSolve, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HSolve__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = 0 ;
  std::string arg2 ;
  pymoose::HSolve *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HSolve",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HSolve,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HSolve" "', argument " "1"" of type '" "pymoose::HSolve const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HSolve" "', argument " "1"" of type '" "pymoose::HSolve const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HSolve" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HSolve *)new pymoose::HSolve((pymoose::HSolve const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HSolve, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HSolve(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_HSolve__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_HSolve__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HSolve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HSolve__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HSolve__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HSolve__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HSolve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HSolve__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HSolve__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HSolve, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HSolve__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_HSolve'.\n  Possible C/C++ prototypes are:\n""    pymoose::HSolve(Id)\n""    pymoose::HSolve(std::string)\n""    pymoose::HSolve(std::string,Id)\n""    pymoose::HSolve(std::string,pymoose::PyMooseBase &)\n""    pymoose::HSolve(pymoose::HSolve const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::HSolve(pymoose::HSolve const &,std::string,Id &)\n""    pymoose::HSolve(Id const &,std::string,Id &)\n""    pymoose::HSolve(pymoose::HSolve const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HSolve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_HSolve",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HSolve" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve_getType" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve___get_seed_path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve___get_seed_path",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve___get_seed_path" "', argument " "1"" of type '" "pymoose::HSolve const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::HSolve const *)arg1)->__get_seed_path();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve___set_seed_path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve___set_seed_path",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve___set_seed_path" "', argument " "1"" of type '" "pymoose::HSolve const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "HSolve___set_seed_path" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    ((pymoose::HSolve const *)arg1)->__set_seed_path(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve___get_NDiv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve___get_NDiv",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve___get_NDiv" "', argument " "1"" of type '" "pymoose::HSolve const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::HSolve const *)arg1)->__get_NDiv();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve___set_NDiv(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve___set_NDiv",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve___set_NDiv" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HSolve___set_NDiv" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_NDiv(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve___get_VLo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve___get_VLo",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve___get_VLo" "', argument " "1"" of type '" "pymoose::HSolve const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HSolve const *)arg1)->__get_VLo();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve___set_VLo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve___set_VLo",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve___set_VLo" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HSolve___set_VLo" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_VLo(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve___get_VHi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve___get_VHi",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve___get_VHi" "', argument " "1"" of type '" "pymoose::HSolve const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::HSolve const *)arg1)->__get_VHi();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve___set_VHi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve___set_VHi",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve___set_VHi" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HSolve___set_VHi" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_VHi(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve_seedPath_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve_seedPath_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve_seedPath_set" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HSolve_seedPath_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HSolve_seedPath_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HSolve_seedPath_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve_seedPath_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve_seedPath_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve_seedPath_get" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_HSolve_seedPath_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve_NDiv_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve_NDiv_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve_NDiv_set" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HSolve_NDiv_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HSolve_NDiv_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve_NDiv_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve_NDiv_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve_NDiv_get" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_HSolve_NDiv_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve_VLo_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve_VLo_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve_VLo_set" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HSolve_VLo_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HSolve_VLo_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve_VLo_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve_VLo_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve_VLo_get" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HSolve_VLo_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve_VHi_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve_VHi_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve_VHi_set" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "HSolve_VHi_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_HSolve_VHi_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HSolve_VHi_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HSolve *arg1 = (pymoose::HSolve *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HSolve_VHi_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HSolve, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HSolve_VHi_get" "', argument " "1"" of type '" "pymoose::HSolve *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HSolve * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_HSolve_VHi_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *HSolve_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__HSolve, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Kintegrator_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Kintegrator_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Kintegrator_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Kintegrator::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Kintegrator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Kintegrator *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Kintegrator",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Kintegrator" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Kintegrator *)new pymoose::Kintegrator(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Kintegrator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Kintegrator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Kintegrator *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Kintegrator",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Kintegrator" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Kintegrator *)new pymoose::Kintegrator(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Kintegrator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Kintegrator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Kintegrator *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Kintegrator",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Kintegrator" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Kintegrator" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Kintegrator *)new pymoose::Kintegrator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Kintegrator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Kintegrator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Kintegrator *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Kintegrator",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Kintegrator" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Kintegrator" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Kintegrator *)new pymoose::Kintegrator(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Kintegrator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Kintegrator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Kintegrator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Kintegrator",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Kintegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Kintegrator" "', argument " "1"" of type '" "pymoose::Kintegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "1"" of type '" "pymoose::Kintegrator const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Kintegrator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Kintegrator" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Kintegrator *)new pymoose::Kintegrator((pymoose::Kintegrator const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Kintegrator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Kintegrator__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Kintegrator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Kintegrator",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Kintegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Kintegrator" "', argument " "1"" of type '" "pymoose::Kintegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "1"" of type '" "pymoose::Kintegrator const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Kintegrator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Kintegrator" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Kintegrator *)new pymoose::Kintegrator((pymoose::Kintegrator const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Kintegrator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Kintegrator__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Kintegrator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Kintegrator",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Kintegrator" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Kintegrator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Kintegrator" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Kintegrator *)new pymoose::Kintegrator((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Kintegrator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Kintegrator__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Kintegrator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Kintegrator",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Kintegrator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Kintegrator" "', argument " "1"" of type '" "pymoose::Kintegrator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Kintegrator" "', argument " "1"" of type '" "pymoose::Kintegrator const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Kintegrator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Kintegrator *)new pymoose::Kintegrator((pymoose::Kintegrator const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Kintegrator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Kintegrator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Kintegrator__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Kintegrator__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Kintegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Kintegrator__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Kintegrator__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Kintegrator__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Kintegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Kintegrator__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Kintegrator__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Kintegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Kintegrator__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Kintegrator'.\n  Possible C/C++ prototypes are:\n""    pymoose::Kintegrator(Id)\n""    pymoose::Kintegrator(std::string)\n""    pymoose::Kintegrator(std::string,Id)\n""    pymoose::Kintegrator(std::string,pymoose::PyMooseBase &)\n""    pymoose::Kintegrator(pymoose::Kintegrator const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Kintegrator(pymoose::Kintegrator const &,std::string,Id &)\n""    pymoose::Kintegrator(Id const &,std::string,Id &)\n""    pymoose::Kintegrator(pymoose::Kintegrator const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Kintegrator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = (pymoose::Kintegrator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Kintegrator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Kintegrator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Kintegrator" "', argument " "1"" of type '" "pymoose::Kintegrator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kintegrator_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = (pymoose::Kintegrator *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Kintegrator_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Kintegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kintegrator_getType" "', argument " "1"" of type '" "pymoose::Kintegrator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kintegrator___get_isInitiatilized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = (pymoose::Kintegrator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Kintegrator___get_isInitiatilized",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Kintegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kintegrator___get_isInitiatilized" "', argument " "1"" of type '" "pymoose::Kintegrator const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::Kintegrator const *)arg1)->__get_isInitiatilized();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kintegrator___set_isInitiatilized(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = (pymoose::Kintegrator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Kintegrator___set_isInitiatilized",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Kintegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kintegrator___set_isInitiatilized" "', argument " "1"" of type '" "pymoose::Kintegrator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Kintegrator___set_isInitiatilized" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_isInitiatilized(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kintegrator_imethod__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = (pymoose::Kintegrator *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Kintegrator_imethod",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Kintegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kintegrator_imethod" "', argument " "1"" of type '" "pymoose::Kintegrator const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::Kintegrator const *)arg1)->imethod();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kintegrator_imethod__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = (pymoose::Kintegrator *) 0 ;
  std::string arg2 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Kintegrator_imethod",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Kintegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kintegrator_imethod" "', argument " "1"" of type '" "pymoose::Kintegrator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Kintegrator_imethod" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->imethod(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kintegrator_imethod(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__Kintegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Kintegrator_imethod__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__Kintegrator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_Kintegrator_imethod__SWIG_1(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Kintegrator_imethod'.\n  Possible C/C++ prototypes are:\n""    imethod(pymoose::Kintegrator const *)\n""    imethod(pymoose::Kintegrator *,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kintegrator_isInitiatilized_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = (pymoose::Kintegrator *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Kintegrator_isInitiatilized_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Kintegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kintegrator_isInitiatilized_set" "', argument " "1"" of type '" "pymoose::Kintegrator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Kintegrator_isInitiatilized_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Kintegrator_isInitiatilized_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Kintegrator_isInitiatilized_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Kintegrator *arg1 = (pymoose::Kintegrator *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Kintegrator_isInitiatilized_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Kintegrator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Kintegrator_isInitiatilized_get" "', argument " "1"" of type '" "pymoose::Kintegrator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Kintegrator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_Kintegrator_isInitiatilized_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Kintegrator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Kintegrator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_MathFunc_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable MathFunc_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_MathFunc_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::MathFunc::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_MathFunc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::MathFunc *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_MathFunc",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MathFunc" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::MathFunc *)new pymoose::MathFunc(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__MathFunc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MathFunc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::MathFunc *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_MathFunc",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MathFunc" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::MathFunc *)new pymoose::MathFunc(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__MathFunc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MathFunc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::MathFunc *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_MathFunc",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MathFunc" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MathFunc" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::MathFunc *)new pymoose::MathFunc(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__MathFunc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MathFunc__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::MathFunc *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_MathFunc",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MathFunc" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_MathFunc" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::MathFunc *)new pymoose::MathFunc(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__MathFunc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MathFunc__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::MathFunc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_MathFunc",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__MathFunc,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MathFunc" "', argument " "1"" of type '" "pymoose::MathFunc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "1"" of type '" "pymoose::MathFunc const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MathFunc" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MathFunc" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::MathFunc *)new pymoose::MathFunc((pymoose::MathFunc const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__MathFunc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MathFunc__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::MathFunc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_MathFunc",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__MathFunc,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MathFunc" "', argument " "1"" of type '" "pymoose::MathFunc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "1"" of type '" "pymoose::MathFunc const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MathFunc" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MathFunc" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::MathFunc *)new pymoose::MathFunc((pymoose::MathFunc const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__MathFunc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MathFunc__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = 0 ;
  std::string arg2 ;
  pymoose::MathFunc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_MathFunc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__MathFunc,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MathFunc" "', argument " "1"" of type '" "pymoose::MathFunc const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "1"" of type '" "pymoose::MathFunc const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MathFunc" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::MathFunc *)new pymoose::MathFunc((pymoose::MathFunc const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__MathFunc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MathFunc__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::MathFunc *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_MathFunc",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MathFunc" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_MathFunc" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_MathFunc" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_MathFunc" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::MathFunc *)new pymoose::MathFunc((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__MathFunc, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MathFunc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_MathFunc__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_MathFunc__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__MathFunc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_MathFunc__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_MathFunc__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_MathFunc__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__MathFunc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_MathFunc__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__MathFunc, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_MathFunc__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_MathFunc__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_MathFunc'.\n  Possible C/C++ prototypes are:\n""    pymoose::MathFunc(Id)\n""    pymoose::MathFunc(std::string)\n""    pymoose::MathFunc(std::string,Id)\n""    pymoose::MathFunc(std::string,pymoose::PyMooseBase &)\n""    pymoose::MathFunc(pymoose::MathFunc const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::MathFunc(pymoose::MathFunc const &,std::string,Id &)\n""    pymoose::MathFunc(pymoose::MathFunc const &,std::string)\n""    pymoose::MathFunc(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MathFunc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_MathFunc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MathFunc" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc_getType" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc___get_mathML(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc___get_mathML",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc___get_mathML" "', argument " "1"" of type '" "pymoose::MathFunc const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::MathFunc const *)arg1)->__get_mathML();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc___set_mathML(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc___set_mathML",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc___set_mathML" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MathFunc___set_mathML" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_mathML(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc___get_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc___get_function",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc___get_function" "', argument " "1"" of type '" "pymoose::MathFunc const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::MathFunc const *)arg1)->__get_function();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc___set_function(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc___set_function",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc___set_function" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "MathFunc___set_function" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_function(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc___get_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc___get_result",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc___get_result" "', argument " "1"" of type '" "pymoose::MathFunc const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::MathFunc const *)arg1)->__get_result();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc___set_result(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc___set_result",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc___set_result" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MathFunc___set_result" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_result(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc_mathML_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc_mathML_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc_mathML_set" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MathFunc_mathML_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MathFunc_mathML_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_MathFunc_mathML_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc_mathML_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc_mathML_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc_mathML_get" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_MathFunc_mathML_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc_function_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc_function_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc_function_set" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MathFunc_function_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MathFunc_function_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_MathFunc_function_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc_function_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc_function_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc_function_get" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_MathFunc_function_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc_result_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc_result_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc_result_set" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MathFunc_result_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_MathFunc_result_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MathFunc_result_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::MathFunc *arg1 = (pymoose::MathFunc *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"MathFunc_result_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__MathFunc, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MathFunc_result_get" "', argument " "1"" of type '" "pymoose::MathFunc *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::MathFunc * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_MathFunc_result_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *MathFunc_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__MathFunc, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Stoich_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Stoich_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Stoich_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Stoich::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Stoich__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Stoich *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Stoich",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Stoich" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Stoich *)new pymoose::Stoich(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Stoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stoich__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Stoich *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Stoich",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Stoich" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Stoich *)new pymoose::Stoich(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Stoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stoich__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Stoich *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Stoich",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Stoich" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Stoich" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Stoich *)new pymoose::Stoich(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Stoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stoich__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Stoich *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Stoich",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Stoich" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Stoich" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Stoich *)new pymoose::Stoich(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Stoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stoich__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Stoich *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Stoich",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Stoich,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Stoich" "', argument " "1"" of type '" "pymoose::Stoich const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "1"" of type '" "pymoose::Stoich const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Stoich" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Stoich" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Stoich *)new pymoose::Stoich((pymoose::Stoich const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Stoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stoich__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Stoich *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Stoich",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Stoich,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Stoich" "', argument " "1"" of type '" "pymoose::Stoich const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "1"" of type '" "pymoose::Stoich const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Stoich" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Stoich" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Stoich *)new pymoose::Stoich((pymoose::Stoich const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Stoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stoich__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Stoich *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Stoich",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Stoich" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Stoich" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Stoich" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Stoich *)new pymoose::Stoich((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Stoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stoich__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Stoich *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Stoich",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Stoich,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Stoich" "', argument " "1"" of type '" "pymoose::Stoich const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Stoich" "', argument " "1"" of type '" "pymoose::Stoich const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Stoich" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Stoich *)new pymoose::Stoich((pymoose::Stoich const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Stoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Stoich(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Stoich__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Stoich__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Stoich, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Stoich__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Stoich__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Stoich__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Stoich, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Stoich__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Stoich__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Stoich, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Stoich__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Stoich'.\n  Possible C/C++ prototypes are:\n""    pymoose::Stoich(Id)\n""    pymoose::Stoich(std::string)\n""    pymoose::Stoich(std::string,Id)\n""    pymoose::Stoich(std::string,pymoose::PyMooseBase &)\n""    pymoose::Stoich(pymoose::Stoich const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Stoich(pymoose::Stoich const &,std::string,Id &)\n""    pymoose::Stoich(Id const &,std::string,Id &)\n""    pymoose::Stoich(pymoose::Stoich const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Stoich(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Stoich",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Stoich" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_getType" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_nMols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_nMols",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_nMols" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Stoich const *)arg1)->__get_nMols();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_nMols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_nMols",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_nMols" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_nMols" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nMols(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_nVarMols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_nVarMols",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_nVarMols" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Stoich const *)arg1)->__get_nVarMols();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_nVarMols(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_nVarMols",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_nVarMols" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_nVarMols" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nVarMols(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_nSumTot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_nSumTot",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_nSumTot" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Stoich const *)arg1)->__get_nSumTot();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_nSumTot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_nSumTot",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_nSumTot" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_nSumTot" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nSumTot(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_nBuffered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_nBuffered",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_nBuffered" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Stoich const *)arg1)->__get_nBuffered();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_nBuffered(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_nBuffered",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_nBuffered" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_nBuffered" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nBuffered(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_nReacs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_nReacs",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_nReacs" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Stoich const *)arg1)->__get_nReacs();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_nReacs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_nReacs",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_nReacs" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_nReacs" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nReacs(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_nEnz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_nEnz",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_nEnz" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Stoich const *)arg1)->__get_nEnz();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_nEnz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_nEnz",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_nEnz" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_nEnz" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nEnz(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_nMMenz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_nMMenz",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_nMMenz" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Stoich const *)arg1)->__get_nMMenz();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_nMMenz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_nMMenz",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_nMMenz" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_nMMenz" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nMMenz(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_nExternalRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_nExternalRates",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_nExternalRates" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Stoich const *)arg1)->__get_nExternalRates();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_nExternalRates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_nExternalRates",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_nExternalRates" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_nExternalRates" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nExternalRates(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_useOneWayReacs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_useOneWayReacs",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_useOneWayReacs" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::Stoich const *)arg1)->__get_useOneWayReacs();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_useOneWayReacs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_useOneWayReacs",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_useOneWayReacs" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_useOneWayReacs" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_useOneWayReacs(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_path__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_path",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_path" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::Stoich const *)arg1)->path();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_path__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  std::string arg2 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_path",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_path" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "Stoich_path" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (arg1)->path(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_path(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__Stoich, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_Stoich_path__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_pymoose__Stoich, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_Stoich_path__SWIG_1(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'Stoich_path'.\n  Possible C/C++ prototypes are:\n""    path(pymoose::Stoich const *)\n""    path(pymoose::Stoich *,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___get_rateVectorSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___get_rateVectorSize",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___get_rateVectorSize" "', argument " "1"" of type '" "pymoose::Stoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Stoich const *)arg1)->__get_rateVectorSize();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich___set_rateVectorSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich___set_rateVectorSize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich___set_rateVectorSize" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich___set_rateVectorSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_rateVectorSize(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_nMols_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_nMols_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_nMols_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Stoich_nMols_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_nVarMols_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_nVarMols_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_nVarMols_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Stoich_nVarMols_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_nSumTot_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_nSumTot_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_nSumTot_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Stoich_nSumTot_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_nBuffered_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_nBuffered_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_nBuffered_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Stoich_nBuffered_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_nReacs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_nReacs_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_nReacs_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Stoich_nReacs_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_nEnz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_nEnz_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_nEnz_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Stoich_nEnz_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_nMMenz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_nMMenz_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_nMMenz_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Stoich_nMMenz_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_nExternalRates_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_nExternalRates_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_nExternalRates_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Stoich_nExternalRates_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_useOneWayReacs_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_useOneWayReacs_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_useOneWayReacs_set" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Stoich_useOneWayReacs_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Stoich_useOneWayReacs_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_useOneWayReacs_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_useOneWayReacs_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_useOneWayReacs_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_Stoich_useOneWayReacs_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Stoich_rateVectorSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Stoich *arg1 = (pymoose::Stoich *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Stoich_rateVectorSize_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Stoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Stoich_rateVectorSize_get" "', argument " "1"" of type '" "pymoose::Stoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Stoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Stoich_rateVectorSize_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Stoich_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Stoich, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_KineticHub_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable KineticHub_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_KineticHub_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::KineticHub::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_KineticHub__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::KineticHub *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticHub",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticHub" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticHub *)new pymoose::KineticHub(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticHub, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticHub__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::KineticHub *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticHub",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticHub" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticHub *)new pymoose::KineticHub(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticHub, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticHub__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::KineticHub *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticHub",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticHub" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_KineticHub" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticHub *)new pymoose::KineticHub(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticHub, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticHub__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::KineticHub *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticHub",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticHub" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_KineticHub" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticHub *)new pymoose::KineticHub(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticHub, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticHub__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::KineticHub *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticHub",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__KineticHub,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticHub" "', argument " "1"" of type '" "pymoose::KineticHub const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "1"" of type '" "pymoose::KineticHub const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticHub" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_KineticHub" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticHub *)new pymoose::KineticHub((pymoose::KineticHub const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticHub, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticHub__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::KineticHub *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticHub",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__KineticHub,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticHub" "', argument " "1"" of type '" "pymoose::KineticHub const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "1"" of type '" "pymoose::KineticHub const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticHub" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_KineticHub" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticHub *)new pymoose::KineticHub((pymoose::KineticHub const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticHub, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticHub__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::KineticHub *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticHub",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticHub" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticHub" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_KineticHub" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticHub *)new pymoose::KineticHub((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticHub, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticHub__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = 0 ;
  std::string arg2 ;
  pymoose::KineticHub *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticHub",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__KineticHub,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticHub" "', argument " "1"" of type '" "pymoose::KineticHub const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticHub" "', argument " "1"" of type '" "pymoose::KineticHub const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticHub" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticHub *)new pymoose::KineticHub((pymoose::KineticHub const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticHub, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticHub(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_KineticHub__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_KineticHub__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__KineticHub, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_KineticHub__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_KineticHub__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_KineticHub__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__KineticHub, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_KineticHub__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_KineticHub__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__KineticHub, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_KineticHub__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_KineticHub'.\n  Possible C/C++ prototypes are:\n""    pymoose::KineticHub(Id)\n""    pymoose::KineticHub(std::string)\n""    pymoose::KineticHub(std::string,Id)\n""    pymoose::KineticHub(std::string,pymoose::PyMooseBase &)\n""    pymoose::KineticHub(pymoose::KineticHub const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::KineticHub(pymoose::KineticHub const &,std::string,Id &)\n""    pymoose::KineticHub(Id const &,std::string,Id &)\n""    pymoose::KineticHub(pymoose::KineticHub const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KineticHub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_KineticHub",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KineticHub" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_getType" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub___get_nMol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub___get_nMol",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub___get_nMol" "', argument " "1"" of type '" "pymoose::KineticHub const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::KineticHub const *)arg1)->__get_nMol();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub___set_nMol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub___set_nMol",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub___set_nMol" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticHub___set_nMol" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nMol(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub___get_nReac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub___get_nReac",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub___get_nReac" "', argument " "1"" of type '" "pymoose::KineticHub const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::KineticHub const *)arg1)->__get_nReac();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub___set_nReac(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub___set_nReac",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub___set_nReac" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticHub___set_nReac" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nReac(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub___get_nEnz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub___get_nEnz",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub___get_nEnz" "', argument " "1"" of type '" "pymoose::KineticHub const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::KineticHub const *)arg1)->__get_nEnz();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub___set_nEnz(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub___set_nEnz",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub___set_nEnz" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticHub___set_nEnz" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nEnz(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_destroy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_destroy",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_destroy" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->destroy();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub___get_molSum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub___get_molSum",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub___get_molSum" "', argument " "1"" of type '" "pymoose::KineticHub const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::KineticHub const *)arg1)->__get_molSum();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub___set_molSum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub___set_molSum",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub___set_molSum" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticHub___set_molSum" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_molSum(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_nMol_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_nMol_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_nMol_set" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticHub_nMol_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KineticHub_nMol_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_nMol_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_nMol_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_nMol_get" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_KineticHub_nMol_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_nReac_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_nReac_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_nReac_set" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticHub_nReac_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KineticHub_nReac_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_nReac_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_nReac_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_nReac_get" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_KineticHub_nReac_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_nEnz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_nEnz_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_nEnz_set" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticHub_nEnz_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KineticHub_nEnz_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_nEnz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_nEnz_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_nEnz_get" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_KineticHub_nEnz_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_molSum_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_molSum_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_molSum_set" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticHub_molSum_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KineticHub_molSum_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticHub_molSum_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticHub *arg1 = (pymoose::KineticHub *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticHub_molSum_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticHub, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticHub_molSum_get" "', argument " "1"" of type '" "pymoose::KineticHub *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticHub * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_KineticHub_molSum_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *KineticHub_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__KineticHub, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Enzyme_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Enzyme_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Enzyme_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Enzyme::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Enzyme__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Enzyme *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Enzyme",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Enzyme" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Enzyme *)new pymoose::Enzyme(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Enzyme, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Enzyme__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Enzyme *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Enzyme",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Enzyme" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Enzyme *)new pymoose::Enzyme(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Enzyme, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Enzyme__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Enzyme *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Enzyme",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Enzyme" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Enzyme" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Enzyme *)new pymoose::Enzyme(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Enzyme, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Enzyme__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Enzyme *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Enzyme",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Enzyme" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Enzyme" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Enzyme *)new pymoose::Enzyme(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Enzyme, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Enzyme__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Enzyme *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Enzyme",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Enzyme,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Enzyme" "', argument " "1"" of type '" "pymoose::Enzyme const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "1"" of type '" "pymoose::Enzyme const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Enzyme" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Enzyme" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Enzyme *)new pymoose::Enzyme((pymoose::Enzyme const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Enzyme, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Enzyme__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Enzyme *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Enzyme",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Enzyme,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Enzyme" "', argument " "1"" of type '" "pymoose::Enzyme const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "1"" of type '" "pymoose::Enzyme const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Enzyme" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Enzyme" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Enzyme *)new pymoose::Enzyme((pymoose::Enzyme const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Enzyme, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Enzyme__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Enzyme *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Enzyme",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Enzyme" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Enzyme" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Enzyme" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Enzyme *)new pymoose::Enzyme((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Enzyme, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Enzyme__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Enzyme *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Enzyme",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Enzyme,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Enzyme" "', argument " "1"" of type '" "pymoose::Enzyme const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Enzyme" "', argument " "1"" of type '" "pymoose::Enzyme const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Enzyme" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Enzyme *)new pymoose::Enzyme((pymoose::Enzyme const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Enzyme, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Enzyme(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Enzyme__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Enzyme__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Enzyme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Enzyme__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Enzyme__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Enzyme__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Enzyme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Enzyme__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Enzyme__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Enzyme, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Enzyme__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Enzyme'.\n  Possible C/C++ prototypes are:\n""    pymoose::Enzyme(Id)\n""    pymoose::Enzyme(std::string)\n""    pymoose::Enzyme(std::string,Id)\n""    pymoose::Enzyme(std::string,pymoose::PyMooseBase &)\n""    pymoose::Enzyme(pymoose::Enzyme const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Enzyme(pymoose::Enzyme const &,std::string,Id &)\n""    pymoose::Enzyme(Id const &,std::string,Id &)\n""    pymoose::Enzyme(pymoose::Enzyme const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Enzyme(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Enzyme",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Enzyme" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_getType" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___get_k1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___get_k1",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___get_k1" "', argument " "1"" of type '" "pymoose::Enzyme const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Enzyme const *)arg1)->__get_k1();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___set_k1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___set_k1",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___set_k1" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme___set_k1" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_k1(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___get_k2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___get_k2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___get_k2" "', argument " "1"" of type '" "pymoose::Enzyme const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Enzyme const *)arg1)->__get_k2();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___set_k2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___set_k2",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___set_k2" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme___set_k2" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_k2(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___get_k3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___get_k3",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___get_k3" "', argument " "1"" of type '" "pymoose::Enzyme const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Enzyme const *)arg1)->__get_k3();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___set_k3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___set_k3",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___set_k3" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme___set_k3" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_k3(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___get_Km(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___get_Km",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___get_Km" "', argument " "1"" of type '" "pymoose::Enzyme const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Enzyme const *)arg1)->__get_Km();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___set_Km(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___set_Km",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___set_Km" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme___set_Km" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Km(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___get_kcat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___get_kcat",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___get_kcat" "', argument " "1"" of type '" "pymoose::Enzyme const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Enzyme const *)arg1)->__get_kcat();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___set_kcat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___set_kcat",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___set_kcat" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme___set_kcat" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_kcat(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___get_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___get_mode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___get_mode" "', argument " "1"" of type '" "pymoose::Enzyme const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::Enzyme const *)arg1)->__get_mode();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___set_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___set_mode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___set_mode" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme___set_mode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_mode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___get_scaleKm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___get_scaleKm",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___get_scaleKm" "', argument " "1"" of type '" "pymoose::Enzyme const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Enzyme const *)arg1)->__get_scaleKm();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___set_scaleKm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___set_scaleKm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___set_scaleKm" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme___set_scaleKm" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_scaleKm(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___get_scaleKcat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___get_scaleKcat",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___get_scaleKcat" "', argument " "1"" of type '" "pymoose::Enzyme const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Enzyme const *)arg1)->__get_scaleKcat();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___set_scaleKcat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___set_scaleKcat",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___set_scaleKcat" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme___set_scaleKcat" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_scaleKcat(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___get_intramol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___get_intramol",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___get_intramol" "', argument " "1"" of type '" "pymoose::Enzyme const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Enzyme const *)arg1)->__get_intramol();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme___set_intramol(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme___set_intramol",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme___set_intramol" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme___set_intramol" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_intramol(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_k1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_k1_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_k1_set" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme_k1_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Enzyme_k1_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_k1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_k1_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_k1_get" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Enzyme_k1_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_k2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_k2_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_k2_set" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme_k2_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Enzyme_k2_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_k2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_k2_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_k2_get" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Enzyme_k2_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_k3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_k3_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_k3_set" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme_k3_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Enzyme_k3_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_k3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_k3_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_k3_get" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Enzyme_k3_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_Km_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_Km_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_Km_set" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme_Km_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Enzyme_Km_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_Km_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_Km_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_Km_get" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Enzyme_Km_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_kcat_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_kcat_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_kcat_set" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme_kcat_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Enzyme_kcat_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_kcat_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_kcat_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_kcat_get" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Enzyme_kcat_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_mode_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_mode_set" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Enzyme_mode_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Enzyme_mode_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Enzyme_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Enzyme *arg1 = (pymoose::Enzyme *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Enzyme_mode_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Enzyme, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Enzyme_mode_get" "', argument " "1"" of type '" "pymoose::Enzyme *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Enzyme * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_Enzyme_mode_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Enzyme_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Enzyme, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Reaction_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Reaction_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Reaction_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Reaction::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Reaction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Reaction *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Reaction",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Reaction" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Reaction *)new pymoose::Reaction(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Reaction, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Reaction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Reaction *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Reaction",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Reaction" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Reaction *)new pymoose::Reaction(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Reaction, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Reaction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Reaction *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Reaction",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Reaction" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Reaction" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Reaction *)new pymoose::Reaction(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Reaction, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Reaction__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Reaction *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Reaction",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Reaction" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Reaction" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Reaction *)new pymoose::Reaction(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Reaction, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Reaction__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Reaction *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Reaction",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Reaction,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Reaction" "', argument " "1"" of type '" "pymoose::Reaction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "1"" of type '" "pymoose::Reaction const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Reaction" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Reaction" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Reaction *)new pymoose::Reaction((pymoose::Reaction const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Reaction, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Reaction__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Reaction *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Reaction",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Reaction,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Reaction" "', argument " "1"" of type '" "pymoose::Reaction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "1"" of type '" "pymoose::Reaction const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Reaction" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Reaction" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Reaction *)new pymoose::Reaction((pymoose::Reaction const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Reaction, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Reaction__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Reaction *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Reaction",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Reaction" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Reaction" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Reaction" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Reaction *)new pymoose::Reaction((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Reaction, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Reaction__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Reaction *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Reaction",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Reaction,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Reaction" "', argument " "1"" of type '" "pymoose::Reaction const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Reaction" "', argument " "1"" of type '" "pymoose::Reaction const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Reaction" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Reaction *)new pymoose::Reaction((pymoose::Reaction const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Reaction, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Reaction(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Reaction__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Reaction__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Reaction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Reaction__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Reaction__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Reaction__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Reaction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Reaction__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Reaction__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Reaction, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Reaction__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Reaction'.\n  Possible C/C++ prototypes are:\n""    pymoose::Reaction(Id)\n""    pymoose::Reaction(std::string)\n""    pymoose::Reaction(std::string,Id)\n""    pymoose::Reaction(std::string,pymoose::PyMooseBase &)\n""    pymoose::Reaction(pymoose::Reaction const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Reaction(pymoose::Reaction const &,std::string,Id &)\n""    pymoose::Reaction(Id const &,std::string,Id &)\n""    pymoose::Reaction(pymoose::Reaction const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Reaction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Reaction",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Reaction" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction_getType" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction___get_kf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction___get_kf",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction___get_kf" "', argument " "1"" of type '" "pymoose::Reaction const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Reaction const *)arg1)->__get_kf();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction___set_kf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction___set_kf",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction___set_kf" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reaction___set_kf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_kf(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction___get_kb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction___get_kb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction___get_kb" "', argument " "1"" of type '" "pymoose::Reaction const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Reaction const *)arg1)->__get_kb();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction___set_kb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction___set_kb",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction___set_kb" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reaction___set_kb" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_kb(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction___get_scaleKf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction___get_scaleKf",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction___get_scaleKf" "', argument " "1"" of type '" "pymoose::Reaction const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Reaction const *)arg1)->__get_scaleKf();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction___set_scaleKf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction___set_scaleKf",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction___set_scaleKf" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reaction___set_scaleKf" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_scaleKf(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction___get_scaleKb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction___get_scaleKb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction___get_scaleKb" "', argument " "1"" of type '" "pymoose::Reaction const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Reaction const *)arg1)->__get_scaleKb();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction___set_scaleKb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction___set_scaleKb",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction___set_scaleKb" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reaction___set_scaleKb" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_scaleKb(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction_kf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction_kf_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction_kf_set" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reaction_kf_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Reaction_kf_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction_kf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction_kf_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction_kf_get" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Reaction_kf_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction_kb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction_kb_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction_kb_set" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reaction_kb_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Reaction_kb_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction_kb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction_kb_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction_kb_get" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Reaction_kb_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction_scaleKf_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction_scaleKf_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction_scaleKf_set" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reaction_scaleKf_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Reaction_scaleKf_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction_scaleKf_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction_scaleKf_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction_scaleKf_get" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Reaction_scaleKf_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction_scaleKb_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction_scaleKb_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction_scaleKb_set" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Reaction_scaleKb_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Reaction_scaleKb_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Reaction_scaleKb_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Reaction *arg1 = (pymoose::Reaction *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Reaction_scaleKb_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Reaction, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Reaction_scaleKb_get" "', argument " "1"" of type '" "pymoose::Reaction *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Reaction * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Reaction_scaleKb_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Reaction_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Reaction, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Molecule_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Molecule_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Molecule_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Molecule::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Molecule__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Molecule *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Molecule",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Molecule" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Molecule *)new pymoose::Molecule(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Molecule, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Molecule__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Molecule *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Molecule",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Molecule" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Molecule *)new pymoose::Molecule(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Molecule, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Molecule__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Molecule *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Molecule",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Molecule" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Molecule" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Molecule *)new pymoose::Molecule(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Molecule, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Molecule__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Molecule *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Molecule",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Molecule" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Molecule" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Molecule *)new pymoose::Molecule(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Molecule, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Molecule__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Molecule *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Molecule",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Molecule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Molecule" "', argument " "1"" of type '" "pymoose::Molecule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "1"" of type '" "pymoose::Molecule const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Molecule" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Molecule" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Molecule *)new pymoose::Molecule((pymoose::Molecule const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Molecule, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Molecule__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Molecule *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Molecule",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Molecule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Molecule" "', argument " "1"" of type '" "pymoose::Molecule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "1"" of type '" "pymoose::Molecule const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Molecule" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Molecule" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Molecule *)new pymoose::Molecule((pymoose::Molecule const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Molecule, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Molecule__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Molecule *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Molecule",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Molecule" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Molecule" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Molecule" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Molecule *)new pymoose::Molecule((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Molecule, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Molecule__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Molecule *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Molecule",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Molecule,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Molecule" "', argument " "1"" of type '" "pymoose::Molecule const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Molecule" "', argument " "1"" of type '" "pymoose::Molecule const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Molecule" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Molecule *)new pymoose::Molecule((pymoose::Molecule const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Molecule, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Molecule(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Molecule__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Molecule__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Molecule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Molecule__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Molecule__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Molecule__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Molecule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Molecule__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Molecule__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Molecule, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Molecule__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Molecule'.\n  Possible C/C++ prototypes are:\n""    pymoose::Molecule(Id)\n""    pymoose::Molecule(std::string)\n""    pymoose::Molecule(std::string,Id)\n""    pymoose::Molecule(std::string,pymoose::PyMooseBase &)\n""    pymoose::Molecule(pymoose::Molecule const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Molecule(pymoose::Molecule const &,std::string,Id &)\n""    pymoose::Molecule(Id const &,std::string,Id &)\n""    pymoose::Molecule(pymoose::Molecule const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Molecule(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Molecule",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Molecule" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_getType" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___get_nInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___get_nInit",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___get_nInit" "', argument " "1"" of type '" "pymoose::Molecule const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Molecule const *)arg1)->__get_nInit();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___set_nInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___set_nInit",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___set_nInit" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule___set_nInit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nInit(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___get_volumeScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___get_volumeScale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___get_volumeScale" "', argument " "1"" of type '" "pymoose::Molecule const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Molecule const *)arg1)->__get_volumeScale();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___set_volumeScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___set_volumeScale",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___set_volumeScale" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule___set_volumeScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_volumeScale(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___get_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___get_n",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___get_n" "', argument " "1"" of type '" "pymoose::Molecule const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Molecule const *)arg1)->__get_n();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___set_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___set_n",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___set_n" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule___set_n" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_n(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___get_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___get_mode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___get_mode" "', argument " "1"" of type '" "pymoose::Molecule const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::Molecule const *)arg1)->__get_mode();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___set_mode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___set_mode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___set_mode" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule___set_mode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_mode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___get_slave_enable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___get_slave_enable",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___get_slave_enable" "', argument " "1"" of type '" "pymoose::Molecule const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::Molecule const *)arg1)->__get_slave_enable();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___set_slave_enable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___set_slave_enable",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___set_slave_enable" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule___set_slave_enable" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_slave_enable(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___get_conc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___get_conc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___get_conc" "', argument " "1"" of type '" "pymoose::Molecule const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Molecule const *)arg1)->__get_conc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___set_conc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___set_conc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___set_conc" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule___set_conc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_conc(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___get_concInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___get_concInit",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___get_concInit" "', argument " "1"" of type '" "pymoose::Molecule const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Molecule const *)arg1)->__get_concInit();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___set_concInit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___set_concInit",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___set_concInit" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule___set_concInit" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_concInit(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___get_nSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___get_nSrc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___get_nSrc" "', argument " "1"" of type '" "pymoose::Molecule const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Molecule const *)arg1)->__get_nSrc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___set_nSrc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___set_nSrc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___set_nSrc" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule___set_nSrc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_nSrc(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___get_sumTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___get_sumTotal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___get_sumTotal" "', argument " "1"" of type '" "pymoose::Molecule const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Molecule const *)arg1)->__get_sumTotal();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule___set_sumTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule___set_sumTotal",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule___set_sumTotal" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule___set_sumTotal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_sumTotal(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_nInit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_nInit_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_nInit_set" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule_nInit_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Molecule_nInit_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_nInit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_nInit_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_nInit_get" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Molecule_nInit_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_volumeScale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_volumeScale_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_volumeScale_set" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule_volumeScale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Molecule_volumeScale_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_volumeScale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_volumeScale_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_volumeScale_get" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Molecule_volumeScale_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_n_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_n_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_n_set" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule_n_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Molecule_n_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_n_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_n_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_n_get" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Molecule_n_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_mode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_mode_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_mode_set" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule_mode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Molecule_mode_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_mode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_mode_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_mode_get" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_Molecule_mode_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_slave_enable_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_slave_enable_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_slave_enable_set" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule_slave_enable_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Molecule_slave_enable_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_slave_enable_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_slave_enable_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_slave_enable_get" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_Molecule_slave_enable_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_conc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_conc_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_conc_set" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule_conc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Molecule_conc_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_conc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_conc_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_conc_get" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Molecule_conc_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_concInit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_concInit_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_concInit_set" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule_concInit_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Molecule_concInit_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_concInit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_concInit_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_concInit_get" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Molecule_concInit_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_nSrc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_nSrc_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_nSrc_set" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule_nSrc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Molecule_nSrc_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_nSrc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_nSrc_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_nSrc_get" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Molecule_nSrc_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_sumTotal_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_sumTotal_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_sumTotal_set" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Molecule_sumTotal_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Molecule_sumTotal_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Molecule_sumTotal_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Molecule *arg1 = (pymoose::Molecule *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Molecule_sumTotal_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Molecule, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Molecule_sumTotal_get" "', argument " "1"" of type '" "pymoose::Molecule *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Molecule * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Molecule_sumTotal_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Molecule_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Molecule, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_mtrand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double result;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"mtrand",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)mtrand();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_mtseed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"mtseed",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "mtseed" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    mtseed(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Probability(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Probability *arg1 = (Probability *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Probability",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Probability, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Probability" "', argument " "1"" of type '" "Probability *""'"); 
  }
  arg1 = reinterpret_cast< Probability * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Probability_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Probability *arg1 = (Probability *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Probability_getMean",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Probability, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Probability_getMean" "', argument " "1"" of type '" "Probability const *""'"); 
  }
  arg1 = reinterpret_cast< Probability * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Probability const *)arg1)->getMean();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Probability_getVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Probability *arg1 = (Probability *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Probability_getVariance",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Probability, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Probability_getVariance" "', argument " "1"" of type '" "Probability const *""'"); 
  }
  arg1 = reinterpret_cast< Probability * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Probability const *)arg1)->getVariance();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Probability_getNextSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Probability *arg1 = (Probability *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Probability_getNextSample",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Probability, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Probability_getNextSample" "', argument " "1"" of type '" "Probability const *""'"); 
  }
  arg1 = reinterpret_cast< Probability * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Probability const *)arg1)->getNextSample();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Probability_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Probability, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Binomial__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Binomial *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Binomial",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Binomial *)new Binomial();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Binomial, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Binomial__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  double arg2 ;
  Binomial *result = 0 ;
  long val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Binomial",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Binomial" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Binomial" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Binomial *)new Binomial(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Binomial, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Binomial(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_Binomial__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Binomial__SWIG_1(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Binomial'.\n  Possible C/C++ prototypes are:\n""    Binomial()\n""    Binomial(long,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Binomial_getN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Binomial *arg1 = (Binomial *) 0 ;
  long result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Binomial_getN",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Binomial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Binomial_getN" "', argument " "1"" of type '" "Binomial const *""'"); 
  }
  arg1 = reinterpret_cast< Binomial * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (long)((Binomial const *)arg1)->getN();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Binomial_getP(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Binomial *arg1 = (Binomial *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Binomial_getP",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Binomial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Binomial_getP" "', argument " "1"" of type '" "Binomial const *""'"); 
  }
  arg1 = reinterpret_cast< Binomial * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Binomial const *)arg1)->getP();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Binomial_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Binomial *arg1 = (Binomial *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Binomial_getMean",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Binomial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Binomial_getMean" "', argument " "1"" of type '" "Binomial const *""'"); 
  }
  arg1 = reinterpret_cast< Binomial * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Binomial const *)arg1)->getMean();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Binomial_getVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Binomial *arg1 = (Binomial *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Binomial_getVariance",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Binomial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Binomial_getVariance" "', argument " "1"" of type '" "Binomial const *""'"); 
  }
  arg1 = reinterpret_cast< Binomial * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Binomial const *)arg1)->getVariance();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Binomial_getNextSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Binomial *arg1 = (Binomial *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Binomial_getNextSample",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Binomial, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Binomial_getNextSample" "', argument " "1"" of type '" "Binomial const *""'"); 
  }
  arg1 = reinterpret_cast< Binomial * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Binomial const *)arg1)->getNextSample();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Binomial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Binomial *arg1 = (Binomial *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Binomial",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Binomial, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Binomial" "', argument " "1"" of type '" "Binomial *""'"); 
  }
  arg1 = reinterpret_cast< Binomial * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Binomial_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Binomial, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Gamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  Gamma *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Gamma",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Gamma" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Gamma" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Gamma *)new Gamma(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Gamma, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gamma_getAlpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gamma *arg1 = (Gamma *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Gamma_getAlpha",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gamma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gamma_getAlpha" "', argument " "1"" of type '" "Gamma *""'"); 
  }
  arg1 = reinterpret_cast< Gamma * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)(arg1)->getAlpha();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gamma_getTheta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gamma *arg1 = (Gamma *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Gamma_getTheta",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gamma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gamma_getTheta" "', argument " "1"" of type '" "Gamma *""'"); 
  }
  arg1 = reinterpret_cast< Gamma * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)(arg1)->getTheta();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gamma_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gamma *arg1 = (Gamma *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Gamma_getMean",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gamma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gamma_getMean" "', argument " "1"" of type '" "Gamma const *""'"); 
  }
  arg1 = reinterpret_cast< Gamma * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Gamma const *)arg1)->getMean();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gamma_getVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gamma *arg1 = (Gamma *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Gamma_getVariance",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gamma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gamma_getVariance" "', argument " "1"" of type '" "Gamma const *""'"); 
  }
  arg1 = reinterpret_cast< Gamma * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Gamma const *)arg1)->getVariance();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Gamma_getNextSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gamma *arg1 = (Gamma *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Gamma_getNextSample",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gamma, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Gamma_getNextSample" "', argument " "1"" of type '" "Gamma const *""'"); 
  }
  arg1 = reinterpret_cast< Gamma * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Gamma const *)arg1)->getNextSample();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Gamma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Gamma *arg1 = (Gamma *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Gamma",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Gamma, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Gamma" "', argument " "1"" of type '" "Gamma *""'"); 
  }
  arg1 = reinterpret_cast< Gamma * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Gamma_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Gamma, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Normal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  NormalGenerator arg3 ;
  Normal *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Normal",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Normal" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Normal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Normal" "', argument " "3"" of type '" "NormalGenerator""'");
  } 
  arg3 = static_cast< NormalGenerator >(val3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Normal *)new Normal(arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Normal, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Normal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  Normal *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Normal",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Normal" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Normal" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Normal *)new Normal(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Normal, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Normal__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  Normal *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Normal",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Normal" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Normal *)new Normal(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Normal, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Normal__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Normal *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Normal",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Normal *)new Normal();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Normal, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Normal(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_Normal__SWIG_3(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Normal__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Normal__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Normal__SWIG_0(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Normal'.\n  Possible C/C++ prototypes are:\n""    Normal(double,double,NormalGenerator)\n""    Normal(double,double)\n""    Normal(double)\n""    Normal()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Normal_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Normal *arg1 = (Normal *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Normal_getMean",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Normal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Normal_getMean" "', argument " "1"" of type '" "Normal const *""'"); 
  }
  arg1 = reinterpret_cast< Normal * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Normal const *)arg1)->getMean();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Normal_setMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Normal *arg1 = (Normal *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Normal_setMean",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Normal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Normal_setMean" "', argument " "1"" of type '" "Normal *""'"); 
  }
  arg1 = reinterpret_cast< Normal * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Normal_setMean" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setMean(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Normal_getVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Normal *arg1 = (Normal *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Normal_getVariance",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Normal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Normal_getVariance" "', argument " "1"" of type '" "Normal const *""'"); 
  }
  arg1 = reinterpret_cast< Normal * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Normal const *)arg1)->getVariance();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Normal_setVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Normal *arg1 = (Normal *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Normal_setVariance",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Normal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Normal_setVariance" "', argument " "1"" of type '" "Normal *""'"); 
  }
  arg1 = reinterpret_cast< Normal * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Normal_setVariance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setVariance(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Normal_getMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Normal *arg1 = (Normal *) 0 ;
  NormalGenerator result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Normal_getMethod",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Normal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Normal_getMethod" "', argument " "1"" of type '" "Normal *""'"); 
  }
  arg1 = reinterpret_cast< Normal * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (NormalGenerator)(arg1)->getMethod();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Normal_setMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Normal *arg1 = (Normal *) 0 ;
  NormalGenerator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Normal_setMethod",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Normal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Normal_setMethod" "', argument " "1"" of type '" "Normal *""'"); 
  }
  arg1 = reinterpret_cast< Normal * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Normal_setMethod" "', argument " "2"" of type '" "NormalGenerator""'");
  } 
  arg2 = static_cast< NormalGenerator >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setMethod(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Normal_getNextSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Normal *arg1 = (Normal *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Normal_getNextSample",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Normal, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Normal_getNextSample" "', argument " "1"" of type '" "Normal const *""'"); 
  }
  arg1 = reinterpret_cast< Normal * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Normal const *)arg1)->getNextSample();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Normal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Normal *arg1 = (Normal *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Normal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Normal, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Normal" "', argument " "1"" of type '" "Normal *""'"); 
  }
  arg1 = reinterpret_cast< Normal * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Normal_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Normal, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Poisson__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  Poisson *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Poisson",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Poisson" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Poisson *)new Poisson(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Poisson, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Poisson__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Poisson *result = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Poisson",0,0)) SWIG_fail;
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Poisson *)new Poisson();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Poisson, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Poisson(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 1); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    SWIG_PYTHON_THREAD_END_BLOCK;
    return _wrap_new_Poisson__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Poisson__SWIG_0(self, args);
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Poisson'.\n  Possible C/C++ prototypes are:\n""    Poisson(double)\n""    Poisson()\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Poisson(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Poisson *arg1 = (Poisson *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Poisson",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Poisson, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Poisson" "', argument " "1"" of type '" "Poisson *""'"); 
  }
  arg1 = reinterpret_cast< Poisson * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poisson_setMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Poisson *arg1 = (Poisson *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Poisson_setMean",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Poisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poisson_setMean" "', argument " "1"" of type '" "Poisson *""'"); 
  }
  arg1 = reinterpret_cast< Poisson * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Poisson_setMean" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->setMean(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poisson_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Poisson *arg1 = (Poisson *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Poisson_getMean",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Poisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poisson_getMean" "', argument " "1"" of type '" "Poisson const *""'"); 
  }
  arg1 = reinterpret_cast< Poisson * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Poisson const *)arg1)->getMean();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poisson_getVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Poisson *arg1 = (Poisson *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Poisson_getVariance",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Poisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poisson_getVariance" "', argument " "1"" of type '" "Poisson const *""'"); 
  }
  arg1 = reinterpret_cast< Poisson * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Poisson const *)arg1)->getVariance();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Poisson_getNextSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Poisson *arg1 = (Poisson *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Poisson_getNextSample",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Poisson, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Poisson_getNextSample" "', argument " "1"" of type '" "Poisson const *""'"); 
  }
  arg1 = reinterpret_cast< Poisson * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Poisson const *)arg1)->getNextSample();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Poisson_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Poisson, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Exponential__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  Exponential *result = 0 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Exponential",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Exponential" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Exponential *)new Exponential(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exponential, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Exponential__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ExponentialGenerator arg1 ;
  double arg2 ;
  Exponential *result = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Exponential",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Exponential" "', argument " "1"" of type '" "ExponentialGenerator""'");
  } 
  arg1 = static_cast< ExponentialGenerator >(val1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Exponential" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (Exponential *)new Exponential(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exponential, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Exponential(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 2); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Exponential__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Exponential__SWIG_1(self, args);
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Exponential'.\n  Possible C/C++ prototypes are:\n""    Exponential(double)\n""    Exponential(ExponentialGenerator,double)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exponential_getMean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Exponential *arg1 = (Exponential *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Exponential_getMean",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Exponential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exponential_getMean" "', argument " "1"" of type '" "Exponential const *""'"); 
  }
  arg1 = reinterpret_cast< Exponential * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Exponential const *)arg1)->getMean();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exponential_getVariance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Exponential *arg1 = (Exponential *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Exponential_getVariance",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Exponential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exponential_getVariance" "', argument " "1"" of type '" "Exponential const *""'"); 
  }
  arg1 = reinterpret_cast< Exponential * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Exponential const *)arg1)->getVariance();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exponential_getNextSample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Exponential *arg1 = (Exponential *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Exponential_getNextSample",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Exponential, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exponential_getNextSample" "', argument " "1"" of type '" "Exponential const *""'"); 
  }
  arg1 = reinterpret_cast< Exponential * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((Exponential const *)arg1)->getNextSample();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Exponential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Exponential *arg1 = (Exponential *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Exponential",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Exponential, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Exponential" "', argument " "1"" of type '" "Exponential *""'"); 
  }
  arg1 = reinterpret_cast< Exponential * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Exponential_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_Exponential, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_RandGenerator_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RandGenerator_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RandGenerator_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::RandGenerator::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_RandGenerator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::RandGenerator *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandGenerator",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandGenerator" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandGenerator *)new pymoose::RandGenerator(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandGenerator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandGenerator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  pymoose::RandGenerator *result = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandGenerator",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandGenerator *)new pymoose::RandGenerator(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandGenerator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandGenerator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  Id arg3 ;
  pymoose::RandGenerator *result = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandGenerator",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RandGenerator" "', argument " "3"" of type '" "Id""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "3"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandGenerator *)new pymoose::RandGenerator(arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandGenerator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandGenerator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::RandGenerator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandGenerator",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__RandGenerator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandGenerator" "', argument " "1"" of type '" "pymoose::RandGenerator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "1"" of type '" "pymoose::RandGenerator const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RandGenerator" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandGenerator *)new pymoose::RandGenerator((pymoose::RandGenerator const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandGenerator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandGenerator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::RandGenerator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandGenerator",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__RandGenerator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandGenerator" "', argument " "1"" of type '" "pymoose::RandGenerator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "1"" of type '" "pymoose::RandGenerator const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RandGenerator" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandGenerator *)new pymoose::RandGenerator((pymoose::RandGenerator const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandGenerator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandGenerator__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::RandGenerator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandGenerator",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandGenerator" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RandGenerator" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandGenerator *)new pymoose::RandGenerator((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandGenerator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandGenerator__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = 0 ;
  std::string arg2 ;
  pymoose::RandGenerator *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandGenerator",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__RandGenerator,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RandGenerator" "', argument " "1"" of type '" "pymoose::RandGenerator const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "1"" of type '" "pymoose::RandGenerator const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandGenerator *)new pymoose::RandGenerator((pymoose::RandGenerator const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandGenerator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandGenerator__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::RandGenerator *result = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RandGenerator",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RandGenerator" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RandGenerator" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RandGenerator" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RandGenerator *)new pymoose::RandGenerator(arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RandGenerator, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RandGenerator(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_RandGenerator__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__RandGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_RandGenerator__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_RandGenerator__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__RandGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RandGenerator__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__RandGenerator, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RandGenerator__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RandGenerator__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RandGenerator__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RandGenerator__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_RandGenerator'.\n  Possible C/C++ prototypes are:\n""    pymoose::RandGenerator(Id)\n""    pymoose::RandGenerator(std::string,std::string)\n""    pymoose::RandGenerator(std::string,std::string,Id)\n""    pymoose::RandGenerator(pymoose::RandGenerator const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::RandGenerator(pymoose::RandGenerator const &,std::string,Id &)\n""    pymoose::RandGenerator(Id const &,std::string,Id &)\n""    pymoose::RandGenerator(pymoose::RandGenerator const &,std::string)\n""    pymoose::RandGenerator(std::string,std::string,pymoose::PyMooseBase &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator_getType" "', argument " "1"" of type '" "pymoose::RandGenerator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator___get_sample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator___get_sample",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator___get_sample" "', argument " "1"" of type '" "pymoose::RandGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandGenerator const *)arg1)->__get_sample();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator___set_sample(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator___set_sample",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator___set_sample" "', argument " "1"" of type '" "pymoose::RandGenerator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandGenerator___set_sample" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_sample(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator___get_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator___get_mean",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator___get_mean" "', argument " "1"" of type '" "pymoose::RandGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandGenerator const *)arg1)->__get_mean();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator___set_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator___set_mean",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator___set_mean" "', argument " "1"" of type '" "pymoose::RandGenerator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandGenerator___set_mean" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_mean(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator___get_variance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator___get_variance",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator___get_variance" "', argument " "1"" of type '" "pymoose::RandGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandGenerator const *)arg1)->__get_variance();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator___set_variance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator___set_variance",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator___set_variance" "', argument " "1"" of type '" "pymoose::RandGenerator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandGenerator___set_variance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_variance(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator___get_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator___get_output",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator___get_output" "', argument " "1"" of type '" "pymoose::RandGenerator const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::RandGenerator const *)arg1)->__get_output();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator___set_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator___set_output",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator___set_output" "', argument " "1"" of type '" "pymoose::RandGenerator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RandGenerator___set_output" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_output(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator_sample_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator_sample_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator_sample_get" "', argument " "1"" of type '" "pymoose::RandGenerator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandGenerator_sample_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator_mean_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator_mean_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator_mean_get" "', argument " "1"" of type '" "pymoose::RandGenerator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandGenerator_mean_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RandGenerator_variance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RandGenerator_variance_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RandGenerator_variance_get" "', argument " "1"" of type '" "pymoose::RandGenerator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_RandGenerator_variance_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RandGenerator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RandGenerator *arg1 = (pymoose::RandGenerator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_RandGenerator",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RandGenerator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RandGenerator" "', argument " "1"" of type '" "pymoose::RandGenerator *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RandGenerator * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *RandGenerator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__RandGenerator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_UniformRng_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable UniformRng_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_UniformRng_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::UniformRng::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_UniformRng__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::UniformRng *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_UniformRng",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UniformRng" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::UniformRng *)new pymoose::UniformRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__UniformRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformRng__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::UniformRng *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_UniformRng",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UniformRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::UniformRng *)new pymoose::UniformRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__UniformRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformRng__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::UniformRng *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_UniformRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UniformRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UniformRng" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::UniformRng *)new pymoose::UniformRng(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__UniformRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformRng__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::UniformRng *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_UniformRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UniformRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_UniformRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::UniformRng *)new pymoose::UniformRng(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__UniformRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformRng__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::UniformRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_UniformRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__UniformRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UniformRng" "', argument " "1"" of type '" "pymoose::UniformRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "1"" of type '" "pymoose::UniformRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UniformRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_UniformRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::UniformRng *)new pymoose::UniformRng((pymoose::UniformRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__UniformRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformRng__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::UniformRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_UniformRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__UniformRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UniformRng" "', argument " "1"" of type '" "pymoose::UniformRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "1"" of type '" "pymoose::UniformRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UniformRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_UniformRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::UniformRng *)new pymoose::UniformRng((pymoose::UniformRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__UniformRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformRng__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::UniformRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_UniformRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UniformRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UniformRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_UniformRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::UniformRng *)new pymoose::UniformRng((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__UniformRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformRng__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::UniformRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_UniformRng",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__UniformRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UniformRng" "', argument " "1"" of type '" "pymoose::UniformRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_UniformRng" "', argument " "1"" of type '" "pymoose::UniformRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UniformRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::UniformRng *)new pymoose::UniformRng((pymoose::UniformRng const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__UniformRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_UniformRng(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_UniformRng__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_UniformRng__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__UniformRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_UniformRng__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_UniformRng__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_UniformRng__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__UniformRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_UniformRng__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_UniformRng__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__UniformRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_UniformRng__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_UniformRng'.\n  Possible C/C++ prototypes are:\n""    pymoose::UniformRng(Id)\n""    pymoose::UniformRng(std::string)\n""    pymoose::UniformRng(std::string,Id)\n""    pymoose::UniformRng(std::string,pymoose::PyMooseBase &)\n""    pymoose::UniformRng(pymoose::UniformRng const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::UniformRng(pymoose::UniformRng const &,std::string,Id &)\n""    pymoose::UniformRng(Id const &,std::string,Id &)\n""    pymoose::UniformRng(pymoose::UniformRng const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_UniformRng(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_UniformRng",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UniformRng" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng_getType" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng___get_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng___get_min",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng___get_min" "', argument " "1"" of type '" "pymoose::UniformRng const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::UniformRng const *)arg1)->__get_min();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng___set_min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng___set_min",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng___set_min" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformRng___set_min" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_min(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng___get_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng___get_max",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng___get_max" "', argument " "1"" of type '" "pymoose::UniformRng const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::UniformRng const *)arg1)->__get_max();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng___set_max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng___set_max",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng___set_max" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformRng___set_max" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_max(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng_mean_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng_mean_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng_mean_get" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_UniformRng_mean_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng_variance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng_variance_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng_variance_get" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_UniformRng_variance_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng_min_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng_min_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng_min_set" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformRng_min_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_UniformRng_min_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng_min_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng_min_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng_min_get" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_UniformRng_min_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng_max_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng_max_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng_max_set" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UniformRng_max_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_UniformRng_max_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UniformRng_max_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::UniformRng *arg1 = (pymoose::UniformRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"UniformRng_max_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__UniformRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UniformRng_max_get" "', argument " "1"" of type '" "pymoose::UniformRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::UniformRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_UniformRng_max_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *UniformRng_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__UniformRng, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_GammaRng_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GammaRng_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_GammaRng_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::GammaRng::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_GammaRng__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::GammaRng *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GammaRng",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GammaRng" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GammaRng *)new pymoose::GammaRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GammaRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaRng__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::GammaRng *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GammaRng",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GammaRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GammaRng *)new pymoose::GammaRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GammaRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaRng__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::GammaRng *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GammaRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GammaRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GammaRng" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GammaRng *)new pymoose::GammaRng(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GammaRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaRng__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::GammaRng *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GammaRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GammaRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GammaRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GammaRng *)new pymoose::GammaRng(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GammaRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaRng__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::GammaRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GammaRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__GammaRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GammaRng" "', argument " "1"" of type '" "pymoose::GammaRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "1"" of type '" "pymoose::GammaRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GammaRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_GammaRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GammaRng *)new pymoose::GammaRng((pymoose::GammaRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GammaRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaRng__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::GammaRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GammaRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__GammaRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GammaRng" "', argument " "1"" of type '" "pymoose::GammaRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "1"" of type '" "pymoose::GammaRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GammaRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_GammaRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GammaRng *)new pymoose::GammaRng((pymoose::GammaRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GammaRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaRng__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::GammaRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GammaRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GammaRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GammaRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_GammaRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GammaRng *)new pymoose::GammaRng((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GammaRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaRng__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::GammaRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GammaRng",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__GammaRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GammaRng" "', argument " "1"" of type '" "pymoose::GammaRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GammaRng" "', argument " "1"" of type '" "pymoose::GammaRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GammaRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GammaRng *)new pymoose::GammaRng((pymoose::GammaRng const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GammaRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GammaRng(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_GammaRng__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_GammaRng__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__GammaRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_GammaRng__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_GammaRng__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_GammaRng__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__GammaRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_GammaRng__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_GammaRng__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__GammaRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_GammaRng__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GammaRng'.\n  Possible C/C++ prototypes are:\n""    pymoose::GammaRng(Id)\n""    pymoose::GammaRng(std::string)\n""    pymoose::GammaRng(std::string,Id)\n""    pymoose::GammaRng(std::string,pymoose::PyMooseBase &)\n""    pymoose::GammaRng(pymoose::GammaRng const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::GammaRng(pymoose::GammaRng const &,std::string,Id &)\n""    pymoose::GammaRng(Id const &,std::string,Id &)\n""    pymoose::GammaRng(pymoose::GammaRng const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GammaRng(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_GammaRng",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GammaRng" "', argument " "1"" of type '" "pymoose::GammaRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaRng_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GammaRng_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaRng_getType" "', argument " "1"" of type '" "pymoose::GammaRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaRng___get_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GammaRng___get_alpha",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaRng___get_alpha" "', argument " "1"" of type '" "pymoose::GammaRng const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::GammaRng const *)arg1)->__get_alpha();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaRng___set_alpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GammaRng___set_alpha",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaRng___set_alpha" "', argument " "1"" of type '" "pymoose::GammaRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GammaRng___set_alpha" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_alpha(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaRng___get_theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GammaRng___get_theta",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaRng___get_theta" "', argument " "1"" of type '" "pymoose::GammaRng const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::GammaRng const *)arg1)->__get_theta();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaRng___set_theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GammaRng___set_theta",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaRng___set_theta" "', argument " "1"" of type '" "pymoose::GammaRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GammaRng___set_theta" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_theta(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaRng_alpha_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GammaRng_alpha_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaRng_alpha_set" "', argument " "1"" of type '" "pymoose::GammaRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GammaRng_alpha_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_GammaRng_alpha_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaRng_alpha_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GammaRng_alpha_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaRng_alpha_get" "', argument " "1"" of type '" "pymoose::GammaRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_GammaRng_alpha_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaRng_theta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GammaRng_theta_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaRng_theta_set" "', argument " "1"" of type '" "pymoose::GammaRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GammaRng_theta_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_GammaRng_theta_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GammaRng_theta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GammaRng *arg1 = (pymoose::GammaRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GammaRng_theta_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GammaRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GammaRng_theta_get" "', argument " "1"" of type '" "pymoose::GammaRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GammaRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_GammaRng_theta_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *GammaRng_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__GammaRng, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_ExponentialRng_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable ExponentialRng_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_ExponentialRng_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::ExponentialRng::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_ExponentialRng__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::ExponentialRng *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ExponentialRng",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ExponentialRng *)new pymoose::ExponentialRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ExponentialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialRng__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::ExponentialRng *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ExponentialRng",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ExponentialRng *)new pymoose::ExponentialRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ExponentialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialRng__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::ExponentialRng *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ExponentialRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ExponentialRng" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ExponentialRng *)new pymoose::ExponentialRng(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ExponentialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialRng__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::ExponentialRng *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ExponentialRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ExponentialRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ExponentialRng *)new pymoose::ExponentialRng(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ExponentialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialRng__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::ExponentialRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ExponentialRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__ExponentialRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "pymoose::ExponentialRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "pymoose::ExponentialRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ExponentialRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ExponentialRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ExponentialRng *)new pymoose::ExponentialRng((pymoose::ExponentialRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ExponentialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialRng__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::ExponentialRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ExponentialRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__ExponentialRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "pymoose::ExponentialRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "pymoose::ExponentialRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ExponentialRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ExponentialRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ExponentialRng *)new pymoose::ExponentialRng((pymoose::ExponentialRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ExponentialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialRng__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::ExponentialRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ExponentialRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ExponentialRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_ExponentialRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ExponentialRng *)new pymoose::ExponentialRng((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ExponentialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialRng__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::ExponentialRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_ExponentialRng",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__ExponentialRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "pymoose::ExponentialRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ExponentialRng" "', argument " "1"" of type '" "pymoose::ExponentialRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ExponentialRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::ExponentialRng *)new pymoose::ExponentialRng((pymoose::ExponentialRng const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__ExponentialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ExponentialRng(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_ExponentialRng__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_ExponentialRng__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__ExponentialRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_ExponentialRng__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_ExponentialRng__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_ExponentialRng__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__ExponentialRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_ExponentialRng__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_ExponentialRng__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__ExponentialRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_ExponentialRng__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_ExponentialRng'.\n  Possible C/C++ prototypes are:\n""    pymoose::ExponentialRng(Id)\n""    pymoose::ExponentialRng(std::string)\n""    pymoose::ExponentialRng(std::string,Id)\n""    pymoose::ExponentialRng(std::string,pymoose::PyMooseBase &)\n""    pymoose::ExponentialRng(pymoose::ExponentialRng const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::ExponentialRng(pymoose::ExponentialRng const &,std::string,Id &)\n""    pymoose::ExponentialRng(Id const &,std::string,Id &)\n""    pymoose::ExponentialRng(pymoose::ExponentialRng const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExponentialRng(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = (pymoose::ExponentialRng *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_ExponentialRng",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ExponentialRng, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExponentialRng" "', argument " "1"" of type '" "pymoose::ExponentialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExponentialRng_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = (pymoose::ExponentialRng *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ExponentialRng_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ExponentialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExponentialRng_getType" "', argument " "1"" of type '" "pymoose::ExponentialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExponentialRng___set_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = (pymoose::ExponentialRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ExponentialRng___set_mean",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ExponentialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExponentialRng___set_mean" "', argument " "1"" of type '" "pymoose::ExponentialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExponentialRng___set_mean" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_mean(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExponentialRng___get_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = (pymoose::ExponentialRng *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ExponentialRng___get_method",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ExponentialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExponentialRng___get_method" "', argument " "1"" of type '" "pymoose::ExponentialRng const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::ExponentialRng const *)arg1)->__get_method();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExponentialRng___set_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = (pymoose::ExponentialRng *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ExponentialRng___set_method",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ExponentialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExponentialRng___set_method" "', argument " "1"" of type '" "pymoose::ExponentialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExponentialRng___set_method" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_method(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExponentialRng_mean_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = (pymoose::ExponentialRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ExponentialRng_mean_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ExponentialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExponentialRng_mean_get" "', argument " "1"" of type '" "pymoose::ExponentialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_ExponentialRng_mean_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExponentialRng_method_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = (pymoose::ExponentialRng *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ExponentialRng_method_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ExponentialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExponentialRng_method_set" "', argument " "1"" of type '" "pymoose::ExponentialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ExponentialRng_method_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_ExponentialRng_method_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExponentialRng_method_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::ExponentialRng *arg1 = (pymoose::ExponentialRng *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"ExponentialRng_method_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__ExponentialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExponentialRng_method_get" "', argument " "1"" of type '" "pymoose::ExponentialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::ExponentialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_ExponentialRng_method_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *ExponentialRng_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__ExponentialRng, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_BinomialRng_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable BinomialRng_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_BinomialRng_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::BinomialRng::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_BinomialRng__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::BinomialRng *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinomialRng",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinomialRng" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinomialRng *)new pymoose::BinomialRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinomialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinomialRng__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::BinomialRng *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinomialRng",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinomialRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinomialRng *)new pymoose::BinomialRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinomialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinomialRng__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::BinomialRng *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinomialRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinomialRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BinomialRng" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinomialRng *)new pymoose::BinomialRng(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinomialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinomialRng__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::BinomialRng *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinomialRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinomialRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_BinomialRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinomialRng *)new pymoose::BinomialRng(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinomialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinomialRng__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::BinomialRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinomialRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__BinomialRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinomialRng" "', argument " "1"" of type '" "pymoose::BinomialRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "1"" of type '" "pymoose::BinomialRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinomialRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BinomialRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinomialRng *)new pymoose::BinomialRng((pymoose::BinomialRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinomialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinomialRng__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::BinomialRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinomialRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__BinomialRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinomialRng" "', argument " "1"" of type '" "pymoose::BinomialRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "1"" of type '" "pymoose::BinomialRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinomialRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BinomialRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinomialRng *)new pymoose::BinomialRng((pymoose::BinomialRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinomialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinomialRng__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::BinomialRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinomialRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinomialRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinomialRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_BinomialRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinomialRng *)new pymoose::BinomialRng((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinomialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinomialRng__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::BinomialRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_BinomialRng",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__BinomialRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_BinomialRng" "', argument " "1"" of type '" "pymoose::BinomialRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_BinomialRng" "', argument " "1"" of type '" "pymoose::BinomialRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_BinomialRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::BinomialRng *)new pymoose::BinomialRng((pymoose::BinomialRng const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__BinomialRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BinomialRng(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_BinomialRng__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_BinomialRng__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__BinomialRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_BinomialRng__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_BinomialRng__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_BinomialRng__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__BinomialRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_BinomialRng__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_BinomialRng__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__BinomialRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_BinomialRng__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_BinomialRng'.\n  Possible C/C++ prototypes are:\n""    pymoose::BinomialRng(Id)\n""    pymoose::BinomialRng(std::string)\n""    pymoose::BinomialRng(std::string,Id)\n""    pymoose::BinomialRng(std::string,pymoose::PyMooseBase &)\n""    pymoose::BinomialRng(pymoose::BinomialRng const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::BinomialRng(pymoose::BinomialRng const &,std::string,Id &)\n""    pymoose::BinomialRng(Id const &,std::string,Id &)\n""    pymoose::BinomialRng(pymoose::BinomialRng const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BinomialRng(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_BinomialRng",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BinomialRng" "', argument " "1"" of type '" "pymoose::BinomialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinomialRng_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinomialRng_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinomialRng_getType" "', argument " "1"" of type '" "pymoose::BinomialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinomialRng___get_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinomialRng___get_n",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinomialRng___get_n" "', argument " "1"" of type '" "pymoose::BinomialRng const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::BinomialRng const *)arg1)->__get_n();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinomialRng___set_n(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinomialRng___set_n",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinomialRng___set_n" "', argument " "1"" of type '" "pymoose::BinomialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinomialRng___set_n" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_n(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinomialRng___get_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinomialRng___get_p",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinomialRng___get_p" "', argument " "1"" of type '" "pymoose::BinomialRng const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::BinomialRng const *)arg1)->__get_p();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinomialRng___set_p(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinomialRng___set_p",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinomialRng___set_p" "', argument " "1"" of type '" "pymoose::BinomialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinomialRng___set_p" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_p(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinomialRng_n_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinomialRng_n_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinomialRng_n_set" "', argument " "1"" of type '" "pymoose::BinomialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinomialRng_n_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinomialRng_n_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinomialRng_n_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinomialRng_n_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinomialRng_n_get" "', argument " "1"" of type '" "pymoose::BinomialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_BinomialRng_n_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinomialRng_p_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinomialRng_p_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinomialRng_p_set" "', argument " "1"" of type '" "pymoose::BinomialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BinomialRng_p_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_BinomialRng_p_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_BinomialRng_p_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::BinomialRng *arg1 = (pymoose::BinomialRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"BinomialRng_p_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__BinomialRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BinomialRng_p_get" "', argument " "1"" of type '" "pymoose::BinomialRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::BinomialRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_BinomialRng_p_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *BinomialRng_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__BinomialRng, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_PoissonRng_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable PoissonRng_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_PoissonRng_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::PoissonRng::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_PoissonRng__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::PoissonRng *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PoissonRng",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PoissonRng" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PoissonRng *)new pymoose::PoissonRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PoissonRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PoissonRng__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PoissonRng *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PoissonRng",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PoissonRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PoissonRng *)new pymoose::PoissonRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PoissonRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PoissonRng__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::PoissonRng *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PoissonRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PoissonRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PoissonRng" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PoissonRng *)new pymoose::PoissonRng(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PoissonRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PoissonRng__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::PoissonRng *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PoissonRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PoissonRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PoissonRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PoissonRng *)new pymoose::PoissonRng(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PoissonRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PoissonRng__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PoissonRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::PoissonRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PoissonRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__PoissonRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PoissonRng" "', argument " "1"" of type '" "pymoose::PoissonRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "1"" of type '" "pymoose::PoissonRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PoissonRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PoissonRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PoissonRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PoissonRng *)new pymoose::PoissonRng((pymoose::PoissonRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PoissonRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PoissonRng__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PoissonRng *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::PoissonRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PoissonRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__PoissonRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PoissonRng" "', argument " "1"" of type '" "pymoose::PoissonRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "1"" of type '" "pymoose::PoissonRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PoissonRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PoissonRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PoissonRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PoissonRng *)new pymoose::PoissonRng((pymoose::PoissonRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PoissonRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PoissonRng__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::PoissonRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PoissonRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PoissonRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PoissonRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_PoissonRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PoissonRng *)new pymoose::PoissonRng((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PoissonRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PoissonRng__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PoissonRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PoissonRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_PoissonRng",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__PoissonRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PoissonRng" "', argument " "1"" of type '" "pymoose::PoissonRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PoissonRng" "', argument " "1"" of type '" "pymoose::PoissonRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PoissonRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_PoissonRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::PoissonRng *)new pymoose::PoissonRng((pymoose::PoissonRng const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__PoissonRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PoissonRng(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_PoissonRng__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_PoissonRng__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__PoissonRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_PoissonRng__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_PoissonRng__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_PoissonRng__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__PoissonRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_PoissonRng__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_PoissonRng__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__PoissonRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_PoissonRng__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_PoissonRng'.\n  Possible C/C++ prototypes are:\n""    pymoose::PoissonRng(Id)\n""    pymoose::PoissonRng(std::string)\n""    pymoose::PoissonRng(std::string,Id)\n""    pymoose::PoissonRng(std::string,pymoose::PyMooseBase &)\n""    pymoose::PoissonRng(pymoose::PoissonRng const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::PoissonRng(pymoose::PoissonRng const &,std::string,Id &)\n""    pymoose::PoissonRng(Id const &,std::string,Id &)\n""    pymoose::PoissonRng(pymoose::PoissonRng const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PoissonRng(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PoissonRng *arg1 = (pymoose::PoissonRng *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_PoissonRng",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PoissonRng, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PoissonRng" "', argument " "1"" of type '" "pymoose::PoissonRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PoissonRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonRng_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PoissonRng *arg1 = (pymoose::PoissonRng *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PoissonRng_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PoissonRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonRng_getType" "', argument " "1"" of type '" "pymoose::PoissonRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PoissonRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonRng___set_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PoissonRng *arg1 = (pymoose::PoissonRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PoissonRng___set_mean",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PoissonRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonRng___set_mean" "', argument " "1"" of type '" "pymoose::PoissonRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PoissonRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PoissonRng___set_mean" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_mean(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_PoissonRng_mean_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::PoissonRng *arg1 = (pymoose::PoissonRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"PoissonRng_mean_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__PoissonRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PoissonRng_mean_get" "', argument " "1"" of type '" "pymoose::PoissonRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::PoissonRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_PoissonRng_mean_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *PoissonRng_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__PoissonRng, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_NormalRng_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable NormalRng_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_NormalRng_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::NormalRng::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_NormalRng__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::NormalRng *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NormalRng",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NormalRng" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NormalRng *)new pymoose::NormalRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NormalRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NormalRng__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::NormalRng *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NormalRng",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NormalRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NormalRng *)new pymoose::NormalRng(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NormalRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NormalRng__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::NormalRng *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NormalRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NormalRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NormalRng" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NormalRng *)new pymoose::NormalRng(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NormalRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NormalRng__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::NormalRng *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NormalRng",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NormalRng" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_NormalRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NormalRng *)new pymoose::NormalRng(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NormalRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NormalRng__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::NormalRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NormalRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__NormalRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NormalRng" "', argument " "1"" of type '" "pymoose::NormalRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "1"" of type '" "pymoose::NormalRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NormalRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NormalRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NormalRng *)new pymoose::NormalRng((pymoose::NormalRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NormalRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NormalRng__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::NormalRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NormalRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__NormalRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NormalRng" "', argument " "1"" of type '" "pymoose::NormalRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "1"" of type '" "pymoose::NormalRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NormalRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NormalRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NormalRng *)new pymoose::NormalRng((pymoose::NormalRng const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NormalRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NormalRng__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::NormalRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NormalRng",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NormalRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NormalRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_NormalRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NormalRng *)new pymoose::NormalRng((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NormalRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NormalRng__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = 0 ;
  std::string arg2 ;
  pymoose::NormalRng *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_NormalRng",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__NormalRng,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NormalRng" "', argument " "1"" of type '" "pymoose::NormalRng const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NormalRng" "', argument " "1"" of type '" "pymoose::NormalRng const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NormalRng" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::NormalRng *)new pymoose::NormalRng((pymoose::NormalRng const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__NormalRng, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NormalRng(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_NormalRng__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_NormalRng__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__NormalRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_NormalRng__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_NormalRng__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_NormalRng__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__NormalRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_NormalRng__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_NormalRng__SWIG_6(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__NormalRng, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_NormalRng__SWIG_4(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_NormalRng'.\n  Possible C/C++ prototypes are:\n""    pymoose::NormalRng(Id)\n""    pymoose::NormalRng(std::string)\n""    pymoose::NormalRng(std::string,Id)\n""    pymoose::NormalRng(std::string,pymoose::PyMooseBase &)\n""    pymoose::NormalRng(pymoose::NormalRng const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::NormalRng(pymoose::NormalRng const &,std::string,Id &)\n""    pymoose::NormalRng(Id const &,std::string,Id &)\n""    pymoose::NormalRng(pymoose::NormalRng const &,std::string)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NormalRng(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_NormalRng",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NormalRng" "', argument " "1"" of type '" "pymoose::NormalRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalRng_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NormalRng_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalRng_getType" "', argument " "1"" of type '" "pymoose::NormalRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalRng___set_mean(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NormalRng___set_mean",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalRng___set_mean" "', argument " "1"" of type '" "pymoose::NormalRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NormalRng___set_mean" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_mean(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalRng___set_variance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NormalRng___set_variance",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalRng___set_variance" "', argument " "1"" of type '" "pymoose::NormalRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NormalRng___set_variance" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_variance(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalRng___get_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NormalRng___get_method",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalRng___get_method" "', argument " "1"" of type '" "pymoose::NormalRng const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::NormalRng const *)arg1)->__get_method();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalRng___set_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NormalRng___set_method",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalRng___set_method" "', argument " "1"" of type '" "pymoose::NormalRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NormalRng___set_method" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_method(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalRng_mean_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NormalRng_mean_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalRng_mean_get" "', argument " "1"" of type '" "pymoose::NormalRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_NormalRng_mean_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalRng_variance_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NormalRng_variance_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalRng_variance_get" "', argument " "1"" of type '" "pymoose::NormalRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_NormalRng_variance_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalRng_method_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NormalRng_method_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalRng_method_set" "', argument " "1"" of type '" "pymoose::NormalRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NormalRng_method_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_NormalRng_method_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NormalRng_method_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::NormalRng *arg1 = (pymoose::NormalRng *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"NormalRng_method_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__NormalRng, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NormalRng_method_get" "', argument " "1"" of type '" "pymoose::NormalRng *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::NormalRng * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_NormalRng_method_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *NormalRng_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__NormalRng, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_KineticManager_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable KineticManager_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_KineticManager_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::KineticManager::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_KineticManager__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::KineticManager *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticManager",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticManager" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticManager *)new pymoose::KineticManager(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticManager, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticManager__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::KineticManager *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticManager",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticManager" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticManager *)new pymoose::KineticManager(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticManager, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticManager__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::KineticManager *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticManager",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticManager" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_KineticManager" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticManager *)new pymoose::KineticManager(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticManager, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticManager__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::KineticManager *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticManager",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticManager" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_KineticManager" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticManager *)new pymoose::KineticManager(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticManager, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticManager__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::KineticManager *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticManager",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__KineticManager,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticManager" "', argument " "1"" of type '" "pymoose::KineticManager const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "1"" of type '" "pymoose::KineticManager const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticManager" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_KineticManager" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticManager *)new pymoose::KineticManager((pymoose::KineticManager const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticManager, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticManager__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::KineticManager *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticManager",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__KineticManager,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticManager" "', argument " "1"" of type '" "pymoose::KineticManager const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "1"" of type '" "pymoose::KineticManager const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticManager" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_KineticManager" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticManager *)new pymoose::KineticManager((pymoose::KineticManager const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticManager, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticManager__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = 0 ;
  std::string arg2 ;
  pymoose::KineticManager *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticManager",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__KineticManager,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticManager" "', argument " "1"" of type '" "pymoose::KineticManager const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "1"" of type '" "pymoose::KineticManager const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticManager" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticManager *)new pymoose::KineticManager((pymoose::KineticManager const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticManager, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticManager__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::KineticManager *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KineticManager",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KineticManager" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KineticManager" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_KineticManager" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KineticManager" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KineticManager *)new pymoose::KineticManager((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KineticManager, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KineticManager(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_KineticManager__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_KineticManager__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__KineticManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_KineticManager__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_KineticManager__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_KineticManager__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__KineticManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_KineticManager__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__KineticManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_KineticManager__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_KineticManager__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_KineticManager'.\n  Possible C/C++ prototypes are:\n""    pymoose::KineticManager(Id)\n""    pymoose::KineticManager(std::string)\n""    pymoose::KineticManager(std::string,Id)\n""    pymoose::KineticManager(std::string,pymoose::PyMooseBase &)\n""    pymoose::KineticManager(pymoose::KineticManager const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::KineticManager(pymoose::KineticManager const &,std::string,Id &)\n""    pymoose::KineticManager(pymoose::KineticManager const &,std::string)\n""    pymoose::KineticManager(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KineticManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_KineticManager",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KineticManager" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_getType" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_autoMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_autoMode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_autoMode" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::KineticManager const *)arg1)->__get_autoMode();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___set_autoMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___set_autoMode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___set_autoMode" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticManager___set_autoMode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_autoMode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_stochastic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_stochastic",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_stochastic" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::KineticManager const *)arg1)->__get_stochastic();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___set_stochastic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___set_stochastic",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___set_stochastic" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticManager___set_stochastic" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_stochastic(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_spatial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_spatial",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_spatial" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::KineticManager const *)arg1)->__get_spatial();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___set_spatial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___set_spatial",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___set_spatial" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticManager___set_spatial" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_spatial(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_method",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_method" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::KineticManager const *)arg1)->__get_method();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___set_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___set_method",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___set_method" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "KineticManager___set_method" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_method(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_variableDt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_variableDt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_variableDt" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::KineticManager const *)arg1)->__get_variableDt();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_singleParticle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_singleParticle",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_singleParticle" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::KineticManager const *)arg1)->__get_singleParticle();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_multiscale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_multiscale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_multiscale" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::KineticManager const *)arg1)->__get_multiscale();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_implicit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_implicit",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_implicit" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)((pymoose::KineticManager const *)arg1)->__get_implicit();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_description(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_description",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_description" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::KineticManager const *)arg1)->__get_description();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_recommendedDt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_recommendedDt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_recommendedDt" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::KineticManager const *)arg1)->__get_recommendedDt();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___get_eulerError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___get_eulerError",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___get_eulerError" "', argument " "1"" of type '" "pymoose::KineticManager const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::KineticManager const *)arg1)->__get_eulerError();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager___set_eulerError(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager___set_eulerError",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager___set_eulerError" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticManager___set_eulerError" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_eulerError(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_autoMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_autoMode_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_autoMode_set" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticManager_autoMode_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KineticManager_autoMode_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_autoMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_autoMode_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_autoMode_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_KineticManager_autoMode_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_stochastic_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_stochastic_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_stochastic_set" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticManager_stochastic_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KineticManager_stochastic_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_stochastic_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_stochastic_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_stochastic_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_KineticManager_stochastic_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_spatial_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_spatial_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_spatial_set" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticManager_spatial_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KineticManager_spatial_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_spatial_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_spatial_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_spatial_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_KineticManager_spatial_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_method_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_method_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_method_set" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "KineticManager_method_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "KineticManager_method_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KineticManager_method_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_method_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_method_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_method_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_KineticManager_method_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_variableDt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_variableDt_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_variableDt_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_KineticManager_variableDt_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_singleParticle_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_singleParticle_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_singleParticle_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_KineticManager_singleParticle_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_multiscale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_multiscale_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_multiscale_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_KineticManager_multiscale_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_implicit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  bool result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_implicit_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_implicit_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (bool)pymoose_KineticManager_implicit_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_description_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_description_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_description_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_KineticManager_description_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_recommendedDt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_recommendedDt_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_recommendedDt_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_KineticManager_recommendedDt_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_eulerError_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_eulerError_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_eulerError_set" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KineticManager_eulerError_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KineticManager_eulerError_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KineticManager_eulerError_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KineticManager *arg1 = (pymoose::KineticManager *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KineticManager_eulerError_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KineticManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KineticManager_eulerError_get" "', argument " "1"" of type '" "pymoose::KineticManager *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KineticManager * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_KineticManager_eulerError_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *KineticManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__KineticManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_KinCompt_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable KinCompt_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_KinCompt_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::KinCompt::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_KinCompt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::KinCompt *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KinCompt",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KinCompt" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KinCompt *)new pymoose::KinCompt(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KinCompt, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KinCompt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::KinCompt *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KinCompt",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KinCompt" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KinCompt *)new pymoose::KinCompt(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KinCompt, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KinCompt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::KinCompt *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KinCompt",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KinCompt" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_KinCompt" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KinCompt *)new pymoose::KinCompt(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KinCompt, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KinCompt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::KinCompt *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KinCompt",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KinCompt" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_KinCompt" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KinCompt *)new pymoose::KinCompt(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KinCompt, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KinCompt__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::KinCompt *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KinCompt",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__KinCompt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KinCompt" "', argument " "1"" of type '" "pymoose::KinCompt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "1"" of type '" "pymoose::KinCompt const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KinCompt" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_KinCompt" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KinCompt *)new pymoose::KinCompt((pymoose::KinCompt const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KinCompt, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KinCompt__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::KinCompt *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KinCompt",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__KinCompt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KinCompt" "', argument " "1"" of type '" "pymoose::KinCompt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "1"" of type '" "pymoose::KinCompt const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KinCompt" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_KinCompt" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KinCompt *)new pymoose::KinCompt((pymoose::KinCompt const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KinCompt, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KinCompt__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = 0 ;
  std::string arg2 ;
  pymoose::KinCompt *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KinCompt",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__KinCompt,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KinCompt" "', argument " "1"" of type '" "pymoose::KinCompt const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "1"" of type '" "pymoose::KinCompt const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KinCompt" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KinCompt *)new pymoose::KinCompt((pymoose::KinCompt const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KinCompt, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KinCompt__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::KinCompt *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_KinCompt",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_KinCompt" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_KinCompt" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_KinCompt" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_KinCompt" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::KinCompt *)new pymoose::KinCompt((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__KinCompt, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_KinCompt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_KinCompt__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_KinCompt__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__KinCompt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_KinCompt__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_KinCompt__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_KinCompt__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__KinCompt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_KinCompt__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__KinCompt, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_KinCompt__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_KinCompt__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_KinCompt'.\n  Possible C/C++ prototypes are:\n""    pymoose::KinCompt(Id)\n""    pymoose::KinCompt(std::string)\n""    pymoose::KinCompt(std::string,Id)\n""    pymoose::KinCompt(std::string,pymoose::PyMooseBase &)\n""    pymoose::KinCompt(pymoose::KinCompt const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::KinCompt(pymoose::KinCompt const &,std::string,Id &)\n""    pymoose::KinCompt(pymoose::KinCompt const &,std::string)\n""    pymoose::KinCompt(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_KinCompt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_KinCompt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_KinCompt" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_getType" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___get_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___get_volume",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___get_volume" "', argument " "1"" of type '" "pymoose::KinCompt const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::KinCompt const *)arg1)->__get_volume();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___set_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___set_volume",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___set_volume" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt___set_volume" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_volume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___get_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___get_area",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___get_area" "', argument " "1"" of type '" "pymoose::KinCompt const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::KinCompt const *)arg1)->__get_area();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___set_area(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___set_area",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___set_area" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt___set_area" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_area(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___get_perimeter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___get_perimeter",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___get_perimeter" "', argument " "1"" of type '" "pymoose::KinCompt const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::KinCompt const *)arg1)->__get_perimeter();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___set_perimeter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___set_perimeter",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___set_perimeter" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt___set_perimeter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_perimeter(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___get_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___get_size",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___get_size" "', argument " "1"" of type '" "pymoose::KinCompt const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::KinCompt const *)arg1)->__get_size();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___set_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___set_size",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___set_size" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt___set_size" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_size(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___get_numDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___get_numDimensions",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___get_numDimensions" "', argument " "1"" of type '" "pymoose::KinCompt const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::KinCompt const *)arg1)->__get_numDimensions();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt___set_numDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt___set_numDimensions",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt___set_numDimensions" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt___set_numDimensions" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_numDimensions(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_volume_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_volume_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_volume_set" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt_volume_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KinCompt_volume_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_volume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_volume_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_volume_get" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_KinCompt_volume_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_area_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_area_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_area_set" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt_area_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KinCompt_area_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_area_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_area_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_area_get" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_KinCompt_area_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_perimeter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_perimeter_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_perimeter_set" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt_perimeter_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KinCompt_perimeter_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_perimeter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_perimeter_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_perimeter_get" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_KinCompt_perimeter_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_size_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_size_set" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt_size_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KinCompt_size_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_size_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_size_get" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_KinCompt_size_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_numDimensions_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_numDimensions_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_numDimensions_set" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "KinCompt_numDimensions_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_KinCompt_numDimensions_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_KinCompt_numDimensions_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::KinCompt *arg1 = (pymoose::KinCompt *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"KinCompt_numDimensions_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__KinCompt, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "KinCompt_numDimensions_get" "', argument " "1"" of type '" "pymoose::KinCompt *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::KinCompt * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_KinCompt_numDimensions_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *KinCompt_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__KinCompt, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Panel_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Panel_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Panel_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Panel::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Panel *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Panel" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Panel *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Panel *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Panel" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Panel *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Panel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Panel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Panel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Panel" "', argument " "1"" of type '" "pymoose::Panel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "1"" of type '" "pymoose::Panel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Panel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel((pymoose::Panel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Panel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Panel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Panel" "', argument " "1"" of type '" "pymoose::Panel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "1"" of type '" "pymoose::Panel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Panel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel((pymoose::Panel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Panel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Panel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Panel" "', argument " "1"" of type '" "pymoose::Panel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "1"" of type '" "pymoose::Panel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel((pymoose::Panel const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Panel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Panel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Panel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_8(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  Id arg3 ;
  pymoose::Panel *result = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Panel" "', argument " "3"" of type '" "Id""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "3"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel(arg1,arg2,arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_9(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  pymoose::Panel *result = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel__SWIG_10(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Panel *result = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Panel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Panel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Panel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Panel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Panel *)new pymoose::Panel(arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Panel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Panel__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Panel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Panel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Panel__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Panel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Panel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Panel__SWIG_9(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Panel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Panel__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Panel__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Panel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Panel__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Panel__SWIG_8(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Panel__SWIG_10(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Panel'.\n  Possible C/C++ prototypes are:\n""    pymoose::Panel(Id)\n""    pymoose::Panel(std::string)\n""    pymoose::Panel(std::string,Id)\n""    pymoose::Panel(std::string,pymoose::PyMooseBase &)\n""    pymoose::Panel(pymoose::Panel const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Panel(pymoose::Panel const &,std::string,Id &)\n""    pymoose::Panel(pymoose::Panel const &,std::string)\n""    pymoose::Panel(Id const &,std::string,Id &)\n""    pymoose::Panel(std::string,std::string,Id)\n""    pymoose::Panel(std::string,std::string)\n""    pymoose::Panel(std::string,std::string,pymoose::PyMooseBase &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Panel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Panel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Panel" "', argument " "1"" of type '" "pymoose::Panel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel_getType" "', argument " "1"" of type '" "pymoose::Panel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel___get_nPts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel___get_nPts",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel___get_nPts" "', argument " "1"" of type '" "pymoose::Panel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Panel const *)arg1)->__get_nPts();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel___get_nDims(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel___get_nDims",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel___get_nDims" "', argument " "1"" of type '" "pymoose::Panel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Panel const *)arg1)->__get_nDims();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel___get_nNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel___get_nNeighbors",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel___get_nNeighbors" "', argument " "1"" of type '" "pymoose::Panel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Panel const *)arg1)->__get_nNeighbors();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel___get_shapeId(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel___get_shapeId",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel___get_shapeId" "', argument " "1"" of type '" "pymoose::Panel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::Panel const *)arg1)->__get_shapeId();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel___get_coords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  std::vector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel___get_coords",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel___get_coords" "', argument " "1"" of type '" "pymoose::Panel const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<double > const &_result_ref = ((pymoose::Panel const *)arg1)->__get_coords();
      result = (std::vector<double > *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<double,std::allocator<double > > >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel_nPts_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel_nPts_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel_nPts_get" "', argument " "1"" of type '" "pymoose::Panel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Panel_nPts_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel_nDims_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel_nDims_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel_nDims_get" "', argument " "1"" of type '" "pymoose::Panel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Panel_nDims_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel_nNeighbors_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel_nNeighbors_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel_nNeighbors_get" "', argument " "1"" of type '" "pymoose::Panel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Panel_nNeighbors_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel_shapeId_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel_shapeId_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel_shapeId_get" "', argument " "1"" of type '" "pymoose::Panel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_Panel_shapeId_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Panel_coords_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Panel *arg1 = (pymoose::Panel *) 0 ;
  std::vector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Panel_coords_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Panel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Panel_coords_get" "', argument " "1"" of type '" "pymoose::Panel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Panel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<double > const &_result_ref = pymoose_Panel_coords_get(arg1);
      result = (std::vector<double > *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<double,std::allocator<double > > >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Panel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Panel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DiskPanel_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DiskPanel_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DiskPanel_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::DiskPanel::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_DiskPanel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::DiskPanel *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DiskPanel",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiskPanel" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DiskPanel *)new pymoose::DiskPanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DiskPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiskPanel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::DiskPanel *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DiskPanel",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DiskPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DiskPanel *)new pymoose::DiskPanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DiskPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiskPanel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::DiskPanel *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DiskPanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DiskPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DiskPanel" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DiskPanel *)new pymoose::DiskPanel(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DiskPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiskPanel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::DiskPanel *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DiskPanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DiskPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DiskPanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DiskPanel *)new pymoose::DiskPanel(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DiskPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiskPanel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DiskPanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::DiskPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DiskPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__DiskPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiskPanel" "', argument " "1"" of type '" "pymoose::DiskPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "1"" of type '" "pymoose::DiskPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DiskPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DiskPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DiskPanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DiskPanel *)new pymoose::DiskPanel((pymoose::DiskPanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DiskPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiskPanel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DiskPanel *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::DiskPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DiskPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__DiskPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiskPanel" "', argument " "1"" of type '" "pymoose::DiskPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "1"" of type '" "pymoose::DiskPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DiskPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DiskPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DiskPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DiskPanel *)new pymoose::DiskPanel((pymoose::DiskPanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DiskPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiskPanel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DiskPanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::DiskPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DiskPanel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__DiskPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiskPanel" "', argument " "1"" of type '" "pymoose::DiskPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "1"" of type '" "pymoose::DiskPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DiskPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DiskPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DiskPanel *)new pymoose::DiskPanel((pymoose::DiskPanel const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DiskPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiskPanel__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::DiskPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DiskPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DiskPanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DiskPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DiskPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DiskPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DiskPanel *)new pymoose::DiskPanel((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DiskPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DiskPanel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_DiskPanel__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_DiskPanel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__DiskPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_DiskPanel__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_DiskPanel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_DiskPanel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__DiskPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_DiskPanel__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__DiskPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_DiskPanel__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_DiskPanel__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DiskPanel'.\n  Possible C/C++ prototypes are:\n""    pymoose::DiskPanel(Id)\n""    pymoose::DiskPanel(std::string)\n""    pymoose::DiskPanel(std::string,Id)\n""    pymoose::DiskPanel(std::string,pymoose::PyMooseBase &)\n""    pymoose::DiskPanel(pymoose::DiskPanel const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::DiskPanel(pymoose::DiskPanel const &,std::string,Id &)\n""    pymoose::DiskPanel(pymoose::DiskPanel const &,std::string)\n""    pymoose::DiskPanel(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DiskPanel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DiskPanel *arg1 = (pymoose::DiskPanel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_DiskPanel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DiskPanel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DiskPanel" "', argument " "1"" of type '" "pymoose::DiskPanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DiskPanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DiskPanel_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DiskPanel *arg1 = (pymoose::DiskPanel *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DiskPanel_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DiskPanel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DiskPanel_getType" "', argument " "1"" of type '" "pymoose::DiskPanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DiskPanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *DiskPanel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__DiskPanel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_CylPanel_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable CylPanel_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_CylPanel_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::CylPanel::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_CylPanel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::CylPanel *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CylPanel",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylPanel" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CylPanel *)new pymoose::CylPanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CylPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylPanel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::CylPanel *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CylPanel",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CylPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CylPanel *)new pymoose::CylPanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CylPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylPanel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::CylPanel *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CylPanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CylPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CylPanel" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CylPanel *)new pymoose::CylPanel(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CylPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylPanel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::CylPanel *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CylPanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CylPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_CylPanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CylPanel *)new pymoose::CylPanel(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CylPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylPanel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CylPanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::CylPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CylPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__CylPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylPanel" "', argument " "1"" of type '" "pymoose::CylPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "1"" of type '" "pymoose::CylPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CylPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CylPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CylPanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CylPanel *)new pymoose::CylPanel((pymoose::CylPanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CylPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylPanel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CylPanel *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::CylPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CylPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__CylPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylPanel" "', argument " "1"" of type '" "pymoose::CylPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "1"" of type '" "pymoose::CylPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CylPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CylPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CylPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CylPanel *)new pymoose::CylPanel((pymoose::CylPanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CylPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylPanel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CylPanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::CylPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CylPanel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__CylPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylPanel" "', argument " "1"" of type '" "pymoose::CylPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "1"" of type '" "pymoose::CylPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CylPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CylPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CylPanel *)new pymoose::CylPanel((pymoose::CylPanel const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CylPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylPanel__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::CylPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_CylPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CylPanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_CylPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_CylPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_CylPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::CylPanel *)new pymoose::CylPanel((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__CylPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_CylPanel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_CylPanel__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_CylPanel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__CylPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_CylPanel__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_CylPanel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_CylPanel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__CylPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_CylPanel__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__CylPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_CylPanel__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_CylPanel__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_CylPanel'.\n  Possible C/C++ prototypes are:\n""    pymoose::CylPanel(Id)\n""    pymoose::CylPanel(std::string)\n""    pymoose::CylPanel(std::string,Id)\n""    pymoose::CylPanel(std::string,pymoose::PyMooseBase &)\n""    pymoose::CylPanel(pymoose::CylPanel const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::CylPanel(pymoose::CylPanel const &,std::string,Id &)\n""    pymoose::CylPanel(pymoose::CylPanel const &,std::string)\n""    pymoose::CylPanel(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CylPanel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CylPanel *arg1 = (pymoose::CylPanel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_CylPanel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CylPanel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CylPanel" "', argument " "1"" of type '" "pymoose::CylPanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CylPanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CylPanel_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::CylPanel *arg1 = (pymoose::CylPanel *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"CylPanel_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__CylPanel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CylPanel_getType" "', argument " "1"" of type '" "pymoose::CylPanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::CylPanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *CylPanel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__CylPanel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_HemispherePanel_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable HemispherePanel_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_HemispherePanel_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::HemispherePanel::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_HemispherePanel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::HemispherePanel *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HemispherePanel",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HemispherePanel *)new pymoose::HemispherePanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HemispherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HemispherePanel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::HemispherePanel *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HemispherePanel",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HemispherePanel *)new pymoose::HemispherePanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HemispherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HemispherePanel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::HemispherePanel *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HemispherePanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HemispherePanel" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HemispherePanel *)new pymoose::HemispherePanel(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HemispherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HemispherePanel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::HemispherePanel *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HemispherePanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_HemispherePanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HemispherePanel *)new pymoose::HemispherePanel(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HemispherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HemispherePanel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HemispherePanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::HemispherePanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HemispherePanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HemispherePanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "pymoose::HemispherePanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "pymoose::HemispherePanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HemispherePanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HemispherePanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HemispherePanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HemispherePanel *)new pymoose::HemispherePanel((pymoose::HemispherePanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HemispherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HemispherePanel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HemispherePanel *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::HemispherePanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HemispherePanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HemispherePanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "pymoose::HemispherePanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "pymoose::HemispherePanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HemispherePanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HemispherePanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HemispherePanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HemispherePanel *)new pymoose::HemispherePanel((pymoose::HemispherePanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HemispherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HemispherePanel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HemispherePanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::HemispherePanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HemispherePanel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__HemispherePanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "pymoose::HemispherePanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "pymoose::HemispherePanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HemispherePanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HemispherePanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HemispherePanel *)new pymoose::HemispherePanel((pymoose::HemispherePanel const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HemispherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HemispherePanel__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::HemispherePanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_HemispherePanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_HemispherePanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_HemispherePanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_HemispherePanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::HemispherePanel *)new pymoose::HemispherePanel((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__HemispherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_HemispherePanel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_HemispherePanel__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_HemispherePanel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HemispherePanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HemispherePanel__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HemispherePanel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_HemispherePanel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HemispherePanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HemispherePanel__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__HemispherePanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HemispherePanel__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_HemispherePanel__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_HemispherePanel'.\n  Possible C/C++ prototypes are:\n""    pymoose::HemispherePanel(Id)\n""    pymoose::HemispherePanel(std::string)\n""    pymoose::HemispherePanel(std::string,Id)\n""    pymoose::HemispherePanel(std::string,pymoose::PyMooseBase &)\n""    pymoose::HemispherePanel(pymoose::HemispherePanel const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::HemispherePanel(pymoose::HemispherePanel const &,std::string,Id &)\n""    pymoose::HemispherePanel(pymoose::HemispherePanel const &,std::string)\n""    pymoose::HemispherePanel(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_HemispherePanel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HemispherePanel *arg1 = (pymoose::HemispherePanel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_HemispherePanel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HemispherePanel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HemispherePanel" "', argument " "1"" of type '" "pymoose::HemispherePanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HemispherePanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_HemispherePanel_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::HemispherePanel *arg1 = (pymoose::HemispherePanel *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"HemispherePanel_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__HemispherePanel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HemispherePanel_getType" "', argument " "1"" of type '" "pymoose::HemispherePanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::HemispherePanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *HemispherePanel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__HemispherePanel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_SpherePanel_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SpherePanel_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SpherePanel_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::SpherePanel::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_SpherePanel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::SpherePanel *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpherePanel",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpherePanel" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpherePanel *)new pymoose::SpherePanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpherePanel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::SpherePanel *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpherePanel",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpherePanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpherePanel *)new pymoose::SpherePanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpherePanel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::SpherePanel *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpherePanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpherePanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpherePanel" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpherePanel *)new pymoose::SpherePanel(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpherePanel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::SpherePanel *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpherePanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpherePanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SpherePanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpherePanel *)new pymoose::SpherePanel(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpherePanel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpherePanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::SpherePanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpherePanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SpherePanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpherePanel" "', argument " "1"" of type '" "pymoose::SpherePanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "1"" of type '" "pymoose::SpherePanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpherePanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpherePanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpherePanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpherePanel *)new pymoose::SpherePanel((pymoose::SpherePanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpherePanel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpherePanel *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::SpherePanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpherePanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SpherePanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpherePanel" "', argument " "1"" of type '" "pymoose::SpherePanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "1"" of type '" "pymoose::SpherePanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpherePanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpherePanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpherePanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpherePanel *)new pymoose::SpherePanel((pymoose::SpherePanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpherePanel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpherePanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::SpherePanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpherePanel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SpherePanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpherePanel" "', argument " "1"" of type '" "pymoose::SpherePanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "1"" of type '" "pymoose::SpherePanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpherePanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpherePanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpherePanel *)new pymoose::SpherePanel((pymoose::SpherePanel const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpherePanel__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::SpherePanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SpherePanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SpherePanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SpherePanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SpherePanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SpherePanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SpherePanel *)new pymoose::SpherePanel((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SpherePanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SpherePanel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_SpherePanel__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_SpherePanel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SpherePanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SpherePanel__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SpherePanel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SpherePanel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SpherePanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SpherePanel__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SpherePanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SpherePanel__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SpherePanel__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SpherePanel'.\n  Possible C/C++ prototypes are:\n""    pymoose::SpherePanel(Id)\n""    pymoose::SpherePanel(std::string)\n""    pymoose::SpherePanel(std::string,Id)\n""    pymoose::SpherePanel(std::string,pymoose::PyMooseBase &)\n""    pymoose::SpherePanel(pymoose::SpherePanel const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::SpherePanel(pymoose::SpherePanel const &,std::string,Id &)\n""    pymoose::SpherePanel(pymoose::SpherePanel const &,std::string)\n""    pymoose::SpherePanel(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SpherePanel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpherePanel *arg1 = (pymoose::SpherePanel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_SpherePanel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpherePanel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SpherePanel" "', argument " "1"" of type '" "pymoose::SpherePanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpherePanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SpherePanel_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SpherePanel *arg1 = (pymoose::SpherePanel *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SpherePanel_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SpherePanel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SpherePanel_getType" "', argument " "1"" of type '" "pymoose::SpherePanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SpherePanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *SpherePanel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__SpherePanel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_TriPanel_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TriPanel_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TriPanel_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::TriPanel::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_TriPanel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::TriPanel *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TriPanel",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TriPanel" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TriPanel *)new pymoose::TriPanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TriPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TriPanel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::TriPanel *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TriPanel",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TriPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TriPanel *)new pymoose::TriPanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TriPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TriPanel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::TriPanel *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TriPanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TriPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TriPanel" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TriPanel *)new pymoose::TriPanel(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TriPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TriPanel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::TriPanel *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TriPanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TriPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TriPanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TriPanel *)new pymoose::TriPanel(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TriPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TriPanel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TriPanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::TriPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TriPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__TriPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TriPanel" "', argument " "1"" of type '" "pymoose::TriPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "1"" of type '" "pymoose::TriPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TriPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TriPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TriPanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TriPanel *)new pymoose::TriPanel((pymoose::TriPanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TriPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TriPanel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TriPanel *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::TriPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TriPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__TriPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TriPanel" "', argument " "1"" of type '" "pymoose::TriPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "1"" of type '" "pymoose::TriPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TriPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TriPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TriPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TriPanel *)new pymoose::TriPanel((pymoose::TriPanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TriPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TriPanel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TriPanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::TriPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TriPanel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__TriPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TriPanel" "', argument " "1"" of type '" "pymoose::TriPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "1"" of type '" "pymoose::TriPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TriPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TriPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TriPanel *)new pymoose::TriPanel((pymoose::TriPanel const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TriPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TriPanel__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::TriPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TriPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TriPanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TriPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TriPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TriPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TriPanel *)new pymoose::TriPanel((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TriPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TriPanel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_TriPanel__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_TriPanel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__TriPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_TriPanel__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_TriPanel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_TriPanel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__TriPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_TriPanel__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__TriPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_TriPanel__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_TriPanel__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_TriPanel'.\n  Possible C/C++ prototypes are:\n""    pymoose::TriPanel(Id)\n""    pymoose::TriPanel(std::string)\n""    pymoose::TriPanel(std::string,Id)\n""    pymoose::TriPanel(std::string,pymoose::PyMooseBase &)\n""    pymoose::TriPanel(pymoose::TriPanel const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::TriPanel(pymoose::TriPanel const &,std::string,Id &)\n""    pymoose::TriPanel(pymoose::TriPanel const &,std::string)\n""    pymoose::TriPanel(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TriPanel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TriPanel *arg1 = (pymoose::TriPanel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_TriPanel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TriPanel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TriPanel" "', argument " "1"" of type '" "pymoose::TriPanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TriPanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TriPanel_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TriPanel *arg1 = (pymoose::TriPanel *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TriPanel_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TriPanel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TriPanel_getType" "', argument " "1"" of type '" "pymoose::TriPanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TriPanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *TriPanel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__TriPanel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_RectPanel_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RectPanel_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RectPanel_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::RectPanel::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_RectPanel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::RectPanel *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RectPanel",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RectPanel" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RectPanel *)new pymoose::RectPanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RectPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectPanel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::RectPanel *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RectPanel",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RectPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RectPanel *)new pymoose::RectPanel(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RectPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectPanel__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::RectPanel *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RectPanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RectPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RectPanel" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RectPanel *)new pymoose::RectPanel(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RectPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectPanel__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::RectPanel *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RectPanel",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RectPanel" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_RectPanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RectPanel *)new pymoose::RectPanel(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RectPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectPanel__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RectPanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::RectPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RectPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__RectPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RectPanel" "', argument " "1"" of type '" "pymoose::RectPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "1"" of type '" "pymoose::RectPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RectPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RectPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RectPanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RectPanel *)new pymoose::RectPanel((pymoose::RectPanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RectPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectPanel__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RectPanel *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::RectPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RectPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__RectPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RectPanel" "', argument " "1"" of type '" "pymoose::RectPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "1"" of type '" "pymoose::RectPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RectPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RectPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RectPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RectPanel *)new pymoose::RectPanel((pymoose::RectPanel const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RectPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectPanel__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RectPanel *arg1 = 0 ;
  std::string arg2 ;
  pymoose::RectPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RectPanel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__RectPanel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RectPanel" "', argument " "1"" of type '" "pymoose::RectPanel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "1"" of type '" "pymoose::RectPanel const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RectPanel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RectPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RectPanel *)new pymoose::RectPanel((pymoose::RectPanel const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RectPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectPanel__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::RectPanel *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_RectPanel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RectPanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RectPanel" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_RectPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RectPanel" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::RectPanel *)new pymoose::RectPanel((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__RectPanel, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RectPanel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_RectPanel__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_RectPanel__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__RectPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_RectPanel__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_RectPanel__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_RectPanel__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__RectPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RectPanel__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__RectPanel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RectPanel__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_RectPanel__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_RectPanel'.\n  Possible C/C++ prototypes are:\n""    pymoose::RectPanel(Id)\n""    pymoose::RectPanel(std::string)\n""    pymoose::RectPanel(std::string,Id)\n""    pymoose::RectPanel(std::string,pymoose::PyMooseBase &)\n""    pymoose::RectPanel(pymoose::RectPanel const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::RectPanel(pymoose::RectPanel const &,std::string,Id &)\n""    pymoose::RectPanel(pymoose::RectPanel const &,std::string)\n""    pymoose::RectPanel(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RectPanel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RectPanel *arg1 = (pymoose::RectPanel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_RectPanel",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RectPanel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RectPanel" "', argument " "1"" of type '" "pymoose::RectPanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RectPanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RectPanel_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::RectPanel *arg1 = (pymoose::RectPanel *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"RectPanel_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__RectPanel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RectPanel_getType" "', argument " "1"" of type '" "pymoose::RectPanel *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::RectPanel * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *RectPanel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__RectPanel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Surface_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Surface_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Surface_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Surface::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Surface__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Surface *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Surface",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Surface" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Surface *)new pymoose::Surface(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Surface, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Surface__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Surface *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Surface",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Surface" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Surface *)new pymoose::Surface(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Surface, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Surface__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Surface *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Surface",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Surface" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Surface" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Surface *)new pymoose::Surface(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Surface, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Surface__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Surface *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Surface",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Surface" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Surface" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Surface *)new pymoose::Surface(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Surface, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Surface__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Surface *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Surface *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Surface",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Surface,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Surface" "', argument " "1"" of type '" "pymoose::Surface const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "1"" of type '" "pymoose::Surface const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Surface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Surface" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Surface" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Surface *)new pymoose::Surface((pymoose::Surface const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Surface, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Surface__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Surface *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Surface *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Surface",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Surface,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Surface" "', argument " "1"" of type '" "pymoose::Surface const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "1"" of type '" "pymoose::Surface const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Surface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Surface" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Surface" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Surface *)new pymoose::Surface((pymoose::Surface const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Surface, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Surface__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Surface *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Surface *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Surface",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Surface,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Surface" "', argument " "1"" of type '" "pymoose::Surface const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "1"" of type '" "pymoose::Surface const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Surface * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Surface" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Surface *)new pymoose::Surface((pymoose::Surface const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Surface, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Surface__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Surface *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Surface",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Surface" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Surface" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Surface" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Surface" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Surface *)new pymoose::Surface((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Surface, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Surface(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Surface__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Surface__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Surface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Surface__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Surface__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Surface__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Surface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Surface__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Surface, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Surface__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Surface__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Surface'.\n  Possible C/C++ prototypes are:\n""    pymoose::Surface(Id)\n""    pymoose::Surface(std::string)\n""    pymoose::Surface(std::string,Id)\n""    pymoose::Surface(std::string,pymoose::PyMooseBase &)\n""    pymoose::Surface(pymoose::Surface const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Surface(pymoose::Surface const &,std::string,Id &)\n""    pymoose::Surface(pymoose::Surface const &,std::string)\n""    pymoose::Surface(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Surface(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Surface *arg1 = (pymoose::Surface *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Surface",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Surface, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Surface" "', argument " "1"" of type '" "pymoose::Surface *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Surface * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Surface *arg1 = (pymoose::Surface *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Surface_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_getType" "', argument " "1"" of type '" "pymoose::Surface *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Surface * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface___get_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Surface *arg1 = (pymoose::Surface *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Surface___get_volume",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface___get_volume" "', argument " "1"" of type '" "pymoose::Surface const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Surface * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Surface const *)arg1)->__get_volume();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Surface_volume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Surface *arg1 = (pymoose::Surface *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Surface_volume_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Surface, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Surface_volume_get" "', argument " "1"" of type '" "pymoose::Surface *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Surface * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Surface_volume_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Surface_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Surface, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Geometry_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Geometry_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Geometry_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Geometry::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Geometry *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Geometry",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Geometry" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Geometry *)new pymoose::Geometry(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Geometry, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Geometry *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Geometry",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Geometry" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Geometry *)new pymoose::Geometry(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Geometry, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Geometry *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Geometry",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Geometry" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Geometry" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Geometry *)new pymoose::Geometry(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Geometry, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Geometry *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Geometry",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Geometry" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Geometry" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Geometry *)new pymoose::Geometry(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Geometry, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Geometry *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Geometry",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Geometry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Geometry" "', argument " "1"" of type '" "pymoose::Geometry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "1"" of type '" "pymoose::Geometry const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Geometry" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Geometry" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Geometry *)new pymoose::Geometry((pymoose::Geometry const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Geometry, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Geometry *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Geometry",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Geometry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Geometry" "', argument " "1"" of type '" "pymoose::Geometry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "1"" of type '" "pymoose::Geometry const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Geometry" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Geometry" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Geometry *)new pymoose::Geometry((pymoose::Geometry const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Geometry, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Geometry *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Geometry",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Geometry,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Geometry" "', argument " "1"" of type '" "pymoose::Geometry const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "1"" of type '" "pymoose::Geometry const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Geometry" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Geometry *)new pymoose::Geometry((pymoose::Geometry const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Geometry, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Geometry *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Geometry",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Geometry" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Geometry" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Geometry" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Geometry" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Geometry *)new pymoose::Geometry((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Geometry, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Geometry(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Geometry__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Geometry__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Geometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Geometry__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Geometry__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Geometry__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Geometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Geometry__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Geometry, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Geometry__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Geometry__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Geometry'.\n  Possible C/C++ prototypes are:\n""    pymoose::Geometry(Id)\n""    pymoose::Geometry(std::string)\n""    pymoose::Geometry(std::string,Id)\n""    pymoose::Geometry(std::string,pymoose::PyMooseBase &)\n""    pymoose::Geometry(pymoose::Geometry const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Geometry(pymoose::Geometry const &,std::string,Id &)\n""    pymoose::Geometry(pymoose::Geometry const &,std::string)\n""    pymoose::Geometry(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Geometry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Geometry",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Geometry" "', argument " "1"" of type '" "pymoose::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Geometry_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_getType" "', argument " "1"" of type '" "pymoose::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry___get_epsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Geometry___get_epsilon",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry___get_epsilon" "', argument " "1"" of type '" "pymoose::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Geometry const *)arg1)->__get_epsilon();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry___set_epsilon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Geometry___set_epsilon",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry___set_epsilon" "', argument " "1"" of type '" "pymoose::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry___set_epsilon" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_epsilon(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry___get_neighdist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Geometry___get_neighdist",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry___get_neighdist" "', argument " "1"" of type '" "pymoose::Geometry const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Geometry const *)arg1)->__get_neighdist();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry___set_neighdist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Geometry___set_neighdist",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry___set_neighdist" "', argument " "1"" of type '" "pymoose::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry___set_neighdist" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_neighdist(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_epsilon_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Geometry_epsilon_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_epsilon_set" "', argument " "1"" of type '" "pymoose::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry_epsilon_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Geometry_epsilon_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_epsilon_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Geometry_epsilon_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_epsilon_get" "', argument " "1"" of type '" "pymoose::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Geometry_epsilon_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_neighdist_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Geometry_neighdist_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_neighdist_set" "', argument " "1"" of type '" "pymoose::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Geometry_neighdist_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Geometry_neighdist_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Geometry_neighdist_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Geometry *arg1 = (pymoose::Geometry *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Geometry_neighdist_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Geometry, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Geometry_neighdist_get" "', argument " "1"" of type '" "pymoose::Geometry *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Geometry * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Geometry_neighdist_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Geometry_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Geometry, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_Adaptor_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable Adaptor_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_Adaptor_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::Adaptor::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_Adaptor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::Adaptor *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Adaptor",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Adaptor" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Adaptor *)new pymoose::Adaptor(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Adaptor, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Adaptor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::Adaptor *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Adaptor",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Adaptor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Adaptor *)new pymoose::Adaptor(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Adaptor, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Adaptor__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::Adaptor *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Adaptor",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Adaptor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Adaptor" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Adaptor *)new pymoose::Adaptor(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Adaptor, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Adaptor__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::Adaptor *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Adaptor",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Adaptor" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Adaptor" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Adaptor *)new pymoose::Adaptor(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Adaptor, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Adaptor__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::Adaptor *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Adaptor",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Adaptor,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Adaptor" "', argument " "1"" of type '" "pymoose::Adaptor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "1"" of type '" "pymoose::Adaptor const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Adaptor" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Adaptor" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Adaptor *)new pymoose::Adaptor((pymoose::Adaptor const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Adaptor, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Adaptor__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Adaptor *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Adaptor",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Adaptor,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Adaptor" "', argument " "1"" of type '" "pymoose::Adaptor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "1"" of type '" "pymoose::Adaptor const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Adaptor" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Adaptor" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Adaptor *)new pymoose::Adaptor((pymoose::Adaptor const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Adaptor, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Adaptor__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = 0 ;
  std::string arg2 ;
  pymoose::Adaptor *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Adaptor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__Adaptor,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Adaptor" "', argument " "1"" of type '" "pymoose::Adaptor const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "1"" of type '" "pymoose::Adaptor const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Adaptor" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Adaptor *)new pymoose::Adaptor((pymoose::Adaptor const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Adaptor, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Adaptor__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::Adaptor *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_Adaptor",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Adaptor" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_Adaptor" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_Adaptor" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Adaptor" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::Adaptor *)new pymoose::Adaptor((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__Adaptor, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Adaptor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Adaptor__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_Adaptor__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Adaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Adaptor__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Adaptor__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_Adaptor__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Adaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Adaptor__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__Adaptor, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Adaptor__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_Adaptor__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_Adaptor'.\n  Possible C/C++ prototypes are:\n""    pymoose::Adaptor(Id)\n""    pymoose::Adaptor(std::string)\n""    pymoose::Adaptor(std::string,Id)\n""    pymoose::Adaptor(std::string,pymoose::PyMooseBase &)\n""    pymoose::Adaptor(pymoose::Adaptor const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::Adaptor(pymoose::Adaptor const &,std::string,Id &)\n""    pymoose::Adaptor(pymoose::Adaptor const &,std::string)\n""    pymoose::Adaptor(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Adaptor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_Adaptor",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Adaptor" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor_getType" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor___get_inputOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor___get_inputOffset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor___get_inputOffset" "', argument " "1"" of type '" "pymoose::Adaptor const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Adaptor const *)arg1)->__get_inputOffset();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor___set_inputOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor___set_inputOffset",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor___set_inputOffset" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Adaptor___set_inputOffset" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_inputOffset(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor___get_outputOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor___get_outputOffset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor___get_outputOffset" "', argument " "1"" of type '" "pymoose::Adaptor const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Adaptor const *)arg1)->__get_outputOffset();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor___set_outputOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor___set_outputOffset",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor___set_outputOffset" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Adaptor___set_outputOffset" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_outputOffset(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor___get_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor___get_scale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor___get_scale" "', argument " "1"" of type '" "pymoose::Adaptor const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Adaptor const *)arg1)->__get_scale();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor___set_scale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor___set_scale",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor___set_scale" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Adaptor___set_scale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_scale(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor___get_output(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor___get_output",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor___get_output" "', argument " "1"" of type '" "pymoose::Adaptor const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::Adaptor const *)arg1)->__get_output();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor_inputOffset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor_inputOffset_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor_inputOffset_set" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Adaptor_inputOffset_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Adaptor_inputOffset_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor_inputOffset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor_inputOffset_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor_inputOffset_get" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Adaptor_inputOffset_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor_outputOffset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor_outputOffset_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor_outputOffset_set" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Adaptor_outputOffset_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Adaptor_outputOffset_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor_outputOffset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor_outputOffset_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor_outputOffset_get" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Adaptor_outputOffset_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor_scale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor_scale_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor_scale_set" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Adaptor_scale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_Adaptor_scale_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor_scale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor_scale_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor_scale_get" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Adaptor_scale_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Adaptor_output_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::Adaptor *arg1 = (pymoose::Adaptor *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"Adaptor_output_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__Adaptor, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Adaptor_output_get" "', argument " "1"" of type '" "pymoose::Adaptor *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::Adaptor * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_Adaptor_output_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *Adaptor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__Adaptor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_SigNeur_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SigNeur_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SigNeur_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::SigNeur::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_SigNeur__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::SigNeur *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SigNeur",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SigNeur" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SigNeur *)new pymoose::SigNeur(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SigNeur, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SigNeur__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::SigNeur *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SigNeur",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SigNeur" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SigNeur *)new pymoose::SigNeur(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SigNeur, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SigNeur__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::SigNeur *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SigNeur",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SigNeur" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SigNeur" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SigNeur *)new pymoose::SigNeur(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SigNeur, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SigNeur__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::SigNeur *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SigNeur",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SigNeur" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SigNeur" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SigNeur *)new pymoose::SigNeur(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SigNeur, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SigNeur__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::SigNeur *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SigNeur",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SigNeur,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SigNeur" "', argument " "1"" of type '" "pymoose::SigNeur const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "1"" of type '" "pymoose::SigNeur const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SigNeur" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SigNeur" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SigNeur *)new pymoose::SigNeur((pymoose::SigNeur const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SigNeur, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SigNeur__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::SigNeur *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SigNeur",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SigNeur,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SigNeur" "', argument " "1"" of type '" "pymoose::SigNeur const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "1"" of type '" "pymoose::SigNeur const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SigNeur" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SigNeur" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SigNeur *)new pymoose::SigNeur((pymoose::SigNeur const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SigNeur, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SigNeur__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = 0 ;
  std::string arg2 ;
  pymoose::SigNeur *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SigNeur",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__SigNeur,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SigNeur" "', argument " "1"" of type '" "pymoose::SigNeur const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "1"" of type '" "pymoose::SigNeur const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SigNeur" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SigNeur *)new pymoose::SigNeur((pymoose::SigNeur const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SigNeur, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SigNeur__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::SigNeur *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_SigNeur",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SigNeur" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_SigNeur" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SigNeur" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SigNeur" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::SigNeur *)new pymoose::SigNeur((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__SigNeur, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SigNeur(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_SigNeur__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_SigNeur__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SigNeur, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SigNeur__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SigNeur__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_SigNeur__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SigNeur, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SigNeur__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__SigNeur, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SigNeur__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_SigNeur__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_SigNeur'.\n  Possible C/C++ prototypes are:\n""    pymoose::SigNeur(Id)\n""    pymoose::SigNeur(std::string)\n""    pymoose::SigNeur(std::string,Id)\n""    pymoose::SigNeur(std::string,pymoose::PyMooseBase &)\n""    pymoose::SigNeur(pymoose::SigNeur const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::SigNeur(pymoose::SigNeur const &,std::string,Id &)\n""    pymoose::SigNeur(pymoose::SigNeur const &,std::string)\n""    pymoose::SigNeur(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SigNeur(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_SigNeur",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SigNeur" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_getType" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_cellProto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_cellProto",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_cellProto" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = ((pymoose::SigNeur const *)arg1)->__get_cellProto();
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_cellProto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_cellProto",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_cellProto" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur___set_cellProto" "', argument " "2"" of type '" "Id &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur___set_cellProto" "', argument " "2"" of type '" "Id &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_cellProto(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_spineProto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_spineProto",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_spineProto" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = ((pymoose::SigNeur const *)arg1)->__get_spineProto();
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_spineProto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_spineProto",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_spineProto" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur___set_spineProto" "', argument " "2"" of type '" "Id &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur___set_spineProto" "', argument " "2"" of type '" "Id &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_spineProto(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_dendProto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_dendProto",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_dendProto" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = ((pymoose::SigNeur const *)arg1)->__get_dendProto();
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_dendProto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_dendProto",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_dendProto" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur___set_dendProto" "', argument " "2"" of type '" "Id &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur___set_dendProto" "', argument " "2"" of type '" "Id &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_dendProto(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_somaProto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_somaProto",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_somaProto" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = ((pymoose::SigNeur const *)arg1)->__get_somaProto();
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_somaProto(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_somaProto",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_somaProto" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur___set_somaProto" "', argument " "2"" of type '" "Id &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur___set_somaProto" "', argument " "2"" of type '" "Id &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_somaProto(*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_cell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_cell",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_cell" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = ((pymoose::SigNeur const *)arg1)->__get_cell();
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_spine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_spine",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_spine" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = ((pymoose::SigNeur const *)arg1)->__get_spine();
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_dend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_dend",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_dend" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = ((pymoose::SigNeur const *)arg1)->__get_dend();
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_soma(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_soma",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_soma" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = ((pymoose::SigNeur const *)arg1)->__get_soma();
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_cellMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_cellMethod",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_cellMethod" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::SigNeur const *)arg1)->__get_cellMethod();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_cellMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_cellMethod",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_cellMethod" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SigNeur___set_cellMethod" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_cellMethod(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_spineMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_spineMethod",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_spineMethod" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::SigNeur const *)arg1)->__get_spineMethod();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_spineMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_spineMethod",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_spineMethod" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SigNeur___set_spineMethod" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_spineMethod(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_dendMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_dendMethod",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_dendMethod" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::SigNeur const *)arg1)->__get_dendMethod();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_dendMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_dendMethod",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_dendMethod" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SigNeur___set_dendMethod" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_dendMethod(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_somaMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_somaMethod",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_somaMethod" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::SigNeur const *)arg1)->__get_somaMethod();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_somaMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_somaMethod",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_somaMethod" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SigNeur___set_somaMethod" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_somaMethod(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_sigDt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_sigDt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_sigDt" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SigNeur const *)arg1)->__get_sigDt();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_sigDt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_sigDt",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_sigDt" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur___set_sigDt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_sigDt(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_cellDt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_cellDt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_cellDt" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SigNeur const *)arg1)->__get_cellDt();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_cellDt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_cellDt",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_cellDt" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur___set_cellDt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_cellDt(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_Dscale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_Dscale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_Dscale" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SigNeur const *)arg1)->__get_Dscale();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_Dscale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_Dscale",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_Dscale" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur___set_Dscale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Dscale(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_lambda(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_lambda",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_lambda" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SigNeur const *)arg1)->__get_lambda();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_lambda(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_lambda",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_lambda" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur___set_lambda" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_lambda(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_parallelMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_parallelMode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_parallelMode" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::SigNeur const *)arg1)->__get_parallelMode();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_parallelMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_parallelMode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_parallelMode" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur___set_parallelMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_parallelMode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_updateStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_updateStep",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_updateStep" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SigNeur const *)arg1)->__get_updateStep();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_updateStep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_updateStep",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_updateStep" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur___set_updateStep" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_updateStep(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_calciumScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_calciumScale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_calciumScale" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::SigNeur const *)arg1)->__get_calciumScale();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_calciumScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_calciumScale",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_calciumScale" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur___set_calciumScale" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_calciumScale(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_dendInclude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_dendInclude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_dendInclude" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::SigNeur const *)arg1)->__get_dendInclude();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_dendInclude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_dendInclude",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_dendInclude" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SigNeur___set_dendInclude" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_dendInclude(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___get_dendExclude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___get_dendExclude",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___get_dendExclude" "', argument " "1"" of type '" "pymoose::SigNeur const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::SigNeur const *)arg1)->__get_dendExclude();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur___set_dendExclude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur___set_dendExclude",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur___set_dendExclude" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "SigNeur___set_dendExclude" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_dendExclude(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_cellProto_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_cellProto_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_cellProto_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_cellProto_set" "', argument " "2"" of type '" "Id &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_cellProto_set" "', argument " "2"" of type '" "Id &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_cellProto_set(arg1,*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_cellProto_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_cellProto_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_cellProto_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = pymoose_SigNeur_cellProto_get(arg1);
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_spineProto_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_spineProto_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_spineProto_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_spineProto_set" "', argument " "2"" of type '" "Id &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_spineProto_set" "', argument " "2"" of type '" "Id &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_spineProto_set(arg1,*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_spineProto_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_spineProto_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_spineProto_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = pymoose_SigNeur_spineProto_get(arg1);
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_dendProto_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_dendProto_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_dendProto_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_dendProto_set" "', argument " "2"" of type '" "Id &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_dendProto_set" "', argument " "2"" of type '" "Id &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_dendProto_set(arg1,*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_dendProto_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_dendProto_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_dendProto_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = pymoose_SigNeur_dendProto_get(arg1);
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_somaProto_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_somaProto_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_somaProto_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_somaProto_set" "', argument " "2"" of type '" "Id &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_somaProto_set" "', argument " "2"" of type '" "Id &""'"); 
  }
  arg2 = reinterpret_cast< Id * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_somaProto_set(arg1,*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_somaProto_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_somaProto_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_somaProto_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = pymoose_SigNeur_somaProto_get(arg1);
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_cell_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_cell_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_cell_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = pymoose_SigNeur_cell_get(arg1);
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_spine_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_spine_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_spine_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = pymoose_SigNeur_spine_get(arg1);
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_dend_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_dend_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_dend_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = pymoose_SigNeur_dend_get(arg1);
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_soma_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  Id *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_soma_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_soma_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      Id &_result_ref = pymoose_SigNeur_soma_get(arg1);
      result = (Id *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Id, 0 |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_cellMethod_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_cellMethod_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_cellMethod_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_cellMethod_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_cellMethod_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_cellMethod_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_cellMethod_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_cellMethod_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_cellMethod_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_SigNeur_cellMethod_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_spineMethod_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_spineMethod_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_spineMethod_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_spineMethod_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_spineMethod_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_spineMethod_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_spineMethod_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_spineMethod_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_spineMethod_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_SigNeur_spineMethod_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_dendMethod_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_dendMethod_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_dendMethod_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_dendMethod_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_dendMethod_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_dendMethod_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_dendMethod_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_dendMethod_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_dendMethod_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_SigNeur_dendMethod_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_somaMethod_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_somaMethod_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_somaMethod_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_somaMethod_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_somaMethod_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_somaMethod_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_somaMethod_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_somaMethod_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_somaMethod_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_SigNeur_somaMethod_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_sigDt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_sigDt_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_sigDt_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur_sigDt_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_sigDt_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_sigDt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_sigDt_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_sigDt_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SigNeur_sigDt_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_cellDt_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_cellDt_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_cellDt_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur_cellDt_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_cellDt_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_cellDt_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_cellDt_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_cellDt_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SigNeur_cellDt_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_Dscale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_Dscale_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_Dscale_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur_Dscale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_Dscale_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_Dscale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_Dscale_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_Dscale_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SigNeur_Dscale_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_lambda__set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_lambda__set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_lambda__set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur_lambda__set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_lambda__set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_lambda__get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_lambda__get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_lambda__get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SigNeur_lambda__get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_parallelMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_parallelMode_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_parallelMode_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur_parallelMode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_parallelMode_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_parallelMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_parallelMode_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_parallelMode_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_SigNeur_parallelMode_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_updateStep_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_updateStep_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_updateStep_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur_updateStep_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_updateStep_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_updateStep_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_updateStep_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_updateStep_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SigNeur_updateStep_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_calciumScale_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_calciumScale_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_calciumScale_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SigNeur_calciumScale_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_calciumScale_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_calciumScale_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_calciumScale_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_calciumScale_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_SigNeur_calciumScale_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_dendInclude_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_dendInclude_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_dendInclude_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_dendInclude_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_dendInclude_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_dendInclude_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_dendInclude_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_dendInclude_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_dendInclude_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_SigNeur_dendInclude_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_dendExclude_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_dendExclude_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_dendExclude_set" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SigNeur_dendExclude_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SigNeur_dendExclude_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_SigNeur_dendExclude_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SigNeur_dendExclude_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::SigNeur *arg1 = (pymoose::SigNeur *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"SigNeur_dendExclude_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__SigNeur, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SigNeur_dendExclude_get" "', argument " "1"" of type '" "pymoose::SigNeur *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::SigNeur * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_SigNeur_dendExclude_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *SigNeur_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__SigNeur, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_AscFile_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable AscFile_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_AscFile_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::AscFile::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_AscFile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::AscFile *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_AscFile",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AscFile" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::AscFile *)new pymoose::AscFile(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__AscFile, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AscFile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::AscFile *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_AscFile",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AscFile" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::AscFile *)new pymoose::AscFile(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__AscFile, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AscFile__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::AscFile *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_AscFile",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AscFile" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AscFile" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::AscFile *)new pymoose::AscFile(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__AscFile, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AscFile__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::AscFile *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_AscFile",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AscFile" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_AscFile" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::AscFile *)new pymoose::AscFile(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__AscFile, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AscFile__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::AscFile *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_AscFile",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__AscFile,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AscFile" "', argument " "1"" of type '" "pymoose::AscFile const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "1"" of type '" "pymoose::AscFile const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AscFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_AscFile" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::AscFile *)new pymoose::AscFile((pymoose::AscFile const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__AscFile, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AscFile__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::AscFile *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_AscFile",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__AscFile,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AscFile" "', argument " "1"" of type '" "pymoose::AscFile const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "1"" of type '" "pymoose::AscFile const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AscFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_AscFile" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::AscFile *)new pymoose::AscFile((pymoose::AscFile const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__AscFile, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AscFile__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = 0 ;
  std::string arg2 ;
  pymoose::AscFile *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_AscFile",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__AscFile,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AscFile" "', argument " "1"" of type '" "pymoose::AscFile const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "1"" of type '" "pymoose::AscFile const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AscFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::AscFile *)new pymoose::AscFile((pymoose::AscFile const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__AscFile, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AscFile__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::AscFile *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_AscFile",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AscFile" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_AscFile" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_AscFile" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_AscFile" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::AscFile *)new pymoose::AscFile((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__AscFile, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_AscFile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_AscFile__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_AscFile__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__AscFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_AscFile__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_AscFile__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_AscFile__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__AscFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_AscFile__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__AscFile, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_AscFile__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_AscFile__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_AscFile'.\n  Possible C/C++ prototypes are:\n""    pymoose::AscFile(Id)\n""    pymoose::AscFile(std::string)\n""    pymoose::AscFile(std::string,Id)\n""    pymoose::AscFile(std::string,pymoose::PyMooseBase &)\n""    pymoose::AscFile(pymoose::AscFile const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::AscFile(pymoose::AscFile const &,std::string,Id &)\n""    pymoose::AscFile(pymoose::AscFile const &,std::string)\n""    pymoose::AscFile(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AscFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_AscFile",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AscFile" "', argument " "1"" of type '" "pymoose::AscFile *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AscFile_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"AscFile_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AscFile_getType" "', argument " "1"" of type '" "pymoose::AscFile *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AscFile___get_fileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"AscFile___get_fileName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AscFile___get_fileName" "', argument " "1"" of type '" "pymoose::AscFile const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::AscFile const *)arg1)->__get_fileName();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AscFile___set_fileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"AscFile___set_fileName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AscFile___set_fileName" "', argument " "1"" of type '" "pymoose::AscFile *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "AscFile___set_fileName" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_fileName(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AscFile___get_appendFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"AscFile___get_appendFlag",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AscFile___get_appendFlag" "', argument " "1"" of type '" "pymoose::AscFile const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)((pymoose::AscFile const *)arg1)->__get_appendFlag();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AscFile___set_appendFlag(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"AscFile___set_appendFlag",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AscFile___set_appendFlag" "', argument " "1"" of type '" "pymoose::AscFile *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AscFile___set_appendFlag" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_appendFlag(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AscFile_fileName_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"AscFile_fileName_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AscFile_fileName_set" "', argument " "1"" of type '" "pymoose::AscFile *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AscFile_fileName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AscFile_fileName_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_AscFile_fileName_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AscFile_fileName_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"AscFile_fileName_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AscFile_fileName_get" "', argument " "1"" of type '" "pymoose::AscFile *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_AscFile_fileName_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AscFile_appendFlag_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"AscFile_appendFlag_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AscFile_appendFlag_set" "', argument " "1"" of type '" "pymoose::AscFile *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "AscFile_appendFlag_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_AscFile_appendFlag_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AscFile_appendFlag_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::AscFile *arg1 = (pymoose::AscFile *) 0 ;
  int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"AscFile_appendFlag_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__AscFile, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AscFile_appendFlag_get" "', argument " "1"" of type '" "pymoose::AscFile *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::AscFile * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (int)pymoose_AscFile_appendFlag_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *AscFile_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__AscFile, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DifShell_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DifShell_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DifShell_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::DifShell::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_DifShell__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::DifShell *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DifShell",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DifShell" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DifShell *)new pymoose::DifShell(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DifShell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DifShell__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::DifShell *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DifShell",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DifShell" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DifShell *)new pymoose::DifShell(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DifShell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DifShell__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::DifShell *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DifShell",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DifShell" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DifShell" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DifShell *)new pymoose::DifShell(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DifShell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DifShell__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::DifShell *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DifShell",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DifShell" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DifShell" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DifShell *)new pymoose::DifShell(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DifShell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DifShell__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::DifShell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DifShell",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__DifShell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DifShell" "', argument " "1"" of type '" "pymoose::DifShell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "1"" of type '" "pymoose::DifShell const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DifShell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DifShell" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DifShell *)new pymoose::DifShell((pymoose::DifShell const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DifShell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DifShell__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::DifShell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DifShell",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__DifShell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DifShell" "', argument " "1"" of type '" "pymoose::DifShell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "1"" of type '" "pymoose::DifShell const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DifShell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DifShell" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DifShell *)new pymoose::DifShell((pymoose::DifShell const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DifShell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DifShell__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = 0 ;
  std::string arg2 ;
  pymoose::DifShell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DifShell",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__DifShell,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DifShell" "', argument " "1"" of type '" "pymoose::DifShell const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "1"" of type '" "pymoose::DifShell const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DifShell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DifShell *)new pymoose::DifShell((pymoose::DifShell const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DifShell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DifShell__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::DifShell *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_DifShell",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DifShell" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DifShell" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_DifShell" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DifShell" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::DifShell *)new pymoose::DifShell((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__DifShell, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DifShell(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_DifShell__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_DifShell__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__DifShell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_DifShell__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_DifShell__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_DifShell__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__DifShell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_DifShell__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__DifShell, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_DifShell__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_DifShell__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_DifShell'.\n  Possible C/C++ prototypes are:\n""    pymoose::DifShell(Id)\n""    pymoose::DifShell(std::string)\n""    pymoose::DifShell(std::string,Id)\n""    pymoose::DifShell(std::string,pymoose::PyMooseBase &)\n""    pymoose::DifShell(pymoose::DifShell const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::DifShell(pymoose::DifShell const &,std::string,Id &)\n""    pymoose::DifShell(pymoose::DifShell const &,std::string)\n""    pymoose::DifShell(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DifShell(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_DifShell",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DifShell" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_getType" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_C(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_C",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_C" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_C();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_Ceq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_Ceq",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_Ceq" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_Ceq();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_Ceq(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_Ceq",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_Ceq" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_Ceq" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_Ceq(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_D",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_D" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_D();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_D",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_D" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_D" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_D(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_valence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_valence",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_valence" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_valence();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_valence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_valence",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_valence" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_valence" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_valence(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_leak(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_leak",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_leak" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_leak();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_leak(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_leak",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_leak" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_leak" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_leak(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_shapeMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_shapeMode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_shapeMode" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::DifShell const *)arg1)->__get_shapeMode();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_shapeMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_shapeMode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_shapeMode" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_shapeMode" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_shapeMode(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_length",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_length" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_length();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_length(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_length",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_length" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_length" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_length(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_diameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_diameter",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_diameter" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_diameter();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_diameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_diameter",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_diameter" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_diameter" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_diameter(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_thickness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_thickness",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_thickness" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_thickness();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_thickness(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_thickness",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_thickness" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_thickness" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_thickness(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_volume",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_volume" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_volume();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_volume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_volume",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_volume" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_volume" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_volume(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_outerArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_outerArea",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_outerArea" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_outerArea();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_outerArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_outerArea",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_outerArea" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_outerArea" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_outerArea(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___get_innerArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___get_innerArea",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___get_innerArea" "', argument " "1"" of type '" "pymoose::DifShell const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::DifShell const *)arg1)->__get_innerArea();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell___set_innerArea(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell___set_innerArea",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell___set_innerArea" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell___set_innerArea" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_innerArea(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_C_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_C_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_C_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_C_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_Ceq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_Ceq_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_Ceq_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_Ceq_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_Ceq_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_Ceq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_Ceq_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_Ceq_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_Ceq_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_D_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_D_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_D_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_D_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_D_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_D_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_D_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_D_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_D_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_valence_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_valence_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_valence_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_valence_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_valence_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_valence_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_valence_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_valence_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_valence_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_leak_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_leak_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_leak_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_leak_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_leak_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_leak_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_leak_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_leak_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_leak_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_shapeMode_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_shapeMode_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_shapeMode_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_shapeMode_set" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_shapeMode_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_shapeMode_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_shapeMode_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_shapeMode_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_DifShell_shapeMode_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_length_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_length_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_length_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_length_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_length_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_length_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_length_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_length_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_length_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_diameter_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_diameter_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_diameter_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_diameter_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_diameter_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_diameter_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_diameter_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_diameter_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_diameter_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_thickness_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_thickness_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_thickness_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_thickness_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_thickness_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_thickness_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_thickness_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_thickness_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_thickness_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_volume_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_volume_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_volume_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_volume_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_volume_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_volume_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_volume_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_volume_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_volume_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_outerArea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_outerArea_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_outerArea_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_outerArea_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_outerArea_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_outerArea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_outerArea_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_outerArea_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_outerArea_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_innerArea_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_innerArea_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_innerArea_set" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DifShell_innerArea_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_DifShell_innerArea_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DifShell_innerArea_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::DifShell *arg1 = (pymoose::DifShell *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"DifShell_innerArea_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__DifShell, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DifShell_innerArea_get" "', argument " "1"" of type '" "pymoose::DifShell *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::DifShell * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_DifShell_innerArea_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *DifShell_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__DifShell, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_GssaStoich_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable GssaStoich_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_GssaStoich_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::GssaStoich::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_GssaStoich__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::GssaStoich *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GssaStoich",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GssaStoich" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GssaStoich *)new pymoose::GssaStoich(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GssaStoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GssaStoich__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::GssaStoich *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GssaStoich",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GssaStoich" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GssaStoich *)new pymoose::GssaStoich(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GssaStoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GssaStoich__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::GssaStoich *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GssaStoich",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GssaStoich" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GssaStoich" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GssaStoich *)new pymoose::GssaStoich(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GssaStoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GssaStoich__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::GssaStoich *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GssaStoich",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GssaStoich" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_GssaStoich" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GssaStoich *)new pymoose::GssaStoich(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GssaStoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GssaStoich__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::GssaStoich *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GssaStoich",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__GssaStoich,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GssaStoich" "', argument " "1"" of type '" "pymoose::GssaStoich const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "1"" of type '" "pymoose::GssaStoich const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GssaStoich" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_GssaStoich" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GssaStoich *)new pymoose::GssaStoich((pymoose::GssaStoich const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GssaStoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GssaStoich__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::GssaStoich *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GssaStoich",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__GssaStoich,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GssaStoich" "', argument " "1"" of type '" "pymoose::GssaStoich const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "1"" of type '" "pymoose::GssaStoich const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GssaStoich" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_GssaStoich" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GssaStoich *)new pymoose::GssaStoich((pymoose::GssaStoich const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GssaStoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GssaStoich__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = 0 ;
  std::string arg2 ;
  pymoose::GssaStoich *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GssaStoich",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__GssaStoich,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GssaStoich" "', argument " "1"" of type '" "pymoose::GssaStoich const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "1"" of type '" "pymoose::GssaStoich const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GssaStoich" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GssaStoich *)new pymoose::GssaStoich((pymoose::GssaStoich const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GssaStoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GssaStoich__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::GssaStoich *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_GssaStoich",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GssaStoich" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_GssaStoich" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_GssaStoich" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_GssaStoich" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::GssaStoich *)new pymoose::GssaStoich((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__GssaStoich, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GssaStoich(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_GssaStoich__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_GssaStoich__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__GssaStoich, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_GssaStoich__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_GssaStoich__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_GssaStoich__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__GssaStoich, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_GssaStoich__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__GssaStoich, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_GssaStoich__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_GssaStoich__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_GssaStoich'.\n  Possible C/C++ prototypes are:\n""    pymoose::GssaStoich(Id)\n""    pymoose::GssaStoich(std::string)\n""    pymoose::GssaStoich(std::string,Id)\n""    pymoose::GssaStoich(std::string,pymoose::PyMooseBase &)\n""    pymoose::GssaStoich(pymoose::GssaStoich const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::GssaStoich(pymoose::GssaStoich const &,std::string,Id &)\n""    pymoose::GssaStoich(pymoose::GssaStoich const &,std::string)\n""    pymoose::GssaStoich(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GssaStoich(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = (pymoose::GssaStoich *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_GssaStoich",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GssaStoich, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GssaStoich" "', argument " "1"" of type '" "pymoose::GssaStoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GssaStoich_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = (pymoose::GssaStoich *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GssaStoich_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GssaStoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GssaStoich_getType" "', argument " "1"" of type '" "pymoose::GssaStoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GssaStoich___get_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = (pymoose::GssaStoich *) 0 ;
  std::string result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GssaStoich___get_method",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GssaStoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GssaStoich___get_method" "', argument " "1"" of type '" "pymoose::GssaStoich const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::GssaStoich const *)arg1)->__get_method();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GssaStoich___set_method(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = (pymoose::GssaStoich *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GssaStoich___set_method",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GssaStoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GssaStoich___set_method" "', argument " "1"" of type '" "pymoose::GssaStoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GssaStoich___set_method" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_method(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GssaStoich___set_path(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = (pymoose::GssaStoich *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GssaStoich___set_path",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GssaStoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GssaStoich___set_path" "', argument " "1"" of type '" "pymoose::GssaStoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "GssaStoich___set_path" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_path(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GssaStoich_method_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = (pymoose::GssaStoich *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GssaStoich_method_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GssaStoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GssaStoich_method_set" "', argument " "1"" of type '" "pymoose::GssaStoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "GssaStoich_method_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "GssaStoich_method_set" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_GssaStoich_method_set(arg1,(std::string const &)*arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GssaStoich_method_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = (pymoose::GssaStoich *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GssaStoich_method_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GssaStoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GssaStoich_method_get" "', argument " "1"" of type '" "pymoose::GssaStoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_GssaStoich_method_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_GssaStoich_path_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::GssaStoich *arg1 = (pymoose::GssaStoich *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"GssaStoich_path_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__GssaStoich, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GssaStoich_path_get" "', argument " "1"" of type '" "pymoose::GssaStoich *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::GssaStoich * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = pymoose_GssaStoich_path_get(arg1);
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *GssaStoich_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__GssaStoich, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_TauPump_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TauPump_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TauPump_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::TauPump::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_TauPump__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::TauPump *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TauPump",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TauPump" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TauPump *)new pymoose::TauPump(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TauPump, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TauPump__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::TauPump *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TauPump",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TauPump" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TauPump *)new pymoose::TauPump(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TauPump, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TauPump__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::TauPump *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TauPump",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TauPump" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TauPump" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TauPump *)new pymoose::TauPump(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TauPump, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TauPump__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::TauPump *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TauPump",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TauPump" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TauPump" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TauPump *)new pymoose::TauPump(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TauPump, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TauPump__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::TauPump *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TauPump",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__TauPump,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TauPump" "', argument " "1"" of type '" "pymoose::TauPump const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "1"" of type '" "pymoose::TauPump const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TauPump" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TauPump" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TauPump *)new pymoose::TauPump((pymoose::TauPump const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TauPump, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TauPump__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::TauPump *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TauPump",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__TauPump,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TauPump" "', argument " "1"" of type '" "pymoose::TauPump const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "1"" of type '" "pymoose::TauPump const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TauPump" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TauPump" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TauPump *)new pymoose::TauPump((pymoose::TauPump const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TauPump, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TauPump__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = 0 ;
  std::string arg2 ;
  pymoose::TauPump *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TauPump",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__TauPump,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TauPump" "', argument " "1"" of type '" "pymoose::TauPump const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "1"" of type '" "pymoose::TauPump const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TauPump" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TauPump *)new pymoose::TauPump((pymoose::TauPump const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TauPump, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TauPump__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::TauPump *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TauPump",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TauPump" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TauPump" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TauPump" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TauPump" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TauPump *)new pymoose::TauPump((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TauPump, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TauPump(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_TauPump__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_TauPump__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__TauPump, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_TauPump__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_TauPump__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_TauPump__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__TauPump, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_TauPump__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__TauPump, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_TauPump__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_TauPump__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_TauPump'.\n  Possible C/C++ prototypes are:\n""    pymoose::TauPump(Id)\n""    pymoose::TauPump(std::string)\n""    pymoose::TauPump(std::string,Id)\n""    pymoose::TauPump(std::string,pymoose::PyMooseBase &)\n""    pymoose::TauPump(pymoose::TauPump const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::TauPump(pymoose::TauPump const &,std::string,Id &)\n""    pymoose::TauPump(pymoose::TauPump const &,std::string)\n""    pymoose::TauPump(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TauPump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_TauPump",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TauPump" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_getType" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___get_pumpRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___get_pumpRate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___get_pumpRate" "', argument " "1"" of type '" "pymoose::TauPump const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::TauPump const *)arg1)->__get_pumpRate();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___set_pumpRate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___set_pumpRate",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___set_pumpRate" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump___set_pumpRate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_pumpRate(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___get_eqConc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___get_eqConc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___get_eqConc" "', argument " "1"" of type '" "pymoose::TauPump const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::TauPump const *)arg1)->__get_eqConc();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___set_eqConc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___set_eqConc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___set_eqConc" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump___set_eqConc" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_eqConc(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___get_TA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___get_TA",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___get_TA" "', argument " "1"" of type '" "pymoose::TauPump const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::TauPump const *)arg1)->__get_TA();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___set_TA(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___set_TA",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___set_TA" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump___set_TA" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_TA(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___get_TB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___get_TB",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___get_TB" "', argument " "1"" of type '" "pymoose::TauPump const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::TauPump const *)arg1)->__get_TB();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___set_TB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___set_TB",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___set_TB" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump___set_TB" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_TB(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___get_TC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___get_TC",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___get_TC" "', argument " "1"" of type '" "pymoose::TauPump const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::TauPump const *)arg1)->__get_TC();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___set_TC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___set_TC",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___set_TC" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump___set_TC" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_TC(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___get_TV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___get_TV",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___get_TV" "', argument " "1"" of type '" "pymoose::TauPump const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::TauPump const *)arg1)->__get_TV();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump___set_TV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump___set_TV",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump___set_TV" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump___set_TV" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_TV(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_pumpRate_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_pumpRate_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_pumpRate_set" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump_pumpRate_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_TauPump_pumpRate_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_pumpRate_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_pumpRate_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_pumpRate_get" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_TauPump_pumpRate_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_eqConc_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_eqConc_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_eqConc_set" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump_eqConc_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_TauPump_eqConc_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_eqConc_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_eqConc_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_eqConc_get" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_TauPump_eqConc_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_TA_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_TA_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_TA_set" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump_TA_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_TauPump_TA_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_TA_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_TA_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_TA_get" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_TauPump_TA_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_TB_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_TB_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_TB_set" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump_TB_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_TauPump_TB_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_TB_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_TB_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_TB_get" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_TauPump_TB_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_TC_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_TC_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_TC_set" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump_TC_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_TauPump_TC_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_TC_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_TC_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_TC_get" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_TauPump_TC_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_TV_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_TV_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_TV_set" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TauPump_TV_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_TauPump_TV_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TauPump_TV_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TauPump *arg1 = (pymoose::TauPump *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TauPump_TV_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TauPump, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TauPump_TV_get" "', argument " "1"" of type '" "pymoose::TauPump *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TauPump * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_TauPump_TV_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *TauPump_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__TauPump, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_TimeTable_className_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable TimeTable_className is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_TimeTable_className_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_std_string(static_cast< std::string >(pymoose::TimeTable::className));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_TimeTable__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id arg1 ;
  pymoose::TimeTable *result = 0 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TimeTable",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeTable" "', argument " "1"" of type '" "Id""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "1"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TimeTable *)new pymoose::TimeTable(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TimeTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeTable__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::TimeTable *result = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TimeTable",1,1,&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeTable" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TimeTable *)new pymoose::TimeTable(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TimeTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeTable__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  Id arg2 ;
  pymoose::TimeTable *result = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TimeTable",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeTable" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Id,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TimeTable" "', argument " "2"" of type '" "Id""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "2"" of type '" "Id""'");
    } else {
      Id * temp = reinterpret_cast< Id * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TimeTable *)new pymoose::TimeTable(arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TimeTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeTable__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string arg1 ;
  pymoose::PyMooseBase *arg2 = 0 ;
  pymoose::TimeTable *result = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TimeTable",2,2,&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeTable" "', argument " "1"" of type '" "std::string""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TimeTable" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "2"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg2 = reinterpret_cast< pymoose::PyMooseBase * >(argp2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TimeTable *)new pymoose::TimeTable(arg1,*arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TimeTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeTable__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = 0 ;
  std::string arg2 ;
  pymoose::PyMooseBase *arg3 = 0 ;
  pymoose::TimeTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TimeTable",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__TimeTable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeTable" "', argument " "1"" of type '" "pymoose::TimeTable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "1"" of type '" "pymoose::TimeTable const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeTable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_pymoose__PyMooseBase,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TimeTable" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "3"" of type '" "pymoose::PyMooseBase &""'"); 
  }
  arg3 = reinterpret_cast< pymoose::PyMooseBase * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TimeTable *)new pymoose::TimeTable((pymoose::TimeTable const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TimeTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeTable__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::TimeTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TimeTable",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__TimeTable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeTable" "', argument " "1"" of type '" "pymoose::TimeTable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "1"" of type '" "pymoose::TimeTable const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeTable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TimeTable" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TimeTable *)new pymoose::TimeTable((pymoose::TimeTable const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TimeTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeTable__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = 0 ;
  std::string arg2 ;
  pymoose::TimeTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TimeTable",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_pymoose__TimeTable,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeTable" "', argument " "1"" of type '" "pymoose::TimeTable const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "1"" of type '" "pymoose::TimeTable const &""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeTable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TimeTable *)new pymoose::TimeTable((pymoose::TimeTable const &)*arg1,arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TimeTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeTable__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  Id *arg1 = 0 ;
  std::string arg2 ;
  Id *arg3 = 0 ;
  pymoose::TimeTable *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"new_TimeTable",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_Id,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeTable" "', argument " "1"" of type '" "Id const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "1"" of type '" "Id const &""'"); 
  }
  arg1 = reinterpret_cast< Id * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_TimeTable" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_Id,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_TimeTable" "', argument " "3"" of type '" "Id &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TimeTable" "', argument " "3"" of type '" "Id &""'"); 
  }
  arg3 = reinterpret_cast< Id * >(argp3);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (pymoose::TimeTable *)new pymoose::TimeTable((Id const &)*arg1,arg2,*arg3);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_pymoose__TimeTable, SWIG_POINTER_NEW |  0 );
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TimeTable(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = (int)PyObject_Length(args);
  for (ii = 0; (ii < argc) && (ii < 3); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_TimeTable__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      SWIG_PYTHON_THREAD_END_BLOCK;
      return _wrap_new_TimeTable__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__TimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_TimeTable__SWIG_6(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_TimeTable__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_Id, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        SWIG_PYTHON_THREAD_END_BLOCK;
        return _wrap_new_TimeTable__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__TimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_TimeTable__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_pymoose__TimeTable, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_pymoose__PyMooseBase, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_TimeTable__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Id, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_Id, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          SWIG_PYTHON_THREAD_END_BLOCK;
          return _wrap_new_TimeTable__SWIG_7(self, args);
        }
      }
    }
  }
  
  SWIG_PYTHON_THREAD_END_BLOCK;
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number of arguments for overloaded function 'new_TimeTable'.\n  Possible C/C++ prototypes are:\n""    pymoose::TimeTable(Id)\n""    pymoose::TimeTable(std::string)\n""    pymoose::TimeTable(std::string,Id)\n""    pymoose::TimeTable(std::string,pymoose::PyMooseBase &)\n""    pymoose::TimeTable(pymoose::TimeTable const &,std::string,pymoose::PyMooseBase &)\n""    pymoose::TimeTable(pymoose::TimeTable const &,std::string,Id &)\n""    pymoose::TimeTable(pymoose::TimeTable const &,std::string)\n""    pymoose::TimeTable(Id const &,std::string,Id &)\n");
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TimeTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"delete_TimeTable",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeTable" "', argument " "1"" of type '" "pymoose::TimeTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    delete arg1;
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable_getType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  std::string *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable_getType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable_getType" "', argument " "1"" of type '" "pymoose::TimeTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::string const &_result_ref = (arg1)->getType();
      result = (std::string *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable___get_maxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable___get_maxTime",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable___get_maxTime" "', argument " "1"" of type '" "pymoose::TimeTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)((pymoose::TimeTable const *)arg1)->__get_maxTime();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable___set_maxTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable___set_maxTime",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable___set_maxTime" "', argument " "1"" of type '" "pymoose::TimeTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeTable___set_maxTime" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_maxTime(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable___get_tableVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  std::vector<double > result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable___get_tableVector",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable___get_tableVector" "', argument " "1"" of type '" "pymoose::TimeTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = ((pymoose::TimeTable const *)arg1)->__get_tableVector();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<double,std::allocator<double > > >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable___set_tableVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  std::vector<double > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable___set_tableVector",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable___set_tableVector" "', argument " "1"" of type '" "pymoose::TimeTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    std::vector<double,std::allocator<double > > *ptr = (std::vector<double,std::allocator<double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "TimeTable___set_tableVector" "', argument " "2"" of type '" "std::vector<double >""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    (arg1)->__set_tableVector(arg2);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable___get_tableSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable___get_tableSize",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable___get_tableSize" "', argument " "1"" of type '" "pymoose::TimeTable const *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)((pymoose::TimeTable const *)arg1)->__get_tableSize();
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable_maxTime_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable_maxTime_set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable_maxTime_set" "', argument " "1"" of type '" "pymoose::TimeTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeTable_maxTime_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    pymoose_TimeTable_maxTime_set(arg1,arg2);
    
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_Py_Void();
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable_maxTime_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  double result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable_maxTime_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable_maxTime_get" "', argument " "1"" of type '" "pymoose::TimeTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (double)pymoose_TimeTable_maxTime_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable_tableVector_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  std::vector<double > *result = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable_tableVector_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable_tableVector_get" "', argument " "1"" of type '" "pymoose::TimeTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    {
      std::vector<double > const &_result_ref = pymoose_TimeTable_tableVector_get(arg1);
      result = (std::vector<double > *) &_result_ref;
    }
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = swig::from(static_cast< std::vector<double,std::allocator<double > > >(*result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeTable_tableSize_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  pymoose::TimeTable *arg1 = (pymoose::TimeTable *) 0 ;
  unsigned int result;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  if(!PyArg_UnpackTuple(args,(char *)"TimeTable_tableSize_get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_pymoose__TimeTable, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeTable_tableSize_get" "', argument " "1"" of type '" "pymoose::TimeTable *""'"); 
  }
  arg1 = reinterpret_cast< pymoose::TimeTable * >(argp1);
  {
    SWIG_PYTHON_THREAD_BEGIN_ALLOW;
    result = (unsigned int)pymoose_TimeTable_tableSize_get(arg1);
    SWIG_PYTHON_THREAD_END_ALLOW;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  SWIG_PYTHON_THREAD_END_BLOCK;
  return resultobj;
fail:
  SWIG_PYTHON_THREAD_END_BLOCK;
  return NULL;
}


SWIGINTERN PyObject *TimeTable_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_pymoose__TimeTable, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"delete_PySwigIterator", _wrap_delete_PySwigIterator, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_value", _wrap_PySwigIterator_value, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_incr", _wrap_PySwigIterator_incr, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_decr", _wrap_PySwigIterator_decr, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_distance", _wrap_PySwigIterator_distance, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_equal", _wrap_PySwigIterator_equal, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_copy", _wrap_PySwigIterator_copy, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_next", _wrap_PySwigIterator_next, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_previous", _wrap_PySwigIterator_previous, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_advance", _wrap_PySwigIterator_advance, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___eq__", _wrap_PySwigIterator___eq__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___ne__", _wrap_PySwigIterator___ne__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___iadd__", _wrap_PySwigIterator___iadd__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___isub__", _wrap_PySwigIterator___isub__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___add__", _wrap_PySwigIterator___add__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator___sub__", _wrap_PySwigIterator___sub__, METH_VARARGS, NULL},
	 { (char *)"PySwigIterator_swigregister", PySwigIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"uint_vector_iterator", _wrap_uint_vector_iterator, METH_VARARGS, (char *)"uint_vector_iterator(uint_vector self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"uint_vector___nonzero__", _wrap_uint_vector___nonzero__, METH_VARARGS, (char *)"uint_vector___nonzero__(uint_vector self) -> bool"},
	 { (char *)"uint_vector___len__", _wrap_uint_vector___len__, METH_VARARGS, (char *)"uint_vector___len__(uint_vector self) -> size_type"},
	 { (char *)"uint_vector_pop", _wrap_uint_vector_pop, METH_VARARGS, (char *)"uint_vector_pop(uint_vector self) -> value_type"},
	 { (char *)"uint_vector___getslice__", _wrap_uint_vector___getslice__, METH_VARARGS, (char *)"uint_vector___getslice__(uint_vector self, difference_type i, difference_type j) -> uint_vector"},
	 { (char *)"uint_vector___setslice__", _wrap_uint_vector___setslice__, METH_VARARGS, (char *)"\n"
		"uint_vector___setslice__(uint_vector self, difference_type i, difference_type j, \n"
		"    uint_vector v)\n"
		""},
	 { (char *)"uint_vector___delslice__", _wrap_uint_vector___delslice__, METH_VARARGS, (char *)"uint_vector___delslice__(uint_vector self, difference_type i, difference_type j)"},
	 { (char *)"uint_vector___delitem__", _wrap_uint_vector___delitem__, METH_VARARGS, (char *)"uint_vector___delitem__(uint_vector self, difference_type i)"},
	 { (char *)"uint_vector___getitem__", _wrap_uint_vector___getitem__, METH_VARARGS, (char *)"uint_vector___getitem__(uint_vector self, difference_type i) -> value_type"},
	 { (char *)"uint_vector___setitem__", _wrap_uint_vector___setitem__, METH_VARARGS, (char *)"uint_vector___setitem__(uint_vector self, difference_type i, value_type x)"},
	 { (char *)"uint_vector_append", _wrap_uint_vector_append, METH_VARARGS, (char *)"uint_vector_append(uint_vector self, value_type x)"},
	 { (char *)"uint_vector_empty", _wrap_uint_vector_empty, METH_VARARGS, (char *)"uint_vector_empty(uint_vector self) -> bool"},
	 { (char *)"uint_vector_size", _wrap_uint_vector_size, METH_VARARGS, (char *)"uint_vector_size(uint_vector self) -> size_type"},
	 { (char *)"uint_vector_clear", _wrap_uint_vector_clear, METH_VARARGS, (char *)"uint_vector_clear(uint_vector self)"},
	 { (char *)"uint_vector_swap", _wrap_uint_vector_swap, METH_VARARGS, (char *)"uint_vector_swap(uint_vector self, uint_vector v)"},
	 { (char *)"uint_vector_get_allocator", _wrap_uint_vector_get_allocator, METH_VARARGS, (char *)"uint_vector_get_allocator(uint_vector self) -> allocator_type"},
	 { (char *)"uint_vector_begin", _wrap_uint_vector_begin, METH_VARARGS, (char *)"\n"
		"begin() -> iterator\n"
		"uint_vector_begin(uint_vector self) -> const_iterator\n"
		""},
	 { (char *)"uint_vector_end", _wrap_uint_vector_end, METH_VARARGS, (char *)"\n"
		"end() -> iterator\n"
		"uint_vector_end(uint_vector self) -> const_iterator\n"
		""},
	 { (char *)"uint_vector_rbegin", _wrap_uint_vector_rbegin, METH_VARARGS, (char *)"\n"
		"rbegin() -> reverse_iterator\n"
		"uint_vector_rbegin(uint_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"uint_vector_rend", _wrap_uint_vector_rend, METH_VARARGS, (char *)"\n"
		"rend() -> reverse_iterator\n"
		"uint_vector_rend(uint_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"uint_vector_pop_back", _wrap_uint_vector_pop_back, METH_VARARGS, (char *)"uint_vector_pop_back(uint_vector self)"},
	 { (char *)"uint_vector_erase", _wrap_uint_vector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"uint_vector_erase(uint_vector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_uint_vector", _wrap_new_uint_vector, METH_VARARGS, (char *)"\n"
		"uint_vector()\n"
		"uint_vector(uint_vector ?)\n"
		"uint_vector(size_type size)\n"
		"new_uint_vector(size_type size, value_type value) -> uint_vector\n"
		""},
	 { (char *)"uint_vector_push_back", _wrap_uint_vector_push_back, METH_VARARGS, (char *)"uint_vector_push_back(uint_vector self, value_type x)"},
	 { (char *)"uint_vector_front", _wrap_uint_vector_front, METH_VARARGS, (char *)"uint_vector_front(uint_vector self) -> value_type"},
	 { (char *)"uint_vector_back", _wrap_uint_vector_back, METH_VARARGS, (char *)"uint_vector_back(uint_vector self) -> value_type"},
	 { (char *)"uint_vector_assign", _wrap_uint_vector_assign, METH_VARARGS, (char *)"uint_vector_assign(uint_vector self, size_type n, value_type x)"},
	 { (char *)"uint_vector_resize", _wrap_uint_vector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"uint_vector_resize(uint_vector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"uint_vector_insert", _wrap_uint_vector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"uint_vector_insert(uint_vector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"uint_vector_reserve", _wrap_uint_vector_reserve, METH_VARARGS, (char *)"uint_vector_reserve(uint_vector self, size_type n)"},
	 { (char *)"uint_vector_capacity", _wrap_uint_vector_capacity, METH_VARARGS, (char *)"uint_vector_capacity(uint_vector self) -> size_type"},
	 { (char *)"delete_uint_vector", _wrap_delete_uint_vector, METH_VARARGS, (char *)"delete_uint_vector(uint_vector self)"},
	 { (char *)"uint_vector_swigregister", uint_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"int_vector_iterator", _wrap_int_vector_iterator, METH_VARARGS, (char *)"int_vector_iterator(int_vector self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"int_vector___nonzero__", _wrap_int_vector___nonzero__, METH_VARARGS, (char *)"int_vector___nonzero__(int_vector self) -> bool"},
	 { (char *)"int_vector___len__", _wrap_int_vector___len__, METH_VARARGS, (char *)"int_vector___len__(int_vector self) -> size_type"},
	 { (char *)"int_vector_pop", _wrap_int_vector_pop, METH_VARARGS, (char *)"int_vector_pop(int_vector self) -> value_type"},
	 { (char *)"int_vector___getslice__", _wrap_int_vector___getslice__, METH_VARARGS, (char *)"int_vector___getslice__(int_vector self, difference_type i, difference_type j) -> int_vector"},
	 { (char *)"int_vector___setslice__", _wrap_int_vector___setslice__, METH_VARARGS, (char *)"\n"
		"int_vector___setslice__(int_vector self, difference_type i, difference_type j, \n"
		"    int_vector v)\n"
		""},
	 { (char *)"int_vector___delslice__", _wrap_int_vector___delslice__, METH_VARARGS, (char *)"int_vector___delslice__(int_vector self, difference_type i, difference_type j)"},
	 { (char *)"int_vector___delitem__", _wrap_int_vector___delitem__, METH_VARARGS, (char *)"int_vector___delitem__(int_vector self, difference_type i)"},
	 { (char *)"int_vector___getitem__", _wrap_int_vector___getitem__, METH_VARARGS, (char *)"int_vector___getitem__(int_vector self, difference_type i) -> value_type"},
	 { (char *)"int_vector___setitem__", _wrap_int_vector___setitem__, METH_VARARGS, (char *)"int_vector___setitem__(int_vector self, difference_type i, value_type x)"},
	 { (char *)"int_vector_append", _wrap_int_vector_append, METH_VARARGS, (char *)"int_vector_append(int_vector self, value_type x)"},
	 { (char *)"int_vector_empty", _wrap_int_vector_empty, METH_VARARGS, (char *)"int_vector_empty(int_vector self) -> bool"},
	 { (char *)"int_vector_size", _wrap_int_vector_size, METH_VARARGS, (char *)"int_vector_size(int_vector self) -> size_type"},
	 { (char *)"int_vector_clear", _wrap_int_vector_clear, METH_VARARGS, (char *)"int_vector_clear(int_vector self)"},
	 { (char *)"int_vector_swap", _wrap_int_vector_swap, METH_VARARGS, (char *)"int_vector_swap(int_vector self, int_vector v)"},
	 { (char *)"int_vector_get_allocator", _wrap_int_vector_get_allocator, METH_VARARGS, (char *)"int_vector_get_allocator(int_vector self) -> allocator_type"},
	 { (char *)"int_vector_begin", _wrap_int_vector_begin, METH_VARARGS, (char *)"\n"
		"begin() -> iterator\n"
		"int_vector_begin(int_vector self) -> const_iterator\n"
		""},
	 { (char *)"int_vector_end", _wrap_int_vector_end, METH_VARARGS, (char *)"\n"
		"end() -> iterator\n"
		"int_vector_end(int_vector self) -> const_iterator\n"
		""},
	 { (char *)"int_vector_rbegin", _wrap_int_vector_rbegin, METH_VARARGS, (char *)"\n"
		"rbegin() -> reverse_iterator\n"
		"int_vector_rbegin(int_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"int_vector_rend", _wrap_int_vector_rend, METH_VARARGS, (char *)"\n"
		"rend() -> reverse_iterator\n"
		"int_vector_rend(int_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"int_vector_pop_back", _wrap_int_vector_pop_back, METH_VARARGS, (char *)"int_vector_pop_back(int_vector self)"},
	 { (char *)"int_vector_erase", _wrap_int_vector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"int_vector_erase(int_vector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_int_vector", _wrap_new_int_vector, METH_VARARGS, (char *)"\n"
		"int_vector()\n"
		"int_vector(int_vector ?)\n"
		"int_vector(size_type size)\n"
		"new_int_vector(size_type size, value_type value) -> int_vector\n"
		""},
	 { (char *)"int_vector_push_back", _wrap_int_vector_push_back, METH_VARARGS, (char *)"int_vector_push_back(int_vector self, value_type x)"},
	 { (char *)"int_vector_front", _wrap_int_vector_front, METH_VARARGS, (char *)"int_vector_front(int_vector self) -> value_type"},
	 { (char *)"int_vector_back", _wrap_int_vector_back, METH_VARARGS, (char *)"int_vector_back(int_vector self) -> value_type"},
	 { (char *)"int_vector_assign", _wrap_int_vector_assign, METH_VARARGS, (char *)"int_vector_assign(int_vector self, size_type n, value_type x)"},
	 { (char *)"int_vector_resize", _wrap_int_vector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"int_vector_resize(int_vector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"int_vector_insert", _wrap_int_vector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"int_vector_insert(int_vector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"int_vector_reserve", _wrap_int_vector_reserve, METH_VARARGS, (char *)"int_vector_reserve(int_vector self, size_type n)"},
	 { (char *)"int_vector_capacity", _wrap_int_vector_capacity, METH_VARARGS, (char *)"int_vector_capacity(int_vector self) -> size_type"},
	 { (char *)"delete_int_vector", _wrap_delete_int_vector, METH_VARARGS, (char *)"delete_int_vector(int_vector self)"},
	 { (char *)"int_vector_swigregister", int_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"double_vector_iterator", _wrap_double_vector_iterator, METH_VARARGS, (char *)"double_vector_iterator(double_vector self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"double_vector___nonzero__", _wrap_double_vector___nonzero__, METH_VARARGS, (char *)"double_vector___nonzero__(double_vector self) -> bool"},
	 { (char *)"double_vector___len__", _wrap_double_vector___len__, METH_VARARGS, (char *)"double_vector___len__(double_vector self) -> size_type"},
	 { (char *)"double_vector_pop", _wrap_double_vector_pop, METH_VARARGS, (char *)"double_vector_pop(double_vector self) -> value_type"},
	 { (char *)"double_vector___getslice__", _wrap_double_vector___getslice__, METH_VARARGS, (char *)"double_vector___getslice__(double_vector self, difference_type i, difference_type j) -> double_vector"},
	 { (char *)"double_vector___setslice__", _wrap_double_vector___setslice__, METH_VARARGS, (char *)"\n"
		"double_vector___setslice__(double_vector self, difference_type i, difference_type j, \n"
		"    double_vector v)\n"
		""},
	 { (char *)"double_vector___delslice__", _wrap_double_vector___delslice__, METH_VARARGS, (char *)"double_vector___delslice__(double_vector self, difference_type i, difference_type j)"},
	 { (char *)"double_vector___delitem__", _wrap_double_vector___delitem__, METH_VARARGS, (char *)"double_vector___delitem__(double_vector self, difference_type i)"},
	 { (char *)"double_vector___getitem__", _wrap_double_vector___getitem__, METH_VARARGS, (char *)"double_vector___getitem__(double_vector self, difference_type i) -> value_type"},
	 { (char *)"double_vector___setitem__", _wrap_double_vector___setitem__, METH_VARARGS, (char *)"double_vector___setitem__(double_vector self, difference_type i, value_type x)"},
	 { (char *)"double_vector_append", _wrap_double_vector_append, METH_VARARGS, (char *)"double_vector_append(double_vector self, value_type x)"},
	 { (char *)"double_vector_empty", _wrap_double_vector_empty, METH_VARARGS, (char *)"double_vector_empty(double_vector self) -> bool"},
	 { (char *)"double_vector_size", _wrap_double_vector_size, METH_VARARGS, (char *)"double_vector_size(double_vector self) -> size_type"},
	 { (char *)"double_vector_clear", _wrap_double_vector_clear, METH_VARARGS, (char *)"double_vector_clear(double_vector self)"},
	 { (char *)"double_vector_swap", _wrap_double_vector_swap, METH_VARARGS, (char *)"double_vector_swap(double_vector self, double_vector v)"},
	 { (char *)"double_vector_get_allocator", _wrap_double_vector_get_allocator, METH_VARARGS, (char *)"double_vector_get_allocator(double_vector self) -> allocator_type"},
	 { (char *)"double_vector_begin", _wrap_double_vector_begin, METH_VARARGS, (char *)"\n"
		"begin() -> iterator\n"
		"double_vector_begin(double_vector self) -> const_iterator\n"
		""},
	 { (char *)"double_vector_end", _wrap_double_vector_end, METH_VARARGS, (char *)"\n"
		"end() -> iterator\n"
		"double_vector_end(double_vector self) -> const_iterator\n"
		""},
	 { (char *)"double_vector_rbegin", _wrap_double_vector_rbegin, METH_VARARGS, (char *)"\n"
		"rbegin() -> reverse_iterator\n"
		"double_vector_rbegin(double_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"double_vector_rend", _wrap_double_vector_rend, METH_VARARGS, (char *)"\n"
		"rend() -> reverse_iterator\n"
		"double_vector_rend(double_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"double_vector_pop_back", _wrap_double_vector_pop_back, METH_VARARGS, (char *)"double_vector_pop_back(double_vector self)"},
	 { (char *)"double_vector_erase", _wrap_double_vector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"double_vector_erase(double_vector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_double_vector", _wrap_new_double_vector, METH_VARARGS, (char *)"\n"
		"double_vector()\n"
		"double_vector(double_vector ?)\n"
		"double_vector(size_type size)\n"
		"new_double_vector(size_type size, value_type value) -> double_vector\n"
		""},
	 { (char *)"double_vector_push_back", _wrap_double_vector_push_back, METH_VARARGS, (char *)"double_vector_push_back(double_vector self, value_type x)"},
	 { (char *)"double_vector_front", _wrap_double_vector_front, METH_VARARGS, (char *)"double_vector_front(double_vector self) -> value_type"},
	 { (char *)"double_vector_back", _wrap_double_vector_back, METH_VARARGS, (char *)"double_vector_back(double_vector self) -> value_type"},
	 { (char *)"double_vector_assign", _wrap_double_vector_assign, METH_VARARGS, (char *)"double_vector_assign(double_vector self, size_type n, value_type x)"},
	 { (char *)"double_vector_resize", _wrap_double_vector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"double_vector_resize(double_vector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"double_vector_insert", _wrap_double_vector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"double_vector_insert(double_vector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"double_vector_reserve", _wrap_double_vector_reserve, METH_VARARGS, (char *)"double_vector_reserve(double_vector self, size_type n)"},
	 { (char *)"double_vector_capacity", _wrap_double_vector_capacity, METH_VARARGS, (char *)"double_vector_capacity(double_vector self) -> size_type"},
	 { (char *)"delete_double_vector", _wrap_delete_double_vector, METH_VARARGS, (char *)"delete_double_vector(double_vector self)"},
	 { (char *)"double_vector_swigregister", double_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"string_vector_iterator", _wrap_string_vector_iterator, METH_VARARGS, (char *)"string_vector_iterator(string_vector self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"string_vector___nonzero__", _wrap_string_vector___nonzero__, METH_VARARGS, (char *)"string_vector___nonzero__(string_vector self) -> bool"},
	 { (char *)"string_vector___len__", _wrap_string_vector___len__, METH_VARARGS, (char *)"string_vector___len__(string_vector self) -> size_type"},
	 { (char *)"string_vector_pop", _wrap_string_vector_pop, METH_VARARGS, (char *)"string_vector_pop(string_vector self) -> value_type"},
	 { (char *)"string_vector___getslice__", _wrap_string_vector___getslice__, METH_VARARGS, (char *)"string_vector___getslice__(string_vector self, difference_type i, difference_type j) -> string_vector"},
	 { (char *)"string_vector___setslice__", _wrap_string_vector___setslice__, METH_VARARGS, (char *)"\n"
		"string_vector___setslice__(string_vector self, difference_type i, difference_type j, \n"
		"    string_vector v)\n"
		""},
	 { (char *)"string_vector___delslice__", _wrap_string_vector___delslice__, METH_VARARGS, (char *)"string_vector___delslice__(string_vector self, difference_type i, difference_type j)"},
	 { (char *)"string_vector___delitem__", _wrap_string_vector___delitem__, METH_VARARGS, (char *)"string_vector___delitem__(string_vector self, difference_type i)"},
	 { (char *)"string_vector___getitem__", _wrap_string_vector___getitem__, METH_VARARGS, (char *)"string_vector___getitem__(string_vector self, difference_type i) -> value_type"},
	 { (char *)"string_vector___setitem__", _wrap_string_vector___setitem__, METH_VARARGS, (char *)"string_vector___setitem__(string_vector self, difference_type i, value_type x)"},
	 { (char *)"string_vector_append", _wrap_string_vector_append, METH_VARARGS, (char *)"string_vector_append(string_vector self, value_type x)"},
	 { (char *)"string_vector_empty", _wrap_string_vector_empty, METH_VARARGS, (char *)"string_vector_empty(string_vector self) -> bool"},
	 { (char *)"string_vector_size", _wrap_string_vector_size, METH_VARARGS, (char *)"string_vector_size(string_vector self) -> size_type"},
	 { (char *)"string_vector_clear", _wrap_string_vector_clear, METH_VARARGS, (char *)"string_vector_clear(string_vector self)"},
	 { (char *)"string_vector_swap", _wrap_string_vector_swap, METH_VARARGS, (char *)"string_vector_swap(string_vector self, string_vector v)"},
	 { (char *)"string_vector_get_allocator", _wrap_string_vector_get_allocator, METH_VARARGS, (char *)"string_vector_get_allocator(string_vector self) -> allocator_type"},
	 { (char *)"string_vector_begin", _wrap_string_vector_begin, METH_VARARGS, (char *)"\n"
		"begin() -> iterator\n"
		"string_vector_begin(string_vector self) -> const_iterator\n"
		""},
	 { (char *)"string_vector_end", _wrap_string_vector_end, METH_VARARGS, (char *)"\n"
		"end() -> iterator\n"
		"string_vector_end(string_vector self) -> const_iterator\n"
		""},
	 { (char *)"string_vector_rbegin", _wrap_string_vector_rbegin, METH_VARARGS, (char *)"\n"
		"rbegin() -> reverse_iterator\n"
		"string_vector_rbegin(string_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"string_vector_rend", _wrap_string_vector_rend, METH_VARARGS, (char *)"\n"
		"rend() -> reverse_iterator\n"
		"string_vector_rend(string_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"string_vector_pop_back", _wrap_string_vector_pop_back, METH_VARARGS, (char *)"string_vector_pop_back(string_vector self)"},
	 { (char *)"string_vector_erase", _wrap_string_vector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"string_vector_erase(string_vector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_string_vector", _wrap_new_string_vector, METH_VARARGS, (char *)"\n"
		"string_vector()\n"
		"string_vector(string_vector ?)\n"
		"string_vector(size_type size)\n"
		"new_string_vector(size_type size, value_type value) -> string_vector\n"
		""},
	 { (char *)"string_vector_push_back", _wrap_string_vector_push_back, METH_VARARGS, (char *)"string_vector_push_back(string_vector self, value_type x)"},
	 { (char *)"string_vector_front", _wrap_string_vector_front, METH_VARARGS, (char *)"string_vector_front(string_vector self) -> value_type"},
	 { (char *)"string_vector_back", _wrap_string_vector_back, METH_VARARGS, (char *)"string_vector_back(string_vector self) -> value_type"},
	 { (char *)"string_vector_assign", _wrap_string_vector_assign, METH_VARARGS, (char *)"string_vector_assign(string_vector self, size_type n, value_type x)"},
	 { (char *)"string_vector_resize", _wrap_string_vector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"string_vector_resize(string_vector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"string_vector_insert", _wrap_string_vector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"string_vector_insert(string_vector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"string_vector_reserve", _wrap_string_vector_reserve, METH_VARARGS, (char *)"string_vector_reserve(string_vector self, size_type n)"},
	 { (char *)"string_vector_capacity", _wrap_string_vector_capacity, METH_VARARGS, (char *)"string_vector_capacity(string_vector self) -> size_type"},
	 { (char *)"delete_string_vector", _wrap_delete_string_vector, METH_VARARGS, (char *)"delete_string_vector(string_vector self)"},
	 { (char *)"string_vector_swigregister", string_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"Id_vector_iterator", _wrap_Id_vector_iterator, METH_VARARGS, (char *)"Id_vector_iterator(Id_vector self, PyObject PYTHON_SELF) -> PySwigIterator"},
	 { (char *)"Id_vector___nonzero__", _wrap_Id_vector___nonzero__, METH_VARARGS, (char *)"Id_vector___nonzero__(Id_vector self) -> bool"},
	 { (char *)"Id_vector___len__", _wrap_Id_vector___len__, METH_VARARGS, (char *)"Id_vector___len__(Id_vector self) -> size_type"},
	 { (char *)"Id_vector_pop", _wrap_Id_vector_pop, METH_VARARGS, (char *)"Id_vector_pop(Id_vector self) -> value_type"},
	 { (char *)"Id_vector___getslice__", _wrap_Id_vector___getslice__, METH_VARARGS, (char *)"Id_vector___getslice__(Id_vector self, difference_type i, difference_type j) -> Id_vector"},
	 { (char *)"Id_vector___setslice__", _wrap_Id_vector___setslice__, METH_VARARGS, (char *)"\n"
		"Id_vector___setslice__(Id_vector self, difference_type i, difference_type j, \n"
		"    Id_vector v)\n"
		""},
	 { (char *)"Id_vector___delslice__", _wrap_Id_vector___delslice__, METH_VARARGS, (char *)"Id_vector___delslice__(Id_vector self, difference_type i, difference_type j)"},
	 { (char *)"Id_vector___delitem__", _wrap_Id_vector___delitem__, METH_VARARGS, (char *)"Id_vector___delitem__(Id_vector self, difference_type i)"},
	 { (char *)"Id_vector___getitem__", _wrap_Id_vector___getitem__, METH_VARARGS, (char *)"Id_vector___getitem__(Id_vector self, difference_type i) -> value_type"},
	 { (char *)"Id_vector___setitem__", _wrap_Id_vector___setitem__, METH_VARARGS, (char *)"Id_vector___setitem__(Id_vector self, difference_type i, value_type x)"},
	 { (char *)"Id_vector_append", _wrap_Id_vector_append, METH_VARARGS, (char *)"Id_vector_append(Id_vector self, value_type x)"},
	 { (char *)"Id_vector_empty", _wrap_Id_vector_empty, METH_VARARGS, (char *)"Id_vector_empty(Id_vector self) -> bool"},
	 { (char *)"Id_vector_size", _wrap_Id_vector_size, METH_VARARGS, (char *)"Id_vector_size(Id_vector self) -> size_type"},
	 { (char *)"Id_vector_clear", _wrap_Id_vector_clear, METH_VARARGS, (char *)"Id_vector_clear(Id_vector self)"},
	 { (char *)"Id_vector_swap", _wrap_Id_vector_swap, METH_VARARGS, (char *)"Id_vector_swap(Id_vector self, Id_vector v)"},
	 { (char *)"Id_vector_get_allocator", _wrap_Id_vector_get_allocator, METH_VARARGS, (char *)"Id_vector_get_allocator(Id_vector self) -> allocator_type"},
	 { (char *)"Id_vector_begin", _wrap_Id_vector_begin, METH_VARARGS, (char *)"\n"
		"begin() -> iterator\n"
		"Id_vector_begin(Id_vector self) -> const_iterator\n"
		""},
	 { (char *)"Id_vector_end", _wrap_Id_vector_end, METH_VARARGS, (char *)"\n"
		"end() -> iterator\n"
		"Id_vector_end(Id_vector self) -> const_iterator\n"
		""},
	 { (char *)"Id_vector_rbegin", _wrap_Id_vector_rbegin, METH_VARARGS, (char *)"\n"
		"rbegin() -> reverse_iterator\n"
		"Id_vector_rbegin(Id_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"Id_vector_rend", _wrap_Id_vector_rend, METH_VARARGS, (char *)"\n"
		"rend() -> reverse_iterator\n"
		"Id_vector_rend(Id_vector self) -> const_reverse_iterator\n"
		""},
	 { (char *)"Id_vector_pop_back", _wrap_Id_vector_pop_back, METH_VARARGS, (char *)"Id_vector_pop_back(Id_vector self)"},
	 { (char *)"Id_vector_erase", _wrap_Id_vector_erase, METH_VARARGS, (char *)"\n"
		"erase(iterator pos) -> iterator\n"
		"Id_vector_erase(Id_vector self, iterator first, iterator last) -> iterator\n"
		""},
	 { (char *)"new_Id_vector", _wrap_new_Id_vector, METH_VARARGS, (char *)"\n"
		"Id_vector()\n"
		"Id_vector(Id_vector ?)\n"
		"Id_vector(size_type size)\n"
		"new_Id_vector(size_type size, value_type value) -> Id_vector\n"
		""},
	 { (char *)"Id_vector_push_back", _wrap_Id_vector_push_back, METH_VARARGS, (char *)"Id_vector_push_back(Id_vector self, value_type x)"},
	 { (char *)"Id_vector_front", _wrap_Id_vector_front, METH_VARARGS, (char *)"Id_vector_front(Id_vector self) -> value_type"},
	 { (char *)"Id_vector_back", _wrap_Id_vector_back, METH_VARARGS, (char *)"Id_vector_back(Id_vector self) -> value_type"},
	 { (char *)"Id_vector_assign", _wrap_Id_vector_assign, METH_VARARGS, (char *)"Id_vector_assign(Id_vector self, size_type n, value_type x)"},
	 { (char *)"Id_vector_resize", _wrap_Id_vector_resize, METH_VARARGS, (char *)"\n"
		"resize(size_type new_size)\n"
		"Id_vector_resize(Id_vector self, size_type new_size, value_type x)\n"
		""},
	 { (char *)"Id_vector_insert", _wrap_Id_vector_insert, METH_VARARGS, (char *)"\n"
		"insert(iterator pos, value_type x) -> iterator\n"
		"Id_vector_insert(Id_vector self, iterator pos, size_type n, value_type x)\n"
		""},
	 { (char *)"Id_vector_reserve", _wrap_Id_vector_reserve, METH_VARARGS, (char *)"Id_vector_reserve(Id_vector self, size_type n)"},
	 { (char *)"Id_vector_capacity", _wrap_Id_vector_capacity, METH_VARARGS, (char *)"Id_vector_capacity(Id_vector self) -> size_type"},
	 { (char *)"delete_Id_vector", _wrap_delete_Id_vector, METH_VARARGS, (char *)"delete_Id_vector(Id_vector self)"},
	 { (char *)"Id_vector_swigregister", Id_vector_swigregister, METH_VARARGS, NULL},
	 { (char *)"getParBuf", _wrap_getParBuf, METH_VARARGS, (char *)"getParBuf(Conn c, unsigned int size) -> void"},
	 { (char *)"getAsyncParBuf", _wrap_getAsyncParBuf, METH_VARARGS, (char *)"getAsyncParBuf(Conn c, unsigned int size) -> void"},
	 { (char *)"initNeutralCinfo", _wrap_initNeutralCinfo, METH_VARARGS, (char *)"initNeutralCinfo() -> Cinfo"},
	 { (char *)"separateString", _wrap_separateString, METH_VARARGS, (char *)"separateString(string s, string_vector v, string separator)"},
	 { (char *)"parseString", _wrap_parseString, METH_VARARGS, (char *)"parseString(string s, string_vector v, char separators)"},
	 { (char *)"delete_Id", _wrap_delete_Id, METH_VARARGS, (char *)"delete_Id(Id self)"},
	 { (char *)"Id_localId", _wrap_Id_localId, METH_VARARGS, (char *)"\n"
		"localId(string path, string separator=\"/\") -> Id\n"
		"Id_localId(string path) -> Id\n"
		""},
	 { (char *)"Id_childId", _wrap_Id_childId, METH_VARARGS, (char *)"Id_childId(Id parent) -> Id"},
	 { (char *)"Id_scratchId", _wrap_Id_scratchId, METH_VARARGS, (char *)"Id_scratchId() -> Id"},
	 { (char *)"Id_makeIdOnNode", _wrap_Id_makeIdOnNode, METH_VARARGS, (char *)"Id_makeIdOnNode(unsigned int childNode) -> Id"},
	 { (char *)"Id_shellId", _wrap_Id_shellId, METH_VARARGS, (char *)"Id_shellId() -> Id"},
	 { (char *)"Id_postId", _wrap_Id_postId, METH_VARARGS, (char *)"Id_postId(unsigned int node) -> Id"},
	 { (char *)"Id_assignIndex", _wrap_Id_assignIndex, METH_VARARGS, (char *)"Id_assignIndex(Id self, unsigned int index) -> Id"},
	 { (char *)"Id_nextScratchId", _wrap_Id_nextScratchId, METH_VARARGS, (char *)"Id_nextScratchId() -> Id"},
	 { (char *)"Id_redefineScratchIds", _wrap_Id_redefineScratchIds, METH_VARARGS, (char *)"Id_redefineScratchIds(Id last, Nid base) -> bool"},
	 { (char *)"Id_regularizeScratch", _wrap_Id_regularizeScratch, METH_VARARGS, (char *)"Id_regularizeScratch()"},
	 { (char *)"Id_allotMainIdBlock", _wrap_Id_allotMainIdBlock, METH_VARARGS, (char *)"Id_allotMainIdBlock(unsigned int size, unsigned int node) -> unsigned int"},
	 { (char *)"Id_path", _wrap_Id_path, METH_VARARGS, (char *)"\n"
		"path(string separator=\"/\") -> string\n"
		"Id_path(Id self) -> string\n"
		""},
	 { (char *)"Id_id", _wrap_Id_id, METH_VARARGS, (char *)"Id_id(Id self) -> unsigned int"},
	 { (char *)"Id_index", _wrap_Id_index, METH_VARARGS, (char *)"Id_index(Id self) -> unsigned int"},
	 { (char *)"Id_node", _wrap_Id_node, METH_VARARGS, (char *)"Id_node(Id self) -> unsigned int"},
	 { (char *)"Id_isGlobal", _wrap_Id_isGlobal, METH_VARARGS, (char *)"Id_isGlobal(Id self) -> bool"},
	 { (char *)"Id_setGlobal", _wrap_Id_setGlobal, METH_VARARGS, (char *)"Id_setGlobal(Id self)"},
	 { (char *)"Id_setNode", _wrap_Id_setNode, METH_VARARGS, (char *)"Id_setNode(Id self, unsigned int node)"},
	 { (char *)"Id_lastId", _wrap_Id_lastId, METH_VARARGS, (char *)"Id_lastId() -> Id"},
	 { (char *)"Id_badId", _wrap_Id_badId, METH_VARARGS, (char *)"Id_badId() -> Id"},
	 { (char *)"Id_str2Id", _wrap_Id_str2Id, METH_VARARGS, (char *)"Id_str2Id(string s) -> Id"},
	 { (char *)"Id_id2str", _wrap_Id_id2str, METH_VARARGS, (char *)"Id_id2str(Id id) -> string"},
	 { (char *)"Id_bad", _wrap_Id_bad, METH_VARARGS, (char *)"Id_bad(Id self) -> bool"},
	 { (char *)"Id_good", _wrap_Id_good, METH_VARARGS, (char *)"Id_good(Id self) -> bool"},
	 { (char *)"Id_zero", _wrap_Id_zero, METH_VARARGS, (char *)"Id_zero(Id self) -> bool"},
	 { (char *)"Id_outOfRange", _wrap_Id_outOfRange, METH_VARARGS, (char *)"Id_outOfRange(Id self) -> bool"},
	 { (char *)"Id_isScratch", _wrap_Id_isScratch, METH_VARARGS, (char *)"Id_isScratch(Id self) -> bool"},
	 { (char *)"Id_isProxy", _wrap_Id_isProxy, METH_VARARGS, (char *)"Id_isProxy(Id self) -> bool"},
	 { (char *)"Id___eq__", _wrap_Id___eq__, METH_VARARGS, (char *)"Id___eq__(Id self, Id other) -> bool"},
	 { (char *)"Id___ne__", _wrap_Id___ne__, METH_VARARGS, (char *)"Id___ne__(Id self, Id other) -> bool"},
	 { (char *)"Id___lt__", _wrap_Id___lt__, METH_VARARGS, (char *)"Id___lt__(Id self, Id other) -> bool"},
	 { (char *)"Id_setElement", _wrap_Id_setElement, METH_VARARGS, (char *)"Id_setElement(Id self, Element e) -> bool"},
	 { (char *)"new_Id", _wrap_new_Id, METH_VARARGS, (char *)"\n"
		"Id()\n"
		"Id(Nid nid)\n"
		"Id(string path, string separator=\"/\")\n"
		"Id(string path)\n"
		"Id(unsigned int i, unsigned int index=0)\n"
		"new_Id(unsigned int i) -> Id\n"
		""},
	 { (char *)"Id_swigregister", Id_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Nid", _wrap_new_Nid, METH_VARARGS, (char *)"\n"
		"Nid()\n"
		"Nid(Id id)\n"
		"new_Nid(Id id, unsigned int node) -> Nid\n"
		""},
	 { (char *)"Nid_node", _wrap_Nid_node, METH_VARARGS, (char *)"Nid_node(Nid self) -> unsigned int"},
	 { (char *)"Nid_setNode", _wrap_Nid_setNode, METH_VARARGS, (char *)"Nid_setNode(Nid self, unsigned int node)"},
	 { (char *)"delete_Nid", _wrap_delete_Nid, METH_VARARGS, (char *)"delete_Nid(Nid self)"},
	 { (char *)"Nid_swigregister", Nid_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PyMooseContext", _wrap_new_PyMooseContext, METH_VARARGS, (char *)"new_PyMooseContext() -> PyMooseContext"},
	 { (char *)"delete_PyMooseContext", _wrap_delete_PyMooseContext, METH_VARARGS, (char *)"delete_PyMooseContext(PyMooseContext self)"},
	 { (char *)"PyMooseContext_getCwe", _wrap_PyMooseContext_getCwe, METH_VARARGS, (char *)"PyMooseContext_getCwe(PyMooseContext self) -> Id"},
	 { (char *)"PyMooseContext_setCwe", _wrap_PyMooseContext_setCwe, METH_VARARGS, (char *)"\n"
		"setCwe(Id elementId)\n"
		"PyMooseContext_setCwe(PyMooseContext self, string path)\n"
		""},
	 { (char *)"PyMooseContext_getShell", _wrap_PyMooseContext_getShell, METH_VARARGS, (char *)"PyMooseContext_getShell(PyMooseContext self) -> Id"},
	 { (char *)"PyMooseContext_id", _wrap_PyMooseContext_id, METH_VARARGS, (char *)"PyMooseContext_id(PyMooseContext self) -> Id"},
	 { (char *)"PyMooseContext_create", _wrap_PyMooseContext_create, METH_VARARGS, (char *)"\n"
		"create(string type, string name, Id parent=Id::badId()) -> Id\n"
		"PyMooseContext_create(PyMooseContext self, string type, string name) -> Id\n"
		""},
	 { (char *)"PyMooseContext_destroy", _wrap_PyMooseContext_destroy, METH_VARARGS, (char *)"PyMooseContext_destroy(PyMooseContext self, Id victim) -> bool"},
	 { (char *)"PyMooseContext_end", _wrap_PyMooseContext_end, METH_VARARGS, (char *)"PyMooseContext_end(PyMooseContext self)"},
	 { (char *)"PyMooseContext_recvCwe", _wrap_PyMooseContext_recvCwe, METH_VARARGS, (char *)"PyMooseContext_recvCwe(Conn c, Id i)"},
	 { (char *)"PyMooseContext_recvElist", _wrap_PyMooseContext_recvElist, METH_VARARGS, (char *)"PyMooseContext_recvElist(Conn c, Id_vector elist)"},
	 { (char *)"PyMooseContext_recvCreate", _wrap_PyMooseContext_recvCreate, METH_VARARGS, (char *)"PyMooseContext_recvCreate(Conn c, Id i)"},
	 { (char *)"PyMooseContext_recvField", _wrap_PyMooseContext_recvField, METH_VARARGS, (char *)"PyMooseContext_recvField(Conn c, string value)"},
	 { (char *)"PyMooseContext_recvWildcardList", _wrap_PyMooseContext_recvWildcardList, METH_VARARGS, (char *)"PyMooseContext_recvWildcardList(Conn c, Id_vector value)"},
	 { (char *)"PyMooseContext_recvClocks", _wrap_PyMooseContext_recvClocks, METH_VARARGS, (char *)"PyMooseContext_recvClocks(Conn c, double_vector dbls)"},
	 { (char *)"PyMooseContext_recvMessageList", _wrap_PyMooseContext_recvMessageList, METH_VARARGS, (char *)"PyMooseContext_recvMessageList(Conn c, Id_vector elist, string s)"},
	 { (char *)"PyMooseContext_createPyMooseContext", _wrap_PyMooseContext_createPyMooseContext, METH_VARARGS, (char *)"PyMooseContext_createPyMooseContext(string contextName, string shellName) -> PyMooseContext"},
	 { (char *)"PyMooseContext_destroyPyMooseContext", _wrap_PyMooseContext_destroyPyMooseContext, METH_VARARGS, (char *)"PyMooseContext_destroyPyMooseContext(PyMooseContext context)"},
	 { (char *)"PyMooseContext_loadG", _wrap_PyMooseContext_loadG, METH_VARARGS, (char *)"PyMooseContext_loadG(PyMooseContext self, string script)"},
	 { (char *)"PyMooseContext_runG", _wrap_PyMooseContext_runG, METH_VARARGS, (char *)"PyMooseContext_runG(PyMooseContext self, string statement)"},
	 { (char *)"PyMooseContext_getField", _wrap_PyMooseContext_getField, METH_VARARGS, (char *)"PyMooseContext_getField(PyMooseContext self, Id ?, string ?) -> string"},
	 { (char *)"PyMooseContext_setField", _wrap_PyMooseContext_setField, METH_VARARGS, (char *)"PyMooseContext_setField(PyMooseContext self, Id ?, string ?, string ?)"},
	 { (char *)"PyMooseContext_getMessageList", _wrap_PyMooseContext_getMessageList, METH_VARARGS, (char *)"\n"
		"getMessageList(Id obj, string field, bool incoming) -> string_vector\n"
		"PyMooseContext_getMessageList(PyMooseContext self, Id obj, bool incoming) -> string_vector\n"
		""},
	 { (char *)"PyMooseContext_getParent", _wrap_PyMooseContext_getParent, METH_VARARGS, (char *)"PyMooseContext_getParent(PyMooseContext self, Id id) -> Id"},
	 { (char *)"PyMooseContext_getPath", _wrap_PyMooseContext_getPath, METH_VARARGS, (char *)"PyMooseContext_getPath(PyMooseContext self, Id id) -> string"},
	 { (char *)"PyMooseContext_getName", _wrap_PyMooseContext_getName, METH_VARARGS, (char *)"PyMooseContext_getName(PyMooseContext self, Id id) -> string"},
	 { (char *)"PyMooseContext_getChildren", _wrap_PyMooseContext_getChildren, METH_VARARGS, (char *)"\n"
		"getChildren(Id id) -> Id_vector\n"
		"PyMooseContext_getChildren(PyMooseContext self, string path) -> Id_vector\n"
		""},
	 { (char *)"PyMooseContext_pathToId", _wrap_PyMooseContext_pathToId, METH_VARARGS, (char *)"\n"
		"pathToId(string path, bool echo=True) -> Id\n"
		"PyMooseContext_pathToId(PyMooseContext self, string path) -> Id\n"
		""},
	 { (char *)"PyMooseContext_srandom", _wrap_PyMooseContext_srandom, METH_VARARGS, (char *)"PyMooseContext_srandom(long seed)"},
	 { (char *)"PyMooseContext_step", _wrap_PyMooseContext_step, METH_VARARGS, (char *)"\n"
		"step(double runTime)\n"
		"step(long multiple)\n"
		"PyMooseContext_step(PyMooseContext self)\n"
		""},
	 { (char *)"PyMooseContext_reset", _wrap_PyMooseContext_reset, METH_VARARGS, (char *)"PyMooseContext_reset(PyMooseContext self)"},
	 { (char *)"PyMooseContext_stop", _wrap_PyMooseContext_stop, METH_VARARGS, (char *)"PyMooseContext_stop(PyMooseContext self)"},
	 { (char *)"PyMooseContext_setClock", _wrap_PyMooseContext_setClock, METH_VARARGS, (char *)"\n"
		"setClock(int clockNo, double dt, int stage=0)\n"
		"PyMooseContext_setClock(PyMooseContext self, int clockNo, double dt)\n"
		""},
	 { (char *)"PyMooseContext_getClocks", _wrap_PyMooseContext_getClocks, METH_VARARGS, (char *)"PyMooseContext_getClocks(PyMooseContext self) -> double_vector"},
	 { (char *)"PyMooseContext_useClock", _wrap_PyMooseContext_useClock, METH_VARARGS, (char *)"\n"
		"useClock(string tickName, string path, string func=\"process\")\n"
		"useClock(string tickName, string path)\n"
		"useClock(int tickNo, string path, string func=\"process\")\n"
		"PyMooseContext_useClock(PyMooseContext self, int tickNo, string path)\n"
		""},
	 { (char *)"PyMooseContext_addTask", _wrap_PyMooseContext_addTask, METH_VARARGS, (char *)"PyMooseContext_addTask(PyMooseContext self, string arg)"},
	 { (char *)"PyMooseContext_do_deep_copy", _wrap_PyMooseContext_do_deep_copy, METH_VARARGS, (char *)"PyMooseContext_do_deep_copy(PyMooseContext self, Id object, string new_name, Id dest)"},
	 { (char *)"PyMooseContext_deepCopy", _wrap_PyMooseContext_deepCopy, METH_VARARGS, (char *)"PyMooseContext_deepCopy(PyMooseContext self, Id object, string new_name, Id dest) -> Id"},
	 { (char *)"PyMooseContext_move", _wrap_PyMooseContext_move, METH_VARARGS, (char *)"PyMooseContext_move(PyMooseContext self, Id object, string new_name, Id dest)"},
	 { (char *)"PyMooseContext_connect", _wrap_PyMooseContext_connect, METH_VARARGS, (char *)"\n"
		"PyMooseContext_connect(PyMooseContext self, Id src, string srcField, Id dest, \n"
		"    string destField) -> bool\n"
		""},
	 { (char *)"PyMooseContext_tabFill", _wrap_PyMooseContext_tabFill, METH_VARARGS, (char *)"PyMooseContext_tabFill(PyMooseContext self, Id table, int xdivs, int mode)"},
	 { (char *)"PyMooseContext_setupAlpha", _wrap_PyMooseContext_setupAlpha, METH_VARARGS, (char *)"\n"
		"setupAlpha(string channel, string gate, double_vector parms)\n"
		"setupAlpha(string channel, string gate, double AA, double AB, \n"
		"    double AC, double AD, double AF, double BA, double BB, \n"
		"    double BC, double BD, double BF, double size, \n"
		"    double min, double max)\n"
		"PyMooseContext_setupAlpha(PyMooseContext self, Id gateId, double_vector parms)\n"
		""},
	 { (char *)"PyMooseContext_setupTau", _wrap_PyMooseContext_setupTau, METH_VARARGS, (char *)"\n"
		"setupTau(string channel, string gate, double_vector parms)\n"
		"setupTau(string channel, string gate, double AA, double AB, \n"
		"    double AC, double AD, double AF, double BA, double BB, \n"
		"    double BC, double BD, double BF, double size, \n"
		"    double min, double max)\n"
		"PyMooseContext_setupTau(PyMooseContext self, Id gateId, double_vector parms)\n"
		""},
	 { (char *)"PyMooseContext_tweakAlpha", _wrap_PyMooseContext_tweakAlpha, METH_VARARGS, (char *)"\n"
		"tweakAlpha(string channel, string gate)\n"
		"PyMooseContext_tweakAlpha(PyMooseContext self, Id gateId)\n"
		""},
	 { (char *)"PyMooseContext_tweakTau", _wrap_PyMooseContext_tweakTau, METH_VARARGS, (char *)"\n"
		"tweakTau(string channel, string gate)\n"
		"PyMooseContext_tweakTau(PyMooseContext self, Id gateId)\n"
		""},
	 { (char *)"PyMooseContext_readCell", _wrap_PyMooseContext_readCell, METH_VARARGS, (char *)"\n"
		"readCell(string filename, string cellpath, double cm, double rm, \n"
		"    double ra, double erestAct, double eleak)\n"
		"readCell(string filename, string cellpath, double_vector params)\n"
		"PyMooseContext_readCell(PyMooseContext self, string fileName, string cellPath)\n"
		""},
	 { (char *)"PyMooseContext_exists", _wrap_PyMooseContext_exists, METH_VARARGS, (char *)"\n"
		"exists(Id id) -> bool\n"
		"PyMooseContext_exists(PyMooseContext self, string path) -> bool\n"
		""},
	 { (char *)"PyMooseContext_createMap", _wrap_PyMooseContext_createMap, METH_VARARGS, (char *)"\n"
		"createMap(string src, string dest, unsigned int nx, unsigned int ny, \n"
		"    double dx=1.0, double dy=1.0, double xo=0.0, \n"
		"    double yo=0.0, bool isObject=True)\n"
		"createMap(string src, string dest, unsigned int nx, unsigned int ny, \n"
		"    double dx=1.0, double dy=1.0, double xo=0.0, \n"
		"    double yo=0.0)\n"
		"createMap(string src, string dest, unsigned int nx, unsigned int ny, \n"
		"    double dx=1.0, double dy=1.0, double xo=0.0)\n"
		"createMap(string src, string dest, unsigned int nx, unsigned int ny, \n"
		"    double dx=1.0, double dy=1.0)\n"
		"createMap(string src, string dest, unsigned int nx, unsigned int ny, \n"
		"    double dx=1.0)\n"
		"createMap(string src, string dest, unsigned int nx, unsigned int ny)\n"
		"createMap(Id src, Id dest, string name, unsigned int nx, unsigned int ny, \n"
		"    double dx=1.0, double dy=1.0, double xo=0.0, \n"
		"    double yo=0.0)\n"
		"createMap(Id src, Id dest, string name, unsigned int nx, unsigned int ny, \n"
		"    double dx=1.0, double dy=1.0, double xo=0.0)\n"
		"createMap(Id src, Id dest, string name, unsigned int nx, unsigned int ny, \n"
		"    double dx=1.0, double dy=1.0)\n"
		"createMap(Id src, Id dest, string name, unsigned int nx, unsigned int ny, \n"
		"    double dx=1.0)\n"
		"createMap(Id src, Id dest, string name, unsigned int nx, unsigned int ny)\n"
		"PyMooseContext_createMap(PyMooseContext self, Id src, Id dest, string name, \n"
		"    double_vector param)\n"
		""},
	 { (char *)"PyMooseContext_planarConnect", _wrap_PyMooseContext_planarConnect, METH_VARARGS, (char *)"\n"
		"planarConnect(string src, string dst, double probability=1.0)\n"
		"PyMooseContext_planarConnect(PyMooseContext self, string src, string dst)\n"
		""},
	 { (char *)"PyMooseContext_plannarDelay", _wrap_PyMooseContext_plannarDelay, METH_VARARGS, (char *)"PyMooseContext_plannarDelay(PyMooseContext self, string src, double delay)"},
	 { (char *)"PyMooseContext_planarWeight", _wrap_PyMooseContext_planarWeight, METH_VARARGS, (char *)"PyMooseContext_planarWeight(PyMooseContext self, string src, double weight)"},
	 { (char *)"PyMooseContext_className", _wrap_PyMooseContext_className, METH_VARARGS, (char *)"PyMooseContext_className(PyMooseContext self, Id objId) -> string"},
	 { (char *)"PyMooseContext_doc", _wrap_PyMooseContext_doc, METH_VARARGS, (char *)"PyMooseContext_doc(PyMooseContext self, string className) -> string"},
	 { (char *)"PyMooseContext_swigregister", PyMooseContext_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_PyMooseBase", _wrap_delete_PyMooseBase, METH_VARARGS, (char *)"delete_PyMooseBase(PyMooseBase self)"},
	 { (char *)"PyMooseBase_destroy", _wrap_PyMooseBase_destroy, METH_VARARGS, (char *)"PyMooseBase_destroy(Id id) -> bool"},
	 { (char *)"PyMooseBase_endSimulation", _wrap_PyMooseBase_endSimulation, METH_VARARGS, (char *)"PyMooseBase_endSimulation()"},
	 { (char *)"PyMooseBase_getType", _wrap_PyMooseBase_getType, METH_VARARGS, (char *)"PyMooseBase_getType(PyMooseBase self) -> string"},
	 { (char *)"PyMooseBase_getSeparator", _wrap_PyMooseBase_getSeparator, METH_VARARGS, (char *)"PyMooseBase_getSeparator(PyMooseBase self) -> string"},
	 { (char *)"PyMooseBase_getContext", _wrap_PyMooseBase_getContext, METH_VARARGS, (char *)"PyMooseBase_getContext() -> PyMooseContext"},
	 { (char *)"PyMooseBase___get_className", _wrap_PyMooseBase___get_className, METH_VARARGS, (char *)"PyMooseBase___get_className(PyMooseBase self) -> string"},
	 { (char *)"PyMooseBase_children", _wrap_PyMooseBase_children, METH_VARARGS, (char *)"PyMooseBase_children(PyMooseBase self) -> Id_vector"},
	 { (char *)"PyMooseBase___get_parent", _wrap_PyMooseBase___get_parent, METH_VARARGS, (char *)"PyMooseBase___get_parent(PyMooseBase self) -> Id"},
	 { (char *)"PyMooseBase___get_path", _wrap_PyMooseBase___get_path, METH_VARARGS, (char *)"PyMooseBase___get_path(PyMooseBase self) -> string"},
	 { (char *)"PyMooseBase___get_id", _wrap_PyMooseBase___get_id, METH_VARARGS, (char *)"PyMooseBase___get_id(PyMooseBase self) -> Id"},
	 { (char *)"PyMooseBase___get_name", _wrap_PyMooseBase___get_name, METH_VARARGS, (char *)"PyMooseBase___get_name(PyMooseBase self) -> string"},
	 { (char *)"PyMooseBase_useClock", _wrap_PyMooseBase_useClock, METH_VARARGS, (char *)"\n"
		"useClock(int clockNo, string func=\"process\")\n"
		"useClock(int clockNo)\n"
		"useClock(Id clock, string func=\"process\")\n"
		"PyMooseBase_useClock(PyMooseBase self, Id clock)\n"
		""},
	 { (char *)"PyMooseBase_connect", _wrap_PyMooseBase_connect, METH_VARARGS, (char *)"\n"
		"connect(string field, PyMooseBase dest, string destField) -> bool\n"
		"PyMooseBase_connect(PyMooseBase self, string field, Id dest, string destField) -> bool\n"
		""},
	 { (char *)"PyMooseBase_getMessageList", _wrap_PyMooseBase_getMessageList, METH_VARARGS, (char *)"PyMooseBase_getMessageList(PyMooseBase self, string field, bool isIncoming) -> string_vector"},
	 { (char *)"PyMooseBase_inMessages", _wrap_PyMooseBase_inMessages, METH_VARARGS, (char *)"PyMooseBase_inMessages(PyMooseBase self) -> string_vector"},
	 { (char *)"PyMooseBase_outMessages", _wrap_PyMooseBase_outMessages, METH_VARARGS, (char *)"PyMooseBase_outMessages(PyMooseBase self) -> string_vector"},
	 { (char *)"PyMooseBase_exists", _wrap_PyMooseBase_exists, METH_VARARGS, (char *)"\n"
		"exists(Id id) -> bool\n"
		"PyMooseBase_exists(string path) -> bool\n"
		""},
	 { (char *)"PyMooseBase_le", _wrap_PyMooseBase_le, METH_VARARGS, (char *)"PyMooseBase_le() -> Id_vector"},
	 { (char *)"PyMooseBase_pwe", _wrap_PyMooseBase_pwe, METH_VARARGS, (char *)"PyMooseBase_pwe() -> Id"},
	 { (char *)"PyMooseBase_ce", _wrap_PyMooseBase_ce, METH_VARARGS, (char *)"\n"
		"ce(Id newElement) -> Id\n"
		"PyMooseBase_ce(string path) -> Id\n"
		""},
	 { (char *)"PyMooseBase_pathToId", _wrap_PyMooseBase_pathToId, METH_VARARGS, (char *)"\n"
		"pathToId(string path, bool echo=True) -> Id\n"
		"PyMooseBase_pathToId(string path) -> Id\n"
		""},
	 { (char *)"PyMooseBase_idToPath", _wrap_PyMooseBase_idToPath, METH_VARARGS, (char *)"PyMooseBase_idToPath(Id id) -> string"},
	 { (char *)"PyMooseBase_getParent", _wrap_PyMooseBase_getParent, METH_VARARGS, (char *)"PyMooseBase_getParent(Id id) -> Id"},
	 { (char *)"PyMooseBase_getChildren", _wrap_PyMooseBase_getChildren, METH_VARARGS, (char *)"PyMooseBase_getChildren(Id id) -> Id_vector"},
	 { (char *)"PyMooseBase_initSimulation", _wrap_PyMooseBase_initSimulation, METH_VARARGS, (char *)"PyMooseBase_initSimulation()"},
	 { (char *)"PyMooseBase_id_get", _wrap_PyMooseBase_id_get, METH_VARARGS, (char *)"PyMooseBase_id_get(PyMooseBase self) -> Id"},
	 { (char *)"PyMooseBase_parent_get", _wrap_PyMooseBase_parent_get, METH_VARARGS, (char *)"PyMooseBase_parent_get(PyMooseBase self) -> Id"},
	 { (char *)"PyMooseBase_className_get", _wrap_PyMooseBase_className_get, METH_VARARGS, (char *)"PyMooseBase_className_get(PyMooseBase self) -> string"},
	 { (char *)"PyMooseBase_name_get", _wrap_PyMooseBase_name_get, METH_VARARGS, (char *)"PyMooseBase_name_get(PyMooseBase self) -> string"},
	 { (char *)"PyMooseBase_path_get", _wrap_PyMooseBase_path_get, METH_VARARGS, (char *)"PyMooseBase_path_get(PyMooseBase self) -> string"},
	 { (char *)"PyMooseBase_swigregister", PyMooseBase_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Neutral", _wrap_new_Neutral, METH_VARARGS, (char *)"\n"
		"Neutral(Id id)\n"
		"Neutral(string path)\n"
		"Neutral(string name, Id parentId)\n"
		"Neutral(string name, PyMooseBase parent)\n"
		"Neutral(string path, string fileName)\n"
		"Neutral(Neutral src, string name, PyMooseBase parent)\n"
		"Neutral(Neutral src, string name, Id parent)\n"
		"Neutral(Id src, string name, Id parent)\n"
		"new_Neutral(Neutral src, string path) -> Neutral\n"
		""},
	 { (char *)"delete_Neutral", _wrap_delete_Neutral, METH_VARARGS, (char *)"delete_Neutral(Neutral self)"},
	 { (char *)"Neutral_getType", _wrap_Neutral_getType, METH_VARARGS, (char *)"Neutral_getType(Neutral self) -> string"},
	 { (char *)"Neutral___get_childSrc", _wrap_Neutral___get_childSrc, METH_VARARGS, (char *)"Neutral___get_childSrc(Neutral self) -> int"},
	 { (char *)"Neutral___set_childSrc", _wrap_Neutral___set_childSrc, METH_VARARGS, (char *)"Neutral___set_childSrc(Neutral self, int childSrc)"},
	 { (char *)"Neutral___get_child", _wrap_Neutral___get_child, METH_VARARGS, (char *)"Neutral___get_child(Neutral self) -> int"},
	 { (char *)"Neutral___set_child", _wrap_Neutral___set_child, METH_VARARGS, (char *)"Neutral___set_child(Neutral self, int child)"},
	 { (char *)"Neutral_child_set", _wrap_Neutral_child_set, METH_VARARGS, (char *)"Neutral_child_set(Neutral self, int child)"},
	 { (char *)"Neutral_child_get", _wrap_Neutral_child_get, METH_VARARGS, (char *)"Neutral_child_get(Neutral self) -> int"},
	 { (char *)"Neutral_swigregister", Neutral_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Class", _wrap_new_Class, METH_VARARGS, (char *)"\n"
		"Class(Id id)\n"
		"Class(string path, string name)\n"
		"Class(string name, Id parentId)\n"
		"Class(string name, PyMooseBase parent)\n"
		"Class(Class src, string name, PyMooseBase parent)\n"
		"Class(Class src, string name, Id parent)\n"
		"Class(Id src, string name, Id parent)\n"
		"new_Class(Class src, string path) -> Class\n"
		""},
	 { (char *)"delete_Class", _wrap_delete_Class, METH_VARARGS, (char *)"delete_Class(Class self)"},
	 { (char *)"Class_getType", _wrap_Class_getType, METH_VARARGS, (char *)"Class_getType(Class self) -> string"},
	 { (char *)"Class___set_name", _wrap_Class___set_name, METH_VARARGS, (char *)"Class___set_name(Class self, string name)"},
	 { (char *)"Class___get_author", _wrap_Class___get_author, METH_VARARGS, (char *)"Class___get_author(Class self) -> string"},
	 { (char *)"Class___get_description", _wrap_Class___get_description, METH_VARARGS, (char *)"Class___get_description(Class self) -> string"},
	 { (char *)"Class___get_tick", _wrap_Class___get_tick, METH_VARARGS, (char *)"Class___get_tick(Class self) -> unsigned int"},
	 { (char *)"Class___set_tick", _wrap_Class___set_tick, METH_VARARGS, (char *)"Class___set_tick(Class self, unsigned int ?)"},
	 { (char *)"Class___get_stage", _wrap_Class___get_stage, METH_VARARGS, (char *)"Class___get_stage(Class self) -> unsigned int"},
	 { (char *)"Class___set_stage", _wrap_Class___set_stage, METH_VARARGS, (char *)"Class___set_stage(Class self, unsigned int ?)"},
	 { (char *)"Class___get_clock", _wrap_Class___get_clock, METH_VARARGS, (char *)"Class___get_clock(Class self) -> string"},
	 { (char *)"Class_setClock", _wrap_Class_setClock, METH_VARARGS, (char *)"Class_setClock(Class self, string function, string clock)"},
	 { (char *)"Class_name_get", _wrap_Class_name_get, METH_VARARGS, (char *)"Class_name_get(Class self) -> string"},
	 { (char *)"Class_author_get", _wrap_Class_author_get, METH_VARARGS, (char *)"Class_author_get(Class self) -> string"},
	 { (char *)"Class_description_get", _wrap_Class_description_get, METH_VARARGS, (char *)"Class_description_get(Class self) -> string"},
	 { (char *)"Class_tick_set", _wrap_Class_tick_set, METH_VARARGS, (char *)"Class_tick_set(Class self, unsigned int tick)"},
	 { (char *)"Class_tick_get", _wrap_Class_tick_get, METH_VARARGS, (char *)"Class_tick_get(Class self) -> unsigned int"},
	 { (char *)"Class_stage_set", _wrap_Class_stage_set, METH_VARARGS, (char *)"Class_stage_set(Class self, unsigned int stage)"},
	 { (char *)"Class_stage_get", _wrap_Class_stage_get, METH_VARARGS, (char *)"Class_stage_get(Class self) -> unsigned int"},
	 { (char *)"Class_swigregister", Class_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Cell", _wrap_new_Cell, METH_VARARGS, (char *)"\n"
		"Cell(Id id)\n"
		"Cell(string path)\n"
		"Cell(string name, Id parentId)\n"
		"Cell(string name, PyMooseBase parent)\n"
		"Cell(Cell src, string name, PyMooseBase parent)\n"
		"Cell(Cell src, string name, Id parent)\n"
		"Cell(Id src, string name, Id parent)\n"
		"new_Cell(Cell src, string path) -> Cell\n"
		""},
	 { (char *)"delete_Cell", _wrap_delete_Cell, METH_VARARGS, (char *)"delete_Cell(Cell self)"},
	 { (char *)"Cell_getType", _wrap_Cell_getType, METH_VARARGS, (char *)"Cell_getType(Cell self) -> string"},
	 { (char *)"Cell___set_method", _wrap_Cell___set_method, METH_VARARGS, (char *)"Cell___set_method(Cell self, string method)"},
	 { (char *)"Cell___get_method", _wrap_Cell___get_method, METH_VARARGS, (char *)"Cell___get_method(Cell self) -> string"},
	 { (char *)"Cell___get_variableDt", _wrap_Cell___get_variableDt, METH_VARARGS, (char *)"Cell___get_variableDt(Cell self) -> bool"},
	 { (char *)"Cell___get_implicit", _wrap_Cell___get_implicit, METH_VARARGS, (char *)"Cell___get_implicit(Cell self) -> bool"},
	 { (char *)"Cell___get_description", _wrap_Cell___get_description, METH_VARARGS, (char *)"Cell___get_description(Cell self) -> string"},
	 { (char *)"Cell_method_set", _wrap_Cell_method_set, METH_VARARGS, (char *)"Cell_method_set(Cell self, string method)"},
	 { (char *)"Cell_method_get", _wrap_Cell_method_get, METH_VARARGS, (char *)"Cell_method_get(Cell self) -> string"},
	 { (char *)"Cell_variableDt_get", _wrap_Cell_variableDt_get, METH_VARARGS, (char *)"Cell_variableDt_get(Cell self) -> bool"},
	 { (char *)"Cell_implicit_get", _wrap_Cell_implicit_get, METH_VARARGS, (char *)"Cell_implicit_get(Cell self) -> bool"},
	 { (char *)"Cell_description_get", _wrap_Cell_description_get, METH_VARARGS, (char *)"Cell_description_get(Cell self) -> string"},
	 { (char *)"Cell_swigregister", Cell_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClockTick", _wrap_new_ClockTick, METH_VARARGS, (char *)"\n"
		"ClockTick(Id id)\n"
		"ClockTick(string path)\n"
		"ClockTick(string name, Id parentId)\n"
		"ClockTick(string name, PyMooseBase parent)\n"
		"ClockTick(ClockTick src, string name, PyMooseBase parent)\n"
		"ClockTick(ClockTick src, string name, Id parent)\n"
		"ClockTick(Id src, string name, Id parent)\n"
		"new_ClockTick(ClockTick src, string path) -> ClockTick\n"
		""},
	 { (char *)"delete_ClockTick", _wrap_delete_ClockTick, METH_VARARGS, (char *)"delete_ClockTick(ClockTick self)"},
	 { (char *)"ClockTick_getType", _wrap_ClockTick_getType, METH_VARARGS, (char *)"ClockTick_getType(ClockTick self) -> string"},
	 { (char *)"ClockTick___get_dt", _wrap_ClockTick___get_dt, METH_VARARGS, (char *)"ClockTick___get_dt(ClockTick self) -> double"},
	 { (char *)"ClockTick___set_dt", _wrap_ClockTick___set_dt, METH_VARARGS, (char *)"ClockTick___set_dt(ClockTick self, double dt)"},
	 { (char *)"ClockTick___get_stage", _wrap_ClockTick___get_stage, METH_VARARGS, (char *)"ClockTick___get_stage(ClockTick self) -> int"},
	 { (char *)"ClockTick___set_stage", _wrap_ClockTick___set_stage, METH_VARARGS, (char *)"ClockTick___set_stage(ClockTick self, int stage)"},
	 { (char *)"ClockTick___get_ordinal", _wrap_ClockTick___get_ordinal, METH_VARARGS, (char *)"ClockTick___get_ordinal(ClockTick self) -> int"},
	 { (char *)"ClockTick___set_ordinal", _wrap_ClockTick___set_ordinal, METH_VARARGS, (char *)"ClockTick___set_ordinal(ClockTick self, int ordinal)"},
	 { (char *)"ClockTick___get_nextTime", _wrap_ClockTick___get_nextTime, METH_VARARGS, (char *)"ClockTick___get_nextTime(ClockTick self) -> double"},
	 { (char *)"ClockTick___set_nextTime", _wrap_ClockTick___set_nextTime, METH_VARARGS, (char *)"ClockTick___set_nextTime(ClockTick self, double nextTime)"},
	 { (char *)"ClockTick___set_path", _wrap_ClockTick___set_path, METH_VARARGS, (char *)"ClockTick___set_path(ClockTick self, string path)"},
	 { (char *)"ClockTick___get_updateDtSrc", _wrap_ClockTick___get_updateDtSrc, METH_VARARGS, (char *)"ClockTick___get_updateDtSrc(ClockTick self) -> double"},
	 { (char *)"ClockTick___set_updateDtSrc", _wrap_ClockTick___set_updateDtSrc, METH_VARARGS, (char *)"ClockTick___set_updateDtSrc(ClockTick self, double updateDtSrc)"},
	 { (char *)"ClockTick_dt_set", _wrap_ClockTick_dt_set, METH_VARARGS, (char *)"ClockTick_dt_set(ClockTick self, double dt)"},
	 { (char *)"ClockTick_dt_get", _wrap_ClockTick_dt_get, METH_VARARGS, (char *)"ClockTick_dt_get(ClockTick self) -> double"},
	 { (char *)"ClockTick_stage_set", _wrap_ClockTick_stage_set, METH_VARARGS, (char *)"ClockTick_stage_set(ClockTick self, int stage)"},
	 { (char *)"ClockTick_stage_get", _wrap_ClockTick_stage_get, METH_VARARGS, (char *)"ClockTick_stage_get(ClockTick self) -> int"},
	 { (char *)"ClockTick_ordinal_set", _wrap_ClockTick_ordinal_set, METH_VARARGS, (char *)"ClockTick_ordinal_set(ClockTick self, int ordinal)"},
	 { (char *)"ClockTick_ordinal_get", _wrap_ClockTick_ordinal_get, METH_VARARGS, (char *)"ClockTick_ordinal_get(ClockTick self) -> int"},
	 { (char *)"ClockTick_nextTime_set", _wrap_ClockTick_nextTime_set, METH_VARARGS, (char *)"ClockTick_nextTime_set(ClockTick self, double nextTime)"},
	 { (char *)"ClockTick_nextTime_get", _wrap_ClockTick_nextTime_get, METH_VARARGS, (char *)"ClockTick_nextTime_get(ClockTick self) -> double"},
	 { (char *)"ClockTick_updateDtSrc_set", _wrap_ClockTick_updateDtSrc_set, METH_VARARGS, (char *)"ClockTick_updateDtSrc_set(ClockTick self, double updateDtSrc)"},
	 { (char *)"ClockTick_updateDtSrc_get", _wrap_ClockTick_updateDtSrc_get, METH_VARARGS, (char *)"ClockTick_updateDtSrc_get(ClockTick self) -> double"},
	 { (char *)"ClockTick_swigregister", ClockTick_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ClockJob", _wrap_new_ClockJob, METH_VARARGS, (char *)"\n"
		"ClockJob(Id id)\n"
		"ClockJob(string path)\n"
		"ClockJob(string name, Id parentId)\n"
		"ClockJob(string name, PyMooseBase parent)\n"
		"ClockJob(ClockJob src, string name, PyMooseBase parent)\n"
		"ClockJob(ClockJob src, string name, Id parent)\n"
		"ClockJob(Id src, string name, Id parent)\n"
		"new_ClockJob(ClockJob src, string path) -> ClockJob\n"
		""},
	 { (char *)"delete_ClockJob", _wrap_delete_ClockJob, METH_VARARGS, (char *)"delete_ClockJob(ClockJob self)"},
	 { (char *)"ClockJob_getType", _wrap_ClockJob_getType, METH_VARARGS, (char *)"ClockJob_getType(ClockJob self) -> string"},
	 { (char *)"ClockJob___get_runTime", _wrap_ClockJob___get_runTime, METH_VARARGS, (char *)"ClockJob___get_runTime(ClockJob self) -> double"},
	 { (char *)"ClockJob___set_runTime", _wrap_ClockJob___set_runTime, METH_VARARGS, (char *)"ClockJob___set_runTime(ClockJob self, double runTime)"},
	 { (char *)"ClockJob___get_currentTime", _wrap_ClockJob___get_currentTime, METH_VARARGS, (char *)"ClockJob___get_currentTime(ClockJob self) -> double"},
	 { (char *)"ClockJob___set_currentTime", _wrap_ClockJob___set_currentTime, METH_VARARGS, (char *)"ClockJob___set_currentTime(ClockJob self, double currentTime)"},
	 { (char *)"ClockJob___get_nsteps", _wrap_ClockJob___get_nsteps, METH_VARARGS, (char *)"ClockJob___get_nsteps(ClockJob self) -> int"},
	 { (char *)"ClockJob___set_nsteps", _wrap_ClockJob___set_nsteps, METH_VARARGS, (char *)"ClockJob___set_nsteps(ClockJob self, int nsteps)"},
	 { (char *)"ClockJob___get_currentStep", _wrap_ClockJob___get_currentStep, METH_VARARGS, (char *)"ClockJob___get_currentStep(ClockJob self) -> int"},
	 { (char *)"ClockJob___set_currentStep", _wrap_ClockJob___set_currentStep, METH_VARARGS, (char *)"ClockJob___set_currentStep(ClockJob self, int currentStep)"},
	 { (char *)"ClockJob___get_start", _wrap_ClockJob___get_start, METH_VARARGS, (char *)"ClockJob___get_start(ClockJob self) -> double"},
	 { (char *)"ClockJob___set_start", _wrap_ClockJob___set_start, METH_VARARGS, (char *)"ClockJob___set_start(ClockJob self, double start)"},
	 { (char *)"ClockJob___get_step", _wrap_ClockJob___get_step, METH_VARARGS, (char *)"ClockJob___get_step(ClockJob self) -> int"},
	 { (char *)"ClockJob___set_step", _wrap_ClockJob___set_step, METH_VARARGS, (char *)"ClockJob___set_step(ClockJob self, int step)"},
	 { (char *)"ClockJob_resched", _wrap_ClockJob_resched, METH_VARARGS, (char *)"ClockJob_resched(ClockJob self)"},
	 { (char *)"ClockJob_reinit", _wrap_ClockJob_reinit, METH_VARARGS, (char *)"ClockJob_reinit(ClockJob self)"},
	 { (char *)"ClockJob_stop", _wrap_ClockJob_stop, METH_VARARGS, (char *)"ClockJob_stop(ClockJob self)"},
	 { (char *)"ClockJob_getClocks", _wrap_ClockJob_getClocks, METH_VARARGS, (char *)"ClockJob_getClocks() -> double_vector"},
	 { (char *)"ClockJob_runTime_set", _wrap_ClockJob_runTime_set, METH_VARARGS, (char *)"ClockJob_runTime_set(ClockJob self, double runTime)"},
	 { (char *)"ClockJob_runTime_get", _wrap_ClockJob_runTime_get, METH_VARARGS, (char *)"ClockJob_runTime_get(ClockJob self) -> double"},
	 { (char *)"ClockJob_currentTime_set", _wrap_ClockJob_currentTime_set, METH_VARARGS, (char *)"ClockJob_currentTime_set(ClockJob self, double currentTime)"},
	 { (char *)"ClockJob_currentTime_get", _wrap_ClockJob_currentTime_get, METH_VARARGS, (char *)"ClockJob_currentTime_get(ClockJob self) -> double"},
	 { (char *)"ClockJob_nsteps_set", _wrap_ClockJob_nsteps_set, METH_VARARGS, (char *)"ClockJob_nsteps_set(ClockJob self, int nsteps)"},
	 { (char *)"ClockJob_nsteps_get", _wrap_ClockJob_nsteps_get, METH_VARARGS, (char *)"ClockJob_nsteps_get(ClockJob self) -> int"},
	 { (char *)"ClockJob_currentStep_set", _wrap_ClockJob_currentStep_set, METH_VARARGS, (char *)"ClockJob_currentStep_set(ClockJob self, int currentStep)"},
	 { (char *)"ClockJob_currentStep_get", _wrap_ClockJob_currentStep_get, METH_VARARGS, (char *)"ClockJob_currentStep_get(ClockJob self) -> int"},
	 { (char *)"ClockJob_start_set", _wrap_ClockJob_start_set, METH_VARARGS, (char *)"ClockJob_start_set(ClockJob self, double start)"},
	 { (char *)"ClockJob_start_get", _wrap_ClockJob_start_get, METH_VARARGS, (char *)"ClockJob_start_get(ClockJob self) -> double"},
	 { (char *)"ClockJob_step_set", _wrap_ClockJob_step_set, METH_VARARGS, (char *)"ClockJob_step_set(ClockJob self, int step)"},
	 { (char *)"ClockJob_step_get", _wrap_ClockJob_step_get, METH_VARARGS, (char *)"ClockJob_step_get(ClockJob self) -> int"},
	 { (char *)"ClockJob_swigregister", ClockJob_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_InterpolationTable", _wrap_new_InterpolationTable, METH_VARARGS, (char *)"\n"
		"InterpolationTable(Id id)\n"
		"InterpolationTable(string path)\n"
		"InterpolationTable(string name, Id parentId)\n"
		"InterpolationTable(string name, PyMooseBase parent)\n"
		"InterpolationTable(InterpolationTable src, string name, PyMooseBase parent)\n"
		"InterpolationTable(InterpolationTable src, string name, Id parent)\n"
		"InterpolationTable(Id src, string name, Id parent)\n"
		"new_InterpolationTable(InterpolationTable src, string path) -> InterpolationTable\n"
		""},
	 { (char *)"delete_InterpolationTable", _wrap_delete_InterpolationTable, METH_VARARGS, (char *)"delete_InterpolationTable(InterpolationTable self)"},
	 { (char *)"InterpolationTable_getType", _wrap_InterpolationTable_getType, METH_VARARGS, (char *)"InterpolationTable_getType(InterpolationTable self) -> string"},
	 { (char *)"InterpolationTable___get_xmin", _wrap_InterpolationTable___get_xmin, METH_VARARGS, (char *)"InterpolationTable___get_xmin(InterpolationTable self) -> double"},
	 { (char *)"InterpolationTable___set_xmin", _wrap_InterpolationTable___set_xmin, METH_VARARGS, (char *)"InterpolationTable___set_xmin(InterpolationTable self, double xmin)"},
	 { (char *)"InterpolationTable___get_xmax", _wrap_InterpolationTable___get_xmax, METH_VARARGS, (char *)"InterpolationTable___get_xmax(InterpolationTable self) -> double"},
	 { (char *)"InterpolationTable___set_xmax", _wrap_InterpolationTable___set_xmax, METH_VARARGS, (char *)"InterpolationTable___set_xmax(InterpolationTable self, double xmax)"},
	 { (char *)"InterpolationTable___get_xdivs", _wrap_InterpolationTable___get_xdivs, METH_VARARGS, (char *)"InterpolationTable___get_xdivs(InterpolationTable self) -> int"},
	 { (char *)"InterpolationTable___set_xdivs", _wrap_InterpolationTable___set_xdivs, METH_VARARGS, (char *)"InterpolationTable___set_xdivs(InterpolationTable self, int xdivs)"},
	 { (char *)"InterpolationTable___get_mode", _wrap_InterpolationTable___get_mode, METH_VARARGS, (char *)"InterpolationTable___get_mode(InterpolationTable self) -> int"},
	 { (char *)"InterpolationTable___set_mode", _wrap_InterpolationTable___set_mode, METH_VARARGS, (char *)"InterpolationTable___set_mode(InterpolationTable self, int mode)"},
	 { (char *)"InterpolationTable___get_dx", _wrap_InterpolationTable___get_dx, METH_VARARGS, (char *)"InterpolationTable___get_dx(InterpolationTable self) -> double"},
	 { (char *)"InterpolationTable___set_dx", _wrap_InterpolationTable___set_dx, METH_VARARGS, (char *)"InterpolationTable___set_dx(InterpolationTable self, double dx)"},
	 { (char *)"InterpolationTable___get_sy", _wrap_InterpolationTable___get_sy, METH_VARARGS, (char *)"InterpolationTable___get_sy(InterpolationTable self) -> double"},
	 { (char *)"InterpolationTable___set_sy", _wrap_InterpolationTable___set_sy, METH_VARARGS, (char *)"InterpolationTable___set_sy(InterpolationTable self, double sy)"},
	 { (char *)"InterpolationTable___getitem__", _wrap_InterpolationTable___getitem__, METH_VARARGS, (char *)"InterpolationTable___getitem__(InterpolationTable self, unsigned int index) -> double"},
	 { (char *)"InterpolationTable___setitem__", _wrap_InterpolationTable___setitem__, METH_VARARGS, (char *)"InterpolationTable___setitem__(InterpolationTable self, unsigned int index, double value)"},
	 { (char *)"InterpolationTable___iter__", _wrap_InterpolationTable___iter__, METH_VARARGS, (char *)"InterpolationTable___iter__(InterpolationTable self) -> TableIterator"},
	 { (char *)"InterpolationTable___len__", _wrap_InterpolationTable___len__, METH_VARARGS, (char *)"InterpolationTable___len__(InterpolationTable self) -> int"},
	 { (char *)"InterpolationTable___get_calcMode", _wrap_InterpolationTable___get_calcMode, METH_VARARGS, (char *)"InterpolationTable___get_calcMode(InterpolationTable self) -> int"},
	 { (char *)"InterpolationTable___set_calcMode", _wrap_InterpolationTable___set_calcMode, METH_VARARGS, (char *)"InterpolationTable___set_calcMode(InterpolationTable self, int calc_mode)"},
	 { (char *)"InterpolationTable_dumpFile", _wrap_InterpolationTable_dumpFile, METH_VARARGS, (char *)"\n"
		"dumpFile() -> string\n"
		"dumpFile(string fileName, bool append=False)\n"
		"InterpolationTable_dumpFile(InterpolationTable self, string fileName)\n"
		""},
	 { (char *)"InterpolationTable_tabFill", _wrap_InterpolationTable_tabFill, METH_VARARGS, (char *)"InterpolationTable_tabFill(InterpolationTable self, int xdivs, int mode)"},
	 { (char *)"InterpolationTable_xmin_set", _wrap_InterpolationTable_xmin_set, METH_VARARGS, (char *)"InterpolationTable_xmin_set(InterpolationTable self, double xmin)"},
	 { (char *)"InterpolationTable_xmin_get", _wrap_InterpolationTable_xmin_get, METH_VARARGS, (char *)"InterpolationTable_xmin_get(InterpolationTable self) -> double"},
	 { (char *)"InterpolationTable_xmax_set", _wrap_InterpolationTable_xmax_set, METH_VARARGS, (char *)"InterpolationTable_xmax_set(InterpolationTable self, double xmax)"},
	 { (char *)"InterpolationTable_xmax_get", _wrap_InterpolationTable_xmax_get, METH_VARARGS, (char *)"InterpolationTable_xmax_get(InterpolationTable self) -> double"},
	 { (char *)"InterpolationTable_xdivs_set", _wrap_InterpolationTable_xdivs_set, METH_VARARGS, (char *)"InterpolationTable_xdivs_set(InterpolationTable self, int xdivs)"},
	 { (char *)"InterpolationTable_xdivs_get", _wrap_InterpolationTable_xdivs_get, METH_VARARGS, (char *)"InterpolationTable_xdivs_get(InterpolationTable self) -> int"},
	 { (char *)"InterpolationTable_mode_set", _wrap_InterpolationTable_mode_set, METH_VARARGS, (char *)"InterpolationTable_mode_set(InterpolationTable self, int mode)"},
	 { (char *)"InterpolationTable_mode_get", _wrap_InterpolationTable_mode_get, METH_VARARGS, (char *)"InterpolationTable_mode_get(InterpolationTable self) -> int"},
	 { (char *)"InterpolationTable_dx_set", _wrap_InterpolationTable_dx_set, METH_VARARGS, (char *)"InterpolationTable_dx_set(InterpolationTable self, double dx)"},
	 { (char *)"InterpolationTable_dx_get", _wrap_InterpolationTable_dx_get, METH_VARARGS, (char *)"InterpolationTable_dx_get(InterpolationTable self) -> double"},
	 { (char *)"InterpolationTable_sy_set", _wrap_InterpolationTable_sy_set, METH_VARARGS, (char *)"InterpolationTable_sy_set(InterpolationTable self, double sy)"},
	 { (char *)"InterpolationTable_sy_get", _wrap_InterpolationTable_sy_get, METH_VARARGS, (char *)"InterpolationTable_sy_get(InterpolationTable self) -> double"},
	 { (char *)"InterpolationTable_calcMode_set", _wrap_InterpolationTable_calcMode_set, METH_VARARGS, (char *)"InterpolationTable_calcMode_set(InterpolationTable self, int calcMode)"},
	 { (char *)"InterpolationTable_calcMode_get", _wrap_InterpolationTable_calcMode_get, METH_VARARGS, (char *)"InterpolationTable_calcMode_get(InterpolationTable self) -> int"},
	 { (char *)"InterpolationTable_swigregister", InterpolationTable_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TableIterator", _wrap_new_TableIterator, METH_VARARGS, (char *)"new_TableIterator(InterpolationTable table) -> TableIterator"},
	 { (char *)"TableIterator___iter__", _wrap_TableIterator___iter__, METH_VARARGS, (char *)"TableIterator___iter__(TableIterator self) -> TableIterator"},
	 { (char *)"TableIterator___hasNext__", _wrap_TableIterator___hasNext__, METH_VARARGS, (char *)"TableIterator___hasNext__(TableIterator self) -> bool"},
	 { (char *)"TableIterator___next__", _wrap_TableIterator___next__, METH_VARARGS, (char *)"TableIterator___next__(TableIterator self) -> double"},
	 { (char *)"delete_TableIterator", _wrap_delete_TableIterator, METH_VARARGS, (char *)"delete_TableIterator(TableIterator self)"},
	 { (char *)"TableIterator_swigregister", TableIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Table", _wrap_new_Table, METH_VARARGS, (char *)"\n"
		"Table(Id id)\n"
		"Table(string path)\n"
		"Table(string name, Id parentId)\n"
		"Table(string name, PyMooseBase parent)\n"
		"Table(Table src, string name, PyMooseBase parent)\n"
		"Table(Table src, string name, Id parent)\n"
		"Table(Id src, string name, Id parent)\n"
		"new_Table(Table src, string path) -> Table\n"
		""},
	 { (char *)"delete_Table", _wrap_delete_Table, METH_VARARGS, (char *)"delete_Table(Table self)"},
	 { (char *)"Table_getType", _wrap_Table_getType, METH_VARARGS, (char *)"Table_getType(Table self) -> string"},
	 { (char *)"Table___get_input", _wrap_Table___get_input, METH_VARARGS, (char *)"Table___get_input(Table self) -> double"},
	 { (char *)"Table___set_input", _wrap_Table___set_input, METH_VARARGS, (char *)"Table___set_input(Table self, double input)"},
	 { (char *)"Table___get_output", _wrap_Table___get_output, METH_VARARGS, (char *)"Table___get_output(Table self) -> double"},
	 { (char *)"Table___set_output", _wrap_Table___set_output, METH_VARARGS, (char *)"Table___set_output(Table self, double output)"},
	 { (char *)"Table___get_stepMode", _wrap_Table___get_stepMode, METH_VARARGS, (char *)"Table___get_stepMode(Table self) -> int"},
	 { (char *)"Table___set_stepMode", _wrap_Table___set_stepMode, METH_VARARGS, (char *)"Table___set_stepMode(Table self, int stepMode)"},
	 { (char *)"Table___get_stepSize", _wrap_Table___get_stepSize, METH_VARARGS, (char *)"Table___get_stepSize(Table self) -> double"},
	 { (char *)"Table___set_stepSize", _wrap_Table___set_stepSize, METH_VARARGS, (char *)"Table___set_stepSize(Table self, double stepSize)"},
	 { (char *)"Table___get_threshold", _wrap_Table___get_threshold, METH_VARARGS, (char *)"Table___get_threshold(Table self) -> double"},
	 { (char *)"Table___set_threshold", _wrap_Table___set_threshold, METH_VARARGS, (char *)"Table___set_threshold(Table self, double threshold)"},
	 { (char *)"Table_createTable", _wrap_Table_createTable, METH_VARARGS, (char *)"Table_createTable(Table self, int xdiv, double xmin, double xmax)"},
	 { (char *)"Table_input_set", _wrap_Table_input_set, METH_VARARGS, (char *)"Table_input_set(Table self, double input)"},
	 { (char *)"Table_input_get", _wrap_Table_input_get, METH_VARARGS, (char *)"Table_input_get(Table self) -> double"},
	 { (char *)"Table_output_set", _wrap_Table_output_set, METH_VARARGS, (char *)"Table_output_set(Table self, double output)"},
	 { (char *)"Table_output_get", _wrap_Table_output_get, METH_VARARGS, (char *)"Table_output_get(Table self) -> double"},
	 { (char *)"Table_stepMode_set", _wrap_Table_stepMode_set, METH_VARARGS, (char *)"Table_stepMode_set(Table self, int stepMode)"},
	 { (char *)"Table_stepMode_get", _wrap_Table_stepMode_get, METH_VARARGS, (char *)"Table_stepMode_get(Table self) -> int"},
	 { (char *)"Table_stepSize_set", _wrap_Table_stepSize_set, METH_VARARGS, (char *)"Table_stepSize_set(Table self, double stepSize)"},
	 { (char *)"Table_stepSize_get", _wrap_Table_stepSize_get, METH_VARARGS, (char *)"Table_stepSize_get(Table self) -> double"},
	 { (char *)"Table_threshold_set", _wrap_Table_threshold_set, METH_VARARGS, (char *)"Table_threshold_set(Table self, double threshold)"},
	 { (char *)"Table_threshold_get", _wrap_Table_threshold_get, METH_VARARGS, (char *)"Table_threshold_get(Table self) -> double"},
	 { (char *)"Table_swigregister", Table_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SynChan", _wrap_new_SynChan, METH_VARARGS, (char *)"\n"
		"SynChan(Id id)\n"
		"SynChan(string path)\n"
		"SynChan(string name, Id parentId)\n"
		"SynChan(string name, PyMooseBase parent)\n"
		"SynChan(SynChan src, string name, PyMooseBase parent)\n"
		"SynChan(SynChan src, string name, Id parent)\n"
		"SynChan(Id src, string name, Id parent)\n"
		"new_SynChan(SynChan src, string path) -> SynChan\n"
		""},
	 { (char *)"delete_SynChan", _wrap_delete_SynChan, METH_VARARGS, (char *)"delete_SynChan(SynChan self)"},
	 { (char *)"SynChan_getType", _wrap_SynChan_getType, METH_VARARGS, (char *)"SynChan_getType(SynChan self) -> string"},
	 { (char *)"SynChan___get_Gbar", _wrap_SynChan___get_Gbar, METH_VARARGS, (char *)"SynChan___get_Gbar(SynChan self) -> double"},
	 { (char *)"SynChan___set_Gbar", _wrap_SynChan___set_Gbar, METH_VARARGS, (char *)"SynChan___set_Gbar(SynChan self, double Gbar)"},
	 { (char *)"SynChan___get_Ek", _wrap_SynChan___get_Ek, METH_VARARGS, (char *)"SynChan___get_Ek(SynChan self) -> double"},
	 { (char *)"SynChan___set_Ek", _wrap_SynChan___set_Ek, METH_VARARGS, (char *)"SynChan___set_Ek(SynChan self, double Ek)"},
	 { (char *)"SynChan___get_tau1", _wrap_SynChan___get_tau1, METH_VARARGS, (char *)"SynChan___get_tau1(SynChan self) -> double"},
	 { (char *)"SynChan___set_tau1", _wrap_SynChan___set_tau1, METH_VARARGS, (char *)"SynChan___set_tau1(SynChan self, double tau1)"},
	 { (char *)"SynChan___get_tau2", _wrap_SynChan___get_tau2, METH_VARARGS, (char *)"SynChan___get_tau2(SynChan self) -> double"},
	 { (char *)"SynChan___set_tau2", _wrap_SynChan___set_tau2, METH_VARARGS, (char *)"SynChan___set_tau2(SynChan self, double tau2)"},
	 { (char *)"SynChan___get_normalizeWeights", _wrap_SynChan___get_normalizeWeights, METH_VARARGS, (char *)"SynChan___get_normalizeWeights(SynChan self) -> bool"},
	 { (char *)"SynChan___set_normalizeWeights", _wrap_SynChan___set_normalizeWeights, METH_VARARGS, (char *)"SynChan___set_normalizeWeights(SynChan self, bool normalizeWeights)"},
	 { (char *)"SynChan___get_Gk", _wrap_SynChan___get_Gk, METH_VARARGS, (char *)"SynChan___get_Gk(SynChan self) -> double"},
	 { (char *)"SynChan___set_Gk", _wrap_SynChan___set_Gk, METH_VARARGS, (char *)"SynChan___set_Gk(SynChan self, double Gk)"},
	 { (char *)"SynChan___get_Ik", _wrap_SynChan___get_Ik, METH_VARARGS, (char *)"SynChan___get_Ik(SynChan self) -> double"},
	 { (char *)"SynChan___set_Ik", _wrap_SynChan___set_Ik, METH_VARARGS, (char *)"SynChan___set_Ik(SynChan self, double Ik)"},
	 { (char *)"SynChan___get_numSynapses", _wrap_SynChan___get_numSynapses, METH_VARARGS, (char *)"SynChan___get_numSynapses(SynChan self) -> unsigned int"},
	 { (char *)"SynChan___set_numSynapses", _wrap_SynChan___set_numSynapses, METH_VARARGS, (char *)"SynChan___set_numSynapses(SynChan self, unsigned int numSynapses)"},
	 { (char *)"SynChan___get_weight", _wrap_SynChan___get_weight, METH_VARARGS, (char *)"SynChan___get_weight(SynChan self) -> double"},
	 { (char *)"SynChan___set_weight", _wrap_SynChan___set_weight, METH_VARARGS, (char *)"SynChan___set_weight(SynChan self, double weight)"},
	 { (char *)"SynChan___get_delay", _wrap_SynChan___get_delay, METH_VARARGS, (char *)"SynChan___get_delay(SynChan self) -> double"},
	 { (char *)"SynChan___set_delay", _wrap_SynChan___set_delay, METH_VARARGS, (char *)"SynChan___set_delay(SynChan self, double delay)"},
	 { (char *)"SynChan___get_IkSrc", _wrap_SynChan___get_IkSrc, METH_VARARGS, (char *)"SynChan___get_IkSrc(SynChan self) -> double"},
	 { (char *)"SynChan___set_IkSrc", _wrap_SynChan___set_IkSrc, METH_VARARGS, (char *)"SynChan___set_IkSrc(SynChan self, double IkSrc)"},
	 { (char *)"SynChan___get_synapse", _wrap_SynChan___get_synapse, METH_VARARGS, (char *)"SynChan___get_synapse(SynChan self) -> double"},
	 { (char *)"SynChan___set_synapse", _wrap_SynChan___set_synapse, METH_VARARGS, (char *)"SynChan___set_synapse(SynChan self, double synapse)"},
	 { (char *)"SynChan___get_activation", _wrap_SynChan___get_activation, METH_VARARGS, (char *)"SynChan___get_activation(SynChan self) -> double"},
	 { (char *)"SynChan___set_activation", _wrap_SynChan___set_activation, METH_VARARGS, (char *)"SynChan___set_activation(SynChan self, double activation)"},
	 { (char *)"SynChan___get_modulator", _wrap_SynChan___get_modulator, METH_VARARGS, (char *)"SynChan___get_modulator(SynChan self) -> double"},
	 { (char *)"SynChan___set_modulator", _wrap_SynChan___set_modulator, METH_VARARGS, (char *)"SynChan___set_modulator(SynChan self, double modulator)"},
	 { (char *)"SynChan_Gbar_set", _wrap_SynChan_Gbar_set, METH_VARARGS, (char *)"SynChan_Gbar_set(SynChan self, double Gbar)"},
	 { (char *)"SynChan_Gbar_get", _wrap_SynChan_Gbar_get, METH_VARARGS, (char *)"SynChan_Gbar_get(SynChan self) -> double"},
	 { (char *)"SynChan_Ek_set", _wrap_SynChan_Ek_set, METH_VARARGS, (char *)"SynChan_Ek_set(SynChan self, double Ek)"},
	 { (char *)"SynChan_Ek_get", _wrap_SynChan_Ek_get, METH_VARARGS, (char *)"SynChan_Ek_get(SynChan self) -> double"},
	 { (char *)"SynChan_tau1_set", _wrap_SynChan_tau1_set, METH_VARARGS, (char *)"SynChan_tau1_set(SynChan self, double tau1)"},
	 { (char *)"SynChan_tau1_get", _wrap_SynChan_tau1_get, METH_VARARGS, (char *)"SynChan_tau1_get(SynChan self) -> double"},
	 { (char *)"SynChan_tau2_set", _wrap_SynChan_tau2_set, METH_VARARGS, (char *)"SynChan_tau2_set(SynChan self, double tau2)"},
	 { (char *)"SynChan_tau2_get", _wrap_SynChan_tau2_get, METH_VARARGS, (char *)"SynChan_tau2_get(SynChan self) -> double"},
	 { (char *)"SynChan_normalizeWeights_set", _wrap_SynChan_normalizeWeights_set, METH_VARARGS, (char *)"SynChan_normalizeWeights_set(SynChan self, bool normalizeWeights)"},
	 { (char *)"SynChan_normalizeWeights_get", _wrap_SynChan_normalizeWeights_get, METH_VARARGS, (char *)"SynChan_normalizeWeights_get(SynChan self) -> bool"},
	 { (char *)"SynChan_Gk_set", _wrap_SynChan_Gk_set, METH_VARARGS, (char *)"SynChan_Gk_set(SynChan self, double Gk)"},
	 { (char *)"SynChan_Gk_get", _wrap_SynChan_Gk_get, METH_VARARGS, (char *)"SynChan_Gk_get(SynChan self) -> double"},
	 { (char *)"SynChan_Ik_set", _wrap_SynChan_Ik_set, METH_VARARGS, (char *)"SynChan_Ik_set(SynChan self, double Ik)"},
	 { (char *)"SynChan_Ik_get", _wrap_SynChan_Ik_get, METH_VARARGS, (char *)"SynChan_Ik_get(SynChan self) -> double"},
	 { (char *)"SynChan_numSynapses_get", _wrap_SynChan_numSynapses_get, METH_VARARGS, (char *)"SynChan_numSynapses_get(SynChan self) -> unsigned int"},
	 { (char *)"SynChan_activation_set", _wrap_SynChan_activation_set, METH_VARARGS, (char *)"SynChan_activation_set(SynChan self, double activation)"},
	 { (char *)"SynChan_activation_get", _wrap_SynChan_activation_get, METH_VARARGS, (char *)"SynChan_activation_get(SynChan self) -> double"},
	 { (char *)"SynChan_modulator_set", _wrap_SynChan_modulator_set, METH_VARARGS, (char *)"SynChan_modulator_set(SynChan self, double modulator)"},
	 { (char *)"SynChan_modulator_get", _wrap_SynChan_modulator_get, METH_VARARGS, (char *)"SynChan_modulator_get(SynChan self) -> double"},
	 { (char *)"SynChan_swigregister", SynChan_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BinSynchan", _wrap_new_BinSynchan, METH_VARARGS, (char *)"\n"
		"BinSynchan(::Id id)\n"
		"BinSynchan(string path)\n"
		"BinSynchan(string name, ::Id parentId)\n"
		"BinSynchan(string name, PyMooseBase parent)\n"
		"BinSynchan(BinSynchan src, string name, PyMooseBase parent)\n"
		"BinSynchan(BinSynchan src, string name, Id parent)\n"
		"BinSynchan(Id src, string name, Id parent)\n"
		"new_BinSynchan(BinSynchan src, string path) -> BinSynchan\n"
		""},
	 { (char *)"delete_BinSynchan", _wrap_delete_BinSynchan, METH_VARARGS, (char *)"delete_BinSynchan(BinSynchan self)"},
	 { (char *)"BinSynchan_getType", _wrap_BinSynchan_getType, METH_VARARGS, (char *)"BinSynchan_getType(BinSynchan self) -> string"},
	 { (char *)"BinSynchan___get_Gbar", _wrap_BinSynchan___get_Gbar, METH_VARARGS, (char *)"BinSynchan___get_Gbar(BinSynchan self) -> double"},
	 { (char *)"BinSynchan___set_Gbar", _wrap_BinSynchan___set_Gbar, METH_VARARGS, (char *)"BinSynchan___set_Gbar(BinSynchan self, double Gbar)"},
	 { (char *)"BinSynchan___get_Ek", _wrap_BinSynchan___get_Ek, METH_VARARGS, (char *)"BinSynchan___get_Ek(BinSynchan self) -> double"},
	 { (char *)"BinSynchan___set_Ek", _wrap_BinSynchan___set_Ek, METH_VARARGS, (char *)"BinSynchan___set_Ek(BinSynchan self, double Ek)"},
	 { (char *)"BinSynchan___get_tau1", _wrap_BinSynchan___get_tau1, METH_VARARGS, (char *)"BinSynchan___get_tau1(BinSynchan self) -> double"},
	 { (char *)"BinSynchan___set_tau1", _wrap_BinSynchan___set_tau1, METH_VARARGS, (char *)"BinSynchan___set_tau1(BinSynchan self, double tau1)"},
	 { (char *)"BinSynchan___get_tau2", _wrap_BinSynchan___get_tau2, METH_VARARGS, (char *)"BinSynchan___get_tau2(BinSynchan self) -> double"},
	 { (char *)"BinSynchan___set_tau2", _wrap_BinSynchan___set_tau2, METH_VARARGS, (char *)"BinSynchan___set_tau2(BinSynchan self, double tau2)"},
	 { (char *)"BinSynchan___get_normalizeWeights", _wrap_BinSynchan___get_normalizeWeights, METH_VARARGS, (char *)"BinSynchan___get_normalizeWeights(BinSynchan self) -> bool"},
	 { (char *)"BinSynchan___set_normalizeWeights", _wrap_BinSynchan___set_normalizeWeights, METH_VARARGS, (char *)"BinSynchan___set_normalizeWeights(BinSynchan self, bool normalizeWeights)"},
	 { (char *)"BinSynchan___get_Gk", _wrap_BinSynchan___get_Gk, METH_VARARGS, (char *)"BinSynchan___get_Gk(BinSynchan self) -> double"},
	 { (char *)"BinSynchan___set_Gk", _wrap_BinSynchan___set_Gk, METH_VARARGS, (char *)"BinSynchan___set_Gk(BinSynchan self, double Gk)"},
	 { (char *)"BinSynchan___get_Ik", _wrap_BinSynchan___get_Ik, METH_VARARGS, (char *)"BinSynchan___get_Ik(BinSynchan self) -> double"},
	 { (char *)"BinSynchan___set_Ik", _wrap_BinSynchan___set_Ik, METH_VARARGS, (char *)"BinSynchan___set_Ik(BinSynchan self, double Ik)"},
	 { (char *)"BinSynchan___get_numSynapses", _wrap_BinSynchan___get_numSynapses, METH_VARARGS, (char *)"BinSynchan___get_numSynapses(BinSynchan self) -> unsigned int"},
	 { (char *)"BinSynchan___set_numSynapses", _wrap_BinSynchan___set_numSynapses, METH_VARARGS, (char *)"BinSynchan___set_numSynapses(BinSynchan self, unsigned int index, unsigned int num)"},
	 { (char *)"BinSynchan___get_weight", _wrap_BinSynchan___get_weight, METH_VARARGS, (char *)"BinSynchan___get_weight(BinSynchan self, unsigned int index) -> double"},
	 { (char *)"BinSynchan___set_weight", _wrap_BinSynchan___set_weight, METH_VARARGS, (char *)"BinSynchan___set_weight(BinSynchan self, unsigned int index, double weight)"},
	 { (char *)"BinSynchan___get_delay", _wrap_BinSynchan___get_delay, METH_VARARGS, (char *)"BinSynchan___get_delay(BinSynchan self, unsigned int index) -> double"},
	 { (char *)"BinSynchan___set_delay", _wrap_BinSynchan___set_delay, METH_VARARGS, (char *)"BinSynchan___set_delay(BinSynchan self, unsigned int index, double delay)"},
	 { (char *)"BinSynchan___get_poolSize", _wrap_BinSynchan___get_poolSize, METH_VARARGS, (char *)"BinSynchan___get_poolSize(BinSynchan self, unsigned int index) -> int"},
	 { (char *)"BinSynchan___set_poolSize", _wrap_BinSynchan___set_poolSize, METH_VARARGS, (char *)"BinSynchan___set_poolSize(BinSynchan self, unsigned int index, int size)"},
	 { (char *)"BinSynchan___get_releaseP", _wrap_BinSynchan___get_releaseP, METH_VARARGS, (char *)"BinSynchan___get_releaseP(BinSynchan self, unsigned int index) -> double"},
	 { (char *)"BinSynchan___set_releaseP", _wrap_BinSynchan___set_releaseP, METH_VARARGS, (char *)"BinSynchan___set_releaseP(BinSynchan self, unsigned int index, double releaseP)"},
	 { (char *)"BinSynchan___get_releaseCount", _wrap_BinSynchan___get_releaseCount, METH_VARARGS, (char *)"BinSynchan___get_releaseCount(BinSynchan self, unsigned int index) -> double"},
	 { (char *)"BinSynchan___set_releaseCount", _wrap_BinSynchan___set_releaseCount, METH_VARARGS, (char *)"BinSynchan___set_releaseCount(BinSynchan self, unsigned int index, double releaseCount)"},
	 { (char *)"BinSynchan___get_synapse", _wrap_BinSynchan___get_synapse, METH_VARARGS, (char *)"BinSynchan___get_synapse(BinSynchan self) -> double"},
	 { (char *)"BinSynchan___set_synapse", _wrap_BinSynchan___set_synapse, METH_VARARGS, (char *)"BinSynchan___set_synapse(BinSynchan self, double synapse)"},
	 { (char *)"BinSynchan___get_activation", _wrap_BinSynchan___get_activation, METH_VARARGS, (char *)"BinSynchan___get_activation(BinSynchan self) -> double"},
	 { (char *)"BinSynchan___set_activation", _wrap_BinSynchan___set_activation, METH_VARARGS, (char *)"BinSynchan___set_activation(BinSynchan self, double activation)"},
	 { (char *)"BinSynchan___get_modulator", _wrap_BinSynchan___get_modulator, METH_VARARGS, (char *)"BinSynchan___get_modulator(BinSynchan self) -> double"},
	 { (char *)"BinSynchan___set_modulator", _wrap_BinSynchan___set_modulator, METH_VARARGS, (char *)"BinSynchan___set_modulator(BinSynchan self, double modulator)"},
	 { (char *)"BinSynchan_weight_set", _wrap_BinSynchan_weight_set, METH_VARARGS, (char *)"BinSynchan_weight_set(BinSynchan self, BinSynchanDoubleArray weight)"},
	 { (char *)"BinSynchan_weight_get", _wrap_BinSynchan_weight_get, METH_VARARGS, (char *)"BinSynchan_weight_get(BinSynchan self) -> BinSynchanDoubleArray"},
	 { (char *)"BinSynchan_delay_set", _wrap_BinSynchan_delay_set, METH_VARARGS, (char *)"BinSynchan_delay_set(BinSynchan self, BinSynchanDoubleArray delay)"},
	 { (char *)"BinSynchan_delay_get", _wrap_BinSynchan_delay_get, METH_VARARGS, (char *)"BinSynchan_delay_get(BinSynchan self) -> BinSynchanDoubleArray"},
	 { (char *)"BinSynchan_releaseP_set", _wrap_BinSynchan_releaseP_set, METH_VARARGS, (char *)"BinSynchan_releaseP_set(BinSynchan self, BinSynchanDoubleArray releaseP)"},
	 { (char *)"BinSynchan_releaseP_get", _wrap_BinSynchan_releaseP_get, METH_VARARGS, (char *)"BinSynchan_releaseP_get(BinSynchan self) -> BinSynchanDoubleArray"},
	 { (char *)"BinSynchan_poolSize_set", _wrap_BinSynchan_poolSize_set, METH_VARARGS, (char *)"BinSynchan_poolSize_set(BinSynchan self, BinSynchanIntArray poolSize)"},
	 { (char *)"BinSynchan_poolSize_get", _wrap_BinSynchan_poolSize_get, METH_VARARGS, (char *)"BinSynchan_poolSize_get(BinSynchan self) -> BinSynchanIntArray"},
	 { (char *)"BinSynchan_releaseCount_set", _wrap_BinSynchan_releaseCount_set, METH_VARARGS, (char *)"BinSynchan_releaseCount_set(BinSynchan self, BinSynchanDoubleArray releaseCount)"},
	 { (char *)"BinSynchan_releaseCount_get", _wrap_BinSynchan_releaseCount_get, METH_VARARGS, (char *)"BinSynchan_releaseCount_get(BinSynchan self) -> BinSynchanDoubleArray"},
	 { (char *)"BinSynchan_Gbar_set", _wrap_BinSynchan_Gbar_set, METH_VARARGS, (char *)"BinSynchan_Gbar_set(BinSynchan self, double Gbar)"},
	 { (char *)"BinSynchan_Gbar_get", _wrap_BinSynchan_Gbar_get, METH_VARARGS, (char *)"BinSynchan_Gbar_get(BinSynchan self) -> double"},
	 { (char *)"BinSynchan_Ek_set", _wrap_BinSynchan_Ek_set, METH_VARARGS, (char *)"BinSynchan_Ek_set(BinSynchan self, double Ek)"},
	 { (char *)"BinSynchan_Ek_get", _wrap_BinSynchan_Ek_get, METH_VARARGS, (char *)"BinSynchan_Ek_get(BinSynchan self) -> double"},
	 { (char *)"BinSynchan_tau1_set", _wrap_BinSynchan_tau1_set, METH_VARARGS, (char *)"BinSynchan_tau1_set(BinSynchan self, double tau1)"},
	 { (char *)"BinSynchan_tau1_get", _wrap_BinSynchan_tau1_get, METH_VARARGS, (char *)"BinSynchan_tau1_get(BinSynchan self) -> double"},
	 { (char *)"BinSynchan_tau2_set", _wrap_BinSynchan_tau2_set, METH_VARARGS, (char *)"BinSynchan_tau2_set(BinSynchan self, double tau2)"},
	 { (char *)"BinSynchan_tau2_get", _wrap_BinSynchan_tau2_get, METH_VARARGS, (char *)"BinSynchan_tau2_get(BinSynchan self) -> double"},
	 { (char *)"BinSynchan_normalizeWeights_set", _wrap_BinSynchan_normalizeWeights_set, METH_VARARGS, (char *)"BinSynchan_normalizeWeights_set(BinSynchan self, bool normalizeWeights)"},
	 { (char *)"BinSynchan_normalizeWeights_get", _wrap_BinSynchan_normalizeWeights_get, METH_VARARGS, (char *)"BinSynchan_normalizeWeights_get(BinSynchan self) -> bool"},
	 { (char *)"BinSynchan_Gk_set", _wrap_BinSynchan_Gk_set, METH_VARARGS, (char *)"BinSynchan_Gk_set(BinSynchan self, double Gk)"},
	 { (char *)"BinSynchan_Gk_get", _wrap_BinSynchan_Gk_get, METH_VARARGS, (char *)"BinSynchan_Gk_get(BinSynchan self) -> double"},
	 { (char *)"BinSynchan_Ik_set", _wrap_BinSynchan_Ik_set, METH_VARARGS, (char *)"BinSynchan_Ik_set(BinSynchan self, double Ik)"},
	 { (char *)"BinSynchan_Ik_get", _wrap_BinSynchan_Ik_get, METH_VARARGS, (char *)"BinSynchan_Ik_get(BinSynchan self) -> double"},
	 { (char *)"BinSynchan_numSynapses_get", _wrap_BinSynchan_numSynapses_get, METH_VARARGS, (char *)"BinSynchan_numSynapses_get(BinSynchan self) -> unsigned int"},
	 { (char *)"BinSynchan_activation_set", _wrap_BinSynchan_activation_set, METH_VARARGS, (char *)"BinSynchan_activation_set(BinSynchan self, double activation)"},
	 { (char *)"BinSynchan_activation_get", _wrap_BinSynchan_activation_get, METH_VARARGS, (char *)"BinSynchan_activation_get(BinSynchan self) -> double"},
	 { (char *)"BinSynchan_modulator_set", _wrap_BinSynchan_modulator_set, METH_VARARGS, (char *)"BinSynchan_modulator_set(BinSynchan self, double modulator)"},
	 { (char *)"BinSynchan_modulator_get", _wrap_BinSynchan_modulator_get, METH_VARARGS, (char *)"BinSynchan_modulator_get(BinSynchan self) -> double"},
	 { (char *)"BinSynchan_swigregister", BinSynchan_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_StochSynchan", _wrap_new_StochSynchan, METH_VARARGS, (char *)"\n"
		"StochSynchan(Id id)\n"
		"StochSynchan(string path)\n"
		"StochSynchan(string name, Id parentId)\n"
		"StochSynchan(string name, PyMooseBase parent)\n"
		"StochSynchan(StochSynchan src, string name, PyMooseBase parent)\n"
		"StochSynchan(StochSynchan src, string name, Id parent)\n"
		"StochSynchan(Id src, string name, Id parent)\n"
		"new_StochSynchan(StochSynchan src, string path) -> StochSynchan\n"
		""},
	 { (char *)"delete_StochSynchan", _wrap_delete_StochSynchan, METH_VARARGS, (char *)"delete_StochSynchan(StochSynchan self)"},
	 { (char *)"StochSynchan_getType", _wrap_StochSynchan_getType, METH_VARARGS, (char *)"StochSynchan_getType(StochSynchan self) -> string"},
	 { (char *)"StochSynchan___get_Gbar", _wrap_StochSynchan___get_Gbar, METH_VARARGS, (char *)"StochSynchan___get_Gbar(StochSynchan self) -> double"},
	 { (char *)"StochSynchan___set_Gbar", _wrap_StochSynchan___set_Gbar, METH_VARARGS, (char *)"StochSynchan___set_Gbar(StochSynchan self, double Gbar)"},
	 { (char *)"StochSynchan___get_Ek", _wrap_StochSynchan___get_Ek, METH_VARARGS, (char *)"StochSynchan___get_Ek(StochSynchan self) -> double"},
	 { (char *)"StochSynchan___set_Ek", _wrap_StochSynchan___set_Ek, METH_VARARGS, (char *)"StochSynchan___set_Ek(StochSynchan self, double Ek)"},
	 { (char *)"StochSynchan___get_tau1", _wrap_StochSynchan___get_tau1, METH_VARARGS, (char *)"StochSynchan___get_tau1(StochSynchan self) -> double"},
	 { (char *)"StochSynchan___set_tau1", _wrap_StochSynchan___set_tau1, METH_VARARGS, (char *)"StochSynchan___set_tau1(StochSynchan self, double tau1)"},
	 { (char *)"StochSynchan___get_tau2", _wrap_StochSynchan___get_tau2, METH_VARARGS, (char *)"StochSynchan___get_tau2(StochSynchan self) -> double"},
	 { (char *)"StochSynchan___set_tau2", _wrap_StochSynchan___set_tau2, METH_VARARGS, (char *)"StochSynchan___set_tau2(StochSynchan self, double tau2)"},
	 { (char *)"StochSynchan___get_normalizeWeights", _wrap_StochSynchan___get_normalizeWeights, METH_VARARGS, (char *)"StochSynchan___get_normalizeWeights(StochSynchan self) -> bool"},
	 { (char *)"StochSynchan___set_normalizeWeights", _wrap_StochSynchan___set_normalizeWeights, METH_VARARGS, (char *)"StochSynchan___set_normalizeWeights(StochSynchan self, bool normalizeWeights)"},
	 { (char *)"StochSynchan___get_Gk", _wrap_StochSynchan___get_Gk, METH_VARARGS, (char *)"StochSynchan___get_Gk(StochSynchan self) -> double"},
	 { (char *)"StochSynchan___set_Gk", _wrap_StochSynchan___set_Gk, METH_VARARGS, (char *)"StochSynchan___set_Gk(StochSynchan self, double Gk)"},
	 { (char *)"StochSynchan___get_Ik", _wrap_StochSynchan___get_Ik, METH_VARARGS, (char *)"StochSynchan___get_Ik(StochSynchan self) -> double"},
	 { (char *)"StochSynchan___set_Ik", _wrap_StochSynchan___set_Ik, METH_VARARGS, (char *)"StochSynchan___set_Ik(StochSynchan self, double Ik)"},
	 { (char *)"StochSynchan___get_numSynapses", _wrap_StochSynchan___get_numSynapses, METH_VARARGS, (char *)"StochSynchan___get_numSynapses(StochSynchan self) -> unsigned int"},
	 { (char *)"StochSynchan___set_numSynapses", _wrap_StochSynchan___set_numSynapses, METH_VARARGS, (char *)"StochSynchan___set_numSynapses(StochSynchan self, unsigned int index, unsigned int num)"},
	 { (char *)"StochSynchan___get_weight", _wrap_StochSynchan___get_weight, METH_VARARGS, (char *)"StochSynchan___get_weight(StochSynchan self, unsigned int index) -> double"},
	 { (char *)"StochSynchan___set_weight", _wrap_StochSynchan___set_weight, METH_VARARGS, (char *)"StochSynchan___set_weight(StochSynchan self, unsigned int index, double weight)"},
	 { (char *)"StochSynchan___get_delay", _wrap_StochSynchan___get_delay, METH_VARARGS, (char *)"StochSynchan___get_delay(StochSynchan self, unsigned int index) -> double"},
	 { (char *)"StochSynchan___set_delay", _wrap_StochSynchan___set_delay, METH_VARARGS, (char *)"StochSynchan___set_delay(StochSynchan self, unsigned int index, double delay)"},
	 { (char *)"StochSynchan___get_releaseP", _wrap_StochSynchan___get_releaseP, METH_VARARGS, (char *)"StochSynchan___get_releaseP(StochSynchan self, unsigned int index) -> double"},
	 { (char *)"StochSynchan___set_releaseP", _wrap_StochSynchan___set_releaseP, METH_VARARGS, (char *)"StochSynchan___set_releaseP(StochSynchan self, unsigned int index, double releaseP)"},
	 { (char *)"StochSynchan___get_releaseCount", _wrap_StochSynchan___get_releaseCount, METH_VARARGS, (char *)"StochSynchan___get_releaseCount(StochSynchan self, unsigned int index) -> double"},
	 { (char *)"StochSynchan___set_releaseCount", _wrap_StochSynchan___set_releaseCount, METH_VARARGS, (char *)"StochSynchan___set_releaseCount(StochSynchan self, unsigned int index, double releaseCount)"},
	 { (char *)"StochSynchan___get_synapse", _wrap_StochSynchan___get_synapse, METH_VARARGS, (char *)"StochSynchan___get_synapse(StochSynchan self) -> double"},
	 { (char *)"StochSynchan___set_synapse", _wrap_StochSynchan___set_synapse, METH_VARARGS, (char *)"StochSynchan___set_synapse(StochSynchan self, double synapse)"},
	 { (char *)"StochSynchan___get_activation", _wrap_StochSynchan___get_activation, METH_VARARGS, (char *)"StochSynchan___get_activation(StochSynchan self) -> double"},
	 { (char *)"StochSynchan___set_activation", _wrap_StochSynchan___set_activation, METH_VARARGS, (char *)"StochSynchan___set_activation(StochSynchan self, double activation)"},
	 { (char *)"StochSynchan___get_modulator", _wrap_StochSynchan___get_modulator, METH_VARARGS, (char *)"StochSynchan___get_modulator(StochSynchan self) -> double"},
	 { (char *)"StochSynchan___set_modulator", _wrap_StochSynchan___set_modulator, METH_VARARGS, (char *)"StochSynchan___set_modulator(StochSynchan self, double modulator)"},
	 { (char *)"StochSynchan_weight_set", _wrap_StochSynchan_weight_set, METH_VARARGS, (char *)"StochSynchan_weight_set(StochSynchan self, StochSynchanDoubleArray weight)"},
	 { (char *)"StochSynchan_weight_get", _wrap_StochSynchan_weight_get, METH_VARARGS, (char *)"StochSynchan_weight_get(StochSynchan self) -> StochSynchanDoubleArray"},
	 { (char *)"StochSynchan_delay_set", _wrap_StochSynchan_delay_set, METH_VARARGS, (char *)"StochSynchan_delay_set(StochSynchan self, StochSynchanDoubleArray delay)"},
	 { (char *)"StochSynchan_delay_get", _wrap_StochSynchan_delay_get, METH_VARARGS, (char *)"StochSynchan_delay_get(StochSynchan self) -> StochSynchanDoubleArray"},
	 { (char *)"StochSynchan_releaseP_set", _wrap_StochSynchan_releaseP_set, METH_VARARGS, (char *)"StochSynchan_releaseP_set(StochSynchan self, StochSynchanDoubleArray releaseP)"},
	 { (char *)"StochSynchan_releaseP_get", _wrap_StochSynchan_releaseP_get, METH_VARARGS, (char *)"StochSynchan_releaseP_get(StochSynchan self) -> StochSynchanDoubleArray"},
	 { (char *)"StochSynchan_releaseCount_set", _wrap_StochSynchan_releaseCount_set, METH_VARARGS, (char *)"StochSynchan_releaseCount_set(StochSynchan self, StochSynchanDoubleArray releaseCount)"},
	 { (char *)"StochSynchan_releaseCount_get", _wrap_StochSynchan_releaseCount_get, METH_VARARGS, (char *)"StochSynchan_releaseCount_get(StochSynchan self) -> StochSynchanDoubleArray"},
	 { (char *)"StochSynchan_Gbar_set", _wrap_StochSynchan_Gbar_set, METH_VARARGS, (char *)"StochSynchan_Gbar_set(StochSynchan self, double Gbar)"},
	 { (char *)"StochSynchan_Gbar_get", _wrap_StochSynchan_Gbar_get, METH_VARARGS, (char *)"StochSynchan_Gbar_get(StochSynchan self) -> double"},
	 { (char *)"StochSynchan_Ek_set", _wrap_StochSynchan_Ek_set, METH_VARARGS, (char *)"StochSynchan_Ek_set(StochSynchan self, double Ek)"},
	 { (char *)"StochSynchan_Ek_get", _wrap_StochSynchan_Ek_get, METH_VARARGS, (char *)"StochSynchan_Ek_get(StochSynchan self) -> double"},
	 { (char *)"StochSynchan_tau1_set", _wrap_StochSynchan_tau1_set, METH_VARARGS, (char *)"StochSynchan_tau1_set(StochSynchan self, double tau1)"},
	 { (char *)"StochSynchan_tau1_get", _wrap_StochSynchan_tau1_get, METH_VARARGS, (char *)"StochSynchan_tau1_get(StochSynchan self) -> double"},
	 { (char *)"StochSynchan_tau2_set", _wrap_StochSynchan_tau2_set, METH_VARARGS, (char *)"StochSynchan_tau2_set(StochSynchan self, double tau2)"},
	 { (char *)"StochSynchan_tau2_get", _wrap_StochSynchan_tau2_get, METH_VARARGS, (char *)"StochSynchan_tau2_get(StochSynchan self) -> double"},
	 { (char *)"StochSynchan_normalizeWeights_set", _wrap_StochSynchan_normalizeWeights_set, METH_VARARGS, (char *)"StochSynchan_normalizeWeights_set(StochSynchan self, bool normalizeWeights)"},
	 { (char *)"StochSynchan_normalizeWeights_get", _wrap_StochSynchan_normalizeWeights_get, METH_VARARGS, (char *)"StochSynchan_normalizeWeights_get(StochSynchan self) -> bool"},
	 { (char *)"StochSynchan_Gk_set", _wrap_StochSynchan_Gk_set, METH_VARARGS, (char *)"StochSynchan_Gk_set(StochSynchan self, double Gk)"},
	 { (char *)"StochSynchan_Gk_get", _wrap_StochSynchan_Gk_get, METH_VARARGS, (char *)"StochSynchan_Gk_get(StochSynchan self) -> double"},
	 { (char *)"StochSynchan_Ik_set", _wrap_StochSynchan_Ik_set, METH_VARARGS, (char *)"StochSynchan_Ik_set(StochSynchan self, double Ik)"},
	 { (char *)"StochSynchan_Ik_get", _wrap_StochSynchan_Ik_get, METH_VARARGS, (char *)"StochSynchan_Ik_get(StochSynchan self) -> double"},
	 { (char *)"StochSynchan_numSynapses_get", _wrap_StochSynchan_numSynapses_get, METH_VARARGS, (char *)"StochSynchan_numSynapses_get(StochSynchan self) -> unsigned int"},
	 { (char *)"StochSynchan_activation_set", _wrap_StochSynchan_activation_set, METH_VARARGS, (char *)"StochSynchan_activation_set(StochSynchan self, double activation)"},
	 { (char *)"StochSynchan_activation_get", _wrap_StochSynchan_activation_get, METH_VARARGS, (char *)"StochSynchan_activation_get(StochSynchan self) -> double"},
	 { (char *)"StochSynchan_modulator_set", _wrap_StochSynchan_modulator_set, METH_VARARGS, (char *)"StochSynchan_modulator_set(StochSynchan self, double modulator)"},
	 { (char *)"StochSynchan_modulator_get", _wrap_StochSynchan_modulator_get, METH_VARARGS, (char *)"StochSynchan_modulator_get(StochSynchan self) -> double"},
	 { (char *)"StochSynchan_swigregister", StochSynchan_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpikeGen", _wrap_new_SpikeGen, METH_VARARGS, (char *)"\n"
		"SpikeGen(Id id)\n"
		"SpikeGen(string path)\n"
		"SpikeGen(string name, Id parentId)\n"
		"SpikeGen(string name, PyMooseBase parent)\n"
		"SpikeGen(SpikeGen src, string name, PyMooseBase parent)\n"
		"SpikeGen(SpikeGen src, string name, Id parent)\n"
		"SpikeGen(Id src, string name, Id parent)\n"
		"new_SpikeGen(SpikeGen src, string path) -> SpikeGen\n"
		""},
	 { (char *)"delete_SpikeGen", _wrap_delete_SpikeGen, METH_VARARGS, (char *)"delete_SpikeGen(SpikeGen self)"},
	 { (char *)"SpikeGen_getType", _wrap_SpikeGen_getType, METH_VARARGS, (char *)"SpikeGen_getType(SpikeGen self) -> string"},
	 { (char *)"SpikeGen___get_threshold", _wrap_SpikeGen___get_threshold, METH_VARARGS, (char *)"SpikeGen___get_threshold(SpikeGen self) -> double"},
	 { (char *)"SpikeGen___set_threshold", _wrap_SpikeGen___set_threshold, METH_VARARGS, (char *)"SpikeGen___set_threshold(SpikeGen self, double threshold)"},
	 { (char *)"SpikeGen___get_refractT", _wrap_SpikeGen___get_refractT, METH_VARARGS, (char *)"SpikeGen___get_refractT(SpikeGen self) -> double"},
	 { (char *)"SpikeGen___set_refractT", _wrap_SpikeGen___set_refractT, METH_VARARGS, (char *)"SpikeGen___set_refractT(SpikeGen self, double refractT)"},
	 { (char *)"SpikeGen___get_absRefractT", _wrap_SpikeGen___get_absRefractT, METH_VARARGS, (char *)"SpikeGen___get_absRefractT(SpikeGen self) -> double"},
	 { (char *)"SpikeGen___set_absRefractT", _wrap_SpikeGen___set_absRefractT, METH_VARARGS, (char *)"SpikeGen___set_absRefractT(SpikeGen self, double abs_refract)"},
	 { (char *)"SpikeGen___get_amplitude", _wrap_SpikeGen___get_amplitude, METH_VARARGS, (char *)"SpikeGen___get_amplitude(SpikeGen self) -> double"},
	 { (char *)"SpikeGen___set_amplitude", _wrap_SpikeGen___set_amplitude, METH_VARARGS, (char *)"SpikeGen___set_amplitude(SpikeGen self, double amplitude)"},
	 { (char *)"SpikeGen___get_state", _wrap_SpikeGen___get_state, METH_VARARGS, (char *)"SpikeGen___get_state(SpikeGen self) -> double"},
	 { (char *)"SpikeGen___set_state", _wrap_SpikeGen___set_state, METH_VARARGS, (char *)"SpikeGen___set_state(SpikeGen self, double state)"},
	 { (char *)"SpikeGen___get_event", _wrap_SpikeGen___get_event, METH_VARARGS, (char *)"SpikeGen___get_event(SpikeGen self) -> double"},
	 { (char *)"SpikeGen___set_event", _wrap_SpikeGen___set_event, METH_VARARGS, (char *)"SpikeGen___set_event(SpikeGen self, double event)"},
	 { (char *)"SpikeGen___get_Vm", _wrap_SpikeGen___get_Vm, METH_VARARGS, (char *)"SpikeGen___get_Vm(SpikeGen self) -> double"},
	 { (char *)"SpikeGen___set_Vm", _wrap_SpikeGen___set_Vm, METH_VARARGS, (char *)"SpikeGen___set_Vm(SpikeGen self, double Vm)"},
	 { (char *)"SpikeGen_threshold_set", _wrap_SpikeGen_threshold_set, METH_VARARGS, (char *)"SpikeGen_threshold_set(SpikeGen self, double threshold)"},
	 { (char *)"SpikeGen_threshold_get", _wrap_SpikeGen_threshold_get, METH_VARARGS, (char *)"SpikeGen_threshold_get(SpikeGen self) -> double"},
	 { (char *)"SpikeGen_refractT_set", _wrap_SpikeGen_refractT_set, METH_VARARGS, (char *)"SpikeGen_refractT_set(SpikeGen self, double refractT)"},
	 { (char *)"SpikeGen_refractT_get", _wrap_SpikeGen_refractT_get, METH_VARARGS, (char *)"SpikeGen_refractT_get(SpikeGen self) -> double"},
	 { (char *)"SpikeGen_absRefractT_set", _wrap_SpikeGen_absRefractT_set, METH_VARARGS, (char *)"SpikeGen_absRefractT_set(SpikeGen self, double absRefractT)"},
	 { (char *)"SpikeGen_absRefractT_get", _wrap_SpikeGen_absRefractT_get, METH_VARARGS, (char *)"SpikeGen_absRefractT_get(SpikeGen self) -> double"},
	 { (char *)"SpikeGen_amplitude_set", _wrap_SpikeGen_amplitude_set, METH_VARARGS, (char *)"SpikeGen_amplitude_set(SpikeGen self, double amplitude)"},
	 { (char *)"SpikeGen_amplitude_get", _wrap_SpikeGen_amplitude_get, METH_VARARGS, (char *)"SpikeGen_amplitude_get(SpikeGen self) -> double"},
	 { (char *)"SpikeGen_state_set", _wrap_SpikeGen_state_set, METH_VARARGS, (char *)"SpikeGen_state_set(SpikeGen self, double state)"},
	 { (char *)"SpikeGen_state_get", _wrap_SpikeGen_state_get, METH_VARARGS, (char *)"SpikeGen_state_get(SpikeGen self) -> double"},
	 { (char *)"SpikeGen_event_set", _wrap_SpikeGen_event_set, METH_VARARGS, (char *)"SpikeGen_event_set(SpikeGen self, double event)"},
	 { (char *)"SpikeGen_event_get", _wrap_SpikeGen_event_get, METH_VARARGS, (char *)"SpikeGen_event_get(SpikeGen self) -> double"},
	 { (char *)"SpikeGen_Vm_set", _wrap_SpikeGen_Vm_set, METH_VARARGS, (char *)"SpikeGen_Vm_set(SpikeGen self, double Vm)"},
	 { (char *)"SpikeGen_Vm_get", _wrap_SpikeGen_Vm_get, METH_VARARGS, (char *)"SpikeGen_Vm_get(SpikeGen self) -> double"},
	 { (char *)"SpikeGen_swigregister", SpikeGen_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RandomSpike", _wrap_new_RandomSpike, METH_VARARGS, (char *)"\n"
		"RandomSpike(Id id)\n"
		"RandomSpike(string path)\n"
		"RandomSpike(string name, Id parentId)\n"
		"RandomSpike(string name, PyMooseBase parent)\n"
		"RandomSpike(RandomSpike src, string name, PyMooseBase parent)\n"
		"RandomSpike(RandomSpike src, string name, Id parent)\n"
		"RandomSpike(Id src, string name, Id parent)\n"
		"new_RandomSpike(RandomSpike src, string path) -> RandomSpike\n"
		""},
	 { (char *)"delete_RandomSpike", _wrap_delete_RandomSpike, METH_VARARGS, (char *)"delete_RandomSpike(RandomSpike self)"},
	 { (char *)"RandomSpike_getType", _wrap_RandomSpike_getType, METH_VARARGS, (char *)"RandomSpike_getType(RandomSpike self) -> string"},
	 { (char *)"RandomSpike___get_minAmp", _wrap_RandomSpike___get_minAmp, METH_VARARGS, (char *)"RandomSpike___get_minAmp(RandomSpike self) -> double"},
	 { (char *)"RandomSpike___set_minAmp", _wrap_RandomSpike___set_minAmp, METH_VARARGS, (char *)"RandomSpike___set_minAmp(RandomSpike self, double minAmp)"},
	 { (char *)"RandomSpike___get_maxAmp", _wrap_RandomSpike___get_maxAmp, METH_VARARGS, (char *)"RandomSpike___get_maxAmp(RandomSpike self) -> double"},
	 { (char *)"RandomSpike___set_maxAmp", _wrap_RandomSpike___set_maxAmp, METH_VARARGS, (char *)"RandomSpike___set_maxAmp(RandomSpike self, double maxAmp)"},
	 { (char *)"RandomSpike___get_rate", _wrap_RandomSpike___get_rate, METH_VARARGS, (char *)"RandomSpike___get_rate(RandomSpike self) -> double"},
	 { (char *)"RandomSpike___set_rate", _wrap_RandomSpike___set_rate, METH_VARARGS, (char *)"RandomSpike___set_rate(RandomSpike self, double rate)"},
	 { (char *)"RandomSpike___get_resetValue", _wrap_RandomSpike___get_resetValue, METH_VARARGS, (char *)"RandomSpike___get_resetValue(RandomSpike self) -> double"},
	 { (char *)"RandomSpike___set_resetValue", _wrap_RandomSpike___set_resetValue, METH_VARARGS, (char *)"RandomSpike___set_resetValue(RandomSpike self, double resetValue)"},
	 { (char *)"RandomSpike___get_state", _wrap_RandomSpike___get_state, METH_VARARGS, (char *)"RandomSpike___get_state(RandomSpike self) -> double"},
	 { (char *)"RandomSpike___set_state", _wrap_RandomSpike___set_state, METH_VARARGS, (char *)"RandomSpike___set_state(RandomSpike self, double state)"},
	 { (char *)"RandomSpike___get_absRefract", _wrap_RandomSpike___get_absRefract, METH_VARARGS, (char *)"RandomSpike___get_absRefract(RandomSpike self) -> double"},
	 { (char *)"RandomSpike___set_absRefract", _wrap_RandomSpike___set_absRefract, METH_VARARGS, (char *)"RandomSpike___set_absRefract(RandomSpike self, double absRefract)"},
	 { (char *)"RandomSpike___get_lastEvent", _wrap_RandomSpike___get_lastEvent, METH_VARARGS, (char *)"RandomSpike___get_lastEvent(RandomSpike self) -> double"},
	 { (char *)"RandomSpike___get_reset", _wrap_RandomSpike___get_reset, METH_VARARGS, (char *)"RandomSpike___get_reset(RandomSpike self) -> int"},
	 { (char *)"RandomSpike___set_reset", _wrap_RandomSpike___set_reset, METH_VARARGS, (char *)"RandomSpike___set_reset(RandomSpike self, int reset)"},
	 { (char *)"RandomSpike_minAmp_set", _wrap_RandomSpike_minAmp_set, METH_VARARGS, (char *)"RandomSpike_minAmp_set(RandomSpike self, double minAmp)"},
	 { (char *)"RandomSpike_minAmp_get", _wrap_RandomSpike_minAmp_get, METH_VARARGS, (char *)"RandomSpike_minAmp_get(RandomSpike self) -> double"},
	 { (char *)"RandomSpike_maxAmp_set", _wrap_RandomSpike_maxAmp_set, METH_VARARGS, (char *)"RandomSpike_maxAmp_set(RandomSpike self, double maxAmp)"},
	 { (char *)"RandomSpike_maxAmp_get", _wrap_RandomSpike_maxAmp_get, METH_VARARGS, (char *)"RandomSpike_maxAmp_get(RandomSpike self) -> double"},
	 { (char *)"RandomSpike_rate_set", _wrap_RandomSpike_rate_set, METH_VARARGS, (char *)"RandomSpike_rate_set(RandomSpike self, double rate)"},
	 { (char *)"RandomSpike_rate_get", _wrap_RandomSpike_rate_get, METH_VARARGS, (char *)"RandomSpike_rate_get(RandomSpike self) -> double"},
	 { (char *)"RandomSpike_resetValue_set", _wrap_RandomSpike_resetValue_set, METH_VARARGS, (char *)"RandomSpike_resetValue_set(RandomSpike self, double resetValue)"},
	 { (char *)"RandomSpike_resetValue_get", _wrap_RandomSpike_resetValue_get, METH_VARARGS, (char *)"RandomSpike_resetValue_get(RandomSpike self) -> double"},
	 { (char *)"RandomSpike_state_set", _wrap_RandomSpike_state_set, METH_VARARGS, (char *)"RandomSpike_state_set(RandomSpike self, double state)"},
	 { (char *)"RandomSpike_state_get", _wrap_RandomSpike_state_get, METH_VARARGS, (char *)"RandomSpike_state_get(RandomSpike self) -> double"},
	 { (char *)"RandomSpike_absRefract_set", _wrap_RandomSpike_absRefract_set, METH_VARARGS, (char *)"RandomSpike_absRefract_set(RandomSpike self, double absRefract)"},
	 { (char *)"RandomSpike_absRefract_get", _wrap_RandomSpike_absRefract_get, METH_VARARGS, (char *)"RandomSpike_absRefract_get(RandomSpike self) -> double"},
	 { (char *)"RandomSpike_lastEvent_get", _wrap_RandomSpike_lastEvent_get, METH_VARARGS, (char *)"RandomSpike_lastEvent_get(RandomSpike self) -> double"},
	 { (char *)"RandomSpike_reset_set", _wrap_RandomSpike_reset_set, METH_VARARGS, (char *)"RandomSpike_reset_set(RandomSpike self, int reset)"},
	 { (char *)"RandomSpike_reset_get", _wrap_RandomSpike_reset_get, METH_VARARGS, (char *)"RandomSpike_reset_get(RandomSpike self) -> int"},
	 { (char *)"RandomSpike_swigregister", RandomSpike_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PulseGen", _wrap_new_PulseGen, METH_VARARGS, (char *)"\n"
		"PulseGen(Id id)\n"
		"PulseGen(string path)\n"
		"PulseGen(string name, Id parentId)\n"
		"PulseGen(string name, PyMooseBase parent)\n"
		"PulseGen(PulseGen src, string name, PyMooseBase parent)\n"
		"PulseGen(PulseGen src, string name, Id parent)\n"
		"PulseGen(Id src, string name, Id parent)\n"
		"new_PulseGen(PulseGen src, string path) -> PulseGen\n"
		""},
	 { (char *)"delete_PulseGen", _wrap_delete_PulseGen, METH_VARARGS, (char *)"delete_PulseGen(PulseGen self)"},
	 { (char *)"PulseGen_getType", _wrap_PulseGen_getType, METH_VARARGS, (char *)"PulseGen_getType(PulseGen self) -> string"},
	 { (char *)"PulseGen___get_firstLevel", _wrap_PulseGen___get_firstLevel, METH_VARARGS, (char *)"PulseGen___get_firstLevel(PulseGen self) -> double"},
	 { (char *)"PulseGen___set_firstLevel", _wrap_PulseGen___set_firstLevel, METH_VARARGS, (char *)"PulseGen___set_firstLevel(PulseGen self, double firstLevel)"},
	 { (char *)"PulseGen___get_firstWidth", _wrap_PulseGen___get_firstWidth, METH_VARARGS, (char *)"PulseGen___get_firstWidth(PulseGen self) -> double"},
	 { (char *)"PulseGen___set_firstWidth", _wrap_PulseGen___set_firstWidth, METH_VARARGS, (char *)"PulseGen___set_firstWidth(PulseGen self, double firstWidth)"},
	 { (char *)"PulseGen___get_firstDelay", _wrap_PulseGen___get_firstDelay, METH_VARARGS, (char *)"PulseGen___get_firstDelay(PulseGen self) -> double"},
	 { (char *)"PulseGen___set_firstDelay", _wrap_PulseGen___set_firstDelay, METH_VARARGS, (char *)"PulseGen___set_firstDelay(PulseGen self, double firstDelay)"},
	 { (char *)"PulseGen___get_secondLevel", _wrap_PulseGen___get_secondLevel, METH_VARARGS, (char *)"PulseGen___get_secondLevel(PulseGen self) -> double"},
	 { (char *)"PulseGen___set_secondLevel", _wrap_PulseGen___set_secondLevel, METH_VARARGS, (char *)"PulseGen___set_secondLevel(PulseGen self, double secondLevel)"},
	 { (char *)"PulseGen___get_secondWidth", _wrap_PulseGen___get_secondWidth, METH_VARARGS, (char *)"PulseGen___get_secondWidth(PulseGen self) -> double"},
	 { (char *)"PulseGen___set_secondWidth", _wrap_PulseGen___set_secondWidth, METH_VARARGS, (char *)"PulseGen___set_secondWidth(PulseGen self, double secondWidth)"},
	 { (char *)"PulseGen___get_secondDelay", _wrap_PulseGen___get_secondDelay, METH_VARARGS, (char *)"PulseGen___get_secondDelay(PulseGen self) -> double"},
	 { (char *)"PulseGen___set_secondDelay", _wrap_PulseGen___set_secondDelay, METH_VARARGS, (char *)"PulseGen___set_secondDelay(PulseGen self, double secondDelay)"},
	 { (char *)"PulseGen___get_baseLevel", _wrap_PulseGen___get_baseLevel, METH_VARARGS, (char *)"PulseGen___get_baseLevel(PulseGen self) -> double"},
	 { (char *)"PulseGen___set_baseLevel", _wrap_PulseGen___set_baseLevel, METH_VARARGS, (char *)"PulseGen___set_baseLevel(PulseGen self, double baseLevel)"},
	 { (char *)"PulseGen___get_output", _wrap_PulseGen___get_output, METH_VARARGS, (char *)"PulseGen___get_output(PulseGen self) -> double"},
	 { (char *)"PulseGen___get_trigTime", _wrap_PulseGen___get_trigTime, METH_VARARGS, (char *)"PulseGen___get_trigTime(PulseGen self) -> double"},
	 { (char *)"PulseGen___set_trigTime", _wrap_PulseGen___set_trigTime, METH_VARARGS, (char *)"PulseGen___set_trigTime(PulseGen self, double trigTime)"},
	 { (char *)"PulseGen___get_trigMode", _wrap_PulseGen___get_trigMode, METH_VARARGS, (char *)"PulseGen___get_trigMode(PulseGen self) -> int"},
	 { (char *)"PulseGen___set_trigMode", _wrap_PulseGen___set_trigMode, METH_VARARGS, (char *)"PulseGen___set_trigMode(PulseGen self, int trigMode)"},
	 { (char *)"PulseGen___get_prevInput", _wrap_PulseGen___get_prevInput, METH_VARARGS, (char *)"PulseGen___get_prevInput(PulseGen self) -> int"},
	 { (char *)"PulseGen_firstLevel_set", _wrap_PulseGen_firstLevel_set, METH_VARARGS, (char *)"PulseGen_firstLevel_set(PulseGen self, double firstLevel)"},
	 { (char *)"PulseGen_firstLevel_get", _wrap_PulseGen_firstLevel_get, METH_VARARGS, (char *)"PulseGen_firstLevel_get(PulseGen self) -> double"},
	 { (char *)"PulseGen_firstWidth_set", _wrap_PulseGen_firstWidth_set, METH_VARARGS, (char *)"PulseGen_firstWidth_set(PulseGen self, double firstWidth)"},
	 { (char *)"PulseGen_firstWidth_get", _wrap_PulseGen_firstWidth_get, METH_VARARGS, (char *)"PulseGen_firstWidth_get(PulseGen self) -> double"},
	 { (char *)"PulseGen_firstDelay_set", _wrap_PulseGen_firstDelay_set, METH_VARARGS, (char *)"PulseGen_firstDelay_set(PulseGen self, double firstDelay)"},
	 { (char *)"PulseGen_firstDelay_get", _wrap_PulseGen_firstDelay_get, METH_VARARGS, (char *)"PulseGen_firstDelay_get(PulseGen self) -> double"},
	 { (char *)"PulseGen_secondLevel_set", _wrap_PulseGen_secondLevel_set, METH_VARARGS, (char *)"PulseGen_secondLevel_set(PulseGen self, double secondLevel)"},
	 { (char *)"PulseGen_secondLevel_get", _wrap_PulseGen_secondLevel_get, METH_VARARGS, (char *)"PulseGen_secondLevel_get(PulseGen self) -> double"},
	 { (char *)"PulseGen_secondWidth_set", _wrap_PulseGen_secondWidth_set, METH_VARARGS, (char *)"PulseGen_secondWidth_set(PulseGen self, double secondWidth)"},
	 { (char *)"PulseGen_secondWidth_get", _wrap_PulseGen_secondWidth_get, METH_VARARGS, (char *)"PulseGen_secondWidth_get(PulseGen self) -> double"},
	 { (char *)"PulseGen_secondDelay_set", _wrap_PulseGen_secondDelay_set, METH_VARARGS, (char *)"PulseGen_secondDelay_set(PulseGen self, double secondDelay)"},
	 { (char *)"PulseGen_secondDelay_get", _wrap_PulseGen_secondDelay_get, METH_VARARGS, (char *)"PulseGen_secondDelay_get(PulseGen self) -> double"},
	 { (char *)"PulseGen_baseLevel_set", _wrap_PulseGen_baseLevel_set, METH_VARARGS, (char *)"PulseGen_baseLevel_set(PulseGen self, double baseLevel)"},
	 { (char *)"PulseGen_baseLevel_get", _wrap_PulseGen_baseLevel_get, METH_VARARGS, (char *)"PulseGen_baseLevel_get(PulseGen self) -> double"},
	 { (char *)"PulseGen_output_get", _wrap_PulseGen_output_get, METH_VARARGS, (char *)"PulseGen_output_get(PulseGen self) -> double"},
	 { (char *)"PulseGen_trigTime_set", _wrap_PulseGen_trigTime_set, METH_VARARGS, (char *)"PulseGen_trigTime_set(PulseGen self, double trigTime)"},
	 { (char *)"PulseGen_trigTime_get", _wrap_PulseGen_trigTime_get, METH_VARARGS, (char *)"PulseGen_trigTime_get(PulseGen self) -> double"},
	 { (char *)"PulseGen_trigMode_set", _wrap_PulseGen_trigMode_set, METH_VARARGS, (char *)"PulseGen_trigMode_set(PulseGen self, int trigMode)"},
	 { (char *)"PulseGen_trigMode_get", _wrap_PulseGen_trigMode_get, METH_VARARGS, (char *)"PulseGen_trigMode_get(PulseGen self) -> int"},
	 { (char *)"PulseGen_prevInput_get", _wrap_PulseGen_prevInput_get, METH_VARARGS, (char *)"PulseGen_prevInput_get(PulseGen self) -> int"},
	 { (char *)"PulseGen_swigregister", PulseGen_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Nernst", _wrap_new_Nernst, METH_VARARGS, (char *)"\n"
		"Nernst(Id id)\n"
		"Nernst(string path)\n"
		"Nernst(string name, Id parentId)\n"
		"Nernst(string name, PyMooseBase parent)\n"
		"Nernst(Nernst src, string name, PyMooseBase parent)\n"
		"Nernst(Nernst src, string name, Id parent)\n"
		"Nernst(Id src, string name, Id parent)\n"
		"new_Nernst(Nernst src, string path) -> Nernst\n"
		""},
	 { (char *)"delete_Nernst", _wrap_delete_Nernst, METH_VARARGS, (char *)"delete_Nernst(Nernst self)"},
	 { (char *)"Nernst_getType", _wrap_Nernst_getType, METH_VARARGS, (char *)"Nernst_getType(Nernst self) -> string"},
	 { (char *)"Nernst___get_E", _wrap_Nernst___get_E, METH_VARARGS, (char *)"Nernst___get_E(Nernst self) -> double"},
	 { (char *)"Nernst___set_E", _wrap_Nernst___set_E, METH_VARARGS, (char *)"Nernst___set_E(Nernst self, double E)"},
	 { (char *)"Nernst___get_Temperature", _wrap_Nernst___get_Temperature, METH_VARARGS, (char *)"Nernst___get_Temperature(Nernst self) -> double"},
	 { (char *)"Nernst___set_Temperature", _wrap_Nernst___set_Temperature, METH_VARARGS, (char *)"Nernst___set_Temperature(Nernst self, double Temperature)"},
	 { (char *)"Nernst___get_valence", _wrap_Nernst___get_valence, METH_VARARGS, (char *)"Nernst___get_valence(Nernst self) -> int"},
	 { (char *)"Nernst___set_valence", _wrap_Nernst___set_valence, METH_VARARGS, (char *)"Nernst___set_valence(Nernst self, int valence)"},
	 { (char *)"Nernst___get_Cin", _wrap_Nernst___get_Cin, METH_VARARGS, (char *)"Nernst___get_Cin(Nernst self) -> double"},
	 { (char *)"Nernst___set_Cin", _wrap_Nernst___set_Cin, METH_VARARGS, (char *)"Nernst___set_Cin(Nernst self, double Cin)"},
	 { (char *)"Nernst___get_Cout", _wrap_Nernst___get_Cout, METH_VARARGS, (char *)"Nernst___get_Cout(Nernst self) -> double"},
	 { (char *)"Nernst___set_Cout", _wrap_Nernst___set_Cout, METH_VARARGS, (char *)"Nernst___set_Cout(Nernst self, double Cout)"},
	 { (char *)"Nernst___get_scale", _wrap_Nernst___get_scale, METH_VARARGS, (char *)"Nernst___get_scale(Nernst self) -> double"},
	 { (char *)"Nernst___set_scale", _wrap_Nernst___set_scale, METH_VARARGS, (char *)"Nernst___set_scale(Nernst self, double scale)"},
	 { (char *)"Nernst___get_ESrc", _wrap_Nernst___get_ESrc, METH_VARARGS, (char *)"Nernst___get_ESrc(Nernst self) -> double"},
	 { (char *)"Nernst___set_ESrc", _wrap_Nernst___set_ESrc, METH_VARARGS, (char *)"Nernst___set_ESrc(Nernst self, double ESrc)"},
	 { (char *)"Nernst___get_CinMsg", _wrap_Nernst___get_CinMsg, METH_VARARGS, (char *)"Nernst___get_CinMsg(Nernst self) -> double"},
	 { (char *)"Nernst___set_CinMsg", _wrap_Nernst___set_CinMsg, METH_VARARGS, (char *)"Nernst___set_CinMsg(Nernst self, double CinMsg)"},
	 { (char *)"Nernst___get_CoutMsg", _wrap_Nernst___get_CoutMsg, METH_VARARGS, (char *)"Nernst___get_CoutMsg(Nernst self) -> double"},
	 { (char *)"Nernst___set_CoutMsg", _wrap_Nernst___set_CoutMsg, METH_VARARGS, (char *)"Nernst___set_CoutMsg(Nernst self, double CoutMsg)"},
	 { (char *)"Nernst_E_get", _wrap_Nernst_E_get, METH_VARARGS, (char *)"Nernst_E_get(Nernst self) -> double"},
	 { (char *)"Nernst_Temperature_set", _wrap_Nernst_Temperature_set, METH_VARARGS, (char *)"Nernst_Temperature_set(Nernst self, double Temperature)"},
	 { (char *)"Nernst_Temperature_get", _wrap_Nernst_Temperature_get, METH_VARARGS, (char *)"Nernst_Temperature_get(Nernst self) -> double"},
	 { (char *)"Nernst_valence_set", _wrap_Nernst_valence_set, METH_VARARGS, (char *)"Nernst_valence_set(Nernst self, int valence)"},
	 { (char *)"Nernst_valence_get", _wrap_Nernst_valence_get, METH_VARARGS, (char *)"Nernst_valence_get(Nernst self) -> int"},
	 { (char *)"Nernst_Cin_set", _wrap_Nernst_Cin_set, METH_VARARGS, (char *)"Nernst_Cin_set(Nernst self, double Cin)"},
	 { (char *)"Nernst_Cin_get", _wrap_Nernst_Cin_get, METH_VARARGS, (char *)"Nernst_Cin_get(Nernst self) -> double"},
	 { (char *)"Nernst_Cout_set", _wrap_Nernst_Cout_set, METH_VARARGS, (char *)"Nernst_Cout_set(Nernst self, double Cout)"},
	 { (char *)"Nernst_Cout_get", _wrap_Nernst_Cout_get, METH_VARARGS, (char *)"Nernst_Cout_get(Nernst self) -> double"},
	 { (char *)"Nernst_scale_set", _wrap_Nernst_scale_set, METH_VARARGS, (char *)"Nernst_scale_set(Nernst self, double scale)"},
	 { (char *)"Nernst_scale_get", _wrap_Nernst_scale_get, METH_VARARGS, (char *)"Nernst_scale_get(Nernst self) -> double"},
	 { (char *)"Nernst_swigregister", Nernst_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CaConc", _wrap_new_CaConc, METH_VARARGS, (char *)"\n"
		"CaConc(::Id id)\n"
		"CaConc(string path)\n"
		"CaConc(string name, ::Id parentId)\n"
		"CaConc(string name, PyMooseBase parent)\n"
		"CaConc(CaConc src, string name, PyMooseBase parent)\n"
		"CaConc(CaConc src, string name, Id parent)\n"
		"CaConc(Id src, string name, Id parent)\n"
		"new_CaConc(CaConc src, string path) -> CaConc\n"
		""},
	 { (char *)"delete_CaConc", _wrap_delete_CaConc, METH_VARARGS, (char *)"delete_CaConc(CaConc self)"},
	 { (char *)"CaConc_getType", _wrap_CaConc_getType, METH_VARARGS, (char *)"CaConc_getType(CaConc self) -> string"},
	 { (char *)"CaConc___get_Ca", _wrap_CaConc___get_Ca, METH_VARARGS, (char *)"CaConc___get_Ca(CaConc self) -> double"},
	 { (char *)"CaConc___set_Ca", _wrap_CaConc___set_Ca, METH_VARARGS, (char *)"CaConc___set_Ca(CaConc self, double Ca)"},
	 { (char *)"CaConc___get_CaBasal", _wrap_CaConc___get_CaBasal, METH_VARARGS, (char *)"CaConc___get_CaBasal(CaConc self) -> double"},
	 { (char *)"CaConc___set_CaBasal", _wrap_CaConc___set_CaBasal, METH_VARARGS, (char *)"CaConc___set_CaBasal(CaConc self, double CaBasal)"},
	 { (char *)"CaConc___get_Ca_base", _wrap_CaConc___get_Ca_base, METH_VARARGS, (char *)"CaConc___get_Ca_base(CaConc self) -> double"},
	 { (char *)"CaConc___set_Ca_base", _wrap_CaConc___set_Ca_base, METH_VARARGS, (char *)"CaConc___set_Ca_base(CaConc self, double Ca_base)"},
	 { (char *)"CaConc___get_tau", _wrap_CaConc___get_tau, METH_VARARGS, (char *)"CaConc___get_tau(CaConc self) -> double"},
	 { (char *)"CaConc___set_tau", _wrap_CaConc___set_tau, METH_VARARGS, (char *)"CaConc___set_tau(CaConc self, double tau)"},
	 { (char *)"CaConc___get_B", _wrap_CaConc___get_B, METH_VARARGS, (char *)"CaConc___get_B(CaConc self) -> double"},
	 { (char *)"CaConc___set_B", _wrap_CaConc___set_B, METH_VARARGS, (char *)"CaConc___set_B(CaConc self, double B)"},
	 { (char *)"CaConc_Ca_set", _wrap_CaConc_Ca_set, METH_VARARGS, (char *)"CaConc_Ca_set(CaConc self, double Ca)"},
	 { (char *)"CaConc_Ca_get", _wrap_CaConc_Ca_get, METH_VARARGS, (char *)"CaConc_Ca_get(CaConc self) -> double"},
	 { (char *)"CaConc_CaBasal_set", _wrap_CaConc_CaBasal_set, METH_VARARGS, (char *)"CaConc_CaBasal_set(CaConc self, double CaBasal)"},
	 { (char *)"CaConc_CaBasal_get", _wrap_CaConc_CaBasal_get, METH_VARARGS, (char *)"CaConc_CaBasal_get(CaConc self) -> double"},
	 { (char *)"CaConc_Ca_base_set", _wrap_CaConc_Ca_base_set, METH_VARARGS, (char *)"CaConc_Ca_base_set(CaConc self, double Ca_base)"},
	 { (char *)"CaConc_Ca_base_get", _wrap_CaConc_Ca_base_get, METH_VARARGS, (char *)"CaConc_Ca_base_get(CaConc self) -> double"},
	 { (char *)"CaConc_tau_set", _wrap_CaConc_tau_set, METH_VARARGS, (char *)"CaConc_tau_set(CaConc self, double tau)"},
	 { (char *)"CaConc_tau_get", _wrap_CaConc_tau_get, METH_VARARGS, (char *)"CaConc_tau_get(CaConc self) -> double"},
	 { (char *)"CaConc_B_set", _wrap_CaConc_B_set, METH_VARARGS, (char *)"CaConc_B_set(CaConc self, double B)"},
	 { (char *)"CaConc_B_get", _wrap_CaConc_B_get, METH_VARARGS, (char *)"CaConc_B_get(CaConc self) -> double"},
	 { (char *)"CaConc_swigregister", CaConc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HHGate", _wrap_new_HHGate, METH_VARARGS, (char *)"\n"
		"HHGate(Id id)\n"
		"HHGate(string path)\n"
		"HHGate(string name, Id parentId)\n"
		"HHGate(string name, PyMooseBase parent)\n"
		"HHGate(HHGate src, string name, PyMooseBase parent)\n"
		"HHGate(HHGate src, string name, Id parent)\n"
		"HHGate(Id src, string name, Id parent)\n"
		"new_HHGate(HHGate src, string path) -> HHGate\n"
		""},
	 { (char *)"delete_HHGate", _wrap_delete_HHGate, METH_VARARGS, (char *)"delete_HHGate(HHGate self)"},
	 { (char *)"HHGate_getType", _wrap_HHGate_getType, METH_VARARGS, (char *)"HHGate_getType(HHGate self) -> string"},
	 { (char *)"HHGate___get_A", _wrap_HHGate___get_A, METH_VARARGS, (char *)"HHGate___get_A(HHGate self) -> InterpolationTable"},
	 { (char *)"HHGate___get_B", _wrap_HHGate___get_B, METH_VARARGS, (char *)"HHGate___get_B(HHGate self) -> InterpolationTable"},
	 { (char *)"HHGate_tabFill", _wrap_HHGate_tabFill, METH_VARARGS, (char *)"HHGate_tabFill(HHGate self, int xdivs, int mode)"},
	 { (char *)"HHGate_setupAlpha", _wrap_HHGate_setupAlpha, METH_VARARGS, (char *)"\n"
		"setupAlpha(double AA, double AB, double AC, double AD, double AF, \n"
		"    double BA, double BB, double BC, double BD, \n"
		"    double BF, double size=3000, double min=-0.1, \n"
		"    double max=0.05)\n"
		"setupAlpha(double AA, double AB, double AC, double AD, double AF, \n"
		"    double BA, double BB, double BC, double BD, \n"
		"    double BF, double size=3000, double min=-0.1)\n"
		"setupAlpha(double AA, double AB, double AC, double AD, double AF, \n"
		"    double BA, double BB, double BC, double BD, \n"
		"    double BF, double size=3000)\n"
		"HHGate_setupAlpha(HHGate self, double AA, double AB, double AC, double AD, \n"
		"    double AF, double BA, double BB, double BC, \n"
		"    double BD, double BF)\n"
		""},
	 { (char *)"HHGate_setupTau", _wrap_HHGate_setupTau, METH_VARARGS, (char *)"\n"
		"setupTau(double AA, double AB, double AC, double AD, double AF, \n"
		"    double BA, double BB, double BC, double BD, \n"
		"    double BF, double size=3000, double min=-0.1, \n"
		"    double max=0.05)\n"
		"setupTau(double AA, double AB, double AC, double AD, double AF, \n"
		"    double BA, double BB, double BC, double BD, \n"
		"    double BF, double size=3000, double min=-0.1)\n"
		"setupTau(double AA, double AB, double AC, double AD, double AF, \n"
		"    double BA, double BB, double BC, double BD, \n"
		"    double BF, double size=3000)\n"
		"HHGate_setupTau(HHGate self, double AA, double AB, double AC, double AD, \n"
		"    double AF, double BA, double BB, double BC, \n"
		"    double BD, double BF)\n"
		""},
	 { (char *)"HHGate_tweakAlpha", _wrap_HHGate_tweakAlpha, METH_VARARGS, (char *)"HHGate_tweakAlpha(HHGate self)"},
	 { (char *)"HHGate_tweakTau", _wrap_HHGate_tweakTau, METH_VARARGS, (char *)"HHGate_tweakTau(HHGate self)"},
	 { (char *)"HHGate_A_get", _wrap_HHGate_A_get, METH_VARARGS, (char *)"HHGate_A_get(HHGate self) -> InterpolationTable"},
	 { (char *)"HHGate_B_get", _wrap_HHGate_B_get, METH_VARARGS, (char *)"HHGate_B_get(HHGate self) -> InterpolationTable"},
	 { (char *)"HHGate_swigregister", HHGate_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HHChannel", _wrap_new_HHChannel, METH_VARARGS, (char *)"\n"
		"HHChannel(Id id)\n"
		"HHChannel(string path)\n"
		"HHChannel(string name, Id parentId)\n"
		"HHChannel(string name, PyMooseBase parent)\n"
		"HHChannel(HHChannel src, string name, PyMooseBase parent)\n"
		"HHChannel(HHChannel src, string name, Id parent)\n"
		"HHChannel(Id src, string name, Id parent)\n"
		"new_HHChannel(HHChannel src, string path) -> HHChannel\n"
		""},
	 { (char *)"delete_HHChannel", _wrap_delete_HHChannel, METH_VARARGS, (char *)"delete_HHChannel(HHChannel self)"},
	 { (char *)"HHChannel_getType", _wrap_HHChannel_getType, METH_VARARGS, (char *)"HHChannel_getType(HHChannel self) -> string"},
	 { (char *)"HHChannel___get_Gbar", _wrap_HHChannel___get_Gbar, METH_VARARGS, (char *)"HHChannel___get_Gbar(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_Gbar", _wrap_HHChannel___set_Gbar, METH_VARARGS, (char *)"HHChannel___set_Gbar(HHChannel self, double Gbar)"},
	 { (char *)"HHChannel___get_Ek", _wrap_HHChannel___get_Ek, METH_VARARGS, (char *)"HHChannel___get_Ek(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_Ek", _wrap_HHChannel___set_Ek, METH_VARARGS, (char *)"HHChannel___set_Ek(HHChannel self, double Ek)"},
	 { (char *)"HHChannel___get_Xpower", _wrap_HHChannel___get_Xpower, METH_VARARGS, (char *)"HHChannel___get_Xpower(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_Xpower", _wrap_HHChannel___set_Xpower, METH_VARARGS, (char *)"HHChannel___set_Xpower(HHChannel self, double Xpower)"},
	 { (char *)"HHChannel___get_Ypower", _wrap_HHChannel___get_Ypower, METH_VARARGS, (char *)"HHChannel___get_Ypower(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_Ypower", _wrap_HHChannel___set_Ypower, METH_VARARGS, (char *)"HHChannel___set_Ypower(HHChannel self, double Ypower)"},
	 { (char *)"HHChannel___get_Zpower", _wrap_HHChannel___get_Zpower, METH_VARARGS, (char *)"HHChannel___get_Zpower(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_Zpower", _wrap_HHChannel___set_Zpower, METH_VARARGS, (char *)"HHChannel___set_Zpower(HHChannel self, double Zpower)"},
	 { (char *)"HHChannel___get_instant", _wrap_HHChannel___get_instant, METH_VARARGS, (char *)"HHChannel___get_instant(HHChannel self) -> int"},
	 { (char *)"HHChannel___set_instant", _wrap_HHChannel___set_instant, METH_VARARGS, (char *)"HHChannel___set_instant(HHChannel self, int instant)"},
	 { (char *)"HHChannel___get_Gk", _wrap_HHChannel___get_Gk, METH_VARARGS, (char *)"HHChannel___get_Gk(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_Gk", _wrap_HHChannel___set_Gk, METH_VARARGS, (char *)"HHChannel___set_Gk(HHChannel self, double Gk)"},
	 { (char *)"HHChannel___get_Ik", _wrap_HHChannel___get_Ik, METH_VARARGS, (char *)"HHChannel___get_Ik(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_Ik", _wrap_HHChannel___set_Ik, METH_VARARGS, (char *)"HHChannel___set_Ik(HHChannel self, double Ik)"},
	 { (char *)"HHChannel___get_X", _wrap_HHChannel___get_X, METH_VARARGS, (char *)"HHChannel___get_X(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_X", _wrap_HHChannel___set_X, METH_VARARGS, (char *)"HHChannel___set_X(HHChannel self, double X)"},
	 { (char *)"HHChannel___get_Y", _wrap_HHChannel___get_Y, METH_VARARGS, (char *)"HHChannel___get_Y(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_Y", _wrap_HHChannel___set_Y, METH_VARARGS, (char *)"HHChannel___set_Y(HHChannel self, double Y)"},
	 { (char *)"HHChannel___get_Z", _wrap_HHChannel___get_Z, METH_VARARGS, (char *)"HHChannel___get_Z(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_Z", _wrap_HHChannel___set_Z, METH_VARARGS, (char *)"HHChannel___set_Z(HHChannel self, double Z)"},
	 { (char *)"HHChannel___get_useConcentration", _wrap_HHChannel___get_useConcentration, METH_VARARGS, (char *)"HHChannel___get_useConcentration(HHChannel self) -> int"},
	 { (char *)"HHChannel___set_useConcentration", _wrap_HHChannel___set_useConcentration, METH_VARARGS, (char *)"HHChannel___set_useConcentration(HHChannel self, int useConcentration)"},
	 { (char *)"HHChannel___get_IkSrc", _wrap_HHChannel___get_IkSrc, METH_VARARGS, (char *)"HHChannel___get_IkSrc(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_IkSrc", _wrap_HHChannel___set_IkSrc, METH_VARARGS, (char *)"HHChannel___set_IkSrc(HHChannel self, double IkSrc)"},
	 { (char *)"HHChannel___get_concen", _wrap_HHChannel___get_concen, METH_VARARGS, (char *)"HHChannel___get_concen(HHChannel self) -> double"},
	 { (char *)"HHChannel___set_concen", _wrap_HHChannel___set_concen, METH_VARARGS, (char *)"HHChannel___set_concen(HHChannel self, double concen)"},
	 { (char *)"HHChannel_createTable", _wrap_HHChannel_createTable, METH_VARARGS, (char *)"\n"
		"HHChannel_createTable(HHChannel self, string gate, unsigned int divs, double min, \n"
		"    double max)\n"
		""},
	 { (char *)"HHChannel_tweakAlpha", _wrap_HHChannel_tweakAlpha, METH_VARARGS, (char *)"HHChannel_tweakAlpha(HHChannel self, string gate)"},
	 { (char *)"HHChannel_tweakTau", _wrap_HHChannel_tweakTau, METH_VARARGS, (char *)"HHChannel_tweakTau(HHChannel self, string gate)"},
	 { (char *)"HHChannel_setupAlpha", _wrap_HHChannel_setupAlpha, METH_VARARGS, (char *)"\n"
		"setupAlpha(string gate, double_vector params)\n"
		"setupAlpha(string gate, double AA, double AB, double AC, double AD, \n"
		"    double AF, double BA, double BB, double BC, \n"
		"    double BD, double BF, double size=3000, \n"
		"    double min=-0.1, double max=0.05)\n"
		"setupAlpha(string gate, double AA, double AB, double AC, double AD, \n"
		"    double AF, double BA, double BB, double BC, \n"
		"    double BD, double BF, double size=3000, \n"
		"    double min=-0.1)\n"
		"setupAlpha(string gate, double AA, double AB, double AC, double AD, \n"
		"    double AF, double BA, double BB, double BC, \n"
		"    double BD, double BF, double size=3000)\n"
		"HHChannel_setupAlpha(HHChannel self, string gate, double AA, double AB, \n"
		"    double AC, double AD, double AF, double BA, double BB, \n"
		"    double BC, double BD, double BF)\n"
		""},
	 { (char *)"HHChannel_setupTau", _wrap_HHChannel_setupTau, METH_VARARGS, (char *)"\n"
		"setupTau(string gate, double_vector params)\n"
		"setupTau(string gate, double AA, double AB, double AC, double AD, \n"
		"    double AF, double BA, double BB, double BC, \n"
		"    double BD, double BF, double size=3000, \n"
		"    double min=-0.1, double max=0.05)\n"
		"setupTau(string gate, double AA, double AB, double AC, double AD, \n"
		"    double AF, double BA, double BB, double BC, \n"
		"    double BD, double BF, double size=3000, \n"
		"    double min=-0.1)\n"
		"setupTau(string gate, double AA, double AB, double AC, double AD, \n"
		"    double AF, double BA, double BB, double BC, \n"
		"    double BD, double BF, double size=3000)\n"
		"HHChannel_setupTau(HHChannel self, string gate, double AA, double AB, \n"
		"    double AC, double AD, double AF, double BA, double BB, \n"
		"    double BC, double BD, double BF)\n"
		""},
	 { (char *)"HHChannel_Gbar_set", _wrap_HHChannel_Gbar_set, METH_VARARGS, (char *)"HHChannel_Gbar_set(HHChannel self, double Gbar)"},
	 { (char *)"HHChannel_Gbar_get", _wrap_HHChannel_Gbar_get, METH_VARARGS, (char *)"HHChannel_Gbar_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_Ek_set", _wrap_HHChannel_Ek_set, METH_VARARGS, (char *)"HHChannel_Ek_set(HHChannel self, double Ek)"},
	 { (char *)"HHChannel_Ek_get", _wrap_HHChannel_Ek_get, METH_VARARGS, (char *)"HHChannel_Ek_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_Xpower_set", _wrap_HHChannel_Xpower_set, METH_VARARGS, (char *)"HHChannel_Xpower_set(HHChannel self, double Xpower)"},
	 { (char *)"HHChannel_Xpower_get", _wrap_HHChannel_Xpower_get, METH_VARARGS, (char *)"HHChannel_Xpower_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_Ypower_set", _wrap_HHChannel_Ypower_set, METH_VARARGS, (char *)"HHChannel_Ypower_set(HHChannel self, double Ypower)"},
	 { (char *)"HHChannel_Ypower_get", _wrap_HHChannel_Ypower_get, METH_VARARGS, (char *)"HHChannel_Ypower_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_Zpower_set", _wrap_HHChannel_Zpower_set, METH_VARARGS, (char *)"HHChannel_Zpower_set(HHChannel self, double Zpower)"},
	 { (char *)"HHChannel_Zpower_get", _wrap_HHChannel_Zpower_get, METH_VARARGS, (char *)"HHChannel_Zpower_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_X_set", _wrap_HHChannel_X_set, METH_VARARGS, (char *)"HHChannel_X_set(HHChannel self, double X)"},
	 { (char *)"HHChannel_X_get", _wrap_HHChannel_X_get, METH_VARARGS, (char *)"HHChannel_X_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_Y_set", _wrap_HHChannel_Y_set, METH_VARARGS, (char *)"HHChannel_Y_set(HHChannel self, double Y)"},
	 { (char *)"HHChannel_Y_get", _wrap_HHChannel_Y_get, METH_VARARGS, (char *)"HHChannel_Y_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_Z_set", _wrap_HHChannel_Z_set, METH_VARARGS, (char *)"HHChannel_Z_set(HHChannel self, double Z)"},
	 { (char *)"HHChannel_Z_get", _wrap_HHChannel_Z_get, METH_VARARGS, (char *)"HHChannel_Z_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_instant_set", _wrap_HHChannel_instant_set, METH_VARARGS, (char *)"HHChannel_instant_set(HHChannel self, int instant)"},
	 { (char *)"HHChannel_instant_get", _wrap_HHChannel_instant_get, METH_VARARGS, (char *)"HHChannel_instant_get(HHChannel self) -> int"},
	 { (char *)"HHChannel_Gk_set", _wrap_HHChannel_Gk_set, METH_VARARGS, (char *)"HHChannel_Gk_set(HHChannel self, double Gk)"},
	 { (char *)"HHChannel_Gk_get", _wrap_HHChannel_Gk_get, METH_VARARGS, (char *)"HHChannel_Gk_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_Ik_get", _wrap_HHChannel_Ik_get, METH_VARARGS, (char *)"HHChannel_Ik_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_useConcentration_set", _wrap_HHChannel_useConcentration_set, METH_VARARGS, (char *)"HHChannel_useConcentration_set(HHChannel self, int useConcentration)"},
	 { (char *)"HHChannel_useConcentration_get", _wrap_HHChannel_useConcentration_get, METH_VARARGS, (char *)"HHChannel_useConcentration_get(HHChannel self) -> int"},
	 { (char *)"HHChannel_concen_set", _wrap_HHChannel_concen_set, METH_VARARGS, (char *)"HHChannel_concen_set(HHChannel self, double concen)"},
	 { (char *)"HHChannel_concen_get", _wrap_HHChannel_concen_get, METH_VARARGS, (char *)"HHChannel_concen_get(HHChannel self) -> double"},
	 { (char *)"HHChannel_swigregister", HHChannel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Mg_block", _wrap_new_Mg_block, METH_VARARGS, (char *)"\n"
		"Mg_block(Id id)\n"
		"Mg_block(string path)\n"
		"Mg_block(string name, Id parentId)\n"
		"Mg_block(string name, PyMooseBase parent)\n"
		"Mg_block(Mg_block src, string name, PyMooseBase parent)\n"
		"Mg_block(Mg_block src, string name, Id parent)\n"
		"Mg_block(Id src, string name, Id parent)\n"
		"new_Mg_block(Mg_block src, string path) -> Mg_block\n"
		""},
	 { (char *)"delete_Mg_block", _wrap_delete_Mg_block, METH_VARARGS, (char *)"delete_Mg_block(Mg_block self)"},
	 { (char *)"Mg_block_getType", _wrap_Mg_block_getType, METH_VARARGS, (char *)"Mg_block_getType(Mg_block self) -> string"},
	 { (char *)"Mg_block___get_KMg_A", _wrap_Mg_block___get_KMg_A, METH_VARARGS, (char *)"Mg_block___get_KMg_A(Mg_block self) -> double"},
	 { (char *)"Mg_block___set_KMg_A", _wrap_Mg_block___set_KMg_A, METH_VARARGS, (char *)"Mg_block___set_KMg_A(Mg_block self, double KMg_A)"},
	 { (char *)"Mg_block___get_KMg_B", _wrap_Mg_block___get_KMg_B, METH_VARARGS, (char *)"Mg_block___get_KMg_B(Mg_block self) -> double"},
	 { (char *)"Mg_block___set_KMg_B", _wrap_Mg_block___set_KMg_B, METH_VARARGS, (char *)"Mg_block___set_KMg_B(Mg_block self, double KMg_B)"},
	 { (char *)"Mg_block___get_CMg", _wrap_Mg_block___get_CMg, METH_VARARGS, (char *)"Mg_block___get_CMg(Mg_block self) -> double"},
	 { (char *)"Mg_block___set_CMg", _wrap_Mg_block___set_CMg, METH_VARARGS, (char *)"Mg_block___set_CMg(Mg_block self, double CMg)"},
	 { (char *)"Mg_block___get_Ik", _wrap_Mg_block___get_Ik, METH_VARARGS, (char *)"Mg_block___get_Ik(Mg_block self) -> double"},
	 { (char *)"Mg_block___set_Ik", _wrap_Mg_block___set_Ik, METH_VARARGS, (char *)"Mg_block___set_Ik(Mg_block self, double Ik)"},
	 { (char *)"Mg_block___get_Gk", _wrap_Mg_block___get_Gk, METH_VARARGS, (char *)"Mg_block___get_Gk(Mg_block self) -> double"},
	 { (char *)"Mg_block___set_Gk", _wrap_Mg_block___set_Gk, METH_VARARGS, (char *)"Mg_block___set_Gk(Mg_block self, double Gk)"},
	 { (char *)"Mg_block___get_Ek", _wrap_Mg_block___get_Ek, METH_VARARGS, (char *)"Mg_block___get_Ek(Mg_block self) -> double"},
	 { (char *)"Mg_block___set_Ek", _wrap_Mg_block___set_Ek, METH_VARARGS, (char *)"Mg_block___set_Ek(Mg_block self, double Ek)"},
	 { (char *)"Mg_block___get_Zk", _wrap_Mg_block___get_Zk, METH_VARARGS, (char *)"Mg_block___get_Zk(Mg_block self) -> double"},
	 { (char *)"Mg_block___set_Zk", _wrap_Mg_block___set_Zk, METH_VARARGS, (char *)"Mg_block___set_Zk(Mg_block self, double Zk)"},
	 { (char *)"Mg_block_KMg_A_set", _wrap_Mg_block_KMg_A_set, METH_VARARGS, (char *)"Mg_block_KMg_A_set(Mg_block self, double KMg_A)"},
	 { (char *)"Mg_block_KMg_A_get", _wrap_Mg_block_KMg_A_get, METH_VARARGS, (char *)"Mg_block_KMg_A_get(Mg_block self) -> double"},
	 { (char *)"Mg_block_K_MgB_set", _wrap_Mg_block_K_MgB_set, METH_VARARGS, (char *)"Mg_block_K_MgB_set(Mg_block self, double K_MgB)"},
	 { (char *)"Mg_block_K_MgB_get", _wrap_Mg_block_K_MgB_get, METH_VARARGS, (char *)"Mg_block_K_MgB_get(Mg_block self) -> double"},
	 { (char *)"Mg_block_CMg_set", _wrap_Mg_block_CMg_set, METH_VARARGS, (char *)"Mg_block_CMg_set(Mg_block self, double CMg)"},
	 { (char *)"Mg_block_CMg_get", _wrap_Mg_block_CMg_get, METH_VARARGS, (char *)"Mg_block_CMg_get(Mg_block self) -> double"},
	 { (char *)"Mg_block_Ik_set", _wrap_Mg_block_Ik_set, METH_VARARGS, (char *)"Mg_block_Ik_set(Mg_block self, double Ik)"},
	 { (char *)"Mg_block_Ik_get", _wrap_Mg_block_Ik_get, METH_VARARGS, (char *)"Mg_block_Ik_get(Mg_block self) -> double"},
	 { (char *)"Mg_block_Gk_set", _wrap_Mg_block_Gk_set, METH_VARARGS, (char *)"Mg_block_Gk_set(Mg_block self, double Gk)"},
	 { (char *)"Mg_block_Gk_get", _wrap_Mg_block_Gk_get, METH_VARARGS, (char *)"Mg_block_Gk_get(Mg_block self) -> double"},
	 { (char *)"Mg_block_Ek_set", _wrap_Mg_block_Ek_set, METH_VARARGS, (char *)"Mg_block_Ek_set(Mg_block self, double Ek)"},
	 { (char *)"Mg_block_Ek_get", _wrap_Mg_block_Ek_get, METH_VARARGS, (char *)"Mg_block_Ek_get(Mg_block self) -> double"},
	 { (char *)"Mg_block_Zk_set", _wrap_Mg_block_Zk_set, METH_VARARGS, (char *)"Mg_block_Zk_set(Mg_block self, double Zk)"},
	 { (char *)"Mg_block_Zk_get", _wrap_Mg_block_Zk_get, METH_VARARGS, (char *)"Mg_block_Zk_get(Mg_block self) -> double"},
	 { (char *)"Mg_block_swigregister", Mg_block_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Compartment", _wrap_new_Compartment, METH_VARARGS, (char *)"\n"
		"Compartment(::Id id)\n"
		"Compartment(string path)\n"
		"Compartment(string name, ::Id parentId)\n"
		"Compartment(string name, PyMooseBase parent)\n"
		"Compartment(Compartment src, string name, PyMooseBase parent)\n"
		"Compartment(Compartment src, string name, Id parent)\n"
		"Compartment(Id src, string name, Id parent)\n"
		"new_Compartment(Compartment src, string path) -> Compartment\n"
		""},
	 { (char *)"delete_Compartment", _wrap_delete_Compartment, METH_VARARGS, (char *)"delete_Compartment(Compartment self)"},
	 { (char *)"Compartment_getType", _wrap_Compartment_getType, METH_VARARGS, (char *)"Compartment_getType(Compartment self) -> string"},
	 { (char *)"Compartment___get_Vm", _wrap_Compartment___get_Vm, METH_VARARGS, (char *)"Compartment___get_Vm(Compartment self) -> double"},
	 { (char *)"Compartment___set_Vm", _wrap_Compartment___set_Vm, METH_VARARGS, (char *)"Compartment___set_Vm(Compartment self, double Vm)"},
	 { (char *)"Compartment___get_Cm", _wrap_Compartment___get_Cm, METH_VARARGS, (char *)"Compartment___get_Cm(Compartment self) -> double"},
	 { (char *)"Compartment___set_Cm", _wrap_Compartment___set_Cm, METH_VARARGS, (char *)"Compartment___set_Cm(Compartment self, double Cm)"},
	 { (char *)"Compartment___get_Em", _wrap_Compartment___get_Em, METH_VARARGS, (char *)"Compartment___get_Em(Compartment self) -> double"},
	 { (char *)"Compartment___set_Em", _wrap_Compartment___set_Em, METH_VARARGS, (char *)"Compartment___set_Em(Compartment self, double Em)"},
	 { (char *)"Compartment___get_Im", _wrap_Compartment___get_Im, METH_VARARGS, (char *)"Compartment___get_Im(Compartment self) -> double"},
	 { (char *)"Compartment___set_Im", _wrap_Compartment___set_Im, METH_VARARGS, (char *)"Compartment___set_Im(Compartment self, double Im)"},
	 { (char *)"Compartment___get_inject", _wrap_Compartment___get_inject, METH_VARARGS, (char *)"Compartment___get_inject(Compartment self) -> double"},
	 { (char *)"Compartment___set_inject", _wrap_Compartment___set_inject, METH_VARARGS, (char *)"Compartment___set_inject(Compartment self, double inject)"},
	 { (char *)"Compartment___get_initVm", _wrap_Compartment___get_initVm, METH_VARARGS, (char *)"Compartment___get_initVm(Compartment self) -> double"},
	 { (char *)"Compartment___set_initVm", _wrap_Compartment___set_initVm, METH_VARARGS, (char *)"Compartment___set_initVm(Compartment self, double initVm)"},
	 { (char *)"Compartment___get_Rm", _wrap_Compartment___get_Rm, METH_VARARGS, (char *)"Compartment___get_Rm(Compartment self) -> double"},
	 { (char *)"Compartment___set_Rm", _wrap_Compartment___set_Rm, METH_VARARGS, (char *)"Compartment___set_Rm(Compartment self, double Rm)"},
	 { (char *)"Compartment___get_Ra", _wrap_Compartment___get_Ra, METH_VARARGS, (char *)"Compartment___get_Ra(Compartment self) -> double"},
	 { (char *)"Compartment___set_Ra", _wrap_Compartment___set_Ra, METH_VARARGS, (char *)"Compartment___set_Ra(Compartment self, double Ra)"},
	 { (char *)"Compartment___get_diameter", _wrap_Compartment___get_diameter, METH_VARARGS, (char *)"Compartment___get_diameter(Compartment self) -> double"},
	 { (char *)"Compartment___set_diameter", _wrap_Compartment___set_diameter, METH_VARARGS, (char *)"Compartment___set_diameter(Compartment self, double diameter)"},
	 { (char *)"Compartment___get_length", _wrap_Compartment___get_length, METH_VARARGS, (char *)"Compartment___get_length(Compartment self) -> double"},
	 { (char *)"Compartment___set_length", _wrap_Compartment___set_length, METH_VARARGS, (char *)"Compartment___set_length(Compartment self, double length)"},
	 { (char *)"Compartment___get_x", _wrap_Compartment___get_x, METH_VARARGS, (char *)"Compartment___get_x(Compartment self) -> double"},
	 { (char *)"Compartment___set_x", _wrap_Compartment___set_x, METH_VARARGS, (char *)"Compartment___set_x(Compartment self, double x)"},
	 { (char *)"Compartment___get_y", _wrap_Compartment___get_y, METH_VARARGS, (char *)"Compartment___get_y(Compartment self) -> double"},
	 { (char *)"Compartment___set_y", _wrap_Compartment___set_y, METH_VARARGS, (char *)"Compartment___set_y(Compartment self, double y)"},
	 { (char *)"Compartment___get_z", _wrap_Compartment___get_z, METH_VARARGS, (char *)"Compartment___get_z(Compartment self) -> double"},
	 { (char *)"Compartment___set_z", _wrap_Compartment___set_z, METH_VARARGS, (char *)"Compartment___set_z(Compartment self, double z)"},
	 { (char *)"Compartment_Vm_set", _wrap_Compartment_Vm_set, METH_VARARGS, (char *)"Compartment_Vm_set(Compartment self, double Vm)"},
	 { (char *)"Compartment_Vm_get", _wrap_Compartment_Vm_get, METH_VARARGS, (char *)"Compartment_Vm_get(Compartment self) -> double"},
	 { (char *)"Compartment_Cm_set", _wrap_Compartment_Cm_set, METH_VARARGS, (char *)"Compartment_Cm_set(Compartment self, double Cm)"},
	 { (char *)"Compartment_Cm_get", _wrap_Compartment_Cm_get, METH_VARARGS, (char *)"Compartment_Cm_get(Compartment self) -> double"},
	 { (char *)"Compartment_Em_set", _wrap_Compartment_Em_set, METH_VARARGS, (char *)"Compartment_Em_set(Compartment self, double Em)"},
	 { (char *)"Compartment_Em_get", _wrap_Compartment_Em_get, METH_VARARGS, (char *)"Compartment_Em_get(Compartment self) -> double"},
	 { (char *)"Compartment_Im_set", _wrap_Compartment_Im_set, METH_VARARGS, (char *)"Compartment_Im_set(Compartment self, double Im)"},
	 { (char *)"Compartment_Im_get", _wrap_Compartment_Im_get, METH_VARARGS, (char *)"Compartment_Im_get(Compartment self) -> double"},
	 { (char *)"Compartment_inject_set", _wrap_Compartment_inject_set, METH_VARARGS, (char *)"Compartment_inject_set(Compartment self, double inject)"},
	 { (char *)"Compartment_inject_get", _wrap_Compartment_inject_get, METH_VARARGS, (char *)"Compartment_inject_get(Compartment self) -> double"},
	 { (char *)"Compartment_initVm_set", _wrap_Compartment_initVm_set, METH_VARARGS, (char *)"Compartment_initVm_set(Compartment self, double initVm)"},
	 { (char *)"Compartment_initVm_get", _wrap_Compartment_initVm_get, METH_VARARGS, (char *)"Compartment_initVm_get(Compartment self) -> double"},
	 { (char *)"Compartment_Rm_set", _wrap_Compartment_Rm_set, METH_VARARGS, (char *)"Compartment_Rm_set(Compartment self, double Rm)"},
	 { (char *)"Compartment_Rm_get", _wrap_Compartment_Rm_get, METH_VARARGS, (char *)"Compartment_Rm_get(Compartment self) -> double"},
	 { (char *)"Compartment_Ra_set", _wrap_Compartment_Ra_set, METH_VARARGS, (char *)"Compartment_Ra_set(Compartment self, double Ra)"},
	 { (char *)"Compartment_Ra_get", _wrap_Compartment_Ra_get, METH_VARARGS, (char *)"Compartment_Ra_get(Compartment self) -> double"},
	 { (char *)"Compartment_diameter_set", _wrap_Compartment_diameter_set, METH_VARARGS, (char *)"Compartment_diameter_set(Compartment self, double diameter)"},
	 { (char *)"Compartment_diameter_get", _wrap_Compartment_diameter_get, METH_VARARGS, (char *)"Compartment_diameter_get(Compartment self) -> double"},
	 { (char *)"Compartment_length_set", _wrap_Compartment_length_set, METH_VARARGS, (char *)"Compartment_length_set(Compartment self, double length)"},
	 { (char *)"Compartment_length_get", _wrap_Compartment_length_get, METH_VARARGS, (char *)"Compartment_length_get(Compartment self) -> double"},
	 { (char *)"Compartment_x_set", _wrap_Compartment_x_set, METH_VARARGS, (char *)"Compartment_x_set(Compartment self, double x)"},
	 { (char *)"Compartment_x_get", _wrap_Compartment_x_get, METH_VARARGS, (char *)"Compartment_x_get(Compartment self) -> double"},
	 { (char *)"Compartment_y_set", _wrap_Compartment_y_set, METH_VARARGS, (char *)"Compartment_y_set(Compartment self, double y)"},
	 { (char *)"Compartment_y_get", _wrap_Compartment_y_get, METH_VARARGS, (char *)"Compartment_y_get(Compartment self) -> double"},
	 { (char *)"Compartment_z_set", _wrap_Compartment_z_set, METH_VARARGS, (char *)"Compartment_z_set(Compartment self, double z)"},
	 { (char *)"Compartment_z_get", _wrap_Compartment_z_get, METH_VARARGS, (char *)"Compartment_z_get(Compartment self) -> double"},
	 { (char *)"Compartment_swigregister", Compartment_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NeuroScan", _wrap_new_NeuroScan, METH_VARARGS, (char *)"\n"
		"NeuroScan(Id id)\n"
		"NeuroScan(string path)\n"
		"NeuroScan(string name, Id parentId)\n"
		"NeuroScan(string name, PyMooseBase parent)\n"
		"NeuroScan(NeuroScan src, string name, PyMooseBase parent)\n"
		"NeuroScan(NeuroScan src, string name, Id parent)\n"
		"NeuroScan(NeuroScan src, string path)\n"
		"new_NeuroScan(Id src, string name, Id parent) -> NeuroScan\n"
		""},
	 { (char *)"delete_NeuroScan", _wrap_delete_NeuroScan, METH_VARARGS, (char *)"delete_NeuroScan(NeuroScan self)"},
	 { (char *)"NeuroScan_getType", _wrap_NeuroScan_getType, METH_VARARGS, (char *)"NeuroScan_getType(NeuroScan self) -> string"},
	 { (char *)"NeuroScan___get_VDiv", _wrap_NeuroScan___get_VDiv, METH_VARARGS, (char *)"NeuroScan___get_VDiv(NeuroScan self) -> int"},
	 { (char *)"NeuroScan___set_VDiv", _wrap_NeuroScan___set_VDiv, METH_VARARGS, (char *)"NeuroScan___set_VDiv(NeuroScan self, int VDiv)"},
	 { (char *)"NeuroScan___get_VMin", _wrap_NeuroScan___get_VMin, METH_VARARGS, (char *)"NeuroScan___get_VMin(NeuroScan self) -> double"},
	 { (char *)"NeuroScan___set_VMin", _wrap_NeuroScan___set_VMin, METH_VARARGS, (char *)"NeuroScan___set_VMin(NeuroScan self, double VMin)"},
	 { (char *)"NeuroScan___get_VMax", _wrap_NeuroScan___get_VMax, METH_VARARGS, (char *)"NeuroScan___get_VMax(NeuroScan self) -> double"},
	 { (char *)"NeuroScan___set_VMax", _wrap_NeuroScan___set_VMax, METH_VARARGS, (char *)"NeuroScan___set_VMax(NeuroScan self, double VMax)"},
	 { (char *)"NeuroScan___get_CaDiv", _wrap_NeuroScan___get_CaDiv, METH_VARARGS, (char *)"NeuroScan___get_CaDiv(NeuroScan self) -> int"},
	 { (char *)"NeuroScan___set_CaDiv", _wrap_NeuroScan___set_CaDiv, METH_VARARGS, (char *)"NeuroScan___set_CaDiv(NeuroScan self, int CaDiv)"},
	 { (char *)"NeuroScan___get_CaMin", _wrap_NeuroScan___get_CaMin, METH_VARARGS, (char *)"NeuroScan___get_CaMin(NeuroScan self) -> double"},
	 { (char *)"NeuroScan___set_CaMin", _wrap_NeuroScan___set_CaMin, METH_VARARGS, (char *)"NeuroScan___set_CaMin(NeuroScan self, double CaMin)"},
	 { (char *)"NeuroScan___get_CaMax", _wrap_NeuroScan___get_CaMax, METH_VARARGS, (char *)"NeuroScan___get_CaMax(NeuroScan self) -> double"},
	 { (char *)"NeuroScan___set_CaMax", _wrap_NeuroScan___set_CaMax, METH_VARARGS, (char *)"NeuroScan___set_CaMax(NeuroScan self, double CaMax)"},
	 { (char *)"NeuroScan_VDiv_set", _wrap_NeuroScan_VDiv_set, METH_VARARGS, (char *)"NeuroScan_VDiv_set(NeuroScan self, int VDiv)"},
	 { (char *)"NeuroScan_VDiv_get", _wrap_NeuroScan_VDiv_get, METH_VARARGS, (char *)"NeuroScan_VDiv_get(NeuroScan self) -> int"},
	 { (char *)"NeuroScan_VMin_set", _wrap_NeuroScan_VMin_set, METH_VARARGS, (char *)"NeuroScan_VMin_set(NeuroScan self, double VMin)"},
	 { (char *)"NeuroScan_VMin_get", _wrap_NeuroScan_VMin_get, METH_VARARGS, (char *)"NeuroScan_VMin_get(NeuroScan self) -> double"},
	 { (char *)"NeuroScan_VMax_set", _wrap_NeuroScan_VMax_set, METH_VARARGS, (char *)"NeuroScan_VMax_set(NeuroScan self, double VMax)"},
	 { (char *)"NeuroScan_VMax_get", _wrap_NeuroScan_VMax_get, METH_VARARGS, (char *)"NeuroScan_VMax_get(NeuroScan self) -> double"},
	 { (char *)"NeuroScan_CaDiv_set", _wrap_NeuroScan_CaDiv_set, METH_VARARGS, (char *)"NeuroScan_CaDiv_set(NeuroScan self, int CaDiv)"},
	 { (char *)"NeuroScan_CaDiv_get", _wrap_NeuroScan_CaDiv_get, METH_VARARGS, (char *)"NeuroScan_CaDiv_get(NeuroScan self) -> int"},
	 { (char *)"NeuroScan_CaMin_set", _wrap_NeuroScan_CaMin_set, METH_VARARGS, (char *)"NeuroScan_CaMin_set(NeuroScan self, double CaMin)"},
	 { (char *)"NeuroScan_CaMin_get", _wrap_NeuroScan_CaMin_get, METH_VARARGS, (char *)"NeuroScan_CaMin_get(NeuroScan self) -> double"},
	 { (char *)"NeuroScan_CaMax_set", _wrap_NeuroScan_CaMax_set, METH_VARARGS, (char *)"NeuroScan_CaMax_set(NeuroScan self, double CaMax)"},
	 { (char *)"NeuroScan_CaMax_get", _wrap_NeuroScan_CaMax_get, METH_VARARGS, (char *)"NeuroScan_CaMax_get(NeuroScan self) -> double"},
	 { (char *)"NeuroScan_swigregister", NeuroScan_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HSolve", _wrap_new_HSolve, METH_VARARGS, (char *)"\n"
		"HSolve(Id id)\n"
		"HSolve(string path)\n"
		"HSolve(string name, Id parentId)\n"
		"HSolve(string name, PyMooseBase parent)\n"
		"HSolve(HSolve src, string name, PyMooseBase parent)\n"
		"HSolve(HSolve src, string name, Id parent)\n"
		"HSolve(Id src, string name, Id parent)\n"
		"new_HSolve(HSolve src, string path) -> HSolve\n"
		""},
	 { (char *)"delete_HSolve", _wrap_delete_HSolve, METH_VARARGS, (char *)"delete_HSolve(HSolve self)"},
	 { (char *)"HSolve_getType", _wrap_HSolve_getType, METH_VARARGS, (char *)"HSolve_getType(HSolve self) -> string"},
	 { (char *)"HSolve___get_seed_path", _wrap_HSolve___get_seed_path, METH_VARARGS, (char *)"HSolve___get_seed_path(HSolve self) -> string"},
	 { (char *)"HSolve___set_seed_path", _wrap_HSolve___set_seed_path, METH_VARARGS, (char *)"HSolve___set_seed_path(HSolve self, string path)"},
	 { (char *)"HSolve___get_NDiv", _wrap_HSolve___get_NDiv, METH_VARARGS, (char *)"HSolve___get_NDiv(HSolve self) -> int"},
	 { (char *)"HSolve___set_NDiv", _wrap_HSolve___set_NDiv, METH_VARARGS, (char *)"HSolve___set_NDiv(HSolve self, int NDiv)"},
	 { (char *)"HSolve___get_VLo", _wrap_HSolve___get_VLo, METH_VARARGS, (char *)"HSolve___get_VLo(HSolve self) -> double"},
	 { (char *)"HSolve___set_VLo", _wrap_HSolve___set_VLo, METH_VARARGS, (char *)"HSolve___set_VLo(HSolve self, double VLo)"},
	 { (char *)"HSolve___get_VHi", _wrap_HSolve___get_VHi, METH_VARARGS, (char *)"HSolve___get_VHi(HSolve self) -> double"},
	 { (char *)"HSolve___set_VHi", _wrap_HSolve___set_VHi, METH_VARARGS, (char *)"HSolve___set_VHi(HSolve self, double VHi)"},
	 { (char *)"HSolve_seedPath_set", _wrap_HSolve_seedPath_set, METH_VARARGS, (char *)"HSolve_seedPath_set(HSolve self, string seedPath)"},
	 { (char *)"HSolve_seedPath_get", _wrap_HSolve_seedPath_get, METH_VARARGS, (char *)"HSolve_seedPath_get(HSolve self) -> string"},
	 { (char *)"HSolve_NDiv_set", _wrap_HSolve_NDiv_set, METH_VARARGS, (char *)"HSolve_NDiv_set(HSolve self, int NDiv)"},
	 { (char *)"HSolve_NDiv_get", _wrap_HSolve_NDiv_get, METH_VARARGS, (char *)"HSolve_NDiv_get(HSolve self) -> int"},
	 { (char *)"HSolve_VLo_set", _wrap_HSolve_VLo_set, METH_VARARGS, (char *)"HSolve_VLo_set(HSolve self, double VLo)"},
	 { (char *)"HSolve_VLo_get", _wrap_HSolve_VLo_get, METH_VARARGS, (char *)"HSolve_VLo_get(HSolve self) -> double"},
	 { (char *)"HSolve_VHi_set", _wrap_HSolve_VHi_set, METH_VARARGS, (char *)"HSolve_VHi_set(HSolve self, double VHi)"},
	 { (char *)"HSolve_VHi_get", _wrap_HSolve_VHi_get, METH_VARARGS, (char *)"HSolve_VHi_get(HSolve self) -> double"},
	 { (char *)"HSolve_swigregister", HSolve_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Kintegrator", _wrap_new_Kintegrator, METH_VARARGS, (char *)"\n"
		"Kintegrator(Id id)\n"
		"Kintegrator(string path)\n"
		"Kintegrator(string name, Id parentId)\n"
		"Kintegrator(string name, PyMooseBase parent)\n"
		"Kintegrator(Kintegrator src, string name, PyMooseBase parent)\n"
		"Kintegrator(Kintegrator src, string name, Id parent)\n"
		"Kintegrator(Id src, string name, Id parent)\n"
		"new_Kintegrator(Kintegrator src, string path) -> Kintegrator\n"
		""},
	 { (char *)"delete_Kintegrator", _wrap_delete_Kintegrator, METH_VARARGS, (char *)"delete_Kintegrator(Kintegrator self)"},
	 { (char *)"Kintegrator_getType", _wrap_Kintegrator_getType, METH_VARARGS, (char *)"Kintegrator_getType(Kintegrator self) -> string"},
	 { (char *)"Kintegrator___get_isInitiatilized", _wrap_Kintegrator___get_isInitiatilized, METH_VARARGS, (char *)"Kintegrator___get_isInitiatilized(Kintegrator self) -> bool"},
	 { (char *)"Kintegrator___set_isInitiatilized", _wrap_Kintegrator___set_isInitiatilized, METH_VARARGS, (char *)"Kintegrator___set_isInitiatilized(Kintegrator self, bool isInitiatilized)"},
	 { (char *)"Kintegrator_imethod", _wrap_Kintegrator_imethod, METH_VARARGS, (char *)"\n"
		"imethod() -> string\n"
		"Kintegrator_imethod(Kintegrator self, string ?) -> string\n"
		""},
	 { (char *)"Kintegrator_isInitiatilized_set", _wrap_Kintegrator_isInitiatilized_set, METH_VARARGS, (char *)"Kintegrator_isInitiatilized_set(Kintegrator self, bool isInitiatilized)"},
	 { (char *)"Kintegrator_isInitiatilized_get", _wrap_Kintegrator_isInitiatilized_get, METH_VARARGS, (char *)"Kintegrator_isInitiatilized_get(Kintegrator self) -> bool"},
	 { (char *)"Kintegrator_swigregister", Kintegrator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MathFunc", _wrap_new_MathFunc, METH_VARARGS, (char *)"\n"
		"MathFunc(Id id)\n"
		"MathFunc(string path)\n"
		"MathFunc(string name, Id parentId)\n"
		"MathFunc(string name, PyMooseBase parent)\n"
		"MathFunc(MathFunc src, string name, PyMooseBase parent)\n"
		"MathFunc(MathFunc src, string name, Id parent)\n"
		"MathFunc(MathFunc src, string path)\n"
		"new_MathFunc(Id src, string name, Id parent) -> MathFunc\n"
		""},
	 { (char *)"delete_MathFunc", _wrap_delete_MathFunc, METH_VARARGS, (char *)"delete_MathFunc(MathFunc self)"},
	 { (char *)"MathFunc_getType", _wrap_MathFunc_getType, METH_VARARGS, (char *)"MathFunc_getType(MathFunc self) -> string"},
	 { (char *)"MathFunc___get_mathML", _wrap_MathFunc___get_mathML, METH_VARARGS, (char *)"MathFunc___get_mathML(MathFunc self) -> string"},
	 { (char *)"MathFunc___set_mathML", _wrap_MathFunc___set_mathML, METH_VARARGS, (char *)"MathFunc___set_mathML(MathFunc self, string mathML)"},
	 { (char *)"MathFunc___get_function", _wrap_MathFunc___get_function, METH_VARARGS, (char *)"MathFunc___get_function(MathFunc self) -> string"},
	 { (char *)"MathFunc___set_function", _wrap_MathFunc___set_function, METH_VARARGS, (char *)"MathFunc___set_function(MathFunc self, string function)"},
	 { (char *)"MathFunc___get_result", _wrap_MathFunc___get_result, METH_VARARGS, (char *)"MathFunc___get_result(MathFunc self) -> double"},
	 { (char *)"MathFunc___set_result", _wrap_MathFunc___set_result, METH_VARARGS, (char *)"MathFunc___set_result(MathFunc self, double result)"},
	 { (char *)"MathFunc_mathML_set", _wrap_MathFunc_mathML_set, METH_VARARGS, (char *)"MathFunc_mathML_set(MathFunc self, string mathML)"},
	 { (char *)"MathFunc_mathML_get", _wrap_MathFunc_mathML_get, METH_VARARGS, (char *)"MathFunc_mathML_get(MathFunc self) -> string"},
	 { (char *)"MathFunc_function_set", _wrap_MathFunc_function_set, METH_VARARGS, (char *)"MathFunc_function_set(MathFunc self, string function)"},
	 { (char *)"MathFunc_function_get", _wrap_MathFunc_function_get, METH_VARARGS, (char *)"MathFunc_function_get(MathFunc self) -> string"},
	 { (char *)"MathFunc_result_set", _wrap_MathFunc_result_set, METH_VARARGS, (char *)"MathFunc_result_set(MathFunc self, double result)"},
	 { (char *)"MathFunc_result_get", _wrap_MathFunc_result_get, METH_VARARGS, (char *)"MathFunc_result_get(MathFunc self) -> double"},
	 { (char *)"MathFunc_swigregister", MathFunc_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Stoich", _wrap_new_Stoich, METH_VARARGS, (char *)"\n"
		"Stoich(Id id)\n"
		"Stoich(string path)\n"
		"Stoich(string name, Id parentId)\n"
		"Stoich(string name, PyMooseBase parent)\n"
		"Stoich(Stoich src, string name, PyMooseBase parent)\n"
		"Stoich(Stoich src, string name, Id parent)\n"
		"Stoich(Id src, string name, Id parent)\n"
		"new_Stoich(Stoich src, string path) -> Stoich\n"
		""},
	 { (char *)"delete_Stoich", _wrap_delete_Stoich, METH_VARARGS, (char *)"delete_Stoich(Stoich self)"},
	 { (char *)"Stoich_getType", _wrap_Stoich_getType, METH_VARARGS, (char *)"Stoich_getType(Stoich self) -> string"},
	 { (char *)"Stoich___get_nMols", _wrap_Stoich___get_nMols, METH_VARARGS, (char *)"Stoich___get_nMols(Stoich self) -> unsigned int"},
	 { (char *)"Stoich___set_nMols", _wrap_Stoich___set_nMols, METH_VARARGS, (char *)"Stoich___set_nMols(Stoich self, unsigned int nMols)"},
	 { (char *)"Stoich___get_nVarMols", _wrap_Stoich___get_nVarMols, METH_VARARGS, (char *)"Stoich___get_nVarMols(Stoich self) -> unsigned int"},
	 { (char *)"Stoich___set_nVarMols", _wrap_Stoich___set_nVarMols, METH_VARARGS, (char *)"Stoich___set_nVarMols(Stoich self, unsigned int nVarMols)"},
	 { (char *)"Stoich___get_nSumTot", _wrap_Stoich___get_nSumTot, METH_VARARGS, (char *)"Stoich___get_nSumTot(Stoich self) -> unsigned int"},
	 { (char *)"Stoich___set_nSumTot", _wrap_Stoich___set_nSumTot, METH_VARARGS, (char *)"Stoich___set_nSumTot(Stoich self, unsigned int nSumTot)"},
	 { (char *)"Stoich___get_nBuffered", _wrap_Stoich___get_nBuffered, METH_VARARGS, (char *)"Stoich___get_nBuffered(Stoich self) -> unsigned int"},
	 { (char *)"Stoich___set_nBuffered", _wrap_Stoich___set_nBuffered, METH_VARARGS, (char *)"Stoich___set_nBuffered(Stoich self, unsigned int nBuffered)"},
	 { (char *)"Stoich___get_nReacs", _wrap_Stoich___get_nReacs, METH_VARARGS, (char *)"Stoich___get_nReacs(Stoich self) -> unsigned int"},
	 { (char *)"Stoich___set_nReacs", _wrap_Stoich___set_nReacs, METH_VARARGS, (char *)"Stoich___set_nReacs(Stoich self, unsigned int nReacs)"},
	 { (char *)"Stoich___get_nEnz", _wrap_Stoich___get_nEnz, METH_VARARGS, (char *)"Stoich___get_nEnz(Stoich self) -> unsigned int"},
	 { (char *)"Stoich___set_nEnz", _wrap_Stoich___set_nEnz, METH_VARARGS, (char *)"Stoich___set_nEnz(Stoich self, unsigned int nEnz)"},
	 { (char *)"Stoich___get_nMMenz", _wrap_Stoich___get_nMMenz, METH_VARARGS, (char *)"Stoich___get_nMMenz(Stoich self) -> unsigned int"},
	 { (char *)"Stoich___set_nMMenz", _wrap_Stoich___set_nMMenz, METH_VARARGS, (char *)"Stoich___set_nMMenz(Stoich self, unsigned int nMMenz)"},
	 { (char *)"Stoich___get_nExternalRates", _wrap_Stoich___get_nExternalRates, METH_VARARGS, (char *)"Stoich___get_nExternalRates(Stoich self) -> unsigned int"},
	 { (char *)"Stoich___set_nExternalRates", _wrap_Stoich___set_nExternalRates, METH_VARARGS, (char *)"Stoich___set_nExternalRates(Stoich self, unsigned int nExternalRates)"},
	 { (char *)"Stoich___get_useOneWayReacs", _wrap_Stoich___get_useOneWayReacs, METH_VARARGS, (char *)"Stoich___get_useOneWayReacs(Stoich self) -> bool"},
	 { (char *)"Stoich___set_useOneWayReacs", _wrap_Stoich___set_useOneWayReacs, METH_VARARGS, (char *)"Stoich___set_useOneWayReacs(Stoich self, bool useOneWayReacs)"},
	 { (char *)"Stoich_path", _wrap_Stoich_path, METH_VARARGS, (char *)"\n"
		"path() -> string\n"
		"Stoich_path(Stoich self, string path) -> string\n"
		""},
	 { (char *)"Stoich___get_rateVectorSize", _wrap_Stoich___get_rateVectorSize, METH_VARARGS, (char *)"Stoich___get_rateVectorSize(Stoich self) -> unsigned int"},
	 { (char *)"Stoich___set_rateVectorSize", _wrap_Stoich___set_rateVectorSize, METH_VARARGS, (char *)"Stoich___set_rateVectorSize(Stoich self, unsigned int rateVectorSize)"},
	 { (char *)"Stoich_nMols_get", _wrap_Stoich_nMols_get, METH_VARARGS, (char *)"Stoich_nMols_get(Stoich self) -> unsigned int"},
	 { (char *)"Stoich_nVarMols_get", _wrap_Stoich_nVarMols_get, METH_VARARGS, (char *)"Stoich_nVarMols_get(Stoich self) -> unsigned int"},
	 { (char *)"Stoich_nSumTot_get", _wrap_Stoich_nSumTot_get, METH_VARARGS, (char *)"Stoich_nSumTot_get(Stoich self) -> unsigned int"},
	 { (char *)"Stoich_nBuffered_get", _wrap_Stoich_nBuffered_get, METH_VARARGS, (char *)"Stoich_nBuffered_get(Stoich self) -> unsigned int"},
	 { (char *)"Stoich_nReacs_get", _wrap_Stoich_nReacs_get, METH_VARARGS, (char *)"Stoich_nReacs_get(Stoich self) -> unsigned int"},
	 { (char *)"Stoich_nEnz_get", _wrap_Stoich_nEnz_get, METH_VARARGS, (char *)"Stoich_nEnz_get(Stoich self) -> unsigned int"},
	 { (char *)"Stoich_nMMenz_get", _wrap_Stoich_nMMenz_get, METH_VARARGS, (char *)"Stoich_nMMenz_get(Stoich self) -> unsigned int"},
	 { (char *)"Stoich_nExternalRates_get", _wrap_Stoich_nExternalRates_get, METH_VARARGS, (char *)"Stoich_nExternalRates_get(Stoich self) -> unsigned int"},
	 { (char *)"Stoich_useOneWayReacs_set", _wrap_Stoich_useOneWayReacs_set, METH_VARARGS, (char *)"Stoich_useOneWayReacs_set(Stoich self, bool useOneWayReacs)"},
	 { (char *)"Stoich_useOneWayReacs_get", _wrap_Stoich_useOneWayReacs_get, METH_VARARGS, (char *)"Stoich_useOneWayReacs_get(Stoich self) -> bool"},
	 { (char *)"Stoich_rateVectorSize_get", _wrap_Stoich_rateVectorSize_get, METH_VARARGS, (char *)"Stoich_rateVectorSize_get(Stoich self) -> unsigned int"},
	 { (char *)"Stoich_swigregister", Stoich_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KineticHub", _wrap_new_KineticHub, METH_VARARGS, (char *)"\n"
		"KineticHub(Id id)\n"
		"KineticHub(string path)\n"
		"KineticHub(string name, Id parentId)\n"
		"KineticHub(string name, PyMooseBase parent)\n"
		"KineticHub(KineticHub src, string name, PyMooseBase parent)\n"
		"KineticHub(KineticHub src, string name, Id parent)\n"
		"KineticHub(Id src, string name, Id parent)\n"
		"new_KineticHub(KineticHub src, string path) -> KineticHub\n"
		""},
	 { (char *)"delete_KineticHub", _wrap_delete_KineticHub, METH_VARARGS, (char *)"delete_KineticHub(KineticHub self)"},
	 { (char *)"KineticHub_getType", _wrap_KineticHub_getType, METH_VARARGS, (char *)"KineticHub_getType(KineticHub self) -> string"},
	 { (char *)"KineticHub___get_nMol", _wrap_KineticHub___get_nMol, METH_VARARGS, (char *)"KineticHub___get_nMol(KineticHub self) -> unsigned int"},
	 { (char *)"KineticHub___set_nMol", _wrap_KineticHub___set_nMol, METH_VARARGS, (char *)"KineticHub___set_nMol(KineticHub self, unsigned int nMol)"},
	 { (char *)"KineticHub___get_nReac", _wrap_KineticHub___get_nReac, METH_VARARGS, (char *)"KineticHub___get_nReac(KineticHub self) -> unsigned int"},
	 { (char *)"KineticHub___set_nReac", _wrap_KineticHub___set_nReac, METH_VARARGS, (char *)"KineticHub___set_nReac(KineticHub self, unsigned int nReac)"},
	 { (char *)"KineticHub___get_nEnz", _wrap_KineticHub___get_nEnz, METH_VARARGS, (char *)"KineticHub___get_nEnz(KineticHub self) -> unsigned int"},
	 { (char *)"KineticHub___set_nEnz", _wrap_KineticHub___set_nEnz, METH_VARARGS, (char *)"KineticHub___set_nEnz(KineticHub self, unsigned int nEnz)"},
	 { (char *)"KineticHub_destroy", _wrap_KineticHub_destroy, METH_VARARGS, (char *)"KineticHub_destroy(KineticHub self)"},
	 { (char *)"KineticHub___get_molSum", _wrap_KineticHub___get_molSum, METH_VARARGS, (char *)"KineticHub___get_molSum(KineticHub self) -> double"},
	 { (char *)"KineticHub___set_molSum", _wrap_KineticHub___set_molSum, METH_VARARGS, (char *)"KineticHub___set_molSum(KineticHub self, double molSum)"},
	 { (char *)"KineticHub_nMol_set", _wrap_KineticHub_nMol_set, METH_VARARGS, (char *)"KineticHub_nMol_set(KineticHub self, unsigned int nMol)"},
	 { (char *)"KineticHub_nMol_get", _wrap_KineticHub_nMol_get, METH_VARARGS, (char *)"KineticHub_nMol_get(KineticHub self) -> unsigned int"},
	 { (char *)"KineticHub_nReac_set", _wrap_KineticHub_nReac_set, METH_VARARGS, (char *)"KineticHub_nReac_set(KineticHub self, unsigned int nReac)"},
	 { (char *)"KineticHub_nReac_get", _wrap_KineticHub_nReac_get, METH_VARARGS, (char *)"KineticHub_nReac_get(KineticHub self) -> unsigned int"},
	 { (char *)"KineticHub_nEnz_set", _wrap_KineticHub_nEnz_set, METH_VARARGS, (char *)"KineticHub_nEnz_set(KineticHub self, unsigned int nEnz)"},
	 { (char *)"KineticHub_nEnz_get", _wrap_KineticHub_nEnz_get, METH_VARARGS, (char *)"KineticHub_nEnz_get(KineticHub self) -> unsigned int"},
	 { (char *)"KineticHub_molSum_set", _wrap_KineticHub_molSum_set, METH_VARARGS, (char *)"KineticHub_molSum_set(KineticHub self, double molSum)"},
	 { (char *)"KineticHub_molSum_get", _wrap_KineticHub_molSum_get, METH_VARARGS, (char *)"KineticHub_molSum_get(KineticHub self) -> double"},
	 { (char *)"KineticHub_swigregister", KineticHub_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Enzyme", _wrap_new_Enzyme, METH_VARARGS, (char *)"\n"
		"Enzyme(Id id)\n"
		"Enzyme(string path)\n"
		"Enzyme(string name, Id parentId)\n"
		"Enzyme(string name, PyMooseBase parent)\n"
		"Enzyme(Enzyme src, string name, PyMooseBase parent)\n"
		"Enzyme(Enzyme src, string name, Id parent)\n"
		"Enzyme(Id src, string name, Id parent)\n"
		"new_Enzyme(Enzyme src, string path) -> Enzyme\n"
		""},
	 { (char *)"delete_Enzyme", _wrap_delete_Enzyme, METH_VARARGS, (char *)"delete_Enzyme(Enzyme self)"},
	 { (char *)"Enzyme_getType", _wrap_Enzyme_getType, METH_VARARGS, (char *)"Enzyme_getType(Enzyme self) -> string"},
	 { (char *)"Enzyme___get_k1", _wrap_Enzyme___get_k1, METH_VARARGS, (char *)"Enzyme___get_k1(Enzyme self) -> double"},
	 { (char *)"Enzyme___set_k1", _wrap_Enzyme___set_k1, METH_VARARGS, (char *)"Enzyme___set_k1(Enzyme self, double k1)"},
	 { (char *)"Enzyme___get_k2", _wrap_Enzyme___get_k2, METH_VARARGS, (char *)"Enzyme___get_k2(Enzyme self) -> double"},
	 { (char *)"Enzyme___set_k2", _wrap_Enzyme___set_k2, METH_VARARGS, (char *)"Enzyme___set_k2(Enzyme self, double k2)"},
	 { (char *)"Enzyme___get_k3", _wrap_Enzyme___get_k3, METH_VARARGS, (char *)"Enzyme___get_k3(Enzyme self) -> double"},
	 { (char *)"Enzyme___set_k3", _wrap_Enzyme___set_k3, METH_VARARGS, (char *)"Enzyme___set_k3(Enzyme self, double k3)"},
	 { (char *)"Enzyme___get_Km", _wrap_Enzyme___get_Km, METH_VARARGS, (char *)"Enzyme___get_Km(Enzyme self) -> double"},
	 { (char *)"Enzyme___set_Km", _wrap_Enzyme___set_Km, METH_VARARGS, (char *)"Enzyme___set_Km(Enzyme self, double Km)"},
	 { (char *)"Enzyme___get_kcat", _wrap_Enzyme___get_kcat, METH_VARARGS, (char *)"Enzyme___get_kcat(Enzyme self) -> double"},
	 { (char *)"Enzyme___set_kcat", _wrap_Enzyme___set_kcat, METH_VARARGS, (char *)"Enzyme___set_kcat(Enzyme self, double kcat)"},
	 { (char *)"Enzyme___get_mode", _wrap_Enzyme___get_mode, METH_VARARGS, (char *)"Enzyme___get_mode(Enzyme self) -> bool"},
	 { (char *)"Enzyme___set_mode", _wrap_Enzyme___set_mode, METH_VARARGS, (char *)"Enzyme___set_mode(Enzyme self, bool mode)"},
	 { (char *)"Enzyme___get_scaleKm", _wrap_Enzyme___get_scaleKm, METH_VARARGS, (char *)"Enzyme___get_scaleKm(Enzyme self) -> double"},
	 { (char *)"Enzyme___set_scaleKm", _wrap_Enzyme___set_scaleKm, METH_VARARGS, (char *)"Enzyme___set_scaleKm(Enzyme self, double scaleKm)"},
	 { (char *)"Enzyme___get_scaleKcat", _wrap_Enzyme___get_scaleKcat, METH_VARARGS, (char *)"Enzyme___get_scaleKcat(Enzyme self) -> double"},
	 { (char *)"Enzyme___set_scaleKcat", _wrap_Enzyme___set_scaleKcat, METH_VARARGS, (char *)"Enzyme___set_scaleKcat(Enzyme self, double scaleKcat)"},
	 { (char *)"Enzyme___get_intramol", _wrap_Enzyme___get_intramol, METH_VARARGS, (char *)"Enzyme___get_intramol(Enzyme self) -> double"},
	 { (char *)"Enzyme___set_intramol", _wrap_Enzyme___set_intramol, METH_VARARGS, (char *)"Enzyme___set_intramol(Enzyme self, double intramol)"},
	 { (char *)"Enzyme_k1_set", _wrap_Enzyme_k1_set, METH_VARARGS, (char *)"Enzyme_k1_set(Enzyme self, double k1)"},
	 { (char *)"Enzyme_k1_get", _wrap_Enzyme_k1_get, METH_VARARGS, (char *)"Enzyme_k1_get(Enzyme self) -> double"},
	 { (char *)"Enzyme_k2_set", _wrap_Enzyme_k2_set, METH_VARARGS, (char *)"Enzyme_k2_set(Enzyme self, double k2)"},
	 { (char *)"Enzyme_k2_get", _wrap_Enzyme_k2_get, METH_VARARGS, (char *)"Enzyme_k2_get(Enzyme self) -> double"},
	 { (char *)"Enzyme_k3_set", _wrap_Enzyme_k3_set, METH_VARARGS, (char *)"Enzyme_k3_set(Enzyme self, double k3)"},
	 { (char *)"Enzyme_k3_get", _wrap_Enzyme_k3_get, METH_VARARGS, (char *)"Enzyme_k3_get(Enzyme self) -> double"},
	 { (char *)"Enzyme_Km_set", _wrap_Enzyme_Km_set, METH_VARARGS, (char *)"Enzyme_Km_set(Enzyme self, double Km)"},
	 { (char *)"Enzyme_Km_get", _wrap_Enzyme_Km_get, METH_VARARGS, (char *)"Enzyme_Km_get(Enzyme self) -> double"},
	 { (char *)"Enzyme_kcat_set", _wrap_Enzyme_kcat_set, METH_VARARGS, (char *)"Enzyme_kcat_set(Enzyme self, double kcat)"},
	 { (char *)"Enzyme_kcat_get", _wrap_Enzyme_kcat_get, METH_VARARGS, (char *)"Enzyme_kcat_get(Enzyme self) -> double"},
	 { (char *)"Enzyme_mode_set", _wrap_Enzyme_mode_set, METH_VARARGS, (char *)"Enzyme_mode_set(Enzyme self, bool mode)"},
	 { (char *)"Enzyme_mode_get", _wrap_Enzyme_mode_get, METH_VARARGS, (char *)"Enzyme_mode_get(Enzyme self) -> bool"},
	 { (char *)"Enzyme_swigregister", Enzyme_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Reaction", _wrap_new_Reaction, METH_VARARGS, (char *)"\n"
		"Reaction(Id id)\n"
		"Reaction(string path)\n"
		"Reaction(string name, Id parentId)\n"
		"Reaction(string name, PyMooseBase parent)\n"
		"Reaction(Reaction src, string name, PyMooseBase parent)\n"
		"Reaction(Reaction src, string name, Id parent)\n"
		"Reaction(Id src, string name, Id parent)\n"
		"new_Reaction(Reaction src, string path) -> Reaction\n"
		""},
	 { (char *)"delete_Reaction", _wrap_delete_Reaction, METH_VARARGS, (char *)"delete_Reaction(Reaction self)"},
	 { (char *)"Reaction_getType", _wrap_Reaction_getType, METH_VARARGS, (char *)"Reaction_getType(Reaction self) -> string"},
	 { (char *)"Reaction___get_kf", _wrap_Reaction___get_kf, METH_VARARGS, (char *)"Reaction___get_kf(Reaction self) -> double"},
	 { (char *)"Reaction___set_kf", _wrap_Reaction___set_kf, METH_VARARGS, (char *)"Reaction___set_kf(Reaction self, double kf)"},
	 { (char *)"Reaction___get_kb", _wrap_Reaction___get_kb, METH_VARARGS, (char *)"Reaction___get_kb(Reaction self) -> double"},
	 { (char *)"Reaction___set_kb", _wrap_Reaction___set_kb, METH_VARARGS, (char *)"Reaction___set_kb(Reaction self, double kb)"},
	 { (char *)"Reaction___get_scaleKf", _wrap_Reaction___get_scaleKf, METH_VARARGS, (char *)"Reaction___get_scaleKf(Reaction self) -> double"},
	 { (char *)"Reaction___set_scaleKf", _wrap_Reaction___set_scaleKf, METH_VARARGS, (char *)"Reaction___set_scaleKf(Reaction self, double scaleKf)"},
	 { (char *)"Reaction___get_scaleKb", _wrap_Reaction___get_scaleKb, METH_VARARGS, (char *)"Reaction___get_scaleKb(Reaction self) -> double"},
	 { (char *)"Reaction___set_scaleKb", _wrap_Reaction___set_scaleKb, METH_VARARGS, (char *)"Reaction___set_scaleKb(Reaction self, double scaleKb)"},
	 { (char *)"Reaction_kf_set", _wrap_Reaction_kf_set, METH_VARARGS, (char *)"Reaction_kf_set(Reaction self, double kf)"},
	 { (char *)"Reaction_kf_get", _wrap_Reaction_kf_get, METH_VARARGS, (char *)"Reaction_kf_get(Reaction self) -> double"},
	 { (char *)"Reaction_kb_set", _wrap_Reaction_kb_set, METH_VARARGS, (char *)"Reaction_kb_set(Reaction self, double kb)"},
	 { (char *)"Reaction_kb_get", _wrap_Reaction_kb_get, METH_VARARGS, (char *)"Reaction_kb_get(Reaction self) -> double"},
	 { (char *)"Reaction_scaleKf_set", _wrap_Reaction_scaleKf_set, METH_VARARGS, (char *)"Reaction_scaleKf_set(Reaction self, double scaleKf)"},
	 { (char *)"Reaction_scaleKf_get", _wrap_Reaction_scaleKf_get, METH_VARARGS, (char *)"Reaction_scaleKf_get(Reaction self) -> double"},
	 { (char *)"Reaction_scaleKb_set", _wrap_Reaction_scaleKb_set, METH_VARARGS, (char *)"Reaction_scaleKb_set(Reaction self, double scaleKb)"},
	 { (char *)"Reaction_scaleKb_get", _wrap_Reaction_scaleKb_get, METH_VARARGS, (char *)"Reaction_scaleKb_get(Reaction self) -> double"},
	 { (char *)"Reaction_swigregister", Reaction_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Molecule", _wrap_new_Molecule, METH_VARARGS, (char *)"\n"
		"Molecule(Id id)\n"
		"Molecule(string path)\n"
		"Molecule(string name, Id parentId)\n"
		"Molecule(string name, PyMooseBase parent)\n"
		"Molecule(Molecule src, string name, PyMooseBase parent)\n"
		"Molecule(Molecule src, string name, Id parent)\n"
		"Molecule(Id src, string name, Id parent)\n"
		"new_Molecule(Molecule src, string path) -> Molecule\n"
		""},
	 { (char *)"delete_Molecule", _wrap_delete_Molecule, METH_VARARGS, (char *)"delete_Molecule(Molecule self)"},
	 { (char *)"Molecule_getType", _wrap_Molecule_getType, METH_VARARGS, (char *)"Molecule_getType(Molecule self) -> string"},
	 { (char *)"Molecule___get_nInit", _wrap_Molecule___get_nInit, METH_VARARGS, (char *)"Molecule___get_nInit(Molecule self) -> double"},
	 { (char *)"Molecule___set_nInit", _wrap_Molecule___set_nInit, METH_VARARGS, (char *)"Molecule___set_nInit(Molecule self, double nInit)"},
	 { (char *)"Molecule___get_volumeScale", _wrap_Molecule___get_volumeScale, METH_VARARGS, (char *)"Molecule___get_volumeScale(Molecule self) -> double"},
	 { (char *)"Molecule___set_volumeScale", _wrap_Molecule___set_volumeScale, METH_VARARGS, (char *)"Molecule___set_volumeScale(Molecule self, double volumeScale)"},
	 { (char *)"Molecule___get_n", _wrap_Molecule___get_n, METH_VARARGS, (char *)"Molecule___get_n(Molecule self) -> double"},
	 { (char *)"Molecule___set_n", _wrap_Molecule___set_n, METH_VARARGS, (char *)"Molecule___set_n(Molecule self, double n)"},
	 { (char *)"Molecule___get_mode", _wrap_Molecule___get_mode, METH_VARARGS, (char *)"Molecule___get_mode(Molecule self) -> int"},
	 { (char *)"Molecule___set_mode", _wrap_Molecule___set_mode, METH_VARARGS, (char *)"Molecule___set_mode(Molecule self, int mode)"},
	 { (char *)"Molecule___get_slave_enable", _wrap_Molecule___get_slave_enable, METH_VARARGS, (char *)"Molecule___get_slave_enable(Molecule self) -> int"},
	 { (char *)"Molecule___set_slave_enable", _wrap_Molecule___set_slave_enable, METH_VARARGS, (char *)"Molecule___set_slave_enable(Molecule self, int slave_enable)"},
	 { (char *)"Molecule___get_conc", _wrap_Molecule___get_conc, METH_VARARGS, (char *)"Molecule___get_conc(Molecule self) -> double"},
	 { (char *)"Molecule___set_conc", _wrap_Molecule___set_conc, METH_VARARGS, (char *)"Molecule___set_conc(Molecule self, double conc)"},
	 { (char *)"Molecule___get_concInit", _wrap_Molecule___get_concInit, METH_VARARGS, (char *)"Molecule___get_concInit(Molecule self) -> double"},
	 { (char *)"Molecule___set_concInit", _wrap_Molecule___set_concInit, METH_VARARGS, (char *)"Molecule___set_concInit(Molecule self, double concInit)"},
	 { (char *)"Molecule___get_nSrc", _wrap_Molecule___get_nSrc, METH_VARARGS, (char *)"Molecule___get_nSrc(Molecule self) -> double"},
	 { (char *)"Molecule___set_nSrc", _wrap_Molecule___set_nSrc, METH_VARARGS, (char *)"Molecule___set_nSrc(Molecule self, double nSrc)"},
	 { (char *)"Molecule___get_sumTotal", _wrap_Molecule___get_sumTotal, METH_VARARGS, (char *)"Molecule___get_sumTotal(Molecule self) -> double"},
	 { (char *)"Molecule___set_sumTotal", _wrap_Molecule___set_sumTotal, METH_VARARGS, (char *)"Molecule___set_sumTotal(Molecule self, double sumTotal)"},
	 { (char *)"Molecule_nInit_set", _wrap_Molecule_nInit_set, METH_VARARGS, (char *)"Molecule_nInit_set(Molecule self, double nInit)"},
	 { (char *)"Molecule_nInit_get", _wrap_Molecule_nInit_get, METH_VARARGS, (char *)"Molecule_nInit_get(Molecule self) -> double"},
	 { (char *)"Molecule_volumeScale_set", _wrap_Molecule_volumeScale_set, METH_VARARGS, (char *)"Molecule_volumeScale_set(Molecule self, double volumeScale)"},
	 { (char *)"Molecule_volumeScale_get", _wrap_Molecule_volumeScale_get, METH_VARARGS, (char *)"Molecule_volumeScale_get(Molecule self) -> double"},
	 { (char *)"Molecule_n_set", _wrap_Molecule_n_set, METH_VARARGS, (char *)"Molecule_n_set(Molecule self, double n)"},
	 { (char *)"Molecule_n_get", _wrap_Molecule_n_get, METH_VARARGS, (char *)"Molecule_n_get(Molecule self) -> double"},
	 { (char *)"Molecule_mode_set", _wrap_Molecule_mode_set, METH_VARARGS, (char *)"Molecule_mode_set(Molecule self, int mode)"},
	 { (char *)"Molecule_mode_get", _wrap_Molecule_mode_get, METH_VARARGS, (char *)"Molecule_mode_get(Molecule self) -> int"},
	 { (char *)"Molecule_slave_enable_set", _wrap_Molecule_slave_enable_set, METH_VARARGS, (char *)"Molecule_slave_enable_set(Molecule self, int slave_enable)"},
	 { (char *)"Molecule_slave_enable_get", _wrap_Molecule_slave_enable_get, METH_VARARGS, (char *)"Molecule_slave_enable_get(Molecule self) -> int"},
	 { (char *)"Molecule_conc_set", _wrap_Molecule_conc_set, METH_VARARGS, (char *)"Molecule_conc_set(Molecule self, double conc)"},
	 { (char *)"Molecule_conc_get", _wrap_Molecule_conc_get, METH_VARARGS, (char *)"Molecule_conc_get(Molecule self) -> double"},
	 { (char *)"Molecule_concInit_set", _wrap_Molecule_concInit_set, METH_VARARGS, (char *)"Molecule_concInit_set(Molecule self, double concInit)"},
	 { (char *)"Molecule_concInit_get", _wrap_Molecule_concInit_get, METH_VARARGS, (char *)"Molecule_concInit_get(Molecule self) -> double"},
	 { (char *)"Molecule_nSrc_set", _wrap_Molecule_nSrc_set, METH_VARARGS, (char *)"Molecule_nSrc_set(Molecule self, double nSrc)"},
	 { (char *)"Molecule_nSrc_get", _wrap_Molecule_nSrc_get, METH_VARARGS, (char *)"Molecule_nSrc_get(Molecule self) -> double"},
	 { (char *)"Molecule_sumTotal_set", _wrap_Molecule_sumTotal_set, METH_VARARGS, (char *)"Molecule_sumTotal_set(Molecule self, double sumTotal)"},
	 { (char *)"Molecule_sumTotal_get", _wrap_Molecule_sumTotal_get, METH_VARARGS, (char *)"Molecule_sumTotal_get(Molecule self) -> double"},
	 { (char *)"Molecule_swigregister", Molecule_swigregister, METH_VARARGS, NULL},
	 { (char *)"mtrand", _wrap_mtrand, METH_VARARGS, (char *)"mtrand() -> double"},
	 { (char *)"mtseed", _wrap_mtseed, METH_VARARGS, (char *)"mtseed(long seed)"},
	 { (char *)"delete_Probability", _wrap_delete_Probability, METH_VARARGS, (char *)"delete_Probability(Probability self)"},
	 { (char *)"Probability_getMean", _wrap_Probability_getMean, METH_VARARGS, (char *)"Probability_getMean(Probability self) -> double"},
	 { (char *)"Probability_getVariance", _wrap_Probability_getVariance, METH_VARARGS, (char *)"Probability_getVariance(Probability self) -> double"},
	 { (char *)"Probability_getNextSample", _wrap_Probability_getNextSample, METH_VARARGS, (char *)"Probability_getNextSample(Probability self) -> double"},
	 { (char *)"Probability_swigregister", Probability_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Binomial", _wrap_new_Binomial, METH_VARARGS, (char *)"\n"
		"Binomial()\n"
		"new_Binomial(long n, double p) -> Binomial\n"
		""},
	 { (char *)"Binomial_getN", _wrap_Binomial_getN, METH_VARARGS, (char *)"Binomial_getN(Binomial self) -> long"},
	 { (char *)"Binomial_getP", _wrap_Binomial_getP, METH_VARARGS, (char *)"Binomial_getP(Binomial self) -> double"},
	 { (char *)"Binomial_getMean", _wrap_Binomial_getMean, METH_VARARGS, (char *)"Binomial_getMean(Binomial self) -> double"},
	 { (char *)"Binomial_getVariance", _wrap_Binomial_getVariance, METH_VARARGS, (char *)"Binomial_getVariance(Binomial self) -> double"},
	 { (char *)"Binomial_getNextSample", _wrap_Binomial_getNextSample, METH_VARARGS, (char *)"Binomial_getNextSample(Binomial self) -> double"},
	 { (char *)"delete_Binomial", _wrap_delete_Binomial, METH_VARARGS, (char *)"delete_Binomial(Binomial self)"},
	 { (char *)"Binomial_swigregister", Binomial_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Gamma", _wrap_new_Gamma, METH_VARARGS, (char *)"new_Gamma(double alpha, double theta) -> Gamma"},
	 { (char *)"Gamma_getAlpha", _wrap_Gamma_getAlpha, METH_VARARGS, (char *)"Gamma_getAlpha(Gamma self) -> double"},
	 { (char *)"Gamma_getTheta", _wrap_Gamma_getTheta, METH_VARARGS, (char *)"Gamma_getTheta(Gamma self) -> double"},
	 { (char *)"Gamma_getMean", _wrap_Gamma_getMean, METH_VARARGS, (char *)"Gamma_getMean(Gamma self) -> double"},
	 { (char *)"Gamma_getVariance", _wrap_Gamma_getVariance, METH_VARARGS, (char *)"Gamma_getVariance(Gamma self) -> double"},
	 { (char *)"Gamma_getNextSample", _wrap_Gamma_getNextSample, METH_VARARGS, (char *)"Gamma_getNextSample(Gamma self) -> double"},
	 { (char *)"delete_Gamma", _wrap_delete_Gamma, METH_VARARGS, (char *)"delete_Gamma(Gamma self)"},
	 { (char *)"Gamma_swigregister", Gamma_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Normal", _wrap_new_Normal, METH_VARARGS, (char *)"\n"
		"Normal(double mean=0.0, double variance=1.0, NormalGenerator algorithm=ALIAS)\n"
		"Normal(double mean=0.0, double variance=1.0)\n"
		"Normal(double mean=0.0)\n"
		"new_Normal() -> Normal\n"
		""},
	 { (char *)"Normal_getMean", _wrap_Normal_getMean, METH_VARARGS, (char *)"Normal_getMean(Normal self) -> double"},
	 { (char *)"Normal_setMean", _wrap_Normal_setMean, METH_VARARGS, (char *)"Normal_setMean(Normal self, double value)"},
	 { (char *)"Normal_getVariance", _wrap_Normal_getVariance, METH_VARARGS, (char *)"Normal_getVariance(Normal self) -> double"},
	 { (char *)"Normal_setVariance", _wrap_Normal_setVariance, METH_VARARGS, (char *)"Normal_setVariance(Normal self, double value)"},
	 { (char *)"Normal_getMethod", _wrap_Normal_getMethod, METH_VARARGS, (char *)"Normal_getMethod(Normal self) -> NormalGenerator"},
	 { (char *)"Normal_setMethod", _wrap_Normal_setMethod, METH_VARARGS, (char *)"Normal_setMethod(Normal self, NormalGenerator method)"},
	 { (char *)"Normal_getNextSample", _wrap_Normal_getNextSample, METH_VARARGS, (char *)"Normal_getNextSample(Normal self) -> double"},
	 { (char *)"delete_Normal", _wrap_delete_Normal, METH_VARARGS, (char *)"delete_Normal(Normal self)"},
	 { (char *)"Normal_swigregister", Normal_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Poisson", _wrap_new_Poisson, METH_VARARGS, (char *)"\n"
		"Poisson(double mean=1.0)\n"
		"new_Poisson() -> Poisson\n"
		""},
	 { (char *)"delete_Poisson", _wrap_delete_Poisson, METH_VARARGS, (char *)"delete_Poisson(Poisson self)"},
	 { (char *)"Poisson_setMean", _wrap_Poisson_setMean, METH_VARARGS, (char *)"Poisson_setMean(Poisson self, double mean)"},
	 { (char *)"Poisson_getMean", _wrap_Poisson_getMean, METH_VARARGS, (char *)"Poisson_getMean(Poisson self) -> double"},
	 { (char *)"Poisson_getVariance", _wrap_Poisson_getVariance, METH_VARARGS, (char *)"Poisson_getVariance(Poisson self) -> double"},
	 { (char *)"Poisson_getNextSample", _wrap_Poisson_getNextSample, METH_VARARGS, (char *)"Poisson_getNextSample(Poisson self) -> double"},
	 { (char *)"Poisson_swigregister", Poisson_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Exponential", _wrap_new_Exponential, METH_VARARGS, (char *)"\n"
		"Exponential(double mean)\n"
		"new_Exponential(ExponentialGenerator generator, double mean) -> Exponential\n"
		""},
	 { (char *)"Exponential_getMean", _wrap_Exponential_getMean, METH_VARARGS, (char *)"Exponential_getMean(Exponential self) -> double"},
	 { (char *)"Exponential_getVariance", _wrap_Exponential_getVariance, METH_VARARGS, (char *)"Exponential_getVariance(Exponential self) -> double"},
	 { (char *)"Exponential_getNextSample", _wrap_Exponential_getNextSample, METH_VARARGS, (char *)"Exponential_getNextSample(Exponential self) -> double"},
	 { (char *)"delete_Exponential", _wrap_delete_Exponential, METH_VARARGS, (char *)"delete_Exponential(Exponential self)"},
	 { (char *)"Exponential_swigregister", Exponential_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RandGenerator", _wrap_new_RandGenerator, METH_VARARGS, (char *)"\n"
		"RandGenerator(Id id)\n"
		"RandGenerator(string className, string path)\n"
		"RandGenerator(string className, string name, Id parentId)\n"
		"RandGenerator(RandGenerator src, string name, PyMooseBase parent)\n"
		"RandGenerator(RandGenerator src, string name, Id parent)\n"
		"RandGenerator(Id src, string name, Id parent)\n"
		"RandGenerator(RandGenerator src, string path)\n"
		"new_RandGenerator(string className, string name, PyMooseBase parent) -> RandGenerator\n"
		""},
	 { (char *)"RandGenerator_getType", _wrap_RandGenerator_getType, METH_VARARGS, (char *)"RandGenerator_getType(RandGenerator self) -> string"},
	 { (char *)"RandGenerator___get_sample", _wrap_RandGenerator___get_sample, METH_VARARGS, (char *)"RandGenerator___get_sample(RandGenerator self) -> double"},
	 { (char *)"RandGenerator___set_sample", _wrap_RandGenerator___set_sample, METH_VARARGS, (char *)"RandGenerator___set_sample(RandGenerator self, double sample)"},
	 { (char *)"RandGenerator___get_mean", _wrap_RandGenerator___get_mean, METH_VARARGS, (char *)"RandGenerator___get_mean(RandGenerator self) -> double"},
	 { (char *)"RandGenerator___set_mean", _wrap_RandGenerator___set_mean, METH_VARARGS, (char *)"RandGenerator___set_mean(RandGenerator self, double mean)"},
	 { (char *)"RandGenerator___get_variance", _wrap_RandGenerator___get_variance, METH_VARARGS, (char *)"RandGenerator___get_variance(RandGenerator self) -> double"},
	 { (char *)"RandGenerator___set_variance", _wrap_RandGenerator___set_variance, METH_VARARGS, (char *)"RandGenerator___set_variance(RandGenerator self, double variance)"},
	 { (char *)"RandGenerator___get_output", _wrap_RandGenerator___get_output, METH_VARARGS, (char *)"RandGenerator___get_output(RandGenerator self) -> double"},
	 { (char *)"RandGenerator___set_output", _wrap_RandGenerator___set_output, METH_VARARGS, (char *)"RandGenerator___set_output(RandGenerator self, double output)"},
	 { (char *)"RandGenerator_sample_get", _wrap_RandGenerator_sample_get, METH_VARARGS, (char *)"RandGenerator_sample_get(RandGenerator self) -> double"},
	 { (char *)"RandGenerator_mean_get", _wrap_RandGenerator_mean_get, METH_VARARGS, (char *)"RandGenerator_mean_get(RandGenerator self) -> double"},
	 { (char *)"RandGenerator_variance_get", _wrap_RandGenerator_variance_get, METH_VARARGS, (char *)"RandGenerator_variance_get(RandGenerator self) -> double"},
	 { (char *)"delete_RandGenerator", _wrap_delete_RandGenerator, METH_VARARGS, (char *)"delete_RandGenerator(RandGenerator self)"},
	 { (char *)"RandGenerator_swigregister", RandGenerator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_UniformRng", _wrap_new_UniformRng, METH_VARARGS, (char *)"\n"
		"UniformRng(Id id)\n"
		"UniformRng(string path)\n"
		"UniformRng(string name, Id parentId)\n"
		"UniformRng(string name, PyMooseBase parent)\n"
		"UniformRng(UniformRng src, string name, PyMooseBase parent)\n"
		"UniformRng(UniformRng src, string name, Id parent)\n"
		"UniformRng(Id src, string name, Id parent)\n"
		"new_UniformRng(UniformRng src, string path) -> UniformRng\n"
		""},
	 { (char *)"delete_UniformRng", _wrap_delete_UniformRng, METH_VARARGS, (char *)"delete_UniformRng(UniformRng self)"},
	 { (char *)"UniformRng_getType", _wrap_UniformRng_getType, METH_VARARGS, (char *)"UniformRng_getType(UniformRng self) -> string"},
	 { (char *)"UniformRng___get_min", _wrap_UniformRng___get_min, METH_VARARGS, (char *)"UniformRng___get_min(UniformRng self) -> double"},
	 { (char *)"UniformRng___set_min", _wrap_UniformRng___set_min, METH_VARARGS, (char *)"UniformRng___set_min(UniformRng self, double min)"},
	 { (char *)"UniformRng___get_max", _wrap_UniformRng___get_max, METH_VARARGS, (char *)"UniformRng___get_max(UniformRng self) -> double"},
	 { (char *)"UniformRng___set_max", _wrap_UniformRng___set_max, METH_VARARGS, (char *)"UniformRng___set_max(UniformRng self, double max)"},
	 { (char *)"UniformRng_mean_get", _wrap_UniformRng_mean_get, METH_VARARGS, (char *)"UniformRng_mean_get(UniformRng self) -> double"},
	 { (char *)"UniformRng_variance_get", _wrap_UniformRng_variance_get, METH_VARARGS, (char *)"UniformRng_variance_get(UniformRng self) -> double"},
	 { (char *)"UniformRng_min_set", _wrap_UniformRng_min_set, METH_VARARGS, (char *)"UniformRng_min_set(UniformRng self, double min)"},
	 { (char *)"UniformRng_min_get", _wrap_UniformRng_min_get, METH_VARARGS, (char *)"UniformRng_min_get(UniformRng self) -> double"},
	 { (char *)"UniformRng_max_set", _wrap_UniformRng_max_set, METH_VARARGS, (char *)"UniformRng_max_set(UniformRng self, double max)"},
	 { (char *)"UniformRng_max_get", _wrap_UniformRng_max_get, METH_VARARGS, (char *)"UniformRng_max_get(UniformRng self) -> double"},
	 { (char *)"UniformRng_swigregister", UniformRng_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GammaRng", _wrap_new_GammaRng, METH_VARARGS, (char *)"\n"
		"GammaRng(Id id)\n"
		"GammaRng(string path)\n"
		"GammaRng(string name, Id parentId)\n"
		"GammaRng(string name, PyMooseBase parent)\n"
		"GammaRng(GammaRng src, string name, PyMooseBase parent)\n"
		"GammaRng(GammaRng src, string name, Id parent)\n"
		"GammaRng(Id src, string name, Id parent)\n"
		"new_GammaRng(GammaRng src, string path) -> GammaRng\n"
		""},
	 { (char *)"delete_GammaRng", _wrap_delete_GammaRng, METH_VARARGS, (char *)"delete_GammaRng(GammaRng self)"},
	 { (char *)"GammaRng_getType", _wrap_GammaRng_getType, METH_VARARGS, (char *)"GammaRng_getType(GammaRng self) -> string"},
	 { (char *)"GammaRng___get_alpha", _wrap_GammaRng___get_alpha, METH_VARARGS, (char *)"GammaRng___get_alpha(GammaRng self) -> double"},
	 { (char *)"GammaRng___set_alpha", _wrap_GammaRng___set_alpha, METH_VARARGS, (char *)"GammaRng___set_alpha(GammaRng self, double alpha)"},
	 { (char *)"GammaRng___get_theta", _wrap_GammaRng___get_theta, METH_VARARGS, (char *)"GammaRng___get_theta(GammaRng self) -> double"},
	 { (char *)"GammaRng___set_theta", _wrap_GammaRng___set_theta, METH_VARARGS, (char *)"GammaRng___set_theta(GammaRng self, double theta)"},
	 { (char *)"GammaRng_alpha_set", _wrap_GammaRng_alpha_set, METH_VARARGS, (char *)"GammaRng_alpha_set(GammaRng self, double alpha)"},
	 { (char *)"GammaRng_alpha_get", _wrap_GammaRng_alpha_get, METH_VARARGS, (char *)"GammaRng_alpha_get(GammaRng self) -> double"},
	 { (char *)"GammaRng_theta_set", _wrap_GammaRng_theta_set, METH_VARARGS, (char *)"GammaRng_theta_set(GammaRng self, double theta)"},
	 { (char *)"GammaRng_theta_get", _wrap_GammaRng_theta_get, METH_VARARGS, (char *)"GammaRng_theta_get(GammaRng self) -> double"},
	 { (char *)"GammaRng_swigregister", GammaRng_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ExponentialRng", _wrap_new_ExponentialRng, METH_VARARGS, (char *)"\n"
		"ExponentialRng(Id id)\n"
		"ExponentialRng(string path)\n"
		"ExponentialRng(string name, Id parentId)\n"
		"ExponentialRng(string name, PyMooseBase parent)\n"
		"ExponentialRng(ExponentialRng src, string name, PyMooseBase parent)\n"
		"ExponentialRng(ExponentialRng src, string name, Id parent)\n"
		"ExponentialRng(Id src, string name, Id parent)\n"
		"new_ExponentialRng(ExponentialRng src, string path) -> ExponentialRng\n"
		""},
	 { (char *)"delete_ExponentialRng", _wrap_delete_ExponentialRng, METH_VARARGS, (char *)"delete_ExponentialRng(ExponentialRng self)"},
	 { (char *)"ExponentialRng_getType", _wrap_ExponentialRng_getType, METH_VARARGS, (char *)"ExponentialRng_getType(ExponentialRng self) -> string"},
	 { (char *)"ExponentialRng___set_mean", _wrap_ExponentialRng___set_mean, METH_VARARGS, (char *)"ExponentialRng___set_mean(ExponentialRng self, double mean)"},
	 { (char *)"ExponentialRng___get_method", _wrap_ExponentialRng___get_method, METH_VARARGS, (char *)"ExponentialRng___get_method(ExponentialRng self) -> int"},
	 { (char *)"ExponentialRng___set_method", _wrap_ExponentialRng___set_method, METH_VARARGS, (char *)"ExponentialRng___set_method(ExponentialRng self, int method)"},
	 { (char *)"ExponentialRng_mean_get", _wrap_ExponentialRng_mean_get, METH_VARARGS, (char *)"ExponentialRng_mean_get(ExponentialRng self) -> double"},
	 { (char *)"ExponentialRng_method_set", _wrap_ExponentialRng_method_set, METH_VARARGS, (char *)"ExponentialRng_method_set(ExponentialRng self, int method)"},
	 { (char *)"ExponentialRng_method_get", _wrap_ExponentialRng_method_get, METH_VARARGS, (char *)"ExponentialRng_method_get(ExponentialRng self) -> int"},
	 { (char *)"ExponentialRng_swigregister", ExponentialRng_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BinomialRng", _wrap_new_BinomialRng, METH_VARARGS, (char *)"\n"
		"BinomialRng(Id id)\n"
		"BinomialRng(string path)\n"
		"BinomialRng(string name, Id parentId)\n"
		"BinomialRng(string name, PyMooseBase parent)\n"
		"BinomialRng(BinomialRng src, string name, PyMooseBase parent)\n"
		"BinomialRng(BinomialRng src, string name, Id parent)\n"
		"BinomialRng(Id src, string name, Id parent)\n"
		"new_BinomialRng(BinomialRng src, string path) -> BinomialRng\n"
		""},
	 { (char *)"delete_BinomialRng", _wrap_delete_BinomialRng, METH_VARARGS, (char *)"delete_BinomialRng(BinomialRng self)"},
	 { (char *)"BinomialRng_getType", _wrap_BinomialRng_getType, METH_VARARGS, (char *)"BinomialRng_getType(BinomialRng self) -> string"},
	 { (char *)"BinomialRng___get_n", _wrap_BinomialRng___get_n, METH_VARARGS, (char *)"BinomialRng___get_n(BinomialRng self) -> int"},
	 { (char *)"BinomialRng___set_n", _wrap_BinomialRng___set_n, METH_VARARGS, (char *)"BinomialRng___set_n(BinomialRng self, int n)"},
	 { (char *)"BinomialRng___get_p", _wrap_BinomialRng___get_p, METH_VARARGS, (char *)"BinomialRng___get_p(BinomialRng self) -> double"},
	 { (char *)"BinomialRng___set_p", _wrap_BinomialRng___set_p, METH_VARARGS, (char *)"BinomialRng___set_p(BinomialRng self, double p)"},
	 { (char *)"BinomialRng_n_set", _wrap_BinomialRng_n_set, METH_VARARGS, (char *)"BinomialRng_n_set(BinomialRng self, int n)"},
	 { (char *)"BinomialRng_n_get", _wrap_BinomialRng_n_get, METH_VARARGS, (char *)"BinomialRng_n_get(BinomialRng self) -> int"},
	 { (char *)"BinomialRng_p_set", _wrap_BinomialRng_p_set, METH_VARARGS, (char *)"BinomialRng_p_set(BinomialRng self, double p)"},
	 { (char *)"BinomialRng_p_get", _wrap_BinomialRng_p_get, METH_VARARGS, (char *)"BinomialRng_p_get(BinomialRng self) -> double"},
	 { (char *)"BinomialRng_swigregister", BinomialRng_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PoissonRng", _wrap_new_PoissonRng, METH_VARARGS, (char *)"\n"
		"PoissonRng(Id id)\n"
		"PoissonRng(string path)\n"
		"PoissonRng(string name, Id parentId)\n"
		"PoissonRng(string name, PyMooseBase parent)\n"
		"PoissonRng(PoissonRng src, string name, PyMooseBase parent)\n"
		"PoissonRng(PoissonRng src, string name, Id parent)\n"
		"PoissonRng(Id src, string name, Id parent)\n"
		"new_PoissonRng(PoissonRng src, string path) -> PoissonRng\n"
		""},
	 { (char *)"delete_PoissonRng", _wrap_delete_PoissonRng, METH_VARARGS, (char *)"delete_PoissonRng(PoissonRng self)"},
	 { (char *)"PoissonRng_getType", _wrap_PoissonRng_getType, METH_VARARGS, (char *)"PoissonRng_getType(PoissonRng self) -> string"},
	 { (char *)"PoissonRng___set_mean", _wrap_PoissonRng___set_mean, METH_VARARGS, (char *)"PoissonRng___set_mean(PoissonRng self, double mean)"},
	 { (char *)"PoissonRng_mean_get", _wrap_PoissonRng_mean_get, METH_VARARGS, (char *)"PoissonRng_mean_get(PoissonRng self) -> double"},
	 { (char *)"PoissonRng_swigregister", PoissonRng_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NormalRng", _wrap_new_NormalRng, METH_VARARGS, (char *)"\n"
		"NormalRng(Id id)\n"
		"NormalRng(string path)\n"
		"NormalRng(string name, Id parentId)\n"
		"NormalRng(string name, PyMooseBase parent)\n"
		"NormalRng(NormalRng src, string name, PyMooseBase parent)\n"
		"NormalRng(NormalRng src, string name, Id parent)\n"
		"NormalRng(Id src, string name, Id parent)\n"
		"new_NormalRng(NormalRng src, string path) -> NormalRng\n"
		""},
	 { (char *)"delete_NormalRng", _wrap_delete_NormalRng, METH_VARARGS, (char *)"delete_NormalRng(NormalRng self)"},
	 { (char *)"NormalRng_getType", _wrap_NormalRng_getType, METH_VARARGS, (char *)"NormalRng_getType(NormalRng self) -> string"},
	 { (char *)"NormalRng___set_mean", _wrap_NormalRng___set_mean, METH_VARARGS, (char *)"NormalRng___set_mean(NormalRng self, double mean)"},
	 { (char *)"NormalRng___set_variance", _wrap_NormalRng___set_variance, METH_VARARGS, (char *)"NormalRng___set_variance(NormalRng self, double variance)"},
	 { (char *)"NormalRng___get_method", _wrap_NormalRng___get_method, METH_VARARGS, (char *)"NormalRng___get_method(NormalRng self) -> int"},
	 { (char *)"NormalRng___set_method", _wrap_NormalRng___set_method, METH_VARARGS, (char *)"NormalRng___set_method(NormalRng self, int method)"},
	 { (char *)"NormalRng_mean_get", _wrap_NormalRng_mean_get, METH_VARARGS, (char *)"NormalRng_mean_get(NormalRng self) -> double"},
	 { (char *)"NormalRng_variance_get", _wrap_NormalRng_variance_get, METH_VARARGS, (char *)"NormalRng_variance_get(NormalRng self) -> double"},
	 { (char *)"NormalRng_method_set", _wrap_NormalRng_method_set, METH_VARARGS, (char *)"NormalRng_method_set(NormalRng self, int method)"},
	 { (char *)"NormalRng_method_get", _wrap_NormalRng_method_get, METH_VARARGS, (char *)"NormalRng_method_get(NormalRng self) -> int"},
	 { (char *)"NormalRng_swigregister", NormalRng_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KineticManager", _wrap_new_KineticManager, METH_VARARGS, (char *)"\n"
		"KineticManager(Id id)\n"
		"KineticManager(string path)\n"
		"KineticManager(string name, Id parentId)\n"
		"KineticManager(string name, PyMooseBase parent)\n"
		"KineticManager(KineticManager src, string name, PyMooseBase parent)\n"
		"KineticManager(KineticManager src, string name, Id parent)\n"
		"KineticManager(KineticManager src, string path)\n"
		"new_KineticManager(Id src, string name, Id parent) -> KineticManager\n"
		""},
	 { (char *)"delete_KineticManager", _wrap_delete_KineticManager, METH_VARARGS, (char *)"delete_KineticManager(KineticManager self)"},
	 { (char *)"KineticManager_getType", _wrap_KineticManager_getType, METH_VARARGS, (char *)"KineticManager_getType(KineticManager self) -> string"},
	 { (char *)"KineticManager___get_autoMode", _wrap_KineticManager___get_autoMode, METH_VARARGS, (char *)"KineticManager___get_autoMode(KineticManager self) -> bool"},
	 { (char *)"KineticManager___set_autoMode", _wrap_KineticManager___set_autoMode, METH_VARARGS, (char *)"KineticManager___set_autoMode(KineticManager self, bool autoMode)"},
	 { (char *)"KineticManager___get_stochastic", _wrap_KineticManager___get_stochastic, METH_VARARGS, (char *)"KineticManager___get_stochastic(KineticManager self) -> bool"},
	 { (char *)"KineticManager___set_stochastic", _wrap_KineticManager___set_stochastic, METH_VARARGS, (char *)"KineticManager___set_stochastic(KineticManager self, bool stochastic)"},
	 { (char *)"KineticManager___get_spatial", _wrap_KineticManager___get_spatial, METH_VARARGS, (char *)"KineticManager___get_spatial(KineticManager self) -> bool"},
	 { (char *)"KineticManager___set_spatial", _wrap_KineticManager___set_spatial, METH_VARARGS, (char *)"KineticManager___set_spatial(KineticManager self, bool spatial)"},
	 { (char *)"KineticManager___get_method", _wrap_KineticManager___get_method, METH_VARARGS, (char *)"KineticManager___get_method(KineticManager self) -> string"},
	 { (char *)"KineticManager___set_method", _wrap_KineticManager___set_method, METH_VARARGS, (char *)"KineticManager___set_method(KineticManager self, string method)"},
	 { (char *)"KineticManager___get_variableDt", _wrap_KineticManager___get_variableDt, METH_VARARGS, (char *)"KineticManager___get_variableDt(KineticManager self) -> bool"},
	 { (char *)"KineticManager___get_singleParticle", _wrap_KineticManager___get_singleParticle, METH_VARARGS, (char *)"KineticManager___get_singleParticle(KineticManager self) -> bool"},
	 { (char *)"KineticManager___get_multiscale", _wrap_KineticManager___get_multiscale, METH_VARARGS, (char *)"KineticManager___get_multiscale(KineticManager self) -> bool"},
	 { (char *)"KineticManager___get_implicit", _wrap_KineticManager___get_implicit, METH_VARARGS, (char *)"KineticManager___get_implicit(KineticManager self) -> bool"},
	 { (char *)"KineticManager___get_description", _wrap_KineticManager___get_description, METH_VARARGS, (char *)"KineticManager___get_description(KineticManager self) -> string"},
	 { (char *)"KineticManager___get_recommendedDt", _wrap_KineticManager___get_recommendedDt, METH_VARARGS, (char *)"KineticManager___get_recommendedDt(KineticManager self) -> double"},
	 { (char *)"KineticManager___get_eulerError", _wrap_KineticManager___get_eulerError, METH_VARARGS, (char *)"KineticManager___get_eulerError(KineticManager self) -> double"},
	 { (char *)"KineticManager___set_eulerError", _wrap_KineticManager___set_eulerError, METH_VARARGS, (char *)"KineticManager___set_eulerError(KineticManager self, double eulerError)"},
	 { (char *)"KineticManager_autoMode_set", _wrap_KineticManager_autoMode_set, METH_VARARGS, (char *)"KineticManager_autoMode_set(KineticManager self, bool autoMode)"},
	 { (char *)"KineticManager_autoMode_get", _wrap_KineticManager_autoMode_get, METH_VARARGS, (char *)"KineticManager_autoMode_get(KineticManager self) -> bool"},
	 { (char *)"KineticManager_stochastic_set", _wrap_KineticManager_stochastic_set, METH_VARARGS, (char *)"KineticManager_stochastic_set(KineticManager self, bool stochastic)"},
	 { (char *)"KineticManager_stochastic_get", _wrap_KineticManager_stochastic_get, METH_VARARGS, (char *)"KineticManager_stochastic_get(KineticManager self) -> bool"},
	 { (char *)"KineticManager_spatial_set", _wrap_KineticManager_spatial_set, METH_VARARGS, (char *)"KineticManager_spatial_set(KineticManager self, bool spatial)"},
	 { (char *)"KineticManager_spatial_get", _wrap_KineticManager_spatial_get, METH_VARARGS, (char *)"KineticManager_spatial_get(KineticManager self) -> bool"},
	 { (char *)"KineticManager_method_set", _wrap_KineticManager_method_set, METH_VARARGS, (char *)"KineticManager_method_set(KineticManager self, string method)"},
	 { (char *)"KineticManager_method_get", _wrap_KineticManager_method_get, METH_VARARGS, (char *)"KineticManager_method_get(KineticManager self) -> string"},
	 { (char *)"KineticManager_variableDt_get", _wrap_KineticManager_variableDt_get, METH_VARARGS, (char *)"KineticManager_variableDt_get(KineticManager self) -> bool"},
	 { (char *)"KineticManager_singleParticle_get", _wrap_KineticManager_singleParticle_get, METH_VARARGS, (char *)"KineticManager_singleParticle_get(KineticManager self) -> bool"},
	 { (char *)"KineticManager_multiscale_get", _wrap_KineticManager_multiscale_get, METH_VARARGS, (char *)"KineticManager_multiscale_get(KineticManager self) -> bool"},
	 { (char *)"KineticManager_implicit_get", _wrap_KineticManager_implicit_get, METH_VARARGS, (char *)"KineticManager_implicit_get(KineticManager self) -> bool"},
	 { (char *)"KineticManager_description_get", _wrap_KineticManager_description_get, METH_VARARGS, (char *)"KineticManager_description_get(KineticManager self) -> string"},
	 { (char *)"KineticManager_recommendedDt_get", _wrap_KineticManager_recommendedDt_get, METH_VARARGS, (char *)"KineticManager_recommendedDt_get(KineticManager self) -> double"},
	 { (char *)"KineticManager_eulerError_set", _wrap_KineticManager_eulerError_set, METH_VARARGS, (char *)"KineticManager_eulerError_set(KineticManager self, double eulerError)"},
	 { (char *)"KineticManager_eulerError_get", _wrap_KineticManager_eulerError_get, METH_VARARGS, (char *)"KineticManager_eulerError_get(KineticManager self) -> double"},
	 { (char *)"KineticManager_swigregister", KineticManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_KinCompt", _wrap_new_KinCompt, METH_VARARGS, (char *)"\n"
		"KinCompt(Id id)\n"
		"KinCompt(string path)\n"
		"KinCompt(string name, Id parentId)\n"
		"KinCompt(string name, PyMooseBase parent)\n"
		"KinCompt(KinCompt src, string name, PyMooseBase parent)\n"
		"KinCompt(KinCompt src, string name, Id parent)\n"
		"KinCompt(KinCompt src, string path)\n"
		"new_KinCompt(Id src, string name, Id parent) -> KinCompt\n"
		""},
	 { (char *)"delete_KinCompt", _wrap_delete_KinCompt, METH_VARARGS, (char *)"delete_KinCompt(KinCompt self)"},
	 { (char *)"KinCompt_getType", _wrap_KinCompt_getType, METH_VARARGS, (char *)"KinCompt_getType(KinCompt self) -> string"},
	 { (char *)"KinCompt___get_volume", _wrap_KinCompt___get_volume, METH_VARARGS, (char *)"KinCompt___get_volume(KinCompt self) -> double"},
	 { (char *)"KinCompt___set_volume", _wrap_KinCompt___set_volume, METH_VARARGS, (char *)"KinCompt___set_volume(KinCompt self, double volume)"},
	 { (char *)"KinCompt___get_area", _wrap_KinCompt___get_area, METH_VARARGS, (char *)"KinCompt___get_area(KinCompt self) -> double"},
	 { (char *)"KinCompt___set_area", _wrap_KinCompt___set_area, METH_VARARGS, (char *)"KinCompt___set_area(KinCompt self, double area)"},
	 { (char *)"KinCompt___get_perimeter", _wrap_KinCompt___get_perimeter, METH_VARARGS, (char *)"KinCompt___get_perimeter(KinCompt self) -> double"},
	 { (char *)"KinCompt___set_perimeter", _wrap_KinCompt___set_perimeter, METH_VARARGS, (char *)"KinCompt___set_perimeter(KinCompt self, double perimeter)"},
	 { (char *)"KinCompt___get_size", _wrap_KinCompt___get_size, METH_VARARGS, (char *)"KinCompt___get_size(KinCompt self) -> double"},
	 { (char *)"KinCompt___set_size", _wrap_KinCompt___set_size, METH_VARARGS, (char *)"KinCompt___set_size(KinCompt self, double size)"},
	 { (char *)"KinCompt___get_numDimensions", _wrap_KinCompt___get_numDimensions, METH_VARARGS, (char *)"KinCompt___get_numDimensions(KinCompt self) -> unsigned int"},
	 { (char *)"KinCompt___set_numDimensions", _wrap_KinCompt___set_numDimensions, METH_VARARGS, (char *)"KinCompt___set_numDimensions(KinCompt self, unsigned int numDimensions)"},
	 { (char *)"KinCompt_volume_set", _wrap_KinCompt_volume_set, METH_VARARGS, (char *)"KinCompt_volume_set(KinCompt self, double volume)"},
	 { (char *)"KinCompt_volume_get", _wrap_KinCompt_volume_get, METH_VARARGS, (char *)"KinCompt_volume_get(KinCompt self) -> double"},
	 { (char *)"KinCompt_area_set", _wrap_KinCompt_area_set, METH_VARARGS, (char *)"KinCompt_area_set(KinCompt self, double area)"},
	 { (char *)"KinCompt_area_get", _wrap_KinCompt_area_get, METH_VARARGS, (char *)"KinCompt_area_get(KinCompt self) -> double"},
	 { (char *)"KinCompt_perimeter_set", _wrap_KinCompt_perimeter_set, METH_VARARGS, (char *)"KinCompt_perimeter_set(KinCompt self, double perimeter)"},
	 { (char *)"KinCompt_perimeter_get", _wrap_KinCompt_perimeter_get, METH_VARARGS, (char *)"KinCompt_perimeter_get(KinCompt self) -> double"},
	 { (char *)"KinCompt_size_set", _wrap_KinCompt_size_set, METH_VARARGS, (char *)"KinCompt_size_set(KinCompt self, double size)"},
	 { (char *)"KinCompt_size_get", _wrap_KinCompt_size_get, METH_VARARGS, (char *)"KinCompt_size_get(KinCompt self) -> double"},
	 { (char *)"KinCompt_numDimensions_set", _wrap_KinCompt_numDimensions_set, METH_VARARGS, (char *)"KinCompt_numDimensions_set(KinCompt self, unsigned int numDimensions)"},
	 { (char *)"KinCompt_numDimensions_get", _wrap_KinCompt_numDimensions_get, METH_VARARGS, (char *)"KinCompt_numDimensions_get(KinCompt self) -> unsigned int"},
	 { (char *)"KinCompt_swigregister", KinCompt_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Panel", _wrap_new_Panel, METH_VARARGS, (char *)"\n"
		"Panel(Id id)\n"
		"Panel(string path)\n"
		"Panel(string name, Id parentId)\n"
		"Panel(string name, PyMooseBase parent)\n"
		"Panel(Panel src, string name, PyMooseBase parent)\n"
		"Panel(Panel src, string name, Id parent)\n"
		"Panel(Panel src, string path)\n"
		"Panel(Id src, string name, Id parent)\n"
		"Panel(string typeName, string objectName, Id parentId)\n"
		"Panel(string typeName, string path)\n"
		"new_Panel(string typeName, string objectName, PyMooseBase parent) -> Panel\n"
		""},
	 { (char *)"delete_Panel", _wrap_delete_Panel, METH_VARARGS, (char *)"delete_Panel(Panel self)"},
	 { (char *)"Panel_getType", _wrap_Panel_getType, METH_VARARGS, (char *)"Panel_getType(Panel self) -> string"},
	 { (char *)"Panel___get_nPts", _wrap_Panel___get_nPts, METH_VARARGS, (char *)"Panel___get_nPts(Panel self) -> unsigned int"},
	 { (char *)"Panel___get_nDims", _wrap_Panel___get_nDims, METH_VARARGS, (char *)"Panel___get_nDims(Panel self) -> unsigned int"},
	 { (char *)"Panel___get_nNeighbors", _wrap_Panel___get_nNeighbors, METH_VARARGS, (char *)"Panel___get_nNeighbors(Panel self) -> unsigned int"},
	 { (char *)"Panel___get_shapeId", _wrap_Panel___get_shapeId, METH_VARARGS, (char *)"Panel___get_shapeId(Panel self) -> unsigned int"},
	 { (char *)"Panel___get_coords", _wrap_Panel___get_coords, METH_VARARGS, (char *)"Panel___get_coords(Panel self) -> double_vector"},
	 { (char *)"Panel_nPts_get", _wrap_Panel_nPts_get, METH_VARARGS, (char *)"Panel_nPts_get(Panel self) -> unsigned int"},
	 { (char *)"Panel_nDims_get", _wrap_Panel_nDims_get, METH_VARARGS, (char *)"Panel_nDims_get(Panel self) -> unsigned int"},
	 { (char *)"Panel_nNeighbors_get", _wrap_Panel_nNeighbors_get, METH_VARARGS, (char *)"Panel_nNeighbors_get(Panel self) -> unsigned int"},
	 { (char *)"Panel_shapeId_get", _wrap_Panel_shapeId_get, METH_VARARGS, (char *)"Panel_shapeId_get(Panel self) -> unsigned int"},
	 { (char *)"Panel_coords_get", _wrap_Panel_coords_get, METH_VARARGS, (char *)"Panel_coords_get(Panel self) -> double_vector"},
	 { (char *)"Panel_swigregister", Panel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DiskPanel", _wrap_new_DiskPanel, METH_VARARGS, (char *)"\n"
		"DiskPanel(Id id)\n"
		"DiskPanel(string path)\n"
		"DiskPanel(string name, Id parentId)\n"
		"DiskPanel(string name, PyMooseBase parent)\n"
		"DiskPanel(DiskPanel src, string name, PyMooseBase parent)\n"
		"DiskPanel(DiskPanel src, string name, Id parent)\n"
		"DiskPanel(DiskPanel src, string path)\n"
		"new_DiskPanel(Id src, string name, Id parent) -> DiskPanel\n"
		""},
	 { (char *)"delete_DiskPanel", _wrap_delete_DiskPanel, METH_VARARGS, (char *)"delete_DiskPanel(DiskPanel self)"},
	 { (char *)"DiskPanel_getType", _wrap_DiskPanel_getType, METH_VARARGS, (char *)"DiskPanel_getType(DiskPanel self) -> string"},
	 { (char *)"DiskPanel_swigregister", DiskPanel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CylPanel", _wrap_new_CylPanel, METH_VARARGS, (char *)"\n"
		"CylPanel(Id id)\n"
		"CylPanel(string path)\n"
		"CylPanel(string name, Id parentId)\n"
		"CylPanel(string name, PyMooseBase parent)\n"
		"CylPanel(CylPanel src, string name, PyMooseBase parent)\n"
		"CylPanel(CylPanel src, string name, Id parent)\n"
		"CylPanel(CylPanel src, string path)\n"
		"new_CylPanel(Id src, string name, Id parent) -> CylPanel\n"
		""},
	 { (char *)"delete_CylPanel", _wrap_delete_CylPanel, METH_VARARGS, (char *)"delete_CylPanel(CylPanel self)"},
	 { (char *)"CylPanel_getType", _wrap_CylPanel_getType, METH_VARARGS, (char *)"CylPanel_getType(CylPanel self) -> string"},
	 { (char *)"CylPanel_swigregister", CylPanel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_HemispherePanel", _wrap_new_HemispherePanel, METH_VARARGS, (char *)"\n"
		"HemispherePanel(Id id)\n"
		"HemispherePanel(string path)\n"
		"HemispherePanel(string name, Id parentId)\n"
		"HemispherePanel(string name, PyMooseBase parent)\n"
		"HemispherePanel(HemispherePanel src, string name, PyMooseBase parent)\n"
		"HemispherePanel(HemispherePanel src, string name, Id parent)\n"
		"HemispherePanel(HemispherePanel src, string path)\n"
		"new_HemispherePanel(Id src, string name, Id parent) -> HemispherePanel\n"
		""},
	 { (char *)"delete_HemispherePanel", _wrap_delete_HemispherePanel, METH_VARARGS, (char *)"delete_HemispherePanel(HemispherePanel self)"},
	 { (char *)"HemispherePanel_getType", _wrap_HemispherePanel_getType, METH_VARARGS, (char *)"HemispherePanel_getType(HemispherePanel self) -> string"},
	 { (char *)"HemispherePanel_swigregister", HemispherePanel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SpherePanel", _wrap_new_SpherePanel, METH_VARARGS, (char *)"\n"
		"SpherePanel(Id id)\n"
		"SpherePanel(string path)\n"
		"SpherePanel(string name, Id parentId)\n"
		"SpherePanel(string name, PyMooseBase parent)\n"
		"SpherePanel(SpherePanel src, string name, PyMooseBase parent)\n"
		"SpherePanel(SpherePanel src, string name, Id parent)\n"
		"SpherePanel(SpherePanel src, string path)\n"
		"new_SpherePanel(Id src, string name, Id parent) -> SpherePanel\n"
		""},
	 { (char *)"delete_SpherePanel", _wrap_delete_SpherePanel, METH_VARARGS, (char *)"delete_SpherePanel(SpherePanel self)"},
	 { (char *)"SpherePanel_getType", _wrap_SpherePanel_getType, METH_VARARGS, (char *)"SpherePanel_getType(SpherePanel self) -> string"},
	 { (char *)"SpherePanel_swigregister", SpherePanel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TriPanel", _wrap_new_TriPanel, METH_VARARGS, (char *)"\n"
		"TriPanel(Id id)\n"
		"TriPanel(string path)\n"
		"TriPanel(string name, Id parentId)\n"
		"TriPanel(string name, PyMooseBase parent)\n"
		"TriPanel(TriPanel src, string name, PyMooseBase parent)\n"
		"TriPanel(TriPanel src, string name, Id parent)\n"
		"TriPanel(TriPanel src, string path)\n"
		"new_TriPanel(Id src, string name, Id parent) -> TriPanel\n"
		""},
	 { (char *)"delete_TriPanel", _wrap_delete_TriPanel, METH_VARARGS, (char *)"delete_TriPanel(TriPanel self)"},
	 { (char *)"TriPanel_getType", _wrap_TriPanel_getType, METH_VARARGS, (char *)"TriPanel_getType(TriPanel self) -> string"},
	 { (char *)"TriPanel_swigregister", TriPanel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RectPanel", _wrap_new_RectPanel, METH_VARARGS, (char *)"\n"
		"RectPanel(Id id)\n"
		"RectPanel(string path)\n"
		"RectPanel(string name, Id parentId)\n"
		"RectPanel(string name, PyMooseBase parent)\n"
		"RectPanel(RectPanel src, string name, PyMooseBase parent)\n"
		"RectPanel(RectPanel src, string name, Id parent)\n"
		"RectPanel(RectPanel src, string path)\n"
		"new_RectPanel(Id src, string name, Id parent) -> RectPanel\n"
		""},
	 { (char *)"delete_RectPanel", _wrap_delete_RectPanel, METH_VARARGS, (char *)"delete_RectPanel(RectPanel self)"},
	 { (char *)"RectPanel_getType", _wrap_RectPanel_getType, METH_VARARGS, (char *)"RectPanel_getType(RectPanel self) -> string"},
	 { (char *)"RectPanel_swigregister", RectPanel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Surface", _wrap_new_Surface, METH_VARARGS, (char *)"\n"
		"Surface(Id id)\n"
		"Surface(string path)\n"
		"Surface(string name, Id parentId)\n"
		"Surface(string name, PyMooseBase parent)\n"
		"Surface(Surface src, string name, PyMooseBase parent)\n"
		"Surface(Surface src, string name, Id parent)\n"
		"Surface(Surface src, string path)\n"
		"new_Surface(Id src, string name, Id parent) -> Surface\n"
		""},
	 { (char *)"delete_Surface", _wrap_delete_Surface, METH_VARARGS, (char *)"delete_Surface(Surface self)"},
	 { (char *)"Surface_getType", _wrap_Surface_getType, METH_VARARGS, (char *)"Surface_getType(Surface self) -> string"},
	 { (char *)"Surface___get_volume", _wrap_Surface___get_volume, METH_VARARGS, (char *)"Surface___get_volume(Surface self) -> double"},
	 { (char *)"Surface_volume_get", _wrap_Surface_volume_get, METH_VARARGS, (char *)"Surface_volume_get(Surface self) -> double"},
	 { (char *)"Surface_swigregister", Surface_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Geometry", _wrap_new_Geometry, METH_VARARGS, (char *)"\n"
		"Geometry(Id id)\n"
		"Geometry(string path)\n"
		"Geometry(string name, Id parentId)\n"
		"Geometry(string name, PyMooseBase parent)\n"
		"Geometry(Geometry src, string name, PyMooseBase parent)\n"
		"Geometry(Geometry src, string name, Id parent)\n"
		"Geometry(Geometry src, string path)\n"
		"new_Geometry(Id src, string name, Id parent) -> Geometry\n"
		""},
	 { (char *)"delete_Geometry", _wrap_delete_Geometry, METH_VARARGS, (char *)"delete_Geometry(Geometry self)"},
	 { (char *)"Geometry_getType", _wrap_Geometry_getType, METH_VARARGS, (char *)"Geometry_getType(Geometry self) -> string"},
	 { (char *)"Geometry___get_epsilon", _wrap_Geometry___get_epsilon, METH_VARARGS, (char *)"Geometry___get_epsilon(Geometry self) -> double"},
	 { (char *)"Geometry___set_epsilon", _wrap_Geometry___set_epsilon, METH_VARARGS, (char *)"Geometry___set_epsilon(Geometry self, double epsilon)"},
	 { (char *)"Geometry___get_neighdist", _wrap_Geometry___get_neighdist, METH_VARARGS, (char *)"Geometry___get_neighdist(Geometry self) -> double"},
	 { (char *)"Geometry___set_neighdist", _wrap_Geometry___set_neighdist, METH_VARARGS, (char *)"Geometry___set_neighdist(Geometry self, double neighdist)"},
	 { (char *)"Geometry_epsilon_set", _wrap_Geometry_epsilon_set, METH_VARARGS, (char *)"Geometry_epsilon_set(Geometry self, double epsilon)"},
	 { (char *)"Geometry_epsilon_get", _wrap_Geometry_epsilon_get, METH_VARARGS, (char *)"Geometry_epsilon_get(Geometry self) -> double"},
	 { (char *)"Geometry_neighdist_set", _wrap_Geometry_neighdist_set, METH_VARARGS, (char *)"Geometry_neighdist_set(Geometry self, double neighdist)"},
	 { (char *)"Geometry_neighdist_get", _wrap_Geometry_neighdist_get, METH_VARARGS, (char *)"Geometry_neighdist_get(Geometry self) -> double"},
	 { (char *)"Geometry_swigregister", Geometry_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Adaptor", _wrap_new_Adaptor, METH_VARARGS, (char *)"\n"
		"Adaptor(Id id)\n"
		"Adaptor(string path)\n"
		"Adaptor(string name, Id parentId)\n"
		"Adaptor(string name, PyMooseBase parent)\n"
		"Adaptor(Adaptor src, string name, PyMooseBase parent)\n"
		"Adaptor(Adaptor src, string name, Id parent)\n"
		"Adaptor(Adaptor src, string path)\n"
		"new_Adaptor(Id src, string name, Id parent) -> Adaptor\n"
		""},
	 { (char *)"delete_Adaptor", _wrap_delete_Adaptor, METH_VARARGS, (char *)"delete_Adaptor(Adaptor self)"},
	 { (char *)"Adaptor_getType", _wrap_Adaptor_getType, METH_VARARGS, (char *)"Adaptor_getType(Adaptor self) -> string"},
	 { (char *)"Adaptor___get_inputOffset", _wrap_Adaptor___get_inputOffset, METH_VARARGS, (char *)"Adaptor___get_inputOffset(Adaptor self) -> double"},
	 { (char *)"Adaptor___set_inputOffset", _wrap_Adaptor___set_inputOffset, METH_VARARGS, (char *)"Adaptor___set_inputOffset(Adaptor self, double inputOffset)"},
	 { (char *)"Adaptor___get_outputOffset", _wrap_Adaptor___get_outputOffset, METH_VARARGS, (char *)"Adaptor___get_outputOffset(Adaptor self) -> double"},
	 { (char *)"Adaptor___set_outputOffset", _wrap_Adaptor___set_outputOffset, METH_VARARGS, (char *)"Adaptor___set_outputOffset(Adaptor self, double outputOffset)"},
	 { (char *)"Adaptor___get_scale", _wrap_Adaptor___get_scale, METH_VARARGS, (char *)"Adaptor___get_scale(Adaptor self) -> double"},
	 { (char *)"Adaptor___set_scale", _wrap_Adaptor___set_scale, METH_VARARGS, (char *)"Adaptor___set_scale(Adaptor self, double scale)"},
	 { (char *)"Adaptor___get_output", _wrap_Adaptor___get_output, METH_VARARGS, (char *)"Adaptor___get_output(Adaptor self) -> double"},
	 { (char *)"Adaptor_inputOffset_set", _wrap_Adaptor_inputOffset_set, METH_VARARGS, (char *)"Adaptor_inputOffset_set(Adaptor self, double inputOffset)"},
	 { (char *)"Adaptor_inputOffset_get", _wrap_Adaptor_inputOffset_get, METH_VARARGS, (char *)"Adaptor_inputOffset_get(Adaptor self) -> double"},
	 { (char *)"Adaptor_outputOffset_set", _wrap_Adaptor_outputOffset_set, METH_VARARGS, (char *)"Adaptor_outputOffset_set(Adaptor self, double outputOffset)"},
	 { (char *)"Adaptor_outputOffset_get", _wrap_Adaptor_outputOffset_get, METH_VARARGS, (char *)"Adaptor_outputOffset_get(Adaptor self) -> double"},
	 { (char *)"Adaptor_scale_set", _wrap_Adaptor_scale_set, METH_VARARGS, (char *)"Adaptor_scale_set(Adaptor self, double scale)"},
	 { (char *)"Adaptor_scale_get", _wrap_Adaptor_scale_get, METH_VARARGS, (char *)"Adaptor_scale_get(Adaptor self) -> double"},
	 { (char *)"Adaptor_output_get", _wrap_Adaptor_output_get, METH_VARARGS, (char *)"Adaptor_output_get(Adaptor self) -> double"},
	 { (char *)"Adaptor_swigregister", Adaptor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SigNeur", _wrap_new_SigNeur, METH_VARARGS, (char *)"\n"
		"SigNeur(Id id)\n"
		"SigNeur(string path)\n"
		"SigNeur(string name, Id parentId)\n"
		"SigNeur(string name, PyMooseBase parent)\n"
		"SigNeur(SigNeur src, string name, PyMooseBase parent)\n"
		"SigNeur(SigNeur src, string name, Id parent)\n"
		"SigNeur(SigNeur src, string path)\n"
		"new_SigNeur(Id src, string name, Id parent) -> SigNeur\n"
		""},
	 { (char *)"delete_SigNeur", _wrap_delete_SigNeur, METH_VARARGS, (char *)"delete_SigNeur(SigNeur self)"},
	 { (char *)"SigNeur_getType", _wrap_SigNeur_getType, METH_VARARGS, (char *)"SigNeur_getType(SigNeur self) -> string"},
	 { (char *)"SigNeur___get_cellProto", _wrap_SigNeur___get_cellProto, METH_VARARGS, (char *)"SigNeur___get_cellProto(SigNeur self) -> Id"},
	 { (char *)"SigNeur___set_cellProto", _wrap_SigNeur___set_cellProto, METH_VARARGS, (char *)"SigNeur___set_cellProto(SigNeur self, Id cellProto)"},
	 { (char *)"SigNeur___get_spineProto", _wrap_SigNeur___get_spineProto, METH_VARARGS, (char *)"SigNeur___get_spineProto(SigNeur self) -> Id"},
	 { (char *)"SigNeur___set_spineProto", _wrap_SigNeur___set_spineProto, METH_VARARGS, (char *)"SigNeur___set_spineProto(SigNeur self, Id spineProto)"},
	 { (char *)"SigNeur___get_dendProto", _wrap_SigNeur___get_dendProto, METH_VARARGS, (char *)"SigNeur___get_dendProto(SigNeur self) -> Id"},
	 { (char *)"SigNeur___set_dendProto", _wrap_SigNeur___set_dendProto, METH_VARARGS, (char *)"SigNeur___set_dendProto(SigNeur self, Id dendProto)"},
	 { (char *)"SigNeur___get_somaProto", _wrap_SigNeur___get_somaProto, METH_VARARGS, (char *)"SigNeur___get_somaProto(SigNeur self) -> Id"},
	 { (char *)"SigNeur___set_somaProto", _wrap_SigNeur___set_somaProto, METH_VARARGS, (char *)"SigNeur___set_somaProto(SigNeur self, Id somaProto)"},
	 { (char *)"SigNeur___get_cell", _wrap_SigNeur___get_cell, METH_VARARGS, (char *)"SigNeur___get_cell(SigNeur self) -> Id"},
	 { (char *)"SigNeur___get_spine", _wrap_SigNeur___get_spine, METH_VARARGS, (char *)"SigNeur___get_spine(SigNeur self) -> Id"},
	 { (char *)"SigNeur___get_dend", _wrap_SigNeur___get_dend, METH_VARARGS, (char *)"SigNeur___get_dend(SigNeur self) -> Id"},
	 { (char *)"SigNeur___get_soma", _wrap_SigNeur___get_soma, METH_VARARGS, (char *)"SigNeur___get_soma(SigNeur self) -> Id"},
	 { (char *)"SigNeur___get_cellMethod", _wrap_SigNeur___get_cellMethod, METH_VARARGS, (char *)"SigNeur___get_cellMethod(SigNeur self) -> string"},
	 { (char *)"SigNeur___set_cellMethod", _wrap_SigNeur___set_cellMethod, METH_VARARGS, (char *)"SigNeur___set_cellMethod(SigNeur self, string cellMethod)"},
	 { (char *)"SigNeur___get_spineMethod", _wrap_SigNeur___get_spineMethod, METH_VARARGS, (char *)"SigNeur___get_spineMethod(SigNeur self) -> string"},
	 { (char *)"SigNeur___set_spineMethod", _wrap_SigNeur___set_spineMethod, METH_VARARGS, (char *)"SigNeur___set_spineMethod(SigNeur self, string spineMethod)"},
	 { (char *)"SigNeur___get_dendMethod", _wrap_SigNeur___get_dendMethod, METH_VARARGS, (char *)"SigNeur___get_dendMethod(SigNeur self) -> string"},
	 { (char *)"SigNeur___set_dendMethod", _wrap_SigNeur___set_dendMethod, METH_VARARGS, (char *)"SigNeur___set_dendMethod(SigNeur self, string dendMethod)"},
	 { (char *)"SigNeur___get_somaMethod", _wrap_SigNeur___get_somaMethod, METH_VARARGS, (char *)"SigNeur___get_somaMethod(SigNeur self) -> string"},
	 { (char *)"SigNeur___set_somaMethod", _wrap_SigNeur___set_somaMethod, METH_VARARGS, (char *)"SigNeur___set_somaMethod(SigNeur self, string somaMethod)"},
	 { (char *)"SigNeur___get_sigDt", _wrap_SigNeur___get_sigDt, METH_VARARGS, (char *)"SigNeur___get_sigDt(SigNeur self) -> double"},
	 { (char *)"SigNeur___set_sigDt", _wrap_SigNeur___set_sigDt, METH_VARARGS, (char *)"SigNeur___set_sigDt(SigNeur self, double sigDt)"},
	 { (char *)"SigNeur___get_cellDt", _wrap_SigNeur___get_cellDt, METH_VARARGS, (char *)"SigNeur___get_cellDt(SigNeur self) -> double"},
	 { (char *)"SigNeur___set_cellDt", _wrap_SigNeur___set_cellDt, METH_VARARGS, (char *)"SigNeur___set_cellDt(SigNeur self, double cellDt)"},
	 { (char *)"SigNeur___get_Dscale", _wrap_SigNeur___get_Dscale, METH_VARARGS, (char *)"SigNeur___get_Dscale(SigNeur self) -> double"},
	 { (char *)"SigNeur___set_Dscale", _wrap_SigNeur___set_Dscale, METH_VARARGS, (char *)"SigNeur___set_Dscale(SigNeur self, double Dscale)"},
	 { (char *)"SigNeur___get_lambda", _wrap_SigNeur___get_lambda, METH_VARARGS, (char *)"SigNeur___get_lambda(SigNeur self) -> double"},
	 { (char *)"SigNeur___set_lambda", _wrap_SigNeur___set_lambda, METH_VARARGS, (char *)"SigNeur___set_lambda(SigNeur self, double lambda)"},
	 { (char *)"SigNeur___get_parallelMode", _wrap_SigNeur___get_parallelMode, METH_VARARGS, (char *)"SigNeur___get_parallelMode(SigNeur self) -> int"},
	 { (char *)"SigNeur___set_parallelMode", _wrap_SigNeur___set_parallelMode, METH_VARARGS, (char *)"SigNeur___set_parallelMode(SigNeur self, int parallelMode)"},
	 { (char *)"SigNeur___get_updateStep", _wrap_SigNeur___get_updateStep, METH_VARARGS, (char *)"SigNeur___get_updateStep(SigNeur self) -> double"},
	 { (char *)"SigNeur___set_updateStep", _wrap_SigNeur___set_updateStep, METH_VARARGS, (char *)"SigNeur___set_updateStep(SigNeur self, double updateStep)"},
	 { (char *)"SigNeur___get_calciumScale", _wrap_SigNeur___get_calciumScale, METH_VARARGS, (char *)"SigNeur___get_calciumScale(SigNeur self) -> double"},
	 { (char *)"SigNeur___set_calciumScale", _wrap_SigNeur___set_calciumScale, METH_VARARGS, (char *)"SigNeur___set_calciumScale(SigNeur self, double calciumScale)"},
	 { (char *)"SigNeur___get_dendInclude", _wrap_SigNeur___get_dendInclude, METH_VARARGS, (char *)"SigNeur___get_dendInclude(SigNeur self) -> string"},
	 { (char *)"SigNeur___set_dendInclude", _wrap_SigNeur___set_dendInclude, METH_VARARGS, (char *)"SigNeur___set_dendInclude(SigNeur self, string dendInclude)"},
	 { (char *)"SigNeur___get_dendExclude", _wrap_SigNeur___get_dendExclude, METH_VARARGS, (char *)"SigNeur___get_dendExclude(SigNeur self) -> string"},
	 { (char *)"SigNeur___set_dendExclude", _wrap_SigNeur___set_dendExclude, METH_VARARGS, (char *)"SigNeur___set_dendExclude(SigNeur self, string dendExclude)"},
	 { (char *)"SigNeur_cellProto_set", _wrap_SigNeur_cellProto_set, METH_VARARGS, (char *)"SigNeur_cellProto_set(SigNeur self, Id cellProto)"},
	 { (char *)"SigNeur_cellProto_get", _wrap_SigNeur_cellProto_get, METH_VARARGS, (char *)"SigNeur_cellProto_get(SigNeur self) -> Id"},
	 { (char *)"SigNeur_spineProto_set", _wrap_SigNeur_spineProto_set, METH_VARARGS, (char *)"SigNeur_spineProto_set(SigNeur self, Id spineProto)"},
	 { (char *)"SigNeur_spineProto_get", _wrap_SigNeur_spineProto_get, METH_VARARGS, (char *)"SigNeur_spineProto_get(SigNeur self) -> Id"},
	 { (char *)"SigNeur_dendProto_set", _wrap_SigNeur_dendProto_set, METH_VARARGS, (char *)"SigNeur_dendProto_set(SigNeur self, Id dendProto)"},
	 { (char *)"SigNeur_dendProto_get", _wrap_SigNeur_dendProto_get, METH_VARARGS, (char *)"SigNeur_dendProto_get(SigNeur self) -> Id"},
	 { (char *)"SigNeur_somaProto_set", _wrap_SigNeur_somaProto_set, METH_VARARGS, (char *)"SigNeur_somaProto_set(SigNeur self, Id somaProto)"},
	 { (char *)"SigNeur_somaProto_get", _wrap_SigNeur_somaProto_get, METH_VARARGS, (char *)"SigNeur_somaProto_get(SigNeur self) -> Id"},
	 { (char *)"SigNeur_cell_get", _wrap_SigNeur_cell_get, METH_VARARGS, (char *)"SigNeur_cell_get(SigNeur self) -> Id"},
	 { (char *)"SigNeur_spine_get", _wrap_SigNeur_spine_get, METH_VARARGS, (char *)"SigNeur_spine_get(SigNeur self) -> Id"},
	 { (char *)"SigNeur_dend_get", _wrap_SigNeur_dend_get, METH_VARARGS, (char *)"SigNeur_dend_get(SigNeur self) -> Id"},
	 { (char *)"SigNeur_soma_get", _wrap_SigNeur_soma_get, METH_VARARGS, (char *)"SigNeur_soma_get(SigNeur self) -> Id"},
	 { (char *)"SigNeur_cellMethod_set", _wrap_SigNeur_cellMethod_set, METH_VARARGS, (char *)"SigNeur_cellMethod_set(SigNeur self, string cellMethod)"},
	 { (char *)"SigNeur_cellMethod_get", _wrap_SigNeur_cellMethod_get, METH_VARARGS, (char *)"SigNeur_cellMethod_get(SigNeur self) -> string"},
	 { (char *)"SigNeur_spineMethod_set", _wrap_SigNeur_spineMethod_set, METH_VARARGS, (char *)"SigNeur_spineMethod_set(SigNeur self, string spineMethod)"},
	 { (char *)"SigNeur_spineMethod_get", _wrap_SigNeur_spineMethod_get, METH_VARARGS, (char *)"SigNeur_spineMethod_get(SigNeur self) -> string"},
	 { (char *)"SigNeur_dendMethod_set", _wrap_SigNeur_dendMethod_set, METH_VARARGS, (char *)"SigNeur_dendMethod_set(SigNeur self, string dendMethod)"},
	 { (char *)"SigNeur_dendMethod_get", _wrap_SigNeur_dendMethod_get, METH_VARARGS, (char *)"SigNeur_dendMethod_get(SigNeur self) -> string"},
	 { (char *)"SigNeur_somaMethod_set", _wrap_SigNeur_somaMethod_set, METH_VARARGS, (char *)"SigNeur_somaMethod_set(SigNeur self, string somaMethod)"},
	 { (char *)"SigNeur_somaMethod_get", _wrap_SigNeur_somaMethod_get, METH_VARARGS, (char *)"SigNeur_somaMethod_get(SigNeur self) -> string"},
	 { (char *)"SigNeur_sigDt_set", _wrap_SigNeur_sigDt_set, METH_VARARGS, (char *)"SigNeur_sigDt_set(SigNeur self, double sigDt)"},
	 { (char *)"SigNeur_sigDt_get", _wrap_SigNeur_sigDt_get, METH_VARARGS, (char *)"SigNeur_sigDt_get(SigNeur self) -> double"},
	 { (char *)"SigNeur_cellDt_set", _wrap_SigNeur_cellDt_set, METH_VARARGS, (char *)"SigNeur_cellDt_set(SigNeur self, double cellDt)"},
	 { (char *)"SigNeur_cellDt_get", _wrap_SigNeur_cellDt_get, METH_VARARGS, (char *)"SigNeur_cellDt_get(SigNeur self) -> double"},
	 { (char *)"SigNeur_Dscale_set", _wrap_SigNeur_Dscale_set, METH_VARARGS, (char *)"SigNeur_Dscale_set(SigNeur self, double Dscale)"},
	 { (char *)"SigNeur_Dscale_get", _wrap_SigNeur_Dscale_get, METH_VARARGS, (char *)"SigNeur_Dscale_get(SigNeur self) -> double"},
	 { (char *)"SigNeur_lambda__set", _wrap_SigNeur_lambda__set, METH_VARARGS, (char *)"SigNeur_lambda__set(SigNeur self, double lambda_)"},
	 { (char *)"SigNeur_lambda__get", _wrap_SigNeur_lambda__get, METH_VARARGS, (char *)"SigNeur_lambda__get(SigNeur self) -> double"},
	 { (char *)"SigNeur_parallelMode_set", _wrap_SigNeur_parallelMode_set, METH_VARARGS, (char *)"SigNeur_parallelMode_set(SigNeur self, int parallelMode)"},
	 { (char *)"SigNeur_parallelMode_get", _wrap_SigNeur_parallelMode_get, METH_VARARGS, (char *)"SigNeur_parallelMode_get(SigNeur self) -> int"},
	 { (char *)"SigNeur_updateStep_set", _wrap_SigNeur_updateStep_set, METH_VARARGS, (char *)"SigNeur_updateStep_set(SigNeur self, double updateStep)"},
	 { (char *)"SigNeur_updateStep_get", _wrap_SigNeur_updateStep_get, METH_VARARGS, (char *)"SigNeur_updateStep_get(SigNeur self) -> double"},
	 { (char *)"SigNeur_calciumScale_set", _wrap_SigNeur_calciumScale_set, METH_VARARGS, (char *)"SigNeur_calciumScale_set(SigNeur self, double calciumScale)"},
	 { (char *)"SigNeur_calciumScale_get", _wrap_SigNeur_calciumScale_get, METH_VARARGS, (char *)"SigNeur_calciumScale_get(SigNeur self) -> double"},
	 { (char *)"SigNeur_dendInclude_set", _wrap_SigNeur_dendInclude_set, METH_VARARGS, (char *)"SigNeur_dendInclude_set(SigNeur self, string dendInclude)"},
	 { (char *)"SigNeur_dendInclude_get", _wrap_SigNeur_dendInclude_get, METH_VARARGS, (char *)"SigNeur_dendInclude_get(SigNeur self) -> string"},
	 { (char *)"SigNeur_dendExclude_set", _wrap_SigNeur_dendExclude_set, METH_VARARGS, (char *)"SigNeur_dendExclude_set(SigNeur self, string dendExclude)"},
	 { (char *)"SigNeur_dendExclude_get", _wrap_SigNeur_dendExclude_get, METH_VARARGS, (char *)"SigNeur_dendExclude_get(SigNeur self) -> string"},
	 { (char *)"SigNeur_swigregister", SigNeur_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_AscFile", _wrap_new_AscFile, METH_VARARGS, (char *)"\n"
		"AscFile(Id id)\n"
		"AscFile(string path)\n"
		"AscFile(string name, Id parentId)\n"
		"AscFile(string name, PyMooseBase parent)\n"
		"AscFile(AscFile src, string name, PyMooseBase parent)\n"
		"AscFile(AscFile src, string name, Id parent)\n"
		"AscFile(AscFile src, string path)\n"
		"new_AscFile(Id src, string name, Id parent) -> AscFile\n"
		""},
	 { (char *)"delete_AscFile", _wrap_delete_AscFile, METH_VARARGS, (char *)"delete_AscFile(AscFile self)"},
	 { (char *)"AscFile_getType", _wrap_AscFile_getType, METH_VARARGS, (char *)"AscFile_getType(AscFile self) -> string"},
	 { (char *)"AscFile___get_fileName", _wrap_AscFile___get_fileName, METH_VARARGS, (char *)"AscFile___get_fileName(AscFile self) -> string"},
	 { (char *)"AscFile___set_fileName", _wrap_AscFile___set_fileName, METH_VARARGS, (char *)"AscFile___set_fileName(AscFile self, string fileName)"},
	 { (char *)"AscFile___get_appendFlag", _wrap_AscFile___get_appendFlag, METH_VARARGS, (char *)"AscFile___get_appendFlag(AscFile self) -> int"},
	 { (char *)"AscFile___set_appendFlag", _wrap_AscFile___set_appendFlag, METH_VARARGS, (char *)"AscFile___set_appendFlag(AscFile self, int appendFlag)"},
	 { (char *)"AscFile_fileName_set", _wrap_AscFile_fileName_set, METH_VARARGS, (char *)"AscFile_fileName_set(AscFile self, string fileName)"},
	 { (char *)"AscFile_fileName_get", _wrap_AscFile_fileName_get, METH_VARARGS, (char *)"AscFile_fileName_get(AscFile self) -> string"},
	 { (char *)"AscFile_appendFlag_set", _wrap_AscFile_appendFlag_set, METH_VARARGS, (char *)"AscFile_appendFlag_set(AscFile self, int appendFlag)"},
	 { (char *)"AscFile_appendFlag_get", _wrap_AscFile_appendFlag_get, METH_VARARGS, (char *)"AscFile_appendFlag_get(AscFile self) -> int"},
	 { (char *)"AscFile_swigregister", AscFile_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DifShell", _wrap_new_DifShell, METH_VARARGS, (char *)"\n"
		"DifShell(Id id)\n"
		"DifShell(string path)\n"
		"DifShell(string name, Id parentId)\n"
		"DifShell(string name, PyMooseBase parent)\n"
		"DifShell(DifShell src, string name, PyMooseBase parent)\n"
		"DifShell(DifShell src, string name, Id parent)\n"
		"DifShell(DifShell src, string path)\n"
		"new_DifShell(Id src, string name, Id parent) -> DifShell\n"
		""},
	 { (char *)"delete_DifShell", _wrap_delete_DifShell, METH_VARARGS, (char *)"delete_DifShell(DifShell self)"},
	 { (char *)"DifShell_getType", _wrap_DifShell_getType, METH_VARARGS, (char *)"DifShell_getType(DifShell self) -> string"},
	 { (char *)"DifShell___get_C", _wrap_DifShell___get_C, METH_VARARGS, (char *)"DifShell___get_C(DifShell self) -> double"},
	 { (char *)"DifShell___get_Ceq", _wrap_DifShell___get_Ceq, METH_VARARGS, (char *)"DifShell___get_Ceq(DifShell self) -> double"},
	 { (char *)"DifShell___set_Ceq", _wrap_DifShell___set_Ceq, METH_VARARGS, (char *)"DifShell___set_Ceq(DifShell self, double Ceq)"},
	 { (char *)"DifShell___get_D", _wrap_DifShell___get_D, METH_VARARGS, (char *)"DifShell___get_D(DifShell self) -> double"},
	 { (char *)"DifShell___set_D", _wrap_DifShell___set_D, METH_VARARGS, (char *)"DifShell___set_D(DifShell self, double D)"},
	 { (char *)"DifShell___get_valence", _wrap_DifShell___get_valence, METH_VARARGS, (char *)"DifShell___get_valence(DifShell self) -> double"},
	 { (char *)"DifShell___set_valence", _wrap_DifShell___set_valence, METH_VARARGS, (char *)"DifShell___set_valence(DifShell self, double valence)"},
	 { (char *)"DifShell___get_leak", _wrap_DifShell___get_leak, METH_VARARGS, (char *)"DifShell___get_leak(DifShell self) -> double"},
	 { (char *)"DifShell___set_leak", _wrap_DifShell___set_leak, METH_VARARGS, (char *)"DifShell___set_leak(DifShell self, double leak)"},
	 { (char *)"DifShell___get_shapeMode", _wrap_DifShell___get_shapeMode, METH_VARARGS, (char *)"DifShell___get_shapeMode(DifShell self) -> unsigned int"},
	 { (char *)"DifShell___set_shapeMode", _wrap_DifShell___set_shapeMode, METH_VARARGS, (char *)"DifShell___set_shapeMode(DifShell self, unsigned int shapeMode)"},
	 { (char *)"DifShell___get_length", _wrap_DifShell___get_length, METH_VARARGS, (char *)"DifShell___get_length(DifShell self) -> double"},
	 { (char *)"DifShell___set_length", _wrap_DifShell___set_length, METH_VARARGS, (char *)"DifShell___set_length(DifShell self, double length)"},
	 { (char *)"DifShell___get_diameter", _wrap_DifShell___get_diameter, METH_VARARGS, (char *)"DifShell___get_diameter(DifShell self) -> double"},
	 { (char *)"DifShell___set_diameter", _wrap_DifShell___set_diameter, METH_VARARGS, (char *)"DifShell___set_diameter(DifShell self, double diameter)"},
	 { (char *)"DifShell___get_thickness", _wrap_DifShell___get_thickness, METH_VARARGS, (char *)"DifShell___get_thickness(DifShell self) -> double"},
	 { (char *)"DifShell___set_thickness", _wrap_DifShell___set_thickness, METH_VARARGS, (char *)"DifShell___set_thickness(DifShell self, double thickness)"},
	 { (char *)"DifShell___get_volume", _wrap_DifShell___get_volume, METH_VARARGS, (char *)"DifShell___get_volume(DifShell self) -> double"},
	 { (char *)"DifShell___set_volume", _wrap_DifShell___set_volume, METH_VARARGS, (char *)"DifShell___set_volume(DifShell self, double volume)"},
	 { (char *)"DifShell___get_outerArea", _wrap_DifShell___get_outerArea, METH_VARARGS, (char *)"DifShell___get_outerArea(DifShell self) -> double"},
	 { (char *)"DifShell___set_outerArea", _wrap_DifShell___set_outerArea, METH_VARARGS, (char *)"DifShell___set_outerArea(DifShell self, double outerArea)"},
	 { (char *)"DifShell___get_innerArea", _wrap_DifShell___get_innerArea, METH_VARARGS, (char *)"DifShell___get_innerArea(DifShell self) -> double"},
	 { (char *)"DifShell___set_innerArea", _wrap_DifShell___set_innerArea, METH_VARARGS, (char *)"DifShell___set_innerArea(DifShell self, double innerArea)"},
	 { (char *)"DifShell_C_get", _wrap_DifShell_C_get, METH_VARARGS, (char *)"DifShell_C_get(DifShell self) -> double"},
	 { (char *)"DifShell_Ceq_set", _wrap_DifShell_Ceq_set, METH_VARARGS, (char *)"DifShell_Ceq_set(DifShell self, double Ceq)"},
	 { (char *)"DifShell_Ceq_get", _wrap_DifShell_Ceq_get, METH_VARARGS, (char *)"DifShell_Ceq_get(DifShell self) -> double"},
	 { (char *)"DifShell_D_set", _wrap_DifShell_D_set, METH_VARARGS, (char *)"DifShell_D_set(DifShell self, double D)"},
	 { (char *)"DifShell_D_get", _wrap_DifShell_D_get, METH_VARARGS, (char *)"DifShell_D_get(DifShell self) -> double"},
	 { (char *)"DifShell_valence_set", _wrap_DifShell_valence_set, METH_VARARGS, (char *)"DifShell_valence_set(DifShell self, double valence)"},
	 { (char *)"DifShell_valence_get", _wrap_DifShell_valence_get, METH_VARARGS, (char *)"DifShell_valence_get(DifShell self) -> double"},
	 { (char *)"DifShell_leak_set", _wrap_DifShell_leak_set, METH_VARARGS, (char *)"DifShell_leak_set(DifShell self, double leak)"},
	 { (char *)"DifShell_leak_get", _wrap_DifShell_leak_get, METH_VARARGS, (char *)"DifShell_leak_get(DifShell self) -> double"},
	 { (char *)"DifShell_shapeMode_set", _wrap_DifShell_shapeMode_set, METH_VARARGS, (char *)"DifShell_shapeMode_set(DifShell self, unsigned int shapeMode)"},
	 { (char *)"DifShell_shapeMode_get", _wrap_DifShell_shapeMode_get, METH_VARARGS, (char *)"DifShell_shapeMode_get(DifShell self) -> unsigned int"},
	 { (char *)"DifShell_length_set", _wrap_DifShell_length_set, METH_VARARGS, (char *)"DifShell_length_set(DifShell self, double length)"},
	 { (char *)"DifShell_length_get", _wrap_DifShell_length_get, METH_VARARGS, (char *)"DifShell_length_get(DifShell self) -> double"},
	 { (char *)"DifShell_diameter_set", _wrap_DifShell_diameter_set, METH_VARARGS, (char *)"DifShell_diameter_set(DifShell self, double diameter)"},
	 { (char *)"DifShell_diameter_get", _wrap_DifShell_diameter_get, METH_VARARGS, (char *)"DifShell_diameter_get(DifShell self) -> double"},
	 { (char *)"DifShell_thickness_set", _wrap_DifShell_thickness_set, METH_VARARGS, (char *)"DifShell_thickness_set(DifShell self, double thickness)"},
	 { (char *)"DifShell_thickness_get", _wrap_DifShell_thickness_get, METH_VARARGS, (char *)"DifShell_thickness_get(DifShell self) -> double"},
	 { (char *)"DifShell_volume_set", _wrap_DifShell_volume_set, METH_VARARGS, (char *)"DifShell_volume_set(DifShell self, double volume)"},
	 { (char *)"DifShell_volume_get", _wrap_DifShell_volume_get, METH_VARARGS, (char *)"DifShell_volume_get(DifShell self) -> double"},
	 { (char *)"DifShell_outerArea_set", _wrap_DifShell_outerArea_set, METH_VARARGS, (char *)"DifShell_outerArea_set(DifShell self, double outerArea)"},
	 { (char *)"DifShell_outerArea_get", _wrap_DifShell_outerArea_get, METH_VARARGS, (char *)"DifShell_outerArea_get(DifShell self) -> double"},
	 { (char *)"DifShell_innerArea_set", _wrap_DifShell_innerArea_set, METH_VARARGS, (char *)"DifShell_innerArea_set(DifShell self, double innerArea)"},
	 { (char *)"DifShell_innerArea_get", _wrap_DifShell_innerArea_get, METH_VARARGS, (char *)"DifShell_innerArea_get(DifShell self) -> double"},
	 { (char *)"DifShell_swigregister", DifShell_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GssaStoich", _wrap_new_GssaStoich, METH_VARARGS, (char *)"\n"
		"GssaStoich(Id id)\n"
		"GssaStoich(string path)\n"
		"GssaStoich(string name, Id parentId)\n"
		"GssaStoich(string name, PyMooseBase parent)\n"
		"GssaStoich(GssaStoich src, string name, PyMooseBase parent)\n"
		"GssaStoich(GssaStoich src, string name, Id parent)\n"
		"GssaStoich(GssaStoich src, string path)\n"
		"new_GssaStoich(Id src, string name, Id parent) -> GssaStoich\n"
		""},
	 { (char *)"delete_GssaStoich", _wrap_delete_GssaStoich, METH_VARARGS, (char *)"delete_GssaStoich(GssaStoich self)"},
	 { (char *)"GssaStoich_getType", _wrap_GssaStoich_getType, METH_VARARGS, (char *)"GssaStoich_getType(GssaStoich self) -> string"},
	 { (char *)"GssaStoich___get_method", _wrap_GssaStoich___get_method, METH_VARARGS, (char *)"GssaStoich___get_method(GssaStoich self) -> string"},
	 { (char *)"GssaStoich___set_method", _wrap_GssaStoich___set_method, METH_VARARGS, (char *)"GssaStoich___set_method(GssaStoich self, string method)"},
	 { (char *)"GssaStoich___set_path", _wrap_GssaStoich___set_path, METH_VARARGS, (char *)"GssaStoich___set_path(GssaStoich self, string path)"},
	 { (char *)"GssaStoich_method_set", _wrap_GssaStoich_method_set, METH_VARARGS, (char *)"GssaStoich_method_set(GssaStoich self, string method)"},
	 { (char *)"GssaStoich_method_get", _wrap_GssaStoich_method_get, METH_VARARGS, (char *)"GssaStoich_method_get(GssaStoich self) -> string"},
	 { (char *)"GssaStoich_path_get", _wrap_GssaStoich_path_get, METH_VARARGS, (char *)"GssaStoich_path_get(GssaStoich self) -> string"},
	 { (char *)"GssaStoich_swigregister", GssaStoich_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TauPump", _wrap_new_TauPump, METH_VARARGS, (char *)"\n"
		"TauPump(Id id)\n"
		"TauPump(string path)\n"
		"TauPump(string name, Id parentId)\n"
		"TauPump(string name, PyMooseBase parent)\n"
		"TauPump(TauPump src, string name, PyMooseBase parent)\n"
		"TauPump(TauPump src, string name, Id parent)\n"
		"TauPump(TauPump src, string path)\n"
		"new_TauPump(Id src, string name, Id parent) -> TauPump\n"
		""},
	 { (char *)"delete_TauPump", _wrap_delete_TauPump, METH_VARARGS, (char *)"delete_TauPump(TauPump self)"},
	 { (char *)"TauPump_getType", _wrap_TauPump_getType, METH_VARARGS, (char *)"TauPump_getType(TauPump self) -> string"},
	 { (char *)"TauPump___get_pumpRate", _wrap_TauPump___get_pumpRate, METH_VARARGS, (char *)"TauPump___get_pumpRate(TauPump self) -> double"},
	 { (char *)"TauPump___set_pumpRate", _wrap_TauPump___set_pumpRate, METH_VARARGS, (char *)"TauPump___set_pumpRate(TauPump self, double pumpRate)"},
	 { (char *)"TauPump___get_eqConc", _wrap_TauPump___get_eqConc, METH_VARARGS, (char *)"TauPump___get_eqConc(TauPump self) -> double"},
	 { (char *)"TauPump___set_eqConc", _wrap_TauPump___set_eqConc, METH_VARARGS, (char *)"TauPump___set_eqConc(TauPump self, double eqConc)"},
	 { (char *)"TauPump___get_TA", _wrap_TauPump___get_TA, METH_VARARGS, (char *)"TauPump___get_TA(TauPump self) -> double"},
	 { (char *)"TauPump___set_TA", _wrap_TauPump___set_TA, METH_VARARGS, (char *)"TauPump___set_TA(TauPump self, double TA)"},
	 { (char *)"TauPump___get_TB", _wrap_TauPump___get_TB, METH_VARARGS, (char *)"TauPump___get_TB(TauPump self) -> double"},
	 { (char *)"TauPump___set_TB", _wrap_TauPump___set_TB, METH_VARARGS, (char *)"TauPump___set_TB(TauPump self, double TB)"},
	 { (char *)"TauPump___get_TC", _wrap_TauPump___get_TC, METH_VARARGS, (char *)"TauPump___get_TC(TauPump self) -> double"},
	 { (char *)"TauPump___set_TC", _wrap_TauPump___set_TC, METH_VARARGS, (char *)"TauPump___set_TC(TauPump self, double TC)"},
	 { (char *)"TauPump___get_TV", _wrap_TauPump___get_TV, METH_VARARGS, (char *)"TauPump___get_TV(TauPump self) -> double"},
	 { (char *)"TauPump___set_TV", _wrap_TauPump___set_TV, METH_VARARGS, (char *)"TauPump___set_TV(TauPump self, double TV)"},
	 { (char *)"TauPump_pumpRate_set", _wrap_TauPump_pumpRate_set, METH_VARARGS, (char *)"TauPump_pumpRate_set(TauPump self, double pumpRate)"},
	 { (char *)"TauPump_pumpRate_get", _wrap_TauPump_pumpRate_get, METH_VARARGS, (char *)"TauPump_pumpRate_get(TauPump self) -> double"},
	 { (char *)"TauPump_eqConc_set", _wrap_TauPump_eqConc_set, METH_VARARGS, (char *)"TauPump_eqConc_set(TauPump self, double eqConc)"},
	 { (char *)"TauPump_eqConc_get", _wrap_TauPump_eqConc_get, METH_VARARGS, (char *)"TauPump_eqConc_get(TauPump self) -> double"},
	 { (char *)"TauPump_TA_set", _wrap_TauPump_TA_set, METH_VARARGS, (char *)"TauPump_TA_set(TauPump self, double TA)"},
	 { (char *)"TauPump_TA_get", _wrap_TauPump_TA_get, METH_VARARGS, (char *)"TauPump_TA_get(TauPump self) -> double"},
	 { (char *)"TauPump_TB_set", _wrap_TauPump_TB_set, METH_VARARGS, (char *)"TauPump_TB_set(TauPump self, double TB)"},
	 { (char *)"TauPump_TB_get", _wrap_TauPump_TB_get, METH_VARARGS, (char *)"TauPump_TB_get(TauPump self) -> double"},
	 { (char *)"TauPump_TC_set", _wrap_TauPump_TC_set, METH_VARARGS, (char *)"TauPump_TC_set(TauPump self, double TC)"},
	 { (char *)"TauPump_TC_get", _wrap_TauPump_TC_get, METH_VARARGS, (char *)"TauPump_TC_get(TauPump self) -> double"},
	 { (char *)"TauPump_TV_set", _wrap_TauPump_TV_set, METH_VARARGS, (char *)"TauPump_TV_set(TauPump self, double TV)"},
	 { (char *)"TauPump_TV_get", _wrap_TauPump_TV_get, METH_VARARGS, (char *)"TauPump_TV_get(TauPump self) -> double"},
	 { (char *)"TauPump_swigregister", TauPump_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TimeTable", _wrap_new_TimeTable, METH_VARARGS, (char *)"\n"
		"TimeTable(Id id)\n"
		"TimeTable(string path)\n"
		"TimeTable(string name, Id parentId)\n"
		"TimeTable(string name, PyMooseBase parent)\n"
		"TimeTable(TimeTable src, string name, PyMooseBase parent)\n"
		"TimeTable(TimeTable src, string name, Id parent)\n"
		"TimeTable(TimeTable src, string path)\n"
		"new_TimeTable(Id src, string name, Id parent) -> TimeTable\n"
		""},
	 { (char *)"delete_TimeTable", _wrap_delete_TimeTable, METH_VARARGS, (char *)"delete_TimeTable(TimeTable self)"},
	 { (char *)"TimeTable_getType", _wrap_TimeTable_getType, METH_VARARGS, (char *)"TimeTable_getType(TimeTable self) -> string"},
	 { (char *)"TimeTable___get_maxTime", _wrap_TimeTable___get_maxTime, METH_VARARGS, (char *)"TimeTable___get_maxTime(TimeTable self) -> double"},
	 { (char *)"TimeTable___set_maxTime", _wrap_TimeTable___set_maxTime, METH_VARARGS, (char *)"TimeTable___set_maxTime(TimeTable self, double maxTime)"},
	 { (char *)"TimeTable___get_tableVector", _wrap_TimeTable___get_tableVector, METH_VARARGS, (char *)"TimeTable___get_tableVector(TimeTable self) -> double_vector"},
	 { (char *)"TimeTable___set_tableVector", _wrap_TimeTable___set_tableVector, METH_VARARGS, (char *)"TimeTable___set_tableVector(TimeTable self, double_vector tableVector)"},
	 { (char *)"TimeTable___get_tableSize", _wrap_TimeTable___get_tableSize, METH_VARARGS, (char *)"TimeTable___get_tableSize(TimeTable self) -> unsigned int"},
	 { (char *)"TimeTable_maxTime_set", _wrap_TimeTable_maxTime_set, METH_VARARGS, (char *)"TimeTable_maxTime_set(TimeTable self, double maxTime)"},
	 { (char *)"TimeTable_maxTime_get", _wrap_TimeTable_maxTime_get, METH_VARARGS, (char *)"TimeTable_maxTime_get(TimeTable self) -> double"},
	 { (char *)"TimeTable_tableVector_get", _wrap_TimeTable_tableVector_get, METH_VARARGS, (char *)"TimeTable_tableVector_get(TimeTable self) -> double_vector"},
	 { (char *)"TimeTable_tableSize_get", _wrap_TimeTable_tableSize_get, METH_VARARGS, (char *)"TimeTable_tableSize_get(TimeTable self) -> unsigned int"},
	 { (char *)"TimeTable_swigregister", TimeTable_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_pymoose__UniformRngTo_p_pymoose__RandGenerator(void *x) {
    return (void *)((pymoose::RandGenerator *)  ((pymoose::UniformRng *) x));
}
static void *_p_pymoose__BinomialRngTo_p_pymoose__RandGenerator(void *x) {
    return (void *)((pymoose::RandGenerator *)  ((pymoose::BinomialRng *) x));
}
static void *_p_pymoose__ExponentialRngTo_p_pymoose__RandGenerator(void *x) {
    return (void *)((pymoose::RandGenerator *)  ((pymoose::ExponentialRng *) x));
}
static void *_p_pymoose__PoissonRngTo_p_pymoose__RandGenerator(void *x) {
    return (void *)((pymoose::RandGenerator *)  ((pymoose::PoissonRng *) x));
}
static void *_p_pymoose__NormalRngTo_p_pymoose__RandGenerator(void *x) {
    return (void *)((pymoose::RandGenerator *)  ((pymoose::NormalRng *) x));
}
static void *_p_pymoose__GammaRngTo_p_pymoose__RandGenerator(void *x) {
    return (void *)((pymoose::RandGenerator *)  ((pymoose::GammaRng *) x));
}
static void *_p_pymoose__TableTo_p_pymoose__InterpolationTable(void *x) {
    return (void *)((pymoose::InterpolationTable *)  ((pymoose::Table *) x));
}
static void *_p_GammaTo_p_Probability(void *x) {
    return (void *)((Probability *)  ((Gamma *) x));
}
static void *_p_NormalTo_p_Probability(void *x) {
    return (void *)((Probability *)  ((Normal *) x));
}
static void *_p_BinomialTo_p_Probability(void *x) {
    return (void *)((Probability *)  ((Binomial *) x));
}
static void *_p_PoissonTo_p_Probability(void *x) {
    return (void *)((Probability *)  ((Poisson *) x));
}
static void *_p_ExponentialTo_p_Probability(void *x) {
    return (void *)((Probability *)  ((Exponential *) x));
}
static void *_p_NidTo_p_Id(void *x) {
    return (void *)((Id *)  ((Nid *) x));
}
static void *_p_pymoose__CellTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Cell *) x));
}
static void *_p_pymoose__RectPanelTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::Panel *) ((pymoose::RectPanel *) x));
}
static void *_p_pymoose__NeuroScanTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::NeuroScan *) x));
}
static void *_p_pymoose__StoichTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Stoich *) x));
}
static void *_p_pymoose__HSolveTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::HSolve *) x));
}
static void *_p_pymoose__ExponentialRngTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::RandGenerator *) ((pymoose::ExponentialRng *) x));
}
static void *_p_pymoose__PulseGenTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::PulseGen *) x));
}
static void *_p_pymoose__InterpolationTableTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::InterpolationTable *) x));
}
static void *_p_pymoose__UniformRngTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::RandGenerator *) ((pymoose::UniformRng *) x));
}
static void *_p_pymoose__AscFileTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::AscFile *) x));
}
static void *_p_pymoose__DiskPanelTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::Panel *) ((pymoose::DiskPanel *) x));
}
static void *_p_pymoose__KintegratorTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Kintegrator *) x));
}
static void *_p_pymoose__HemispherePanelTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::Panel *) ((pymoose::HemispherePanel *) x));
}
static void *_p_pymoose__SpherePanelTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::Panel *) ((pymoose::SpherePanel *) x));
}
static void *_p_pymoose__HHGateTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::HHGate *) x));
}
static void *_p_pymoose__TauPumpTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::TauPump *) x));
}
static void *_p_pymoose__TimeTableTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::TimeTable *) x));
}
static void *_p_pymoose__MoleculeTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Molecule *) x));
}
static void *_p_pymoose__NeutralTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Neutral *) x));
}
static void *_p_pymoose__BinSynchanTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::BinSynchan *) x));
}
static void *_p_pymoose__StochSynchanTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::StochSynchan *) x));
}
static void *_p_pymoose__NormalRngTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::RandGenerator *) ((pymoose::NormalRng *) x));
}
static void *_p_pymoose__SurfaceTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Surface *) x));
}
static void *_p_pymoose__ClassTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Class *) x));
}
static void *_p_pymoose__GeometryTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Geometry *) x));
}
static void *_p_pymoose__SynChanTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::SynChan *) x));
}
static void *_p_pymoose__EnzymeTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Enzyme *) x));
}
static void *_p_pymoose__TriPanelTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::Panel *) ((pymoose::TriPanel *) x));
}
static void *_p_pymoose__GssaStoichTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::GssaStoich *) x));
}
static void *_p_pymoose__RandGeneratorTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::RandGenerator *) x));
}
static void *_p_pymoose__NernstTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Nernst *) x));
}
static void *_p_pymoose__CompartmentTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Compartment *) x));
}
static void *_p_pymoose__KineticHubTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::KineticHub *) x));
}
static void *_p_pymoose__DifShellTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::DifShell *) x));
}
static void *_p_pymoose__Mg_blockTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Mg_block *) x));
}
static void *_p_pymoose__CaConcTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::CaConc *) x));
}
static void *_p_pymoose__PanelTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Panel *) x));
}
static void *_p_pymoose__SpikeGenTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::SpikeGen *) x));
}
static void *_p_pymoose__ClockTickTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::ClockTick *) x));
}
static void *_p_pymoose__CylPanelTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::Panel *) ((pymoose::CylPanel *) x));
}
static void *_p_pymoose__SigNeurTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::SigNeur *) x));
}
static void *_p_pymoose__AdaptorTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Adaptor *) x));
}
static void *_p_pymoose__HHChannelTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::HHChannel *) x));
}
static void *_p_pymoose__BinomialRngTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::RandGenerator *) ((pymoose::BinomialRng *) x));
}
static void *_p_pymoose__GammaRngTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::RandGenerator *) ((pymoose::GammaRng *) x));
}
static void *_p_pymoose__ReactionTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::Reaction *) x));
}
static void *_p_pymoose__ClockJobTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::ClockJob *) x));
}
static void *_p_pymoose__RandomSpikeTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::RandomSpike *) x));
}
static void *_p_pymoose__TableTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::InterpolationTable *) ((pymoose::Table *) x));
}
static void *_p_pymoose__MathFuncTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::MathFunc *) x));
}
static void *_p_pymoose__PoissonRngTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *) (pymoose::RandGenerator *) ((pymoose::PoissonRng *) x));
}
static void *_p_pymoose__KineticManagerTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::KineticManager *) x));
}
static void *_p_pymoose__KinComptTo_p_pymoose__PyMooseBase(void *x) {
    return (void *)((pymoose::PyMooseBase *)  ((pymoose::KinCompt *) x));
}
static void *_p_pymoose__DiskPanelTo_p_pymoose__Panel(void *x) {
    return (void *)((pymoose::Panel *)  ((pymoose::DiskPanel *) x));
}
static void *_p_pymoose__CylPanelTo_p_pymoose__Panel(void *x) {
    return (void *)((pymoose::Panel *)  ((pymoose::CylPanel *) x));
}
static void *_p_pymoose__HemispherePanelTo_p_pymoose__Panel(void *x) {
    return (void *)((pymoose::Panel *)  ((pymoose::HemispherePanel *) x));
}
static void *_p_pymoose__SpherePanelTo_p_pymoose__Panel(void *x) {
    return (void *)((pymoose::Panel *)  ((pymoose::SpherePanel *) x));
}
static void *_p_pymoose__TriPanelTo_p_pymoose__Panel(void *x) {
    return (void *)((pymoose::Panel *)  ((pymoose::TriPanel *) x));
}
static void *_p_pymoose__RectPanelTo_p_pymoose__Panel(void *x) {
    return (void *)((pymoose::Panel *)  ((pymoose::RectPanel *) x));
}
static swig_type_info _swigt__p_Binomial = {"_p_Binomial", "Binomial *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Cinfo = {"_p_Cinfo", "Cinfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Conn = {"_p_Conn", "Conn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Element = {"_p_Element", "Element *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exponential = {"_p_Exponential", "Exponential *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Gamma = {"_p_Gamma", "Gamma *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Id = {"_p_Id", "::Id *|Id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t = {"_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t", "pymoose::BinSynchanDoubleArray *|InnerPyMooseIterable<pymoose::BinSynchan,unsigned int,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_int_t = {"_p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_int_t", "pymoose::BinSynchanIntArray *|InnerPyMooseIterable<pymoose::BinSynchan,unsigned int,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t = {"_p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t", "pymoose::StochSynchanDoubleArray *|InnerPyMooseIterable<pymoose::StochSynchan,unsigned int,double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Nid = {"_p_Nid", "Nid *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Normal = {"_p_Normal", "Normal *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Poisson = {"_p_Poisson", "Poisson *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Probability = {"_p_Probability", "Probability *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_m_Poisson__f___double = {"_p_m_Poisson__f___double", "double (Poisson::**)()|PoissonGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_PyObject = {"_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Adaptor = {"_p_pymoose__Adaptor", "pymoose::Adaptor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__AscFile = {"_p_pymoose__AscFile", "pymoose::AscFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__BinSynchan = {"_p_pymoose__BinSynchan", "pymoose::BinSynchan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__BinomialRng = {"_p_pymoose__BinomialRng", "pymoose::BinomialRng *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__CaConc = {"_p_pymoose__CaConc", "pymoose::CaConc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Cell = {"_p_pymoose__Cell", "pymoose::Cell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Class = {"_p_pymoose__Class", "pymoose::Class *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__ClockJob = {"_p_pymoose__ClockJob", "pymoose::ClockJob *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__ClockTick = {"_p_pymoose__ClockTick", "pymoose::ClockTick *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Compartment = {"_p_pymoose__Compartment", "pymoose::Compartment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__CylPanel = {"_p_pymoose__CylPanel", "pymoose::CylPanel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__DifShell = {"_p_pymoose__DifShell", "pymoose::DifShell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__DiskPanel = {"_p_pymoose__DiskPanel", "pymoose::DiskPanel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Enzyme = {"_p_pymoose__Enzyme", "pymoose::Enzyme *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__ExponentialRng = {"_p_pymoose__ExponentialRng", "pymoose::ExponentialRng *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__GammaRng = {"_p_pymoose__GammaRng", "pymoose::GammaRng *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Geometry = {"_p_pymoose__Geometry", "pymoose::Geometry *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__GssaStoich = {"_p_pymoose__GssaStoich", "pymoose::GssaStoich *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__HHChannel = {"_p_pymoose__HHChannel", "pymoose::HHChannel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__HHGate = {"_p_pymoose__HHGate", "pymoose::HHGate *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__HSolve = {"_p_pymoose__HSolve", "pymoose::HSolve *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__HemispherePanel = {"_p_pymoose__HemispherePanel", "pymoose::HemispherePanel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__InterpolationTable = {"_p_pymoose__InterpolationTable", "pymoose::InterpolationTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__KinCompt = {"_p_pymoose__KinCompt", "pymoose::KinCompt *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__KineticHub = {"_p_pymoose__KineticHub", "pymoose::KineticHub *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__KineticManager = {"_p_pymoose__KineticManager", "pymoose::KineticManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Kintegrator = {"_p_pymoose__Kintegrator", "pymoose::Kintegrator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__MathFunc = {"_p_pymoose__MathFunc", "pymoose::MathFunc *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Mg_block = {"_p_pymoose__Mg_block", "pymoose::Mg_block *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Molecule = {"_p_pymoose__Molecule", "pymoose::Molecule *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Nernst = {"_p_pymoose__Nernst", "pymoose::Nernst *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__NeuroScan = {"_p_pymoose__NeuroScan", "pymoose::NeuroScan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Neutral = {"_p_pymoose__Neutral", "pymoose::Neutral *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__NormalRng = {"_p_pymoose__NormalRng", "pymoose::NormalRng *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Panel = {"_p_pymoose__Panel", "pymoose::Panel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__PoissonRng = {"_p_pymoose__PoissonRng", "pymoose::PoissonRng *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__PulseGen = {"_p_pymoose__PulseGen", "pymoose::PulseGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__PyMooseBase = {"_p_pymoose__PyMooseBase", "pymoose::PyMooseBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__PyMooseContext = {"_p_pymoose__PyMooseContext", "pymoose::PyMooseContext *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__RandGenerator = {"_p_pymoose__RandGenerator", "pymoose::RandGenerator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__RandomSpike = {"_p_pymoose__RandomSpike", "pymoose::RandomSpike *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Reaction = {"_p_pymoose__Reaction", "pymoose::Reaction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__RectPanel = {"_p_pymoose__RectPanel", "pymoose::RectPanel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__SigNeur = {"_p_pymoose__SigNeur", "pymoose::SigNeur *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__SpherePanel = {"_p_pymoose__SpherePanel", "pymoose::SpherePanel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__SpikeGen = {"_p_pymoose__SpikeGen", "pymoose::SpikeGen *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__StochSynchan = {"_p_pymoose__StochSynchan", "pymoose::StochSynchan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Stoich = {"_p_pymoose__Stoich", "pymoose::Stoich *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Surface = {"_p_pymoose__Surface", "pymoose::Surface *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__SynChan = {"_p_pymoose__SynChan", "pymoose::SynChan *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__Table = {"_p_pymoose__Table", "pymoose::Table *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__TableIterator = {"_p_pymoose__TableIterator", "pymoose::TableIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__TauPump = {"_p_pymoose__TauPump", "pymoose::TauPump *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__TimeTable = {"_p_pymoose__TimeTable", "pymoose::TimeTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__TriPanel = {"_p_pymoose__TriPanel", "pymoose::TriPanel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_pymoose__UniformRng = {"_p_pymoose__UniformRng", "pymoose::UniformRng *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__invalid_argument = {"_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTId_std__allocatorTId_t_t = {"_p_std__vectorTId_std__allocatorTId_t_t", "std::vector<Id,std::allocator<Id > > *|std::vector<Id > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTId_std__allocatorTId_t_t__allocator_type = {"_p_std__vectorTId_std__allocatorTId_t_t__allocator_type", "std::vector<Id >::allocator_type *|std::allocator<Id > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTId_std__allocatorTId_t_t__value_type = {"_p_std__vectorTId_std__allocatorTId_t_t__value_type", "std::vector<Id >::value_type *|Id *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t = {"_p_std__vectorTdouble_std__allocatorTdouble_t_t", "std::vector<double,std::allocator<double > > *|std::vector<double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type = {"_p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type", "std::vector<double >::allocator_type *|std::allocator<double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTint_std__allocatorTint_t_t = {"_p_std__vectorTint_std__allocatorTint_t_t", "std::vector<int,std::allocator<int > > *|std::vector<int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTint_std__allocatorTint_t_t__allocator_type = {"_p_std__vectorTint_std__allocatorTint_t_t__allocator_type", "std::vector<int >::allocator_type *|std::allocator<int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t = {"_p_std__vectorTstd__string_std__allocatorTstd__string_t_t", "std::vector<std::string > *|std::vector<std::string,std::allocator<std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type = {"_p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type", "std::vector<std::string >::allocator_type *|std::allocator<std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t = {"_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t", "std::vector<unsigned int,std::allocator<unsigned int > > *|std::vector<unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t__allocator_type = {"_p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t__allocator_type", "std::vector<unsigned int >::allocator_type *|std::allocator<unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_swig__PySwigIterator = {"_p_swig__PySwigIterator", "swig::PySwigIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Binomial,
  &_swigt__p_Cinfo,
  &_swigt__p_Conn,
  &_swigt__p_Element,
  &_swigt__p_Exponential,
  &_swigt__p_Gamma,
  &_swigt__p_Id,
  &_swigt__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t,
  &_swigt__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_int_t,
  &_swigt__p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t,
  &_swigt__p_Nid,
  &_swigt__p_Normal,
  &_swigt__p_Poisson,
  &_swigt__p_Probability,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_m_Poisson__f___double,
  &_swigt__p_p_PyObject,
  &_swigt__p_pymoose__Adaptor,
  &_swigt__p_pymoose__AscFile,
  &_swigt__p_pymoose__BinSynchan,
  &_swigt__p_pymoose__BinomialRng,
  &_swigt__p_pymoose__CaConc,
  &_swigt__p_pymoose__Cell,
  &_swigt__p_pymoose__Class,
  &_swigt__p_pymoose__ClockJob,
  &_swigt__p_pymoose__ClockTick,
  &_swigt__p_pymoose__Compartment,
  &_swigt__p_pymoose__CylPanel,
  &_swigt__p_pymoose__DifShell,
  &_swigt__p_pymoose__DiskPanel,
  &_swigt__p_pymoose__Enzyme,
  &_swigt__p_pymoose__ExponentialRng,
  &_swigt__p_pymoose__GammaRng,
  &_swigt__p_pymoose__Geometry,
  &_swigt__p_pymoose__GssaStoich,
  &_swigt__p_pymoose__HHChannel,
  &_swigt__p_pymoose__HHGate,
  &_swigt__p_pymoose__HSolve,
  &_swigt__p_pymoose__HemispherePanel,
  &_swigt__p_pymoose__InterpolationTable,
  &_swigt__p_pymoose__KinCompt,
  &_swigt__p_pymoose__KineticHub,
  &_swigt__p_pymoose__KineticManager,
  &_swigt__p_pymoose__Kintegrator,
  &_swigt__p_pymoose__MathFunc,
  &_swigt__p_pymoose__Mg_block,
  &_swigt__p_pymoose__Molecule,
  &_swigt__p_pymoose__Nernst,
  &_swigt__p_pymoose__NeuroScan,
  &_swigt__p_pymoose__Neutral,
  &_swigt__p_pymoose__NormalRng,
  &_swigt__p_pymoose__Panel,
  &_swigt__p_pymoose__PoissonRng,
  &_swigt__p_pymoose__PulseGen,
  &_swigt__p_pymoose__PyMooseBase,
  &_swigt__p_pymoose__PyMooseContext,
  &_swigt__p_pymoose__RandGenerator,
  &_swigt__p_pymoose__RandomSpike,
  &_swigt__p_pymoose__Reaction,
  &_swigt__p_pymoose__RectPanel,
  &_swigt__p_pymoose__SigNeur,
  &_swigt__p_pymoose__SpherePanel,
  &_swigt__p_pymoose__SpikeGen,
  &_swigt__p_pymoose__StochSynchan,
  &_swigt__p_pymoose__Stoich,
  &_swigt__p_pymoose__Surface,
  &_swigt__p_pymoose__SynChan,
  &_swigt__p_pymoose__Table,
  &_swigt__p_pymoose__TableIterator,
  &_swigt__p_pymoose__TauPump,
  &_swigt__p_pymoose__TimeTable,
  &_swigt__p_pymoose__TriPanel,
  &_swigt__p_pymoose__UniformRng,
  &_swigt__p_size_type,
  &_swigt__p_std__invalid_argument,
  &_swigt__p_std__vectorTId_std__allocatorTId_t_t,
  &_swigt__p_std__vectorTId_std__allocatorTId_t_t__allocator_type,
  &_swigt__p_std__vectorTId_std__allocatorTId_t_t__value_type,
  &_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t,
  &_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type,
  &_swigt__p_std__vectorTint_std__allocatorTint_t_t,
  &_swigt__p_std__vectorTint_std__allocatorTint_t_t__allocator_type,
  &_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t,
  &_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type,
  &_swigt__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t,
  &_swigt__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t__allocator_type,
  &_swigt__p_swig__PySwigIterator,
  &_swigt__p_value_type,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_Binomial[] = {  {&_swigt__p_Binomial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Cinfo[] = {  {&_swigt__p_Cinfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Conn[] = {  {&_swigt__p_Conn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Element[] = {  {&_swigt__p_Element, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exponential[] = {  {&_swigt__p_Exponential, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Gamma[] = {  {&_swigt__p_Gamma, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Id[] = {  {&_swigt__p_Nid, _p_NidTo_p_Id, 0, 0},  {&_swigt__p_Id, 0, 0, 0},  {&_swigt__p_std__vectorTId_std__allocatorTId_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t[] = {  {&_swigt__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_int_t[] = {  {&_swigt__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t[] = {  {&_swigt__p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Nid[] = {  {&_swigt__p_Nid, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Normal[] = {  {&_swigt__p_Normal, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Poisson[] = {  {&_swigt__p_Poisson, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Probability[] = {  {&_swigt__p_Probability, 0, 0, 0},  {&_swigt__p_Gamma, _p_GammaTo_p_Probability, 0, 0},  {&_swigt__p_Normal, _p_NormalTo_p_Probability, 0, 0},  {&_swigt__p_Binomial, _p_BinomialTo_p_Probability, 0, 0},  {&_swigt__p_Poisson, _p_PoissonTo_p_Probability, 0, 0},  {&_swigt__p_Exponential, _p_ExponentialTo_p_Probability, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_m_Poisson__f___double[] = {  {&_swigt__p_m_Poisson__f___double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_PyObject[] = {  {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Adaptor[] = {  {&_swigt__p_pymoose__Adaptor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__AscFile[] = {  {&_swigt__p_pymoose__AscFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__BinSynchan[] = {  {&_swigt__p_pymoose__BinSynchan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__BinomialRng[] = {  {&_swigt__p_pymoose__BinomialRng, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__CaConc[] = {  {&_swigt__p_pymoose__CaConc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Cell[] = {  {&_swigt__p_pymoose__Cell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Class[] = {  {&_swigt__p_pymoose__Class, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__ClockJob[] = {  {&_swigt__p_pymoose__ClockJob, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__ClockTick[] = {  {&_swigt__p_pymoose__ClockTick, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Compartment[] = {  {&_swigt__p_pymoose__Compartment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__CylPanel[] = {  {&_swigt__p_pymoose__CylPanel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__DifShell[] = {  {&_swigt__p_pymoose__DifShell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__DiskPanel[] = {  {&_swigt__p_pymoose__DiskPanel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Enzyme[] = {  {&_swigt__p_pymoose__Enzyme, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__ExponentialRng[] = {  {&_swigt__p_pymoose__ExponentialRng, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__GammaRng[] = {  {&_swigt__p_pymoose__GammaRng, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Geometry[] = {  {&_swigt__p_pymoose__Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__GssaStoich[] = {  {&_swigt__p_pymoose__GssaStoich, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__HHChannel[] = {  {&_swigt__p_pymoose__HHChannel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__HHGate[] = {  {&_swigt__p_pymoose__HHGate, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__HSolve[] = {  {&_swigt__p_pymoose__HSolve, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__HemispherePanel[] = {  {&_swigt__p_pymoose__HemispherePanel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__InterpolationTable[] = {  {&_swigt__p_pymoose__InterpolationTable, 0, 0, 0},  {&_swigt__p_pymoose__Table, _p_pymoose__TableTo_p_pymoose__InterpolationTable, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__KinCompt[] = {  {&_swigt__p_pymoose__KinCompt, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__KineticHub[] = {  {&_swigt__p_pymoose__KineticHub, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__KineticManager[] = {  {&_swigt__p_pymoose__KineticManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Kintegrator[] = {  {&_swigt__p_pymoose__Kintegrator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__MathFunc[] = {  {&_swigt__p_pymoose__MathFunc, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Mg_block[] = {  {&_swigt__p_pymoose__Mg_block, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Molecule[] = {  {&_swigt__p_pymoose__Molecule, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Nernst[] = {  {&_swigt__p_pymoose__Nernst, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__NeuroScan[] = {  {&_swigt__p_pymoose__NeuroScan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Neutral[] = {  {&_swigt__p_pymoose__Neutral, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__NormalRng[] = {  {&_swigt__p_pymoose__NormalRng, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Panel[] = {  {&_swigt__p_pymoose__DiskPanel, _p_pymoose__DiskPanelTo_p_pymoose__Panel, 0, 0},  {&_swigt__p_pymoose__CylPanel, _p_pymoose__CylPanelTo_p_pymoose__Panel, 0, 0},  {&_swigt__p_pymoose__HemispherePanel, _p_pymoose__HemispherePanelTo_p_pymoose__Panel, 0, 0},  {&_swigt__p_pymoose__SpherePanel, _p_pymoose__SpherePanelTo_p_pymoose__Panel, 0, 0},  {&_swigt__p_pymoose__Panel, 0, 0, 0},  {&_swigt__p_pymoose__TriPanel, _p_pymoose__TriPanelTo_p_pymoose__Panel, 0, 0},  {&_swigt__p_pymoose__RectPanel, _p_pymoose__RectPanelTo_p_pymoose__Panel, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__PoissonRng[] = {  {&_swigt__p_pymoose__PoissonRng, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__PulseGen[] = {  {&_swigt__p_pymoose__PulseGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__PyMooseBase[] = {  {&_swigt__p_pymoose__Table, _p_pymoose__TableTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__RectPanel, _p_pymoose__RectPanelTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__NeuroScan, _p_pymoose__NeuroScanTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__PyMooseBase, 0, 0, 0},  {&_swigt__p_pymoose__ExponentialRng, _p_pymoose__ExponentialRngTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__PulseGen, _p_pymoose__PulseGenTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__InterpolationTable, _p_pymoose__InterpolationTableTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__UniformRng, _p_pymoose__UniformRngTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__AscFile, _p_pymoose__AscFileTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__DiskPanel, _p_pymoose__DiskPanelTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Kintegrator, _p_pymoose__KintegratorTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__SpherePanel, _p_pymoose__SpherePanelTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__HemispherePanel, _p_pymoose__HemispherePanelTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__TauPump, _p_pymoose__TauPumpTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__TimeTable, _p_pymoose__TimeTableTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Molecule, _p_pymoose__MoleculeTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Neutral, _p_pymoose__NeutralTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__BinSynchan, _p_pymoose__BinSynchanTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__StochSynchan, _p_pymoose__StochSynchanTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__NormalRng, _p_pymoose__NormalRngTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Surface, _p_pymoose__SurfaceTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Geometry, _p_pymoose__GeometryTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__TriPanel, _p_pymoose__TriPanelTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__SynChan, _p_pymoose__SynChanTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Cell, _p_pymoose__CellTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Stoich, _p_pymoose__StoichTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__GssaStoich, _p_pymoose__GssaStoichTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__HSolve, _p_pymoose__HSolveTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__RandGenerator, _p_pymoose__RandGeneratorTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Compartment, _p_pymoose__CompartmentTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Class, _p_pymoose__ClassTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__KineticHub, _p_pymoose__KineticHubTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__DifShell, _p_pymoose__DifShellTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Mg_block, _p_pymoose__Mg_blockTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__HHGate, _p_pymoose__HHGateTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__SpikeGen, _p_pymoose__SpikeGenTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Enzyme, _p_pymoose__EnzymeTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Panel, _p_pymoose__PanelTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__CylPanel, _p_pymoose__CylPanelTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Nernst, _p_pymoose__NernstTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__ClockTick, _p_pymoose__ClockTickTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__SigNeur, _p_pymoose__SigNeurTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Adaptor, _p_pymoose__AdaptorTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__HHChannel, _p_pymoose__HHChannelTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__BinomialRng, _p_pymoose__BinomialRngTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__GammaRng, _p_pymoose__GammaRngTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__Reaction, _p_pymoose__ReactionTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__ClockJob, _p_pymoose__ClockJobTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__CaConc, _p_pymoose__CaConcTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__RandomSpike, _p_pymoose__RandomSpikeTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__MathFunc, _p_pymoose__MathFuncTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__PoissonRng, _p_pymoose__PoissonRngTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__KineticManager, _p_pymoose__KineticManagerTo_p_pymoose__PyMooseBase, 0, 0},  {&_swigt__p_pymoose__KinCompt, _p_pymoose__KinComptTo_p_pymoose__PyMooseBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__PyMooseContext[] = {  {&_swigt__p_pymoose__PyMooseContext, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__RandGenerator[] = {  {&_swigt__p_pymoose__UniformRng, _p_pymoose__UniformRngTo_p_pymoose__RandGenerator, 0, 0},  {&_swigt__p_pymoose__RandGenerator, 0, 0, 0},  {&_swigt__p_pymoose__BinomialRng, _p_pymoose__BinomialRngTo_p_pymoose__RandGenerator, 0, 0},  {&_swigt__p_pymoose__ExponentialRng, _p_pymoose__ExponentialRngTo_p_pymoose__RandGenerator, 0, 0},  {&_swigt__p_pymoose__PoissonRng, _p_pymoose__PoissonRngTo_p_pymoose__RandGenerator, 0, 0},  {&_swigt__p_pymoose__NormalRng, _p_pymoose__NormalRngTo_p_pymoose__RandGenerator, 0, 0},  {&_swigt__p_pymoose__GammaRng, _p_pymoose__GammaRngTo_p_pymoose__RandGenerator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__RandomSpike[] = {  {&_swigt__p_pymoose__RandomSpike, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Reaction[] = {  {&_swigt__p_pymoose__Reaction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__RectPanel[] = {  {&_swigt__p_pymoose__RectPanel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__SigNeur[] = {  {&_swigt__p_pymoose__SigNeur, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__SpherePanel[] = {  {&_swigt__p_pymoose__SpherePanel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__SpikeGen[] = {  {&_swigt__p_pymoose__SpikeGen, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__StochSynchan[] = {  {&_swigt__p_pymoose__StochSynchan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Stoich[] = {  {&_swigt__p_pymoose__Stoich, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Surface[] = {  {&_swigt__p_pymoose__Surface, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__SynChan[] = {  {&_swigt__p_pymoose__SynChan, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__Table[] = {  {&_swigt__p_pymoose__Table, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__TableIterator[] = {  {&_swigt__p_pymoose__TableIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__TauPump[] = {  {&_swigt__p_pymoose__TauPump, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__TimeTable[] = {  {&_swigt__p_pymoose__TimeTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__TriPanel[] = {  {&_swigt__p_pymoose__TriPanel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_pymoose__UniformRng[] = {  {&_swigt__p_pymoose__UniformRng, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__invalid_argument[] = {  {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTId_std__allocatorTId_t_t[] = {  {&_swigt__p_std__vectorTId_std__allocatorTId_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTId_std__allocatorTId_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTId_std__allocatorTId_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTId_std__allocatorTId_t_t__value_type[] = {  {&_swigt__p_Nid, 0, 0, 0},  {&_swigt__p_Id, 0, 0, 0},  {&_swigt__p_std__vectorTId_std__allocatorTId_t_t__value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t[] = {  {&_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint_std__allocatorTint_t_t[] = {  {&_swigt__p_std__vectorTint_std__allocatorTint_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTint_std__allocatorTint_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTint_std__allocatorTint_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t[] = {  {&_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t[] = {  {&_swigt__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t__allocator_type[] = {  {&_swigt__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t__allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_swig__PySwigIterator[] = {  {&_swigt__p_swig__PySwigIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Binomial,
  _swigc__p_Cinfo,
  _swigc__p_Conn,
  _swigc__p_Element,
  _swigc__p_Exponential,
  _swigc__p_Gamma,
  _swigc__p_Id,
  _swigc__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_double_t,
  _swigc__p_InnerPyMooseIterableTpymoose__BinSynchan_unsigned_int_int_t,
  _swigc__p_InnerPyMooseIterableTpymoose__StochSynchan_unsigned_int_double_t,
  _swigc__p_Nid,
  _swigc__p_Normal,
  _swigc__p_Poisson,
  _swigc__p_Probability,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_m_Poisson__f___double,
  _swigc__p_p_PyObject,
  _swigc__p_pymoose__Adaptor,
  _swigc__p_pymoose__AscFile,
  _swigc__p_pymoose__BinSynchan,
  _swigc__p_pymoose__BinomialRng,
  _swigc__p_pymoose__CaConc,
  _swigc__p_pymoose__Cell,
  _swigc__p_pymoose__Class,
  _swigc__p_pymoose__ClockJob,
  _swigc__p_pymoose__ClockTick,
  _swigc__p_pymoose__Compartment,
  _swigc__p_pymoose__CylPanel,
  _swigc__p_pymoose__DifShell,
  _swigc__p_pymoose__DiskPanel,
  _swigc__p_pymoose__Enzyme,
  _swigc__p_pymoose__ExponentialRng,
  _swigc__p_pymoose__GammaRng,
  _swigc__p_pymoose__Geometry,
  _swigc__p_pymoose__GssaStoich,
  _swigc__p_pymoose__HHChannel,
  _swigc__p_pymoose__HHGate,
  _swigc__p_pymoose__HSolve,
  _swigc__p_pymoose__HemispherePanel,
  _swigc__p_pymoose__InterpolationTable,
  _swigc__p_pymoose__KinCompt,
  _swigc__p_pymoose__KineticHub,
  _swigc__p_pymoose__KineticManager,
  _swigc__p_pymoose__Kintegrator,
  _swigc__p_pymoose__MathFunc,
  _swigc__p_pymoose__Mg_block,
  _swigc__p_pymoose__Molecule,
  _swigc__p_pymoose__Nernst,
  _swigc__p_pymoose__NeuroScan,
  _swigc__p_pymoose__Neutral,
  _swigc__p_pymoose__NormalRng,
  _swigc__p_pymoose__Panel,
  _swigc__p_pymoose__PoissonRng,
  _swigc__p_pymoose__PulseGen,
  _swigc__p_pymoose__PyMooseBase,
  _swigc__p_pymoose__PyMooseContext,
  _swigc__p_pymoose__RandGenerator,
  _swigc__p_pymoose__RandomSpike,
  _swigc__p_pymoose__Reaction,
  _swigc__p_pymoose__RectPanel,
  _swigc__p_pymoose__SigNeur,
  _swigc__p_pymoose__SpherePanel,
  _swigc__p_pymoose__SpikeGen,
  _swigc__p_pymoose__StochSynchan,
  _swigc__p_pymoose__Stoich,
  _swigc__p_pymoose__Surface,
  _swigc__p_pymoose__SynChan,
  _swigc__p_pymoose__Table,
  _swigc__p_pymoose__TableIterator,
  _swigc__p_pymoose__TauPump,
  _swigc__p_pymoose__TimeTable,
  _swigc__p_pymoose__TriPanel,
  _swigc__p_pymoose__UniformRng,
  _swigc__p_size_type,
  _swigc__p_std__invalid_argument,
  _swigc__p_std__vectorTId_std__allocatorTId_t_t,
  _swigc__p_std__vectorTId_std__allocatorTId_t_t__allocator_type,
  _swigc__p_std__vectorTId_std__allocatorTId_t_t__value_type,
  _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t,
  _swigc__p_std__vectorTdouble_std__allocatorTdouble_t_t__allocator_type,
  _swigc__p_std__vectorTint_std__allocatorTint_t_t,
  _swigc__p_std__vectorTint_std__allocatorTint_t_t__allocator_type,
  _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t,
  _swigc__p_std__vectorTstd__string_std__allocatorTstd__string_t_t__allocator_type,
  _swigc__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t,
  _swigc__p_std__vectorTunsigned_int_std__allocatorTunsigned_int_t_t__allocator_type,
  _swigc__p_swig__PySwigIterator,
  _swigc__p_value_type,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
    return PyString_FromString("<Swig global variables>");
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
    PyObject *str = PyString_FromString("(");
    swig_globalvar  *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", PyString_AsString(str));
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;  
    if (!type_init) {
      const PyTypeObject tmp
      = {
        PyObject_HEAD_INIT(NULL)
        0,                                  /* Number of items in variable part (ob_size) */
        (char *)"swigvarlink",              /* Type name (tp_name) */
        sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
        0,                                  /* Itemsize (tp_itemsize) */
        (destructor) swig_varlink_dealloc,   /* Deallocator (tp_dealloc) */ 
        (printfunc) swig_varlink_print,     /* Print (tp_print) */
        (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
        (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc)swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      varlink_type.ob_type = &PyType_Type;
      type_init = 1;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          size_t shift = (ci->ptype) - types;
          swig_type_info *ty = types_initial[shift];
          size_t ldoc = (c - methods[i].ml_doc);
          size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
          char *ndoc = (char*)malloc(ldoc + lptr + 10);
          if (ndoc) {
            char *buff = ndoc;
            void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
            if (ptr) {
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
  PyObject *m, *d;
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
  d = PyModule_GetDict(m);
  
  SWIG_InitializeModule(0);
  SWIG_InstallConstants(d,swig_const_table);
  
  
  
#ifdef USE_NUMPY
  import_array();
#endif
  
  PyDict_SetItemString(d,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"Id_AnyIndex",Swig_var_Id_AnyIndex_get, Swig_var_Id_AnyIndex_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Id_BadIndex",Swig_var_Id_BadIndex_get, Swig_var_Id_BadIndex_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Id_GlobalNode",Swig_var_Id_GlobalNode_get, Swig_var_Id_GlobalNode_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PyMooseContext_separator",Swig_var_PyMooseContext_separator_get, Swig_var_PyMooseContext_separator_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Neutral_className",Swig_var_Neutral_className_get, Swig_var_Neutral_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Class_className",Swig_var_Class_className_get, Swig_var_Class_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Cell_className",Swig_var_Cell_className_get, Swig_var_Cell_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClockTick_className",Swig_var_ClockTick_className_get, Swig_var_ClockTick_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ClockJob_className",Swig_var_ClockJob_className_get, Swig_var_ClockJob_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"InterpolationTable_className",Swig_var_InterpolationTable_className_get, Swig_var_InterpolationTable_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Table_className",Swig_var_Table_className_get, Swig_var_Table_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SynChan_className",Swig_var_SynChan_className_get, Swig_var_SynChan_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BinSynchan_className",Swig_var_BinSynchan_className_get, Swig_var_BinSynchan_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"StochSynchan_className",Swig_var_StochSynchan_className_get, Swig_var_StochSynchan_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SpikeGen_className",Swig_var_SpikeGen_className_get, Swig_var_SpikeGen_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RandomSpike_className",Swig_var_RandomSpike_className_get, Swig_var_RandomSpike_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PulseGen_className",Swig_var_PulseGen_className_get, Swig_var_PulseGen_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Nernst_className",Swig_var_Nernst_className_get, Swig_var_Nernst_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CaConc_className",Swig_var_CaConc_className_get, Swig_var_CaConc_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HHGate_className",Swig_var_HHGate_className_get, Swig_var_HHGate_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HHChannel_className",Swig_var_HHChannel_className_get, Swig_var_HHChannel_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Mg_block_className",Swig_var_Mg_block_className_get, Swig_var_Mg_block_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Compartment_className",Swig_var_Compartment_className_get, Swig_var_Compartment_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NeuroScan_className",Swig_var_NeuroScan_className_get, Swig_var_NeuroScan_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HSolve_className",Swig_var_HSolve_className_get, Swig_var_HSolve_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Kintegrator_className",Swig_var_Kintegrator_className_get, Swig_var_Kintegrator_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"MathFunc_className",Swig_var_MathFunc_className_get, Swig_var_MathFunc_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Stoich_className",Swig_var_Stoich_className_get, Swig_var_Stoich_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"KineticHub_className",Swig_var_KineticHub_className_get, Swig_var_KineticHub_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Enzyme_className",Swig_var_Enzyme_className_get, Swig_var_Enzyme_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Reaction_className",Swig_var_Reaction_className_get, Swig_var_Reaction_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Molecule_className",Swig_var_Molecule_className_get, Swig_var_Molecule_className_set);
  SWIG_Python_SetConstant(d, "ALIAS",SWIG_From_int(static_cast< int >(ALIAS)));
  SWIG_Python_SetConstant(d, "BOX_MUELLER",SWIG_From_int(static_cast< int >(BOX_MUELLER)));
  SWIG_Python_SetConstant(d, "ZIGGURAT",SWIG_From_int(static_cast< int >(ZIGGURAT)));
  SWIG_Python_SetConstant(d, "LOGARITHMIC",SWIG_From_int(static_cast< int >(LOGARITHMIC)));
  SWIG_Python_SetConstant(d, "RANDOM_MINIMIZATION",SWIG_From_int(static_cast< int >(RANDOM_MINIMIZATION)));
  SWIG_addvarlink(SWIG_globals(),(char*)"RandGenerator_className",Swig_var_RandGenerator_className_get, Swig_var_RandGenerator_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"UniformRng_className",Swig_var_UniformRng_className_get, Swig_var_UniformRng_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GammaRng_className",Swig_var_GammaRng_className_get, Swig_var_GammaRng_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"ExponentialRng_className",Swig_var_ExponentialRng_className_get, Swig_var_ExponentialRng_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"BinomialRng_className",Swig_var_BinomialRng_className_get, Swig_var_BinomialRng_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"PoissonRng_className",Swig_var_PoissonRng_className_get, Swig_var_PoissonRng_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"NormalRng_className",Swig_var_NormalRng_className_get, Swig_var_NormalRng_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"KineticManager_className",Swig_var_KineticManager_className_get, Swig_var_KineticManager_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"KinCompt_className",Swig_var_KinCompt_className_get, Swig_var_KinCompt_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Panel_className",Swig_var_Panel_className_get, Swig_var_Panel_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DiskPanel_className",Swig_var_DiskPanel_className_get, Swig_var_DiskPanel_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"CylPanel_className",Swig_var_CylPanel_className_get, Swig_var_CylPanel_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"HemispherePanel_className",Swig_var_HemispherePanel_className_get, Swig_var_HemispherePanel_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SpherePanel_className",Swig_var_SpherePanel_className_get, Swig_var_SpherePanel_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TriPanel_className",Swig_var_TriPanel_className_get, Swig_var_TriPanel_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"RectPanel_className",Swig_var_RectPanel_className_get, Swig_var_RectPanel_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Surface_className",Swig_var_Surface_className_get, Swig_var_Surface_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Geometry_className",Swig_var_Geometry_className_get, Swig_var_Geometry_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"Adaptor_className",Swig_var_Adaptor_className_get, Swig_var_Adaptor_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"SigNeur_className",Swig_var_SigNeur_className_get, Swig_var_SigNeur_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"AscFile_className",Swig_var_AscFile_className_get, Swig_var_AscFile_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DifShell_className",Swig_var_DifShell_className_get, Swig_var_DifShell_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"GssaStoich_className",Swig_var_GssaStoich_className_get, Swig_var_GssaStoich_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TauPump_className",Swig_var_TauPump_className_get, Swig_var_TauPump_className_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"TimeTable_className",Swig_var_TimeTable_className_get, Swig_var_TimeTable_className_set);
  
  /* Initialize threading */
  SWIG_PYTHON_INITIALIZE_THREADS;
}

