#!/usr/bin/env python
import sys
from math import *

# The PYTHONPATH should contain the location of moose.py and _moose.so
# files.  Putting ".." with the assumption that moose.py and _moose.so
# has been generated in ${MOOSE_SOURCE_DIRECTORY}/pymoose/ (as default
# pymoose build does) and this file is located in
# ${MOOSE_SOURCE_DIRECTORY}/pymoose/examples
sys.path.append('../..')
try:
    from moose import *
except ImportError:
    print "ERROR: Could not import moose. Please add the directory containing moose.py in your PYTHONPATH"
    import sys
    sys.exit(1)

# moose
#  This is an almost perfect match to the old GENESIS squid model
#  output with default parameter values. It simulates, as the Squid
#  demo does, a stimulus of 0.1 uA starting at time 5 msec and 
#  lasting for 40 msec. There is a final 5 msec after the stimulus.
#  Most of this file is setting up the parameters and the HH tables.
#  Later I'll implement and extended version of the HHGate that knows
#  the funny X_alpha and other terms that the GENESIS version uses.

print '''
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% GENESIS squid model replica, with explicit filling-in of rate lookup tables   %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
'''


VMIN = -0.1
VMAX = 0.05
NDIVS = 150
v = VMIN
dv = ( VMAX - VMIN ) / NDIVS
SIMDT = 1e-5
PLOTDT = 1e-4
RUNTIME = 0.05
EREST = -0.07
VLEAK = EREST + 0.010613
VK = EREST -0.012
VNa = EREST + 0.115
RM = 424.4e3
RA = 7639.44e3
GLEAK = 0.3e-3
GK = 36e-3
GNa = 120e-3
CM = 0.007854e-6
INJECT = 0.1e-6

GK = 0.282743e-3
GNa = 0.94248e-3

def calc_Na_m_A( v ):
    if (  fabs ( EREST + 0.025 - v )  < 1e-6 ):
	v = v + 1e-6	
    return ( ( 0.1e6 * ( EREST + 0.025 - v ) ) / ( ( exp ( ( EREST + 0.025 - v )/ 0.01 ) ) - 1.0 ) )

def calc_Na_m_B( v ):
    return ( 4.0e3 * ( exp ( ( EREST - v ) / 0.018 ) ) )

def calc_Na_h_A( v ):
	return ( 70.0 * ( exp ( ( EREST - v ) / 0.020 )))

def calc_Na_h_B( v ):
	return ( 1.0e3 / ( ( exp ( ( 0.030 + EREST - v )/ 0.01 ) ) + 1.0 ) )

def calc_K_n_A( v ):
	if ( ( fabs ( 0.01 + EREST - v ) ) < 1e-6 ):
		v = v + 1e-6	
	return ( ( 1.0e4 * ( 0.01 + EREST - v ) ) / ( ( exp ( ( 0.01 + EREST - v )/ 0.01 ) ) - 1.0 ) )

def calc_K_n_B( v ):
	return ( 0.125e3 * ( exp ( (EREST - v ) / 0.08 ) ) )


squid = Compartment('/squid')
squid.Rm = RM
squid.Ra = RA
squid.Cm = CM
squid.Em = VLEAK

na_channel = HHChannel('Na', squid)
na_channel.Ek = VNa
na_channel.Gbar = GNa
na_channel.Xpower = 3
na_channel.Ypower = 1

k_channel = HHChannel('K', squid)
k_channel.Ek = VK
k_channel.Gbar = GK
k_channel.Xpower = 4

squid.connect('channel', na_channel, 'channel')
squid.connect('channel', k_channel, 'channel')
vm_table = Table('Vm')
vm_table.stepMode = 3
vm_table.connect('inputRequest', squid, 'Vm')
v = VMIN
na_XA = Table('/squid/Na/xGate/A')
na_XB = Table('/squid/Na/xGate/B')
na_YA = Table('/squid/Na/yGate/A')
na_YB = Table('/squid/Na/yGate/B')
k_XA = Table('/squid/K/xGate/A')
k_XB = Table('/squid/K/xGate/B')

na_XA.xmin = VMIN
na_XA.xmax = VMAX
na_XA.xdivs = NDIVS

na_XB.xmin = VMIN
na_XB.xmax = VMAX
na_XB.xdivs = NDIVS

na_YA.xmin = VMIN
na_YA.xmax = VMAX
na_YA.xdivs = NDIVS

na_YB.xmin = VMIN
na_YB.xmax = VMAX
na_YB.xdivs = NDIVS

k_XA.xmin = VMIN
k_XA.xmax = VMAX
k_XA.xdivs = NDIVS

k_XB.xmin = VMIN
k_XB.xmax = VMAX
k_XB.xdivs = NDIVS

for i in range(NDIVS+1):
    na_XA[i] =  calc_Na_m_A ( v ) 
    na_XB[i] =  calc_Na_m_A ( v )  +  calc_Na_m_B ( v ) 
    na_YA[i] =  calc_Na_h_A ( v ) 
    na_YB[i] =  calc_Na_h_A ( v )  +  calc_Na_h_B ( v ) 
    k_XA[i] =  calc_K_n_A ( v ) 
    k_XB[i] =  calc_K_n_A ( v )  + calc_K_n_B ( v ) 
    v = v + dv

context = PyMooseBase.getContext()

context.setClock(0, SIMDT, 0)
context.setClock(1, PLOTDT, 0)


context.useClock(0, '/squid,/squid/##')
context.useClock(1, '/Vm')

# Crazy hack, but the squid demo does it and we need to match.
squid.initVm = EREST
context.reset()
squid.inject = 0
context.step( 0.005 )
squid.inject = INJECT
context.step( 0.040 )
squid.inject = 0
context.step( 0.005 )
vm_table.dumpFile('squid.plot')
print 'Output dumped in squid.plot'

if __name__ == "__main__":
# Compare output
    diff_list = []
    margin = 1e-3
    from csv import *
    out_reader = reader(open('squid.plot')) # Output generated by PyMOOSE program
    bm_reader = reader(open('squid.bm'))    # Data used as benchmark 
    ret = 0
    for out_row in out_reader:
        out_data = float(out_row[0])
        bm_row = bm_reader.next()
        if not bm_row:
            sys.exit( -1)            
        bm_data = float(bm_row[0])
        divisor = 0
        if fabs(bm_data) < fabs(out_data):
            if fabs(bm_data) > 0:
                divisor = fabs(bm_data)
            else:
                divisor = fabs(out_data)
        else:
            if fabs(out_data) > 0:
                divisor = fabs(out_data)
            else:
                divisor = fabs(bm_data)
        diff =  fabs(bm_data - out_data)
        error =diff/divisor
        diff_list.append(error)
        if error > margin:
            print 'squid: line number:', out_reader.line_num,'-> E = ', error
            ret = -1

    if ret == 0:
        print 'TEST: squid : OK'
    sys.exit(ret)
