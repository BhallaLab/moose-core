# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_moose', [dirname(__file__)])
        except ImportError:
            import _moose
            return _moose
        if fp is not None:
            try:
                _mod = imp.load_module('_moose', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _moose = swig_import_helper()
    del swig_import_helper
else:
    import _moose
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _moose.SwigPyIterator_value(self)
    def incr(self, n = 1): return _moose.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _moose.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _moose.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _moose.SwigPyIterator_equal(self, *args)
    def copy(self): return _moose.SwigPyIterator_copy(self)
    def next(self): return _moose.SwigPyIterator_next(self)
    def __next__(self): return _moose.SwigPyIterator___next__(self)
    def previous(self): return _moose.SwigPyIterator_previous(self)
    def advance(self, *args): return _moose.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _moose.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _moose.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _moose.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _moose.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _moose.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _moose.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _moose.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class uint_vector(object):
    """Proxy of C++ std::vector<(unsigned int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _moose.uint_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _moose.uint_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _moose.uint_vector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _moose.uint_vector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _moose.uint_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> uint_vector"""
        return _moose.uint_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, uint_vector v)"""
        return _moose.uint_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _moose.uint_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _moose.uint_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> uint_vector
        __getitem__(self, difference_type i) -> value_type
        """
        return _moose.uint_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, uint_vector v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _moose.uint_vector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _moose.uint_vector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _moose.uint_vector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _moose.uint_vector_size(self)

    def clear(self):
        """clear(self)"""
        return _moose.uint_vector_clear(self)

    def swap(self, *args):
        """swap(self, uint_vector v)"""
        return _moose.uint_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _moose.uint_vector_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _moose.uint_vector_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _moose.uint_vector_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _moose.uint_vector_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _moose.uint_vector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _moose.uint_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _moose.uint_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> uint_vector
        __init__(self, uint_vector arg0) -> uint_vector
        __init__(self, size_type size) -> uint_vector
        __init__(self, size_type size, value_type value) -> uint_vector
        """
        this = _moose.new_uint_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _moose.uint_vector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _moose.uint_vector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _moose.uint_vector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _moose.uint_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _moose.uint_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _moose.uint_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _moose.uint_vector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _moose.uint_vector_capacity(self)

    __swig_destroy__ = _moose.delete_uint_vector
    __del__ = lambda self : None;
uint_vector_swigregister = _moose.uint_vector_swigregister
uint_vector_swigregister(uint_vector)

class int_vector(object):
    """Proxy of C++ std::vector<(int)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _moose.int_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _moose.int_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _moose.int_vector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _moose.int_vector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _moose.int_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> int_vector"""
        return _moose.int_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, int_vector v)"""
        return _moose.int_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _moose.int_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _moose.int_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> int_vector
        __getitem__(self, difference_type i) -> value_type
        """
        return _moose.int_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, int_vector v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _moose.int_vector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _moose.int_vector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _moose.int_vector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _moose.int_vector_size(self)

    def clear(self):
        """clear(self)"""
        return _moose.int_vector_clear(self)

    def swap(self, *args):
        """swap(self, int_vector v)"""
        return _moose.int_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _moose.int_vector_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _moose.int_vector_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _moose.int_vector_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _moose.int_vector_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _moose.int_vector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _moose.int_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _moose.int_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> int_vector
        __init__(self, int_vector arg0) -> int_vector
        __init__(self, size_type size) -> int_vector
        __init__(self, size_type size, value_type value) -> int_vector
        """
        this = _moose.new_int_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _moose.int_vector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _moose.int_vector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _moose.int_vector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _moose.int_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _moose.int_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _moose.int_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _moose.int_vector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _moose.int_vector_capacity(self)

    __swig_destroy__ = _moose.delete_int_vector
    __del__ = lambda self : None;
int_vector_swigregister = _moose.int_vector_swigregister
int_vector_swigregister(int_vector)

class double_vector(object):
    """Proxy of C++ std::vector<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _moose.double_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _moose.double_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _moose.double_vector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _moose.double_vector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _moose.double_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> double_vector"""
        return _moose.double_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, double_vector v)"""
        return _moose.double_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _moose.double_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _moose.double_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> double_vector
        __getitem__(self, difference_type i) -> value_type
        """
        return _moose.double_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, double_vector v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _moose.double_vector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _moose.double_vector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _moose.double_vector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _moose.double_vector_size(self)

    def clear(self):
        """clear(self)"""
        return _moose.double_vector_clear(self)

    def swap(self, *args):
        """swap(self, double_vector v)"""
        return _moose.double_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _moose.double_vector_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _moose.double_vector_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _moose.double_vector_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _moose.double_vector_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _moose.double_vector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _moose.double_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _moose.double_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> double_vector
        __init__(self, double_vector arg0) -> double_vector
        __init__(self, size_type size) -> double_vector
        __init__(self, size_type size, value_type value) -> double_vector
        """
        this = _moose.new_double_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _moose.double_vector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _moose.double_vector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _moose.double_vector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _moose.double_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _moose.double_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _moose.double_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _moose.double_vector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _moose.double_vector_capacity(self)

    __swig_destroy__ = _moose.delete_double_vector
    __del__ = lambda self : None;
double_vector_swigregister = _moose.double_vector_swigregister
double_vector_swigregister(double_vector)

class string_vector(object):
    """Proxy of C++ std::vector<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _moose.string_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _moose.string_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _moose.string_vector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _moose.string_vector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _moose.string_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> string_vector"""
        return _moose.string_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, string_vector v)"""
        return _moose.string_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _moose.string_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _moose.string_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> string_vector
        __getitem__(self, difference_type i) -> value_type
        """
        return _moose.string_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, string_vector v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _moose.string_vector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _moose.string_vector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _moose.string_vector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _moose.string_vector_size(self)

    def clear(self):
        """clear(self)"""
        return _moose.string_vector_clear(self)

    def swap(self, *args):
        """swap(self, string_vector v)"""
        return _moose.string_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _moose.string_vector_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _moose.string_vector_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _moose.string_vector_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _moose.string_vector_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _moose.string_vector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _moose.string_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _moose.string_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> string_vector
        __init__(self, string_vector arg0) -> string_vector
        __init__(self, size_type size) -> string_vector
        __init__(self, size_type size, value_type value) -> string_vector
        """
        this = _moose.new_string_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _moose.string_vector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _moose.string_vector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _moose.string_vector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _moose.string_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _moose.string_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _moose.string_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _moose.string_vector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _moose.string_vector_capacity(self)

    __swig_destroy__ = _moose.delete_string_vector
    __del__ = lambda self : None;
string_vector_swigregister = _moose.string_vector_swigregister
string_vector_swigregister(string_vector)

class Id_vector(object):
    """Proxy of C++ std::vector<(Id)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _moose.Id_vector_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _moose.Id_vector___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _moose.Id_vector___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _moose.Id_vector___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _moose.Id_vector_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> Id_vector"""
        return _moose.Id_vector___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, Id_vector v)"""
        return _moose.Id_vector___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _moose.Id_vector___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _moose.Id_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> Id_vector
        __getitem__(self, difference_type i) -> value_type
        """
        return _moose.Id_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, Id_vector v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _moose.Id_vector___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _moose.Id_vector_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _moose.Id_vector_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _moose.Id_vector_size(self)

    def clear(self):
        """clear(self)"""
        return _moose.Id_vector_clear(self)

    def swap(self, *args):
        """swap(self, Id_vector v)"""
        return _moose.Id_vector_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _moose.Id_vector_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _moose.Id_vector_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _moose.Id_vector_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _moose.Id_vector_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _moose.Id_vector_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _moose.Id_vector_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _moose.Id_vector_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Id_vector
        __init__(self, Id_vector arg0) -> Id_vector
        __init__(self, size_type size) -> Id_vector
        __init__(self, size_type size, value_type value) -> Id_vector
        """
        this = _moose.new_Id_vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _moose.Id_vector_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _moose.Id_vector_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _moose.Id_vector_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _moose.Id_vector_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _moose.Id_vector_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _moose.Id_vector_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _moose.Id_vector_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _moose.Id_vector_capacity(self)

    __swig_destroy__ = _moose.delete_Id_vector
    __del__ = lambda self : None;
Id_vector_swigregister = _moose.Id_vector_swigregister
Id_vector_swigregister(Id_vector)

def listproperty(getter=None, setter=None, deller=None, len=None):
    """Adds property attributes that behave like lists or 
    dictionaries but use underlying function calls for getter and
    setter: For example, SynChan.weight, SynChan.delay
    """
    class iter(object):
        def __init__(self, obj):
	    self._obj = obj
            self.cur = 0
        def __iter__(self):
            return self
        def next(self):
	    if self.cur == len(self._obj):
               raise StopIteration()
            value = getter(self._obj, self.cur)
            self.cur += 1
            return value
    class _proxy(object):
        def __init__(self, obj):
            self._obj = obj
        def __getitem__(self, index):
            return getter(self._obj, index)
        # Note the order of index and value
        # This is reverse of MOOSE lookupSet.
        # Take care to to switch the order in C++
        # function implementing setter.
        def __setitem__(self, index, value):
            setter(self._obj, index, value)
        def __len__(self):
            return len(self._obj)
        def __iter__(self):
            return iter(self._obj)
    return property(_proxy)


def getParBuf(*args):
  """getParBuf(Conn c, unsigned int size) -> void"""
  return _moose.getParBuf(*args)

def getAsyncParBuf(*args):
  """getAsyncParBuf(Conn c, unsigned int size) -> void"""
  return _moose.getAsyncParBuf(*args)
SVN_REVISION = _moose.SVN_REVISION

def initNeutralCinfo():
  """initNeutralCinfo() -> Cinfo"""
  return _moose.initNeutralCinfo()

def separateString(*args):
  """separateString(string s, string_vector v, string separator)"""
  return _moose.separateString(*args)

def parseString(*args):
  """parseString(string s, string_vector v, char separators)"""
  return _moose.parseString(*args)
class Id(object):
    """Proxy of C++ Id class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def dumpState(*args):
        """dumpState(ostream stream)"""
        return _moose.Id_dumpState(*args)

    dumpState = staticmethod(dumpState)
    __swig_destroy__ = _moose.delete_Id
    __del__ = lambda self : None;
    def localId(*args):
        """
        localId(string path, string separator = "/") -> Id
        localId(string path) -> Id
        """
        return _moose.Id_localId(*args)

    localId = staticmethod(localId)
    def childNode(*args):
        """childNode(Id parent) -> unsigned int"""
        return _moose.Id_childNode(*args)

    childNode = staticmethod(childNode)
    def childId(*args):
        """childId(Id parent) -> Id"""
        return _moose.Id_childId(*args)

    childId = staticmethod(childId)
    def scratchId():
        """scratchId() -> Id"""
        return _moose.Id_scratchId()

    scratchId = staticmethod(scratchId)
    def newId():
        """newId() -> Id"""
        return _moose.Id_newId()

    newId = staticmethod(newId)
    def initId():
        """initId() -> Id"""
        return _moose.Id_initId()

    initId = staticmethod(initId)
    def makeIdOnNode(*args):
        """makeIdOnNode(unsigned int childNode) -> Id"""
        return _moose.Id_makeIdOnNode(*args)

    makeIdOnNode = staticmethod(makeIdOnNode)
    def shellId():
        """shellId() -> Id"""
        return _moose.Id_shellId()

    shellId = staticmethod(shellId)
    def postId(*args):
        """postId(unsigned int node) -> Id"""
        return _moose.Id_postId(*args)

    postId = staticmethod(postId)
    def assignIndex(self, *args):
        """assignIndex(self, unsigned int index) -> Id"""
        return _moose.Id_assignIndex(self, *args)

    def newIdBlock(*args):
        """newIdBlock(unsigned int size, unsigned int node) -> unsigned int"""
        return _moose.Id_newIdBlock(*args)

    newIdBlock = staticmethod(newIdBlock)
    def generator(*args):
        """generator(unsigned int node) -> IdGenerator"""
        return _moose.Id_generator(*args)

    generator = staticmethod(generator)
    def path(self, separator = "/"):
        """
        path(self, string separator = "/") -> string
        path(self) -> string
        """
        return _moose.Id_path(self, separator)

    def id(self):
        """id(self) -> unsigned int"""
        return _moose.Id_id(self)

    def index(self):
        """index(self) -> unsigned int"""
        return _moose.Id_index(self)

    def node(self):
        """node(self) -> unsigned int"""
        return _moose.Id_node(self)

    def isGlobal(self):
        """isGlobal(self) -> bool"""
        return _moose.Id_isGlobal(self)

    def setGlobal(self):
        """setGlobal(self)"""
        return _moose.Id_setGlobal(self)

    def setNode(self, *args):
        """setNode(self, unsigned int node)"""
        return _moose.Id_setNode(self, *args)

    def lastId():
        """lastId() -> Id"""
        return _moose.Id_lastId()

    lastId = staticmethod(lastId)
    def badId():
        """badId() -> Id"""
        return _moose.Id_badId()

    badId = staticmethod(badId)
    def str2Id(*args):
        """str2Id(string s) -> Id"""
        return _moose.Id_str2Id(*args)

    str2Id = staticmethod(str2Id)
    def id2str(*args):
        """id2str(Id id) -> string"""
        return _moose.Id_id2str(*args)

    id2str = staticmethod(id2str)
    def bad(self):
        """bad(self) -> bool"""
        return _moose.Id_bad(self)

    def good(self):
        """good(self) -> bool"""
        return _moose.Id_good(self)

    def zero(self):
        """zero(self) -> bool"""
        return _moose.Id_zero(self)

    def outOfRange(self):
        """outOfRange(self) -> bool"""
        return _moose.Id_outOfRange(self)

    def isProxy(self):
        """isProxy(self) -> bool"""
        return _moose.Id_isProxy(self)

    def __eq__(self, *args):
        """__eq__(self, Id other) -> bool"""
        return _moose.Id___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, Id other) -> bool"""
        return _moose.Id___ne__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, Id other) -> bool"""
        return _moose.Id___lt__(self, *args)

    def setElement(self, *args):
        """setElement(self, Element e) -> bool"""
        return _moose.Id_setElement(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> Id
        __init__(self, Nid nid) -> Id
        __init__(self, string path, string separator = "/") -> Id
        __init__(self, string path) -> Id
        __init__(self, unsigned int i, unsigned int index = 0) -> Id
        __init__(self, unsigned int i) -> Id
        """
        this = _moose.new_Id(*args)
        try: self.this.append(this)
        except: self.this = this
    def __str__(self):
        """__str__(self) -> char"""
        return _moose.Id___str__(self)

    def __hash__(self):
            return str(self).__hash__()

Id_swigregister = _moose.Id_swigregister
Id_swigregister(Id)

def Id_dumpState(*args):
  """Id_dumpState(ostream stream)"""
  return _moose.Id_dumpState(*args)

def Id_localId(*args):
  """
    localId(string path, string separator = "/") -> Id
    Id_localId(string path) -> Id
    """
  return _moose.Id_localId(*args)

def Id_childNode(*args):
  """Id_childNode(Id parent) -> unsigned int"""
  return _moose.Id_childNode(*args)

def Id_childId(*args):
  """Id_childId(Id parent) -> Id"""
  return _moose.Id_childId(*args)

def Id_scratchId():
  """Id_scratchId() -> Id"""
  return _moose.Id_scratchId()

def Id_newId():
  """Id_newId() -> Id"""
  return _moose.Id_newId()

def Id_initId():
  """Id_initId() -> Id"""
  return _moose.Id_initId()

def Id_makeIdOnNode(*args):
  """Id_makeIdOnNode(unsigned int childNode) -> Id"""
  return _moose.Id_makeIdOnNode(*args)

def Id_shellId():
  """Id_shellId() -> Id"""
  return _moose.Id_shellId()

def Id_postId(*args):
  """Id_postId(unsigned int node) -> Id"""
  return _moose.Id_postId(*args)

def Id_newIdBlock(*args):
  """Id_newIdBlock(unsigned int size, unsigned int node) -> unsigned int"""
  return _moose.Id_newIdBlock(*args)

def Id_generator(*args):
  """Id_generator(unsigned int node) -> IdGenerator"""
  return _moose.Id_generator(*args)

def Id_lastId():
  """Id_lastId() -> Id"""
  return _moose.Id_lastId()

def Id_badId():
  """Id_badId() -> Id"""
  return _moose.Id_badId()

def Id_str2Id(*args):
  """Id_str2Id(string s) -> Id"""
  return _moose.Id_str2Id(*args)

def Id_id2str(*args):
  """Id_id2str(Id id) -> string"""
  return _moose.Id_id2str(*args)
cvar = _moose.cvar
Id.AnyIndex = _moose.cvar.Id_AnyIndex
Id.BadIndex = _moose.cvar.Id_BadIndex
Id.BadNode = _moose.cvar.Id_BadNode
Id.UnknownNode = _moose.cvar.Id_UnknownNode
Id.GlobalNode = _moose.cvar.Id_GlobalNode

class Nid(Id):
    """Proxy of C++ Nid class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Nid
        __init__(self, Id id) -> Nid
        __init__(self, Id id, unsigned int node) -> Nid
        """
        this = _moose.new_Nid(*args)
        try: self.this.append(this)
        except: self.this = this
    def node(self):
        """node(self) -> unsigned int"""
        return _moose.Nid_node(self)

    def setNode(self, *args):
        """setNode(self, unsigned int node)"""
        return _moose.Nid_setNode(self, *args)

    __swig_destroy__ = _moose.delete_Nid
    __del__ = lambda self : None;
Nid_swigregister = _moose.Nid_swigregister
Nid_swigregister(Nid)

BUF_SIZE = _moose.BUF_SIZE
class Property(object):
    """Proxy of C++ Property class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def initialize(*args):
        """initialize(string fileName, int format)"""
        return _moose.Property_initialize(*args)

    initialize = staticmethod(initialize)
    def initDefaults():
        """initDefaults()"""
        return _moose.Property_initDefaults()

    initDefaults = staticmethod(initDefaults)
    def getProperty(*args):
        """getProperty(string key) -> string"""
        return _moose.Property_getProperty(*args)

    getProperty = staticmethod(getProperty)
    def setProperty(*args):
        """setProperty(string key, string value)"""
        return _moose.Property_setProperty(*args)

    setProperty = staticmethod(setProperty)
    def readProperties(*args):
        """readProperties(string fileName, int format) -> int"""
        return _moose.Property_readProperties(*args)

    readProperties = staticmethod(readProperties)
    def readEnvironment():
        """readEnvironment()"""
        return _moose.Property_readEnvironment()

    readEnvironment = staticmethod(readEnvironment)
    def getKeys():
        """getKeys() -> string_vector"""
        return _moose.Property_getKeys()

    getKeys = staticmethod(getKeys)
    def addSimPath(*args):
        """addSimPath(string path)"""
        return _moose.Property_addSimPath(*args)

    addSimPath = staticmethod(addSimPath)
    def setSimPath(*args):
        """setSimPath(string paths)"""
        return _moose.Property_setSimPath(*args)

    setSimPath = staticmethod(setSimPath)
    def getSimPath():
        """getSimPath() -> string"""
        return _moose.Property_getSimPath()

    getSimPath = staticmethod(getSimPath)
    __swig_destroy__ = _moose.delete_Property
    __del__ = lambda self : None;
Property_swigregister = _moose.Property_swigregister
Property_swigregister(Property)
Property.SIMPATH = _moose.cvar.Property_SIMPATH
Property.SIMNOTES = _moose.cvar.Property_SIMNOTES
Property.DOCPATH = _moose.cvar.Property_DOCPATH
Property.AUTOSCHEDULE = _moose.cvar.Property_AUTOSCHEDULE
Property.CREATESOLVER = _moose.cvar.Property_CREATESOLVER
Property.HOME = _moose.cvar.Property_HOME
Property.XML_FORMAT = _moose.cvar.Property_XML_FORMAT
Property.PROP_FORMAT = _moose.cvar.Property_PROP_FORMAT

def Property_initialize(*args):
  """Property_initialize(string fileName, int format)"""
  return _moose.Property_initialize(*args)

def Property_initDefaults():
  """Property_initDefaults()"""
  return _moose.Property_initDefaults()

def Property_getProperty(*args):
  """Property_getProperty(string key) -> string"""
  return _moose.Property_getProperty(*args)

def Property_setProperty(*args):
  """Property_setProperty(string key, string value)"""
  return _moose.Property_setProperty(*args)

def Property_readProperties(*args):
  """Property_readProperties(string fileName, int format) -> int"""
  return _moose.Property_readProperties(*args)

def Property_readEnvironment():
  """Property_readEnvironment()"""
  return _moose.Property_readEnvironment()

def Property_getKeys():
  """Property_getKeys() -> string_vector"""
  return _moose.Property_getKeys()

def Property_addSimPath(*args):
  """Property_addSimPath(string path)"""
  return _moose.Property_addSimPath(*args)

def Property_setSimPath(*args):
  """Property_setSimPath(string paths)"""
  return _moose.Property_setSimPath(*args)

def Property_getSimPath():
  """Property_getSimPath() -> string"""
  return _moose.Property_getSimPath()

class PathUtility(object):
    """Proxy of C++ PathUtility class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, string paths) -> PathUtility"""
        this = _moose.new_PathUtility(*args)
        try: self.this.append(this)
        except: self.this = this
    def isAbsolutePath(*args):
        """isAbsolutePath(string path) -> bool"""
        return _moose.PathUtility_isAbsolutePath(*args)

    isAbsolutePath = staticmethod(isAbsolutePath)
    def addPath(self, *args):
        """addPath(self, string paths)"""
        return _moose.PathUtility_addPath(self, *args)

    def getPath(self, *args):
        """getPath(self, int index) -> string"""
        return _moose.PathUtility_getPath(self, *args)

    def getAllPaths(self):
        """getAllPaths(self) -> string"""
        return _moose.PathUtility_getAllPaths(self)

    def makeFilePath(self, *args):
        """makeFilePath(self, string fileName, int index) -> string"""
        return _moose.PathUtility_makeFilePath(self, *args)

    def size(self):
        """size(self) -> size_t"""
        return _moose.PathUtility_size(self)

    __swig_destroy__ = _moose.delete_PathUtility
    __del__ = lambda self : None;
PathUtility_swigregister = _moose.PathUtility_swigregister
PathUtility_swigregister(PathUtility)
PathUtility.PATH_SEPARATOR = _moose.cvar.PathUtility_PATH_SEPARATOR
PathUtility.DIR_SEPARATOR = _moose.cvar.PathUtility_DIR_SEPARATOR

def PathUtility_isAbsolutePath(*args):
  """PathUtility_isAbsolutePath(string path) -> bool"""
  return _moose.PathUtility_isAbsolutePath(*args)

FTYPE_ALL = _moose.FTYPE_ALL
FTYPE_VALUE = _moose.FTYPE_VALUE
FTYPE_LOOKUP = _moose.FTYPE_LOOKUP
FTYPE_SOURCE = _moose.FTYPE_SOURCE
FTYPE_DEST = _moose.FTYPE_DEST
FTYPE_SHARED = _moose.FTYPE_SHARED
FTYPE_SOLVE = _moose.FTYPE_SOLVE
FTYPE_THIS = _moose.FTYPE_THIS
FTYPE_GLOBAL = _moose.FTYPE_GLOBAL
FTYPE_DEL = _moose.FTYPE_DEL
FREE_RUN = _moose.FREE_RUN
EXT_TRIG = _moose.EXT_TRIG
EXT_GATE = _moose.EXT_GATE
OUTGOING = _moose.OUTGOING
INCOMING = _moose.INCOMING
INOUT = _moose.INOUT
class PyMooseContext(object):
    """Proxy of C++ pymoose::PyMooseContext class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(self) -> PyMooseContext"""
        this = _moose.new_PyMooseContext()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PyMooseContext
    __del__ = lambda self : None;
    def getCwe(self):
        """getCwe(self) -> Id"""
        return _moose.PyMooseContext_getCwe(self)

    def setCwe(self, *args):
        """
        setCwe(self, Id elementId)
        setCwe(self, string path)
        """
        return _moose.PyMooseContext_setCwe(self, *args)

    def getShell(self):
        """getShell(self) -> Id"""
        return _moose.PyMooseContext_getShell(self)

    def id(self):
        """id(self) -> Id"""
        return _moose.PyMooseContext_id(self)

    def create(self, *args):
        """
        create(self, string type, string name, Id parent = Id::badId()) -> Id
        create(self, string type, string name) -> Id
        """
        return _moose.PyMooseContext_create(self, *args)

    def destroy(self, *args):
        """destroy(self, Id victim) -> bool"""
        return _moose.PyMooseContext_destroy(self, *args)

    def end(self):
        """end(self)"""
        return _moose.PyMooseContext_end(self)

    def recvCwe(*args):
        """recvCwe(Conn c, Id i)"""
        return _moose.PyMooseContext_recvCwe(*args)

    recvCwe = staticmethod(recvCwe)
    def recvElist(*args):
        """recvElist(Conn c, Id_vector elist)"""
        return _moose.PyMooseContext_recvElist(*args)

    recvElist = staticmethod(recvElist)
    def recvCreate(*args):
        """recvCreate(Conn c, Id i)"""
        return _moose.PyMooseContext_recvCreate(*args)

    recvCreate = staticmethod(recvCreate)
    def recvField(*args):
        """recvField(Conn c, string value)"""
        return _moose.PyMooseContext_recvField(*args)

    recvField = staticmethod(recvField)
    def recvWildcardList(*args):
        """recvWildcardList(Conn c, Id_vector value)"""
        return _moose.PyMooseContext_recvWildcardList(*args)

    recvWildcardList = staticmethod(recvWildcardList)
    def recvClocks(*args):
        """recvClocks(Conn c, double_vector dbls)"""
        return _moose.PyMooseContext_recvClocks(*args)

    recvClocks = staticmethod(recvClocks)
    def recvMessageList(*args):
        """recvMessageList(Conn c, Id_vector elist, string s)"""
        return _moose.PyMooseContext_recvMessageList(*args)

    recvMessageList = staticmethod(recvMessageList)
    def createPyMooseContext(*args):
        """createPyMooseContext(string contextName, string shellName) -> PyMooseContext"""
        return _moose.PyMooseContext_createPyMooseContext(*args)

    createPyMooseContext = staticmethod(createPyMooseContext)
    def destroyPyMooseContext(*args):
        """destroyPyMooseContext(PyMooseContext context)"""
        return _moose.PyMooseContext_destroyPyMooseContext(*args)

    destroyPyMooseContext = staticmethod(destroyPyMooseContext)
    def loadG(self, *args):
        """loadG(self, string script)"""
        return _moose.PyMooseContext_loadG(self, *args)

    def runG(self, *args):
        """runG(self, string statement)"""
        return _moose.PyMooseContext_runG(self, *args)

    def getField(self, *args):
        """getField(self, Id arg0, string arg1) -> string"""
        return _moose.PyMooseContext_getField(self, *args)

    def setField(self, *args):
        """setField(self, Id arg0, string arg1, string arg2)"""
        return _moose.PyMooseContext_setField(self, *args)

    def getMessageList(self, *args):
        """
        getMessageList(self, Id obj, string field, bool incoming) -> string_vector
        getMessageList(self, Id obj, bool incoming) -> string_vector
        """
        return _moose.PyMooseContext_getMessageList(self, *args)

    def getParent(self, *args):
        """getParent(self, Id id) -> Id"""
        return _moose.PyMooseContext_getParent(self, *args)

    def getPath(self, *args):
        """getPath(self, Id id) -> string"""
        return _moose.PyMooseContext_getPath(self, *args)

    def getName(self, *args):
        """getName(self, Id id) -> string"""
        return _moose.PyMooseContext_getName(self, *args)

    def getChildren(self, *args):
        """
        getChildren(self, Id id) -> Id_vector
        getChildren(self, string path) -> Id_vector
        """
        return _moose.PyMooseContext_getChildren(self, *args)

    def getWildcardList(self, *args):
        """getWildcardList(self, string path, bool ordered) -> Id_vector"""
        return _moose.PyMooseContext_getWildcardList(self, *args)

    def getStoichPathVector(self, *args):
        """getStoichPathVector(self, Id id) -> Id_vector"""
        return _moose.PyMooseContext_getStoichPathVector(self, *args)

    def pathToId(self, *args):
        """
        pathToId(self, string path, bool echo = True) -> Id
        pathToId(self, string path) -> Id
        """
        return _moose.PyMooseContext_pathToId(self, *args)

    def srandom(*args):
        """srandom(long seed)"""
        return _moose.PyMooseContext_srandom(*args)

    srandom = staticmethod(srandom)
    def step(self, *args):
        """
        step(self, double runTime)
        step(self, long multiple)
        step(self)
        """
        return _moose.PyMooseContext_step(self, *args)

    def reset(self):
        """reset(self)"""
        return _moose.PyMooseContext_reset(self)

    def stop(self):
        """stop(self)"""
        return _moose.PyMooseContext_stop(self)

    def setClock(self, *args):
        """
        setClock(self, int clockNo, double dt, int stage = 0)
        setClock(self, int clockNo, double dt)
        """
        return _moose.PyMooseContext_setClock(self, *args)

    def getClocks(self):
        """getClocks(self) -> double_vector"""
        return _moose.PyMooseContext_getClocks(self)

    def useClock(self, *args):
        """
        useClock(self, string tickName, string path, string func = "process")
        useClock(self, string tickName, string path)
        useClock(self, int tickNo, string path, string func = "process")
        useClock(self, int tickNo, string path)
        """
        return _moose.PyMooseContext_useClock(self, *args)

    def addTask(self, *args):
        """addTask(self, string arg)"""
        return _moose.PyMooseContext_addTask(self, *args)

    def do_deep_copy(self, *args):
        """do_deep_copy(self, Id object, Id dest, string new_name)"""
        return _moose.PyMooseContext_do_deep_copy(self, *args)

    def copy(self, *args):
        """copy(self, Id src, Id dest_parent, string new_name)"""
        return _moose.PyMooseContext_copy(self, *args)

    def deepCopy(self, *args):
        """deepCopy(self, Id object, Id dest, string new_name) -> Id"""
        return _moose.PyMooseContext_deepCopy(self, *args)

    def move(self, *args):
        """
        move(self, Id object, Id dest, string new_name)
        move(self, string src, string dest, string new_name)
        """
        return _moose.PyMooseContext_move(self, *args)

    def connect(self, *args):
        """connect(self, Id src, string srcField, Id dest, string destField) -> bool"""
        return _moose.PyMooseContext_connect(self, *args)

    def tabFill(self, *args):
        """tabFill(self, Id table, int xdivs, int mode)"""
        return _moose.PyMooseContext_tabFill(self, *args)

    def getTableVector(self, *args):
        """getTableVector(self, Id table) -> double_vector"""
        return _moose.PyMooseContext_getTableVector(self, *args)

    def setupAlpha(self, *args):
        """
        setupAlpha(self, string channel, string gate, double_vector parms)
        setupAlpha(self, string channel, string gate, double AA, double AB, 
            double AC, double AD, double AF, double BA, double BB, 
            double BC, double BD, double BF, double size, 
            double min, double max)
        setupAlpha(self, Id gateId, double_vector parms)
        """
        return _moose.PyMooseContext_setupAlpha(self, *args)

    def setupTau(self, *args):
        """
        setupTau(self, string channel, string gate, double_vector parms)
        setupTau(self, string channel, string gate, double AA, double AB, 
            double AC, double AD, double AF, double BA, double BB, 
            double BC, double BD, double BF, double size, 
            double min, double max)
        setupTau(self, Id gateId, double_vector parms)
        """
        return _moose.PyMooseContext_setupTau(self, *args)

    def tweakAlpha(self, *args):
        """
        tweakAlpha(self, string channel, string gate)
        tweakAlpha(self, Id gateId)
        """
        return _moose.PyMooseContext_tweakAlpha(self, *args)

    def tweakTau(self, *args):
        """
        tweakTau(self, string channel, string gate)
        tweakTau(self, Id gateId)
        """
        return _moose.PyMooseContext_tweakTau(self, *args)

    def readCell(self, *args):
        """
        readCell(self, string filename, string cellpath, double cm, double rm, 
            double ra, double erestAct, double eleak)
        readCell(self, string filename, string cellpath, double_vector params)
        readCell(self, string fileName, string cellPath)
        """
        return _moose.PyMooseContext_readCell(self, *args)

    def readSBML(self, *args):
        """readSBML(self, string fileName, string modelPath)"""
        return _moose.PyMooseContext_readSBML(self, *args)

    def readNeuroML(self, *args):
        """readNeuroML(self, string fileName, string modelPath)"""
        return _moose.PyMooseContext_readNeuroML(self, *args)

    def getCurrentTime(self):
        """getCurrentTime(self) -> double"""
        return _moose.PyMooseContext_getCurrentTime(self)

    def exists(self, *args):
        """
        exists(self, Id id) -> bool
        exists(self, string path) -> bool
        """
        return _moose.PyMooseContext_exists(self, *args)

    def addField(self, *args):
        """
        addField(self, string objectPath, string fieldName)
        addField(self, Id objectId, string fieldName)
        """
        return _moose.PyMooseContext_addField(self, *args)

    def createMap(self, *args):
        """
        createMap(self, string src, string dest, unsigned int nx, unsigned int ny, 
            double dx = 1.0, double dy = 1.0, double xo = 0.0, 
            double yo = 0.0, bool isObject = True)
        createMap(self, string src, string dest, unsigned int nx, unsigned int ny, 
            double dx = 1.0, double dy = 1.0, double xo = 0.0, 
            double yo = 0.0)
        createMap(self, string src, string dest, unsigned int nx, unsigned int ny, 
            double dx = 1.0, double dy = 1.0, double xo = 0.0)
        createMap(self, string src, string dest, unsigned int nx, unsigned int ny, 
            double dx = 1.0, double dy = 1.0)
        createMap(self, string src, string dest, unsigned int nx, unsigned int ny, 
            double dx = 1.0)
        createMap(self, string src, string dest, unsigned int nx, unsigned int ny)
        createMap(self, Id src, Id dest, string name, unsigned int nx, unsigned int ny, 
            double dx = 1.0, double dy = 1.0, 
            double xo = 0.0, double yo = 0.0)
        createMap(self, Id src, Id dest, string name, unsigned int nx, unsigned int ny, 
            double dx = 1.0, double dy = 1.0, 
            double xo = 0.0)
        createMap(self, Id src, Id dest, string name, unsigned int nx, unsigned int ny, 
            double dx = 1.0, double dy = 1.0)
        createMap(self, Id src, Id dest, string name, unsigned int nx, unsigned int ny, 
            double dx = 1.0)
        createMap(self, Id src, Id dest, string name, unsigned int nx, unsigned int ny)
        createMap(self, Id src, Id dest, string name, double_vector param)
        """
        return _moose.PyMooseContext_createMap(self, *args)

    def planarConnect(self, *args):
        """
        planarConnect(self, string src, string dst, double probability = 1.0)
        planarConnect(self, string src, string dst)
        """
        return _moose.PyMooseContext_planarConnect(self, *args)

    def plannarDelay(self, *args):
        """plannarDelay(self, string src, double delay)"""
        return _moose.PyMooseContext_plannarDelay(self, *args)

    def planarWeight(self, *args):
        """planarWeight(self, string src, double weight)"""
        return _moose.PyMooseContext_planarWeight(self, *args)

    def className(self, *args):
        """className(self, Id objId) -> string"""
        return _moose.PyMooseContext_className(self, *args)

    def description(self, *args):
        """description(self, string className) -> string"""
        return _moose.PyMooseContext_description(self, *args)

    def author(self, *args):
        """author(self, string className) -> string"""
        return _moose.PyMooseContext_author(self, *args)

    def doc(self, *args):
        """doc(self, string className) -> string"""
        return _moose.PyMooseContext_doc(self, *args)

    def getNeighbours(self, *args):
        """
        getNeighbours(self, Id object, string fieldName = "*", int direction = INCOMING) -> Id_vector
        getNeighbours(self, Id object, string fieldName = "*") -> Id_vector
        getNeighbours(self, Id object) -> Id_vector
        """
        return _moose.PyMooseContext_getNeighbours(self, *args)

    def getValueFieldList(self, *args):
        """getValueFieldList(self, Id id) -> string_vector"""
        return _moose.PyMooseContext_getValueFieldList(self, *args)

    def getFieldList(self, *args):
        """
        getFieldList(self, Id id, FieldType ftype = FTYPE_ALL) -> string_vector
        getFieldList(self, Id id) -> string_vector
        """
        return _moose.PyMooseContext_getFieldList(self, *args)

    parallel = _swig_property(_moose.PyMooseContext_parallel_get, _moose.PyMooseContext_parallel_set)
PyMooseContext_swigregister = _moose.PyMooseContext_swigregister
PyMooseContext_swigregister(PyMooseContext)
version = cvar.version
revision = cvar.revision

def PyMooseContext_recvCwe(*args):
  """PyMooseContext_recvCwe(Conn c, Id i)"""
  return _moose.PyMooseContext_recvCwe(*args)

def PyMooseContext_recvElist(*args):
  """PyMooseContext_recvElist(Conn c, Id_vector elist)"""
  return _moose.PyMooseContext_recvElist(*args)

def PyMooseContext_recvCreate(*args):
  """PyMooseContext_recvCreate(Conn c, Id i)"""
  return _moose.PyMooseContext_recvCreate(*args)

def PyMooseContext_recvField(*args):
  """PyMooseContext_recvField(Conn c, string value)"""
  return _moose.PyMooseContext_recvField(*args)

def PyMooseContext_recvWildcardList(*args):
  """PyMooseContext_recvWildcardList(Conn c, Id_vector value)"""
  return _moose.PyMooseContext_recvWildcardList(*args)

def PyMooseContext_recvClocks(*args):
  """PyMooseContext_recvClocks(Conn c, double_vector dbls)"""
  return _moose.PyMooseContext_recvClocks(*args)

def PyMooseContext_recvMessageList(*args):
  """PyMooseContext_recvMessageList(Conn c, Id_vector elist, string s)"""
  return _moose.PyMooseContext_recvMessageList(*args)

def PyMooseContext_createPyMooseContext(*args):
  """PyMooseContext_createPyMooseContext(string contextName, string shellName) -> PyMooseContext"""
  return _moose.PyMooseContext_createPyMooseContext(*args)

def PyMooseContext_destroyPyMooseContext(*args):
  """PyMooseContext_destroyPyMooseContext(PyMooseContext context)"""
  return _moose.PyMooseContext_destroyPyMooseContext(*args)

def PyMooseContext_srandom(*args):
  """PyMooseContext_srandom(long seed)"""
  return _moose.PyMooseContext_srandom(*args)
PyMooseContext.separator = _moose.cvar.PyMooseContext_separator

class PyMooseBase(object):
    """Proxy of C++ pymoose::PyMooseBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_PyMooseBase
    __del__ = lambda self : None;
    def __get_author(self):
        """__get_author(self) -> string"""
        return _moose.PyMooseBase___get_author(self)

    def __get_description(self):
        """__get_description(self) -> string"""
        return _moose.PyMooseBase___get_description(self)

    def destroy(*args):
        """destroy(Id id) -> bool"""
        return _moose.PyMooseBase_destroy(*args)

    destroy = staticmethod(destroy)
    def endSimulation():
        """endSimulation()"""
        return _moose.PyMooseBase_endSimulation()

    endSimulation = staticmethod(endSimulation)
    def getType(self):
        """getType(self) -> string"""
        return _moose.PyMooseBase_getType(self)

    def getSeparator():
        """getSeparator() -> string"""
        return _moose.PyMooseBase_getSeparator()

    getSeparator = staticmethod(getSeparator)
    def getContext():
        """getContext() -> PyMooseContext"""
        return _moose.PyMooseBase_getContext()

    getContext = staticmethod(getContext)
    def getField(self, *args):
        """getField(self, string name) -> string"""
        return _moose.PyMooseBase_getField(self, *args)

    def setField(self, *args):
        """setField(self, string name, string value)"""
        return _moose.PyMooseBase_setField(self, *args)

    def getFieldList(self, *args):
        """
        getFieldList(self, FieldType ftype = FTYPE_ALL) -> string_vector
        getFieldList(self) -> string_vector
        """
        return _moose.PyMooseBase_getFieldList(self, *args)

    def neighbours(self, *args):
        """
        neighbours(self, string msgName = "*", int direction = INCOMING) -> Id_vector
        neighbours(self, string msgName = "*") -> Id_vector
        neighbours(self) -> Id_vector
        """
        return _moose.PyMooseBase_neighbours(self, *args)

    def __get_path(self):
        """__get_path(self) -> string"""
        return _moose.PyMooseBase___get_path(self)

    def __get_id(self):
        """__get_id(self) -> Id"""
        return _moose.PyMooseBase___get_id(self)

    def addField(self, *args):
        """addField(self, string fieldName)"""
        return _moose.PyMooseBase_addField(self, *args)

    def useClock(self, *args):
        """
        useClock(self, int clockNo, string func = "process")
        useClock(self, int clockNo)
        useClock(self, Id clock, string func = "process")
        useClock(self, Id clock)
        """
        return _moose.PyMooseBase_useClock(self, *args)

    def connect(self, *args):
        """
        connect(self, string field, PyMooseBase dest, string destField) -> bool
        connect(self, string field, Id dest, string destField) -> bool
        """
        return _moose.PyMooseBase_connect(self, *args)

    def getMessageList(self, *args):
        """getMessageList(self, string field, bool isIncoming) -> string_vector"""
        return _moose.PyMooseBase_getMessageList(self, *args)

    def inMessages(self):
        """inMessages(self) -> string_vector"""
        return _moose.PyMooseBase_inMessages(self)

    def outMessages(self):
        """outMessages(self) -> string_vector"""
        return _moose.PyMooseBase_outMessages(self)

    def exists(*args):
        """
        exists(Id id) -> bool
        exists(string path) -> bool
        """
        return _moose.PyMooseBase_exists(*args)

    exists = staticmethod(exists)
    def le():
        """le() -> Id_vector"""
        return _moose.PyMooseBase_le()

    le = staticmethod(le)
    def pwe():
        """pwe() -> Id"""
        return _moose.PyMooseBase_pwe()

    pwe = staticmethod(pwe)
    def ce(*args):
        """
        ce(Id newElement) -> Id
        ce(string path) -> Id
        """
        return _moose.PyMooseBase_ce(*args)

    ce = staticmethod(ce)
    def pathToId(*args):
        """
        pathToId(string path, bool echo = True) -> Id
        pathToId(string path) -> Id
        """
        return _moose.PyMooseBase_pathToId(*args)

    pathToId = staticmethod(pathToId)
    def idToPath(*args):
        """idToPath(Id id) -> string"""
        return _moose.PyMooseBase_idToPath(*args)

    idToPath = staticmethod(idToPath)
    def getParent(*args):
        """getParent(Id id) -> Id"""
        return _moose.PyMooseBase_getParent(*args)

    getParent = staticmethod(getParent)
    def getChildren(*args):
        """getChildren(Id id) -> Id_vector"""
        return _moose.PyMooseBase_getChildren(*args)

    getChildren = staticmethod(getChildren)
    def initSimulation():
        """initSimulation()"""
        return _moose.PyMooseBase_initSimulation()

    initSimulation = staticmethod(initSimulation)
    id = _swig_property(_moose.PyMooseBase_id_get)
    author = _swig_property(_moose.PyMooseBase_author_get)
    description = _swig_property(_moose.PyMooseBase_description_get)
    path = _swig_property(_moose.PyMooseBase_path_get)
PyMooseBase_swigregister = _moose.PyMooseBase_swigregister
PyMooseBase_swigregister(PyMooseBase)

def PyMooseBase_destroy(*args):
  """PyMooseBase_destroy(Id id) -> bool"""
  return _moose.PyMooseBase_destroy(*args)

def PyMooseBase_endSimulation():
  """PyMooseBase_endSimulation()"""
  return _moose.PyMooseBase_endSimulation()

def PyMooseBase_getSeparator():
  """PyMooseBase_getSeparator() -> string"""
  return _moose.PyMooseBase_getSeparator()

def PyMooseBase_getContext():
  """PyMooseBase_getContext() -> PyMooseContext"""
  return _moose.PyMooseBase_getContext()

def PyMooseBase_exists(*args):
  """
    exists(Id id) -> bool
    PyMooseBase_exists(string path) -> bool
    """
  return _moose.PyMooseBase_exists(*args)

def PyMooseBase_le():
  """PyMooseBase_le() -> Id_vector"""
  return _moose.PyMooseBase_le()

def PyMooseBase_pwe():
  """PyMooseBase_pwe() -> Id"""
  return _moose.PyMooseBase_pwe()

def PyMooseBase_ce(*args):
  """
    ce(Id newElement) -> Id
    PyMooseBase_ce(string path) -> Id
    """
  return _moose.PyMooseBase_ce(*args)

def PyMooseBase_pathToId(*args):
  """
    pathToId(string path, bool echo = True) -> Id
    PyMooseBase_pathToId(string path) -> Id
    """
  return _moose.PyMooseBase_pathToId(*args)

def PyMooseBase_idToPath(*args):
  """PyMooseBase_idToPath(Id id) -> string"""
  return _moose.PyMooseBase_idToPath(*args)

def PyMooseBase_getParent(*args):
  """PyMooseBase_getParent(Id id) -> Id"""
  return _moose.PyMooseBase_getParent(*args)

def PyMooseBase_getChildren(*args):
  """PyMooseBase_getChildren(Id id) -> Id_vector"""
  return _moose.PyMooseBase_getChildren(*args)

def PyMooseBase_initSimulation():
  """PyMooseBase_initSimulation()"""
  return _moose.PyMooseBase_initSimulation()


def initPyMoose():
  """initPyMoose()"""
  return _moose.initPyMoose()
context = PyMooseBase.getContext()    
from inspect import isclass

def doc(cls):
    """Return documentation string from MOOSE"""
    if isclass(cls):
        return PyMooseBase.getContext().doc(cls.__name__)
    elif isinstance(cls, PyMooseBase):
        return PyMooseBase.getContext().doc(cls.className)
    elif isinstance(cls, str):
        return PyMooseBase.getContext().doc(cls)
                

class Neutral(PyMooseBase):
    """Proxy of C++ pymoose::Neutral class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string objectName, Id parentId) -> Neutral
        __init__(self, string className, string path) -> Neutral
        __init__(self, string className, string objectName, PyMooseBase parent) -> Neutral
        __init__(self, Id id) -> Neutral
        __init__(self, string path) -> Neutral
        __init__(self, string name, Id parentId) -> Neutral
        __init__(self, string name, PyMooseBase parent) -> Neutral
        __init__(self, Neutral src, string name, PyMooseBase parent) -> Neutral
        __init__(self, Neutral src, string name, Id parent) -> Neutral
        __init__(self, Id src, string name, Id parent) -> Neutral
        __init__(self, Neutral src, string path) -> Neutral
        __init__(self, Id src, string path) -> Neutral
        """
        this = _moose.new_Neutral(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Neutral
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Neutral_getType(self)

    def __get_name(self):
        """__get_name(self) -> string"""
        return _moose.Neutral___get_name(self)

    def __set_name(self, *args):
        """__set_name(self, string name)"""
        return _moose.Neutral___set_name(self, *args)

    def __get_index(self):
        """__get_index(self) -> int"""
        return _moose.Neutral___get_index(self)

    def __get_parent(self):
        """__get_parent(self) -> Id"""
        return _moose.Neutral___get_parent(self)

    def __get_class(self):
        """__get_class(self) -> string"""
        return _moose.Neutral___get_class(self)

    def __get_childList(self):
        """__get_childList(self) -> Id_vector"""
        return _moose.Neutral___get_childList(self)

    def children(self, path = ".", ordered = True):
        """
        children(self, string path = ".", bool ordered = True) -> Id_vector
        children(self, string path = ".") -> Id_vector
        children(self) -> Id_vector
        """
        return _moose.Neutral_children(self, path, ordered)

    def __get_node(self):
        """__get_node(self) -> unsigned int"""
        return _moose.Neutral___get_node(self)

    def __get_cpu(self):
        """__get_cpu(self) -> double"""
        return _moose.Neutral___get_cpu(self)

    def __get_dataMem(self):
        """__get_dataMem(self) -> unsigned int"""
        return _moose.Neutral___get_dataMem(self)

    def __get_msgMem(self):
        """__get_msgMem(self) -> unsigned int"""
        return _moose.Neutral___get_msgMem(self)

    def __get_fieldList(self):
        """__get_fieldList(self) -> string_vector"""
        return _moose.Neutral___get_fieldList(self)

    name = _swig_property(_moose.Neutral_name_get, _moose.Neutral_name_set)
    index = _swig_property(_moose.Neutral_index_get)
    parent = _swig_property(_moose.Neutral_parent_get)
    className = _swig_property(_moose.Neutral_className_get)
    childList = _swig_property(_moose.Neutral_childList_get)
    node = _swig_property(_moose.Neutral_node_get)
    cpu = _swig_property(_moose.Neutral_cpu_get)
    dataMem = _swig_property(_moose.Neutral_dataMem_get)
    msgMem = _swig_property(_moose.Neutral_msgMem_get)
    fieldList = _swig_property(_moose.Neutral_fieldList_get)
Neutral_swigregister = _moose.Neutral_swigregister
Neutral_swigregister(Neutral)

class Class(Neutral):
    """Proxy of C++ pymoose::Class class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Class
        __init__(self, string path, string name) -> Class
        __init__(self, string name, Id parentId) -> Class
        __init__(self, string name, PyMooseBase parent) -> Class
        __init__(self, Class src, string name, PyMooseBase parent) -> Class
        __init__(self, Class src, string name, Id parent) -> Class
        __init__(self, Id src, string name, Id parent) -> Class
        __init__(self, Class src, string path) -> Class
        __init__(self, Id src, string path) -> Class
        """
        this = _moose.new_Class(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Class
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Class_getType(self)

    def __get_tick(self):
        """__get_tick(self) -> unsigned int"""
        return _moose.Class___get_tick(self)

    def __set_tick(self, *args):
        """__set_tick(self, unsigned int arg0)"""
        return _moose.Class___set_tick(self, *args)

    def __get_stage(self):
        """__get_stage(self) -> unsigned int"""
        return _moose.Class___get_stage(self)

    def __set_stage(self, *args):
        """__set_stage(self, unsigned int arg0)"""
        return _moose.Class___set_stage(self, *args)

    def __get_clock(self):
        """__get_clock(self) -> string"""
        return _moose.Class___get_clock(self)

    def setClock(self, *args):
        """setClock(self, string function, string clock)"""
        return _moose.Class_setClock(self, *args)

    author = _swig_property(_moose.Class_author_get)
    description = _swig_property(_moose.Class_description_get)
    tick = _swig_property(_moose.Class_tick_get, _moose.Class_tick_set)
    stage = _swig_property(_moose.Class_stage_get, _moose.Class_stage_set)
Class_swigregister = _moose.Class_swigregister
Class_swigregister(Class)

class Cell(Neutral):
    """Proxy of C++ pymoose::Cell class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Cell
        __init__(self, string path) -> Cell
        __init__(self, string name, Id parentId) -> Cell
        __init__(self, string name, PyMooseBase parent) -> Cell
        __init__(self, Cell src, string name, PyMooseBase parent) -> Cell
        __init__(self, Cell src, string name, Id parent) -> Cell
        __init__(self, Id src, string name, Id parent) -> Cell
        __init__(self, Id src, string path) -> Cell
        __init__(self, Cell src, string path) -> Cell
        __init__(self, string cellpath, string filepath) -> Cell
        """
        this = _moose.new_Cell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Cell
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Cell_getType(self)

    def __set_method(self, *args):
        """__set_method(self, string method)"""
        return _moose.Cell___set_method(self, *args)

    def __get_method(self):
        """__get_method(self) -> string"""
        return _moose.Cell___get_method(self)

    def __get_variableDt(self):
        """__get_variableDt(self) -> bool"""
        return _moose.Cell___get_variableDt(self)

    def __get_implicit(self):
        """__get_implicit(self) -> bool"""
        return _moose.Cell___get_implicit(self)

    method = _swig_property(_moose.Cell_method_get, _moose.Cell_method_set)
    variableDt = _swig_property(_moose.Cell_variableDt_get)
    implicit = _swig_property(_moose.Cell_implicit_get)
    description = _swig_property(_moose.Cell_description_get)
Cell_swigregister = _moose.Cell_swigregister
Cell_swigregister(Cell)

class Tick(Neutral):
    """Proxy of C++ pymoose::Tick class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Tick
        __init__(self, string path) -> Tick
        __init__(self, string name, Id parentId) -> Tick
        __init__(self, string name, PyMooseBase parent) -> Tick
        __init__(self, Tick src, string name, PyMooseBase parent) -> Tick
        __init__(self, Tick src, string name, Id parent) -> Tick
        __init__(self, Id src, string name, Id parent) -> Tick
        __init__(self, Tick src, string path) -> Tick
        __init__(self, Id src, string path) -> Tick
        """
        this = _moose.new_Tick(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Tick
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Tick_getType(self)

    def __get_dt(self):
        """__get_dt(self) -> double"""
        return _moose.Tick___get_dt(self)

    def __set_dt(self, *args):
        """__set_dt(self, double dt)"""
        return _moose.Tick___set_dt(self, *args)

    def __get_stage(self):
        """__get_stage(self) -> int"""
        return _moose.Tick___get_stage(self)

    def __set_stage(self, *args):
        """__set_stage(self, int stage)"""
        return _moose.Tick___set_stage(self, *args)

    def __get_ordinal(self):
        """__get_ordinal(self) -> int"""
        return _moose.Tick___get_ordinal(self)

    def __set_ordinal(self, *args):
        """__set_ordinal(self, int ordinal)"""
        return _moose.Tick___set_ordinal(self, *args)

    def __get_nextTime(self):
        """__get_nextTime(self) -> double"""
        return _moose.Tick___get_nextTime(self)

    def __set_nextTime(self, *args):
        """__set_nextTime(self, double nextTime)"""
        return _moose.Tick___set_nextTime(self, *args)

    def __set_path(self, *args):
        """__set_path(self, string path)"""
        return _moose.Tick___set_path(self, *args)

    def __get_updateDtSrc(self):
        """__get_updateDtSrc(self) -> double"""
        return _moose.Tick___get_updateDtSrc(self)

    def __set_updateDtSrc(self, *args):
        """__set_updateDtSrc(self, double updateDtSrc)"""
        return _moose.Tick___set_updateDtSrc(self, *args)

    dt = _swig_property(_moose.Tick_dt_get, _moose.Tick_dt_set)
    stage = _swig_property(_moose.Tick_stage_get, _moose.Tick_stage_set)
    ordinal = _swig_property(_moose.Tick_ordinal_get, _moose.Tick_ordinal_set)
    nextTime = _swig_property(_moose.Tick_nextTime_get, _moose.Tick_nextTime_set)
    updateDtSrc = _swig_property(_moose.Tick_updateDtSrc_get, _moose.Tick_updateDtSrc_set)
Tick_swigregister = _moose.Tick_swigregister
Tick_swigregister(Tick)

class ClockJob(Neutral):
    """Proxy of C++ pymoose::ClockJob class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> ClockJob
        __init__(self, string path) -> ClockJob
        __init__(self, string name, Id parentId) -> ClockJob
        __init__(self, string name, PyMooseBase parent) -> ClockJob
        __init__(self, ClockJob src, string name, PyMooseBase parent) -> ClockJob
        __init__(self, ClockJob src, string name, Id parent) -> ClockJob
        __init__(self, Id src, string name, Id parent) -> ClockJob
        __init__(self, ClockJob src, string path) -> ClockJob
        __init__(self, Id src, string path) -> ClockJob
        """
        this = _moose.new_ClockJob(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_ClockJob
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.ClockJob_getType(self)

    def __get_runTime(self):
        """__get_runTime(self) -> double"""
        return _moose.ClockJob___get_runTime(self)

    def __set_runTime(self, *args):
        """__set_runTime(self, double runTime)"""
        return _moose.ClockJob___set_runTime(self, *args)

    def __get_currentTime(self):
        """__get_currentTime(self) -> double"""
        return _moose.ClockJob___get_currentTime(self)

    def __get_nsteps(self):
        """__get_nsteps(self) -> int"""
        return _moose.ClockJob___get_nsteps(self)

    def __set_nsteps(self, *args):
        """__set_nsteps(self, int nsteps)"""
        return _moose.ClockJob___set_nsteps(self, *args)

    def __get_currentStep(self):
        """__get_currentStep(self) -> int"""
        return _moose.ClockJob___get_currentStep(self)

    def __get_autoschedule(self):
        """__get_autoschedule(self) -> int"""
        return _moose.ClockJob___get_autoschedule(self)

    def __set_autoschedule(self, *args):
        """__set_autoschedule(self, int value)"""
        return _moose.ClockJob___set_autoschedule(self, *args)

    def getClocks():
        """getClocks() -> double_vector"""
        return _moose.ClockJob_getClocks()

    getClocks = staticmethod(getClocks)
    runTime = _swig_property(_moose.ClockJob_runTime_get, _moose.ClockJob_runTime_set)
    currentTime = _swig_property(_moose.ClockJob_currentTime_get)
    nsteps = _swig_property(_moose.ClockJob_nsteps_get, _moose.ClockJob_nsteps_set)
    currentStep = _swig_property(_moose.ClockJob_currentStep_get)
    autoschedule = _swig_property(_moose.ClockJob_autoschedule_get, _moose.ClockJob_autoschedule_set)
ClockJob_swigregister = _moose.ClockJob_swigregister
ClockJob_swigregister(ClockJob)

def ClockJob_getClocks():
  """ClockJob_getClocks() -> double_vector"""
  return _moose.ClockJob_getClocks()

class Interpol(Neutral):
    """Proxy of C++ pymoose::Interpol class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Interpol
        __init__(self, string path) -> Interpol
        __init__(self, string name, Id parentId) -> Interpol
        __init__(self, string name, PyMooseBase parent) -> Interpol
        __init__(self, Interpol src, string name, PyMooseBase parent) -> Interpol
        __init__(self, Interpol src, string name, Id parent) -> Interpol
        __init__(self, Id src, string name, Id parent) -> Interpol
        __init__(self, Interpol src, string path) -> Interpol
        __init__(self, Id src, string path) -> Interpol
        """
        this = _moose.new_Interpol(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Interpol
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Interpol_getType(self)

    def __get_xmin(self):
        """__get_xmin(self) -> double"""
        return _moose.Interpol___get_xmin(self)

    def __set_xmin(self, *args):
        """__set_xmin(self, double xmin)"""
        return _moose.Interpol___set_xmin(self, *args)

    def __get_xmax(self):
        """__get_xmax(self) -> double"""
        return _moose.Interpol___get_xmax(self)

    def __set_xmax(self, *args):
        """__set_xmax(self, double xmax)"""
        return _moose.Interpol___set_xmax(self, *args)

    def __get_xdivs(self):
        """__get_xdivs(self) -> int"""
        return _moose.Interpol___get_xdivs(self)

    def __set_xdivs(self, *args):
        """__set_xdivs(self, int xdivs)"""
        return _moose.Interpol___set_xdivs(self, *args)

    def __get_mode(self):
        """__get_mode(self) -> int"""
        return _moose.Interpol___get_mode(self)

    def __set_mode(self, *args):
        """__set_mode(self, int mode)"""
        return _moose.Interpol___set_mode(self, *args)

    def __get_dx(self):
        """__get_dx(self) -> double"""
        return _moose.Interpol___get_dx(self)

    def __set_dx(self, *args):
        """__set_dx(self, double dx)"""
        return _moose.Interpol___set_dx(self, *args)

    def __get_sy(self):
        """__get_sy(self) -> double"""
        return _moose.Interpol___get_sy(self)

    def __set_sy(self, *args):
        """__set_sy(self, double sy)"""
        return _moose.Interpol___set_sy(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int index) -> double"""
        return _moose.Interpol___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, unsigned int index, double value)"""
        return _moose.Interpol___setitem__(self, *args)

    def __iter__(self):
        """__iter__(self) -> TableIterator"""
        return _moose.Interpol___iter__(self)

    def __len__(self):
        """__len__(self) -> int"""
        return _moose.Interpol___len__(self)

    def __get_calcMode(self):
        """__get_calcMode(self) -> int"""
        return _moose.Interpol___get_calcMode(self)

    def __set_calcMode(self, *args):
        """__set_calcMode(self, int calc_mode)"""
        return _moose.Interpol___set_calcMode(self, *args)

    def __get_table(self):
        """__get_table(self) -> double_vector"""
        return _moose.Interpol___get_table(self)

    def dumpFile(self, *args):
        """
        dumpFile(self) -> string
        dumpFile(self, string fileName, bool append = False)
        dumpFile(self, string fileName)
        """
        return _moose.Interpol_dumpFile(self, *args)

    def tabFill(self, *args):
        """tabFill(self, int xdivs, int mode)"""
        return _moose.Interpol_tabFill(self, *args)

    def load(self, *args):
        """load(self, string fileName, unsigned int skiplines)"""
        return _moose.Interpol_load(self, *args)

    def clear(self):
        """clear(self)"""
        return _moose.Interpol_clear(self)

    def push(self, *args):
        """push(self, double arg0)"""
        return _moose.Interpol_push(self, *args)

    def pop(self):
        """pop(self)"""
        return _moose.Interpol_pop(self)

    xmin = _swig_property(_moose.Interpol_xmin_get, _moose.Interpol_xmin_set)
    xmax = _swig_property(_moose.Interpol_xmax_get, _moose.Interpol_xmax_set)
    xdivs = _swig_property(_moose.Interpol_xdivs_get, _moose.Interpol_xdivs_set)
    mode = _swig_property(_moose.Interpol_mode_get, _moose.Interpol_mode_set)
    dx = _swig_property(_moose.Interpol_dx_get, _moose.Interpol_dx_set)
    sy = _swig_property(_moose.Interpol_sy_get, _moose.Interpol_sy_set)
    calcMode = _swig_property(_moose.Interpol_calcMode_get, _moose.Interpol_calcMode_set)
    calc_mode = _swig_property(_moose.Interpol_calc_mode_get, _moose.Interpol_calc_mode_set)
    table = _swig_property(_moose.Interpol_table_get)
Interpol_swigregister = _moose.Interpol_swigregister
Interpol_swigregister(Interpol)

class Interpol2D(Interpol):
    """Proxy of C++ pymoose::Interpol2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Interpol2D
        __init__(self, string path) -> Interpol2D
        __init__(self, string name, Id parentId) -> Interpol2D
        __init__(self, string name, PyMooseBase parent) -> Interpol2D
        __init__(self, Interpol2D src, string name, PyMooseBase parent) -> Interpol2D
        __init__(self, Interpol2D src, string name, Id parent) -> Interpol2D
        __init__(self, Interpol2D src, string path) -> Interpol2D
        __init__(self, Id src, string name, Id parent) -> Interpol2D
        __init__(self, Id src, string path) -> Interpol2D
        """
        this = _moose.new_Interpol2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Interpol2D
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Interpol2D_getType(self)

    def __get_ymin(self):
        """__get_ymin(self) -> double"""
        return _moose.Interpol2D___get_ymin(self)

    def __set_ymin(self, *args):
        """__set_ymin(self, double ymin)"""
        return _moose.Interpol2D___set_ymin(self, *args)

    def __get_ymax(self):
        """__get_ymax(self) -> double"""
        return _moose.Interpol2D___get_ymax(self)

    def __set_ymax(self, *args):
        """__set_ymax(self, double ymax)"""
        return _moose.Interpol2D___set_ymax(self, *args)

    def __get_ydivs(self):
        """__get_ydivs(self) -> int"""
        return _moose.Interpol2D___get_ydivs(self)

    def __set_ydivs(self, *args):
        """__set_ydivs(self, int ydivs)"""
        return _moose.Interpol2D___set_ydivs(self, *args)

    def __get_dy(self):
        """__get_dy(self) -> double"""
        return _moose.Interpol2D___get_dy(self)

    def __set_dy(self, *args):
        """__set_dy(self, double dy)"""
        return _moose.Interpol2D___set_dy(self, *args)

    def getTableValue(self, *args):
        """getTableValue(self, unsigned int row, unsigned int col) -> double"""
        return _moose.Interpol2D_getTableValue(self, *args)

    def setTableValue(self, *args):
        """setTableValue(self, unsigned int row, unsigned int col, double value)"""
        return _moose.Interpol2D_setTableValue(self, *args)

    ymin = _swig_property(_moose.Interpol2D_ymin_get, _moose.Interpol2D_ymin_set)
    ymax = _swig_property(_moose.Interpol2D_ymax_get, _moose.Interpol2D_ymax_set)
    ydivs = _swig_property(_moose.Interpol2D_ydivs_get, _moose.Interpol2D_ydivs_set)
    dy = _swig_property(_moose.Interpol2D_dy_get, _moose.Interpol2D_dy_set)
Interpol2D_swigregister = _moose.Interpol2D_swigregister
Interpol2D_swigregister(Interpol2D)

class TableIterator(object):
    """Proxy of C++ pymoose::TableIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, Interpol table) -> TableIterator"""
        this = _moose.new_TableIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    def __iter__(self):
        """__iter__(self) -> TableIterator"""
        return _moose.TableIterator___iter__(self)

    def __hasNext__(self):
        """__hasNext__(self) -> bool"""
        return _moose.TableIterator___hasNext__(self)

    def __next__(self):
        """__next__(self) -> double"""
        return _moose.TableIterator___next__(self)

    def _generator_(self):
    	if self.__hasNext__():
    		yield self.__next__()

    def next(self):
    	return self._generator_().next()
    	

    __swig_destroy__ = _moose.delete_TableIterator
    __del__ = lambda self : None;
TableIterator_swigregister = _moose.TableIterator_swigregister
TableIterator_swigregister(TableIterator)

TAB_IO = _moose.TAB_IO
TAB_LOOP = _moose.TAB_LOOP
TAB_ONCE = _moose.TAB_ONCE
TAB_BUF = _moose.TAB_BUF
TAB_SPIKE = _moose.TAB_SPIKE
TAB_FIELDS = _moose.TAB_FIELDS
TAB_DELAY = _moose.TAB_DELAY
class Table(Interpol):
    """Proxy of C++ pymoose::Table class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Table
        __init__(self, string path) -> Table
        __init__(self, string name, Id parentId) -> Table
        __init__(self, string name, PyMooseBase parent) -> Table
        __init__(self, Table src, string name, PyMooseBase parent) -> Table
        __init__(self, Table src, string name, Id parent) -> Table
        __init__(self, Id src, string name, Id parent) -> Table
        __init__(self, Table src, string path) -> Table
        __init__(self, Id src, string path) -> Table
        """
        this = _moose.new_Table(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Table
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Table_getType(self)

    def __get_input(self):
        """__get_input(self) -> double"""
        return _moose.Table___get_input(self)

    def __set_input(self, *args):
        """__set_input(self, double input)"""
        return _moose.Table___set_input(self, *args)

    def __get_output(self):
        """__get_output(self) -> double"""
        return _moose.Table___get_output(self)

    def __set_output(self, *args):
        """__set_output(self, double output)"""
        return _moose.Table___set_output(self, *args)

    def __get_stepMode(self):
        """__get_stepMode(self) -> int"""
        return _moose.Table___get_stepMode(self)

    def __set_stepMode(self, *args):
        """__set_stepMode(self, int stepMode)"""
        return _moose.Table___set_stepMode(self, *args)

    def __get_stepSize(self):
        """__get_stepSize(self) -> double"""
        return _moose.Table___get_stepSize(self)

    def __set_stepSize(self, *args):
        """__set_stepSize(self, double stepSize)"""
        return _moose.Table___set_stepSize(self, *args)

    def __get_threshold(self):
        """__get_threshold(self) -> double"""
        return _moose.Table___get_threshold(self)

    def __set_threshold(self, *args):
        """__set_threshold(self, double threshold)"""
        return _moose.Table___set_threshold(self, *args)

    def createTable(self, *args):
        """createTable(self, int xdiv, double xmin, double xmax)"""
        return _moose.Table_createTable(self, *args)

    input = _swig_property(_moose.Table_input_get, _moose.Table_input_set)
    output = _swig_property(_moose.Table_output_get, _moose.Table_output_set)
    stepMode = _swig_property(_moose.Table_stepMode_get, _moose.Table_stepMode_set)
    stepSize = _swig_property(_moose.Table_stepSize_get, _moose.Table_stepSize_set)
    stepsize = _swig_property(_moose.Table_stepsize_get, _moose.Table_stepsize_set)
    threshold = _swig_property(_moose.Table_threshold_get, _moose.Table_threshold_set)
    stepmode = _swig_property(_moose.Table_stepmode_get, _moose.Table_stepmode_set)
Table_swigregister = _moose.Table_swigregister
Table_swigregister(Table)

class SynChan(Neutral):
    """Proxy of C++ pymoose::SynChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> SynChan
        __init__(self, string path) -> SynChan
        __init__(self, string name, Id parentId) -> SynChan
        __init__(self, string name, PyMooseBase parent) -> SynChan
        __init__(self, SynChan src, string name, PyMooseBase parent) -> SynChan
        __init__(self, SynChan src, string name, Id parent) -> SynChan
        __init__(self, SynChan src, string path) -> SynChan
        __init__(self, Id src, string name, Id parent) -> SynChan
        __init__(self, Id src, string path) -> SynChan
        """
        this = _moose.new_SynChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SynChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.SynChan_getType(self)

    def __get_Gbar(self):
        """__get_Gbar(self) -> double"""
        return _moose.SynChan___get_Gbar(self)

    def __set_Gbar(self, *args):
        """__set_Gbar(self, double Gbar)"""
        return _moose.SynChan___set_Gbar(self, *args)

    def __get_Ek(self):
        """__get_Ek(self) -> double"""
        return _moose.SynChan___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(self, double Ek)"""
        return _moose.SynChan___set_Ek(self, *args)

    def __get_tau1(self):
        """__get_tau1(self) -> double"""
        return _moose.SynChan___get_tau1(self)

    def __set_tau1(self, *args):
        """__set_tau1(self, double tau1)"""
        return _moose.SynChan___set_tau1(self, *args)

    def __get_tau2(self):
        """__get_tau2(self) -> double"""
        return _moose.SynChan___get_tau2(self)

    def __set_tau2(self, *args):
        """__set_tau2(self, double tau2)"""
        return _moose.SynChan___set_tau2(self, *args)

    def __get_normalizeWeights(self):
        """__get_normalizeWeights(self) -> bool"""
        return _moose.SynChan___get_normalizeWeights(self)

    def __set_normalizeWeights(self, *args):
        """__set_normalizeWeights(self, bool normalizeWeights)"""
        return _moose.SynChan___set_normalizeWeights(self, *args)

    def __get_Gk(self):
        """__get_Gk(self) -> double"""
        return _moose.SynChan___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(self, double Gk)"""
        return _moose.SynChan___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(self) -> double"""
        return _moose.SynChan___get_Ik(self)

    def __get_numSynapses(self):
        """__get_numSynapses(self) -> unsigned int"""
        return _moose.SynChan___get_numSynapses(self)

    def getWeight(self, *args):
        """getWeight(self, unsigned int index) -> double"""
        return _moose.SynChan_getWeight(self, *args)

    def setWeight(self, *args):
        """setWeight(self, unsigned int index, double weight)"""
        return _moose.SynChan_setWeight(self, *args)

    def getDelay(self, *args):
        """getDelay(self, unsigned int index) -> double"""
        return _moose.SynChan_getDelay(self, *args)

    def setDelay(self, *args):
        """setDelay(self, unsigned int index, double delay)"""
        return _moose.SynChan_setDelay(self, *args)

    Gbar = _swig_property(_moose.SynChan_Gbar_get, _moose.SynChan_Gbar_set)
    Ek = _swig_property(_moose.SynChan_Ek_get, _moose.SynChan_Ek_set)
    tau1 = _swig_property(_moose.SynChan_tau1_get, _moose.SynChan_tau1_set)
    tau2 = _swig_property(_moose.SynChan_tau2_get, _moose.SynChan_tau2_set)
    normalizeWeights = _swig_property(_moose.SynChan_normalizeWeights_get, _moose.SynChan_normalizeWeights_set)
    Gk = _swig_property(_moose.SynChan_Gk_get, _moose.SynChan_Gk_set)
    Ik = _swig_property(_moose.SynChan_Ik_get)
    numSynapses = _swig_property(_moose.SynChan_numSynapses_get)
SynChan_swigregister = _moose.SynChan_swigregister
SynChan_swigregister(SynChan)

SynChan.weight = listproperty(SynChan.getWeight, SynChan.setWeight)
SynChan.delay = listproperty(SynChan.getDelay, SynChan.setDelay)                    

class BinSynchan(Neutral):
    """Proxy of C++ pymoose::BinSynchan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> BinSynchan
        __init__(self, string path) -> BinSynchan
        __init__(self, string name, Id parentId) -> BinSynchan
        __init__(self, string name, PyMooseBase parent) -> BinSynchan
        __init__(self, BinSynchan src, string name, PyMooseBase parent) -> BinSynchan
        __init__(self, BinSynchan src, string name, Id parent) -> BinSynchan
        __init__(self, Id src, string name, Id parent) -> BinSynchan
        __init__(self, BinSynchan src, string path) -> BinSynchan
        __init__(self, Id src, string path) -> BinSynchan
        """
        this = _moose.new_BinSynchan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_BinSynchan
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.BinSynchan_getType(self)

    def __get_Gbar(self):
        """__get_Gbar(self) -> double"""
        return _moose.BinSynchan___get_Gbar(self)

    def __set_Gbar(self, *args):
        """__set_Gbar(self, double Gbar)"""
        return _moose.BinSynchan___set_Gbar(self, *args)

    def __get_Ek(self):
        """__get_Ek(self) -> double"""
        return _moose.BinSynchan___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(self, double Ek)"""
        return _moose.BinSynchan___set_Ek(self, *args)

    def __get_tau1(self):
        """__get_tau1(self) -> double"""
        return _moose.BinSynchan___get_tau1(self)

    def __set_tau1(self, *args):
        """__set_tau1(self, double tau1)"""
        return _moose.BinSynchan___set_tau1(self, *args)

    def __get_tau2(self):
        """__get_tau2(self) -> double"""
        return _moose.BinSynchan___get_tau2(self)

    def __set_tau2(self, *args):
        """__set_tau2(self, double tau2)"""
        return _moose.BinSynchan___set_tau2(self, *args)

    def __get_normalizeWeights(self):
        """__get_normalizeWeights(self) -> bool"""
        return _moose.BinSynchan___get_normalizeWeights(self)

    def __set_normalizeWeights(self, *args):
        """__set_normalizeWeights(self, bool normalizeWeights)"""
        return _moose.BinSynchan___set_normalizeWeights(self, *args)

    def __get_Gk(self):
        """__get_Gk(self) -> double"""
        return _moose.BinSynchan___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(self, double Gk)"""
        return _moose.BinSynchan___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(self) -> double"""
        return _moose.BinSynchan___get_Ik(self)

    def __set_Ik(self, *args):
        """__set_Ik(self, double Ik)"""
        return _moose.BinSynchan___set_Ik(self, *args)

    def __get_numSynapses(self):
        """__get_numSynapses(self) -> unsigned int"""
        return _moose.BinSynchan___get_numSynapses(self)

    def __set_numSynapses(self, *args):
        """__set_numSynapses(self, unsigned int index, unsigned int num)"""
        return _moose.BinSynchan___set_numSynapses(self, *args)

    def __get_weight(self, *args):
        """__get_weight(self, unsigned int index) -> double"""
        return _moose.BinSynchan___get_weight(self, *args)

    def __set_weight(self, *args):
        """__set_weight(self, unsigned int index, double weight)"""
        return _moose.BinSynchan___set_weight(self, *args)

    def __get_delay(self, *args):
        """__get_delay(self, unsigned int index) -> double"""
        return _moose.BinSynchan___get_delay(self, *args)

    def __set_delay(self, *args):
        """__set_delay(self, unsigned int index, double delay)"""
        return _moose.BinSynchan___set_delay(self, *args)

    def __get_poolSize(self, *args):
        """__get_poolSize(self, unsigned int index) -> int"""
        return _moose.BinSynchan___get_poolSize(self, *args)

    def __set_poolSize(self, *args):
        """__set_poolSize(self, unsigned int index, int size)"""
        return _moose.BinSynchan___set_poolSize(self, *args)

    def __get_releaseP(self, *args):
        """__get_releaseP(self, unsigned int index) -> double"""
        return _moose.BinSynchan___get_releaseP(self, *args)

    def __set_releaseP(self, *args):
        """__set_releaseP(self, unsigned int index, double releaseP)"""
        return _moose.BinSynchan___set_releaseP(self, *args)

    def __get_releaseCount(self, *args):
        """__get_releaseCount(self, unsigned int index) -> double"""
        return _moose.BinSynchan___get_releaseCount(self, *args)

    def __set_releaseCount(self, *args):
        """__set_releaseCount(self, unsigned int index, double releaseCount)"""
        return _moose.BinSynchan___set_releaseCount(self, *args)

    def __get_synapse(self):
        """__get_synapse(self) -> double"""
        return _moose.BinSynchan___get_synapse(self)

    def __set_synapse(self, *args):
        """__set_synapse(self, double synapse)"""
        return _moose.BinSynchan___set_synapse(self, *args)

    def __get_activation(self):
        """__get_activation(self) -> double"""
        return _moose.BinSynchan___get_activation(self)

    def __set_activation(self, *args):
        """__set_activation(self, double activation)"""
        return _moose.BinSynchan___set_activation(self, *args)

    def __get_modulator(self):
        """__get_modulator(self) -> double"""
        return _moose.BinSynchan___get_modulator(self)

    def __set_modulator(self, *args):
        """__set_modulator(self, double modulator)"""
        return _moose.BinSynchan___set_modulator(self, *args)

    weight = _swig_property(_moose.BinSynchan_weight_get, _moose.BinSynchan_weight_set)
    delay = _swig_property(_moose.BinSynchan_delay_get, _moose.BinSynchan_delay_set)
    releaseP = _swig_property(_moose.BinSynchan_releaseP_get, _moose.BinSynchan_releaseP_set)
    poolSize = _swig_property(_moose.BinSynchan_poolSize_get, _moose.BinSynchan_poolSize_set)
    releaseCount = _swig_property(_moose.BinSynchan_releaseCount_get, _moose.BinSynchan_releaseCount_set)
    Gbar = _swig_property(_moose.BinSynchan_Gbar_get, _moose.BinSynchan_Gbar_set)
    Ek = _swig_property(_moose.BinSynchan_Ek_get, _moose.BinSynchan_Ek_set)
    tau1 = _swig_property(_moose.BinSynchan_tau1_get, _moose.BinSynchan_tau1_set)
    tau2 = _swig_property(_moose.BinSynchan_tau2_get, _moose.BinSynchan_tau2_set)
    normalizeWeights = _swig_property(_moose.BinSynchan_normalizeWeights_get, _moose.BinSynchan_normalizeWeights_set)
    Gk = _swig_property(_moose.BinSynchan_Gk_get, _moose.BinSynchan_Gk_set)
    Ik = _swig_property(_moose.BinSynchan_Ik_get)
    numSynapses = _swig_property(_moose.BinSynchan_numSynapses_get)
BinSynchan_swigregister = _moose.BinSynchan_swigregister
BinSynchan_swigregister(BinSynchan)

class StochSynchan(Neutral):
    """Proxy of C++ pymoose::StochSynchan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> StochSynchan
        __init__(self, string path) -> StochSynchan
        __init__(self, string name, Id parentId) -> StochSynchan
        __init__(self, string name, PyMooseBase parent) -> StochSynchan
        __init__(self, StochSynchan src, string name, PyMooseBase parent) -> StochSynchan
        __init__(self, StochSynchan src, string name, Id parent) -> StochSynchan
        __init__(self, StochSynchan src, string path) -> StochSynchan
        __init__(self, Id src, string name, Id parent) -> StochSynchan
        __init__(self, Id src, string path) -> StochSynchan
        """
        this = _moose.new_StochSynchan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_StochSynchan
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.StochSynchan_getType(self)

    def __get_Gbar(self):
        """__get_Gbar(self) -> double"""
        return _moose.StochSynchan___get_Gbar(self)

    def __set_Gbar(self, *args):
        """__set_Gbar(self, double Gbar)"""
        return _moose.StochSynchan___set_Gbar(self, *args)

    def __get_Ek(self):
        """__get_Ek(self) -> double"""
        return _moose.StochSynchan___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(self, double Ek)"""
        return _moose.StochSynchan___set_Ek(self, *args)

    def __get_tau1(self):
        """__get_tau1(self) -> double"""
        return _moose.StochSynchan___get_tau1(self)

    def __set_tau1(self, *args):
        """__set_tau1(self, double tau1)"""
        return _moose.StochSynchan___set_tau1(self, *args)

    def __get_tau2(self):
        """__get_tau2(self) -> double"""
        return _moose.StochSynchan___get_tau2(self)

    def __set_tau2(self, *args):
        """__set_tau2(self, double tau2)"""
        return _moose.StochSynchan___set_tau2(self, *args)

    def __get_normalizeWeights(self):
        """__get_normalizeWeights(self) -> bool"""
        return _moose.StochSynchan___get_normalizeWeights(self)

    def __set_normalizeWeights(self, *args):
        """__set_normalizeWeights(self, bool normalizeWeights)"""
        return _moose.StochSynchan___set_normalizeWeights(self, *args)

    def __get_Gk(self):
        """__get_Gk(self) -> double"""
        return _moose.StochSynchan___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(self, double Gk)"""
        return _moose.StochSynchan___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(self) -> double"""
        return _moose.StochSynchan___get_Ik(self)

    def __set_Ik(self, *args):
        """__set_Ik(self, double Ik)"""
        return _moose.StochSynchan___set_Ik(self, *args)

    def __get_numSynapses(self):
        """__get_numSynapses(self) -> unsigned int"""
        return _moose.StochSynchan___get_numSynapses(self)

    def __set_numSynapses(self, *args):
        """__set_numSynapses(self, unsigned int index, unsigned int num)"""
        return _moose.StochSynchan___set_numSynapses(self, *args)

    def __get_weight(self, *args):
        """__get_weight(self, unsigned int index) -> double"""
        return _moose.StochSynchan___get_weight(self, *args)

    def __set_weight(self, *args):
        """__set_weight(self, unsigned int index, double weight)"""
        return _moose.StochSynchan___set_weight(self, *args)

    def __get_delay(self, *args):
        """__get_delay(self, unsigned int index) -> double"""
        return _moose.StochSynchan___get_delay(self, *args)

    def __set_delay(self, *args):
        """__set_delay(self, unsigned int index, double delay)"""
        return _moose.StochSynchan___set_delay(self, *args)

    def __get_releaseP(self, *args):
        """__get_releaseP(self, unsigned int index) -> double"""
        return _moose.StochSynchan___get_releaseP(self, *args)

    def __set_releaseP(self, *args):
        """__set_releaseP(self, unsigned int index, double releaseP)"""
        return _moose.StochSynchan___set_releaseP(self, *args)

    def __get_releaseCount(self, *args):
        """__get_releaseCount(self, unsigned int index) -> double"""
        return _moose.StochSynchan___get_releaseCount(self, *args)

    def __set_releaseCount(self, *args):
        """__set_releaseCount(self, unsigned int index, double releaseCount)"""
        return _moose.StochSynchan___set_releaseCount(self, *args)

    def __get_synapse(self):
        """__get_synapse(self) -> double"""
        return _moose.StochSynchan___get_synapse(self)

    def __set_synapse(self, *args):
        """__set_synapse(self, double synapse)"""
        return _moose.StochSynchan___set_synapse(self, *args)

    def __get_activation(self):
        """__get_activation(self) -> double"""
        return _moose.StochSynchan___get_activation(self)

    def __set_activation(self, *args):
        """__set_activation(self, double activation)"""
        return _moose.StochSynchan___set_activation(self, *args)

    def __get_modulator(self):
        """__get_modulator(self) -> double"""
        return _moose.StochSynchan___get_modulator(self)

    def __set_modulator(self, *args):
        """__set_modulator(self, double modulator)"""
        return _moose.StochSynchan___set_modulator(self, *args)

    weight = _swig_property(_moose.StochSynchan_weight_get, _moose.StochSynchan_weight_set)
    delay = _swig_property(_moose.StochSynchan_delay_get, _moose.StochSynchan_delay_set)
    releaseP = _swig_property(_moose.StochSynchan_releaseP_get, _moose.StochSynchan_releaseP_set)
    releaseCount = _swig_property(_moose.StochSynchan_releaseCount_get, _moose.StochSynchan_releaseCount_set)
    Gbar = _swig_property(_moose.StochSynchan_Gbar_get, _moose.StochSynchan_Gbar_set)
    Ek = _swig_property(_moose.StochSynchan_Ek_get, _moose.StochSynchan_Ek_set)
    tau1 = _swig_property(_moose.StochSynchan_tau1_get, _moose.StochSynchan_tau1_set)
    tau2 = _swig_property(_moose.StochSynchan_tau2_get, _moose.StochSynchan_tau2_set)
    normalizeWeights = _swig_property(_moose.StochSynchan_normalizeWeights_get, _moose.StochSynchan_normalizeWeights_set)
    Gk = _swig_property(_moose.StochSynchan_Gk_get, _moose.StochSynchan_Gk_set)
    Ik = _swig_property(_moose.StochSynchan_Ik_get, _moose.StochSynchan_Ik_set)
    numSynapses = _swig_property(_moose.StochSynchan_numSynapses_get)
    activation = _swig_property(_moose.StochSynchan_activation_get, _moose.StochSynchan_activation_set)
    modulator = _swig_property(_moose.StochSynchan_modulator_get, _moose.StochSynchan_modulator_set)
StochSynchan_swigregister = _moose.StochSynchan_swigregister
StochSynchan_swigregister(StochSynchan)

class STPSynChan(SynChan):
    """Proxy of C++ pymoose::STPSynChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string objectName, Id parentId) -> STPSynChan
        __init__(self, string className, string path) -> STPSynChan
        __init__(self, string className, string objectName, PyMooseBase parent) -> STPSynChan
        __init__(self, Id id) -> STPSynChan
        __init__(self, string path) -> STPSynChan
        __init__(self, string name, Id parentId) -> STPSynChan
        __init__(self, string name, PyMooseBase parent) -> STPSynChan
        __init__(self, STPSynChan src, string name, PyMooseBase parent) -> STPSynChan
        __init__(self, STPSynChan src, string name, Id parent) -> STPSynChan
        __init__(self, STPSynChan src, string path) -> STPSynChan
        __init__(self, Id src, string name, Id parent) -> STPSynChan
        __init__(self, Id src, string path) -> STPSynChan
        """
        this = _moose.new_STPSynChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_STPSynChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.STPSynChan_getType(self)

    def __get_tauD1(self):
        """__get_tauD1(self) -> double"""
        return _moose.STPSynChan___get_tauD1(self)

    def __set_tauD1(self, *args):
        """__set_tauD1(self, double tauD1)"""
        return _moose.STPSynChan___set_tauD1(self, *args)

    def __get_tauD2(self):
        """__get_tauD2(self) -> double"""
        return _moose.STPSynChan___get_tauD2(self)

    def __set_tauD2(self, *args):
        """__set_tauD2(self, double tauD2)"""
        return _moose.STPSynChan___set_tauD2(self, *args)

    def __get_tauF(self):
        """__get_tauF(self) -> double"""
        return _moose.STPSynChan___get_tauF(self)

    def __set_tauF(self, *args):
        """__set_tauF(self, double tauF)"""
        return _moose.STPSynChan___set_tauF(self, *args)

    def __get_deltaF(self):
        """__get_deltaF(self) -> double"""
        return _moose.STPSynChan___get_deltaF(self)

    def __set_deltaF(self, *args):
        """__set_deltaF(self, double deltaF)"""
        return _moose.STPSynChan___set_deltaF(self, *args)

    def __get_d1(self):
        """__get_d1(self) -> double"""
        return _moose.STPSynChan___get_d1(self)

    def __set_d1(self, *args):
        """__set_d1(self, double d1)"""
        return _moose.STPSynChan___set_d1(self, *args)

    def __get_d2(self):
        """__get_d2(self) -> double"""
        return _moose.STPSynChan___get_d2(self)

    def __set_d2(self, *args):
        """__set_d2(self, double d2)"""
        return _moose.STPSynChan___set_d2(self, *args)

    def getF(self, *args):
        """getF(self, unsigned int index) -> double"""
        return _moose.STPSynChan_getF(self, *args)

    def getD1(self, *args):
        """getD1(self, unsigned int index) -> double"""
        return _moose.STPSynChan_getD1(self, *args)

    def getD2(self, *args):
        """getD2(self, unsigned int index) -> double"""
        return _moose.STPSynChan_getD2(self, *args)

    def getInitD1(self, *args):
        """getInitD1(self, unsigned int index) -> double"""
        return _moose.STPSynChan_getInitD1(self, *args)

    def getInitD2(self, *args):
        """getInitD2(self, unsigned int index) -> double"""
        return _moose.STPSynChan_getInitD2(self, *args)

    def getInitF(self, *args):
        """getInitF(self, unsigned int index) -> double"""
        return _moose.STPSynChan_getInitF(self, *args)

    def getInitPr(self, *args):
        """getInitPr(self, unsigned int index) -> double"""
        return _moose.STPSynChan_getInitPr(self, *args)

    def getPr(self, *args):
        """getPr(self, unsigned int index) -> double"""
        return _moose.STPSynChan_getPr(self, *args)

    def setInitPr(self, *args):
        """setInitPr(self, unsigned int index, double value)"""
        return _moose.STPSynChan_setInitPr(self, *args)

    def setInitF(self, *args):
        """setInitF(self, unsigned int index, double value)"""
        return _moose.STPSynChan_setInitF(self, *args)

    def setInitD1(self, *args):
        """setInitD1(self, unsigned int index, double value)"""
        return _moose.STPSynChan_setInitD1(self, *args)

    def setInitD2(self, *args):
        """setInitD2(self, unsigned int index, double value)"""
        return _moose.STPSynChan_setInitD2(self, *args)

    tauD1 = _swig_property(_moose.STPSynChan_tauD1_get, _moose.STPSynChan_tauD1_set)
    tauD2 = _swig_property(_moose.STPSynChan_tauD2_get, _moose.STPSynChan_tauD2_set)
    tauF = _swig_property(_moose.STPSynChan_tauF_get, _moose.STPSynChan_tauF_set)
    deltaF = _swig_property(_moose.STPSynChan_deltaF_get, _moose.STPSynChan_deltaF_set)
    d1 = _swig_property(_moose.STPSynChan_d1_get, _moose.STPSynChan_d1_set)
    d2 = _swig_property(_moose.STPSynChan_d2_get, _moose.STPSynChan_d2_set)
STPSynChan_swigregister = _moose.STPSynChan_swigregister
STPSynChan_swigregister(STPSynChan)

STPSynChan.initPr = listproperty(STPSynChan.getInitPr, STPSynChan.setInitPr)
STPSynChan.initF = listproperty(STPSynChan.getInitF, STPSynChan.setInitF)
STPSynChan.initD1 = listproperty(STPSynChan.getInitD1, STPSynChan.setInitD1)
STPSynChan.initD2 = listproperty(STPSynChan.getInitD2, STPSynChan.setInitD2)
STPSynChan.Pr = listproperty(STPSynChan.getPr)
STPSynChan.F = listproperty(STPSynChan.getF)
STPSynChan.D1 = listproperty(STPSynChan.getD1)
STPSynChan.D2 = listproperty(STPSynChan.getD2)

class STPNMDAChan(STPSynChan):
    """Proxy of C++ pymoose::STPNMDAChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string objectName, Id parentId) -> STPNMDAChan
        __init__(self, string className, string path) -> STPNMDAChan
        __init__(self, string className, string objectName, PyMooseBase parent) -> STPNMDAChan
        __init__(self, Id id) -> STPNMDAChan
        __init__(self, string path) -> STPNMDAChan
        __init__(self, string name, Id parentId) -> STPNMDAChan
        __init__(self, string name, PyMooseBase parent) -> STPNMDAChan
        __init__(self, STPNMDAChan src, string name, PyMooseBase parent) -> STPNMDAChan
        __init__(self, STPNMDAChan src, string name, Id parent) -> STPNMDAChan
        __init__(self, STPNMDAChan src, string path) -> STPNMDAChan
        __init__(self, Id src, string name, Id parent) -> STPNMDAChan
        __init__(self, Id src, string path) -> STPNMDAChan
        """
        this = _moose.new_STPNMDAChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_STPNMDAChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.STPNMDAChan_getType(self)

    def __get_MgConc(self):
        """__get_MgConc(self) -> double"""
        return _moose.STPNMDAChan___get_MgConc(self)

    def __set_MgConc(self, *args):
        """__set_MgConc(self, double MgConc)"""
        return _moose.STPNMDAChan___set_MgConc(self, *args)

    def __get_unblocked(self):
        """__get_unblocked(self) -> double"""
        return _moose.STPNMDAChan___get_unblocked(self)

    def __get_saturation(self):
        """__get_saturation(self) -> double"""
        return _moose.STPNMDAChan___get_saturation(self)

    def __set_saturation(self, *args):
        """__set_saturation(self, double saturation)"""
        return _moose.STPNMDAChan___set_saturation(self, *args)

    def getTransitionParam(self, *args):
        """getTransitionParam(self, unsigned int index) -> double"""
        return _moose.STPNMDAChan_getTransitionParam(self, *args)

    def setTransitionParam(self, *args):
        """setTransitionParam(self, unsigned int index, double transitionParam)"""
        return _moose.STPNMDAChan_setTransitionParam(self, *args)

    MgConc = _swig_property(_moose.STPNMDAChan_MgConc_get, _moose.STPNMDAChan_MgConc_set)
    unblocked = _swig_property(_moose.STPNMDAChan_unblocked_get)
    saturation = _swig_property(_moose.STPNMDAChan_saturation_get, _moose.STPNMDAChan_saturation_set)
STPNMDAChan_swigregister = _moose.STPNMDAChan_swigregister
STPNMDAChan_swigregister(STPNMDAChan)

class NMDAChan(SynChan):
    """Proxy of C++ pymoose::NMDAChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> NMDAChan
        __init__(self, string path) -> NMDAChan
        __init__(self, string name, Id parentId) -> NMDAChan
        __init__(self, string name, PyMooseBase parent) -> NMDAChan
        __init__(self, NMDAChan src, string name, PyMooseBase parent) -> NMDAChan
        __init__(self, NMDAChan src, string name, Id parent) -> NMDAChan
        __init__(self, NMDAChan src, string path) -> NMDAChan
        __init__(self, Id src, string name, Id parent) -> NMDAChan
        __init__(self, Id src, string path) -> NMDAChan
        """
        this = _moose.new_NMDAChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_NMDAChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.NMDAChan_getType(self)

    def getTransitionParam(self, *args):
        """getTransitionParam(self, unsigned int index) -> double"""
        return _moose.NMDAChan_getTransitionParam(self, *args)

    def setTransitionParam(self, *args):
        """setTransitionParam(self, unsigned int index, double transitionParam)"""
        return _moose.NMDAChan_setTransitionParam(self, *args)

    def __get_MgConc(self):
        """__get_MgConc(self) -> double"""
        return _moose.NMDAChan___get_MgConc(self)

    def __set_MgConc(self, *args):
        """__set_MgConc(self, double MgConc)"""
        return _moose.NMDAChan___set_MgConc(self, *args)

    def __get_unblocked(self):
        """__get_unblocked(self) -> double"""
        return _moose.NMDAChan___get_unblocked(self)

    def __get_saturation(self):
        """__get_saturation(self) -> double"""
        return _moose.NMDAChan___get_saturation(self)

    def __set_saturation(self, *args):
        """__set_saturation(self, double saturation)"""
        return _moose.NMDAChan___set_saturation(self, *args)

    MgConc = _swig_property(_moose.NMDAChan_MgConc_get, _moose.NMDAChan_MgConc_set)
    unblocked = _swig_property(_moose.NMDAChan_unblocked_get)
NMDAChan_swigregister = _moose.NMDAChan_swigregister
NMDAChan_swigregister(NMDAChan)

NMDAChan.transitionParam = listproperty(NMDAChan.getTransitionParam, NMDAChan.setTransitionParam)

class KinSynChan(SynChan):
    """Proxy of C++ pymoose::KinSynChan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> KinSynChan
        __init__(self, string path) -> KinSynChan
        __init__(self, string name, Id parentId) -> KinSynChan
        __init__(self, string name, PyMooseBase parent) -> KinSynChan
        __init__(self, KinSynChan src, string name, PyMooseBase parent) -> KinSynChan
        __init__(self, KinSynChan src, string name, Id parent) -> KinSynChan
        __init__(self, KinSynChan src, string path) -> KinSynChan
        __init__(self, Id src, string name, Id parent) -> KinSynChan
        __init__(self, Id src, string path) -> KinSynChan
        """
        this = _moose.new_KinSynChan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KinSynChan
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.KinSynChan_getType(self)

    def __get_rInf(self):
        """__get_rInf(self) -> double"""
        return _moose.KinSynChan___get_rInf(self)

    def __set_rInf(self, *args):
        """__set_rInf(self, double rInf)"""
        return _moose.KinSynChan___set_rInf(self, *args)

    def __get_pulseWidth(self):
        """__get_pulseWidth(self) -> double"""
        return _moose.KinSynChan___get_pulseWidth(self)

    def __set_pulseWidth(self, *args):
        """__set_pulseWidth(self, double pulseWidth)"""
        return _moose.KinSynChan___set_pulseWidth(self, *args)

    rInf = _swig_property(_moose.KinSynChan_rInf_get, _moose.KinSynChan_rInf_set)
    tau1 = _swig_property(_moose.KinSynChan_tau1_get, _moose.KinSynChan_tau1_set)
    pulseWidth = _swig_property(_moose.KinSynChan_pulseWidth_get, _moose.KinSynChan_pulseWidth_set)
KinSynChan_swigregister = _moose.KinSynChan_swigregister
KinSynChan_swigregister(KinSynChan)

class SpikeGen(Neutral):
    """Proxy of C++ pymoose::SpikeGen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string objectName, Id parentId) -> SpikeGen
        __init__(self, string className, string path) -> SpikeGen
        __init__(self, string className, string objectName, PyMooseBase parent) -> SpikeGen
        __init__(self, Id id) -> SpikeGen
        __init__(self, string path) -> SpikeGen
        __init__(self, string name, Id parentId) -> SpikeGen
        __init__(self, string name, PyMooseBase parent) -> SpikeGen
        __init__(self, SpikeGen src, string name, PyMooseBase parent) -> SpikeGen
        __init__(self, SpikeGen src, string name, Id parent) -> SpikeGen
        __init__(self, SpikeGen src, string path) -> SpikeGen
        __init__(self, Id src, string name, Id parent) -> SpikeGen
        __init__(self, Id src, string path) -> SpikeGen
        """
        this = _moose.new_SpikeGen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SpikeGen
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.SpikeGen_getType(self)

    def __get_threshold(self):
        """__get_threshold(self) -> double"""
        return _moose.SpikeGen___get_threshold(self)

    def __set_threshold(self, *args):
        """__set_threshold(self, double threshold)"""
        return _moose.SpikeGen___set_threshold(self, *args)

    def __get_refractT(self):
        """__get_refractT(self) -> double"""
        return _moose.SpikeGen___get_refractT(self)

    def __set_refractT(self, *args):
        """__set_refractT(self, double refractT)"""
        return _moose.SpikeGen___set_refractT(self, *args)

    def __get_absRefractT(self):
        """__get_absRefractT(self) -> double"""
        return _moose.SpikeGen___get_absRefractT(self)

    def __set_absRefractT(self, *args):
        """__set_absRefractT(self, double abs_refract)"""
        return _moose.SpikeGen___set_absRefractT(self, *args)

    def __get_amplitude(self):
        """__get_amplitude(self) -> double"""
        return _moose.SpikeGen___get_amplitude(self)

    def __set_amplitude(self, *args):
        """__set_amplitude(self, double amplitude)"""
        return _moose.SpikeGen___set_amplitude(self, *args)

    def __get_state(self):
        """__get_state(self) -> double"""
        return _moose.SpikeGen___get_state(self)

    def __set_state(self, *args):
        """__set_state(self, double state)"""
        return _moose.SpikeGen___set_state(self, *args)

    def __get_edgeTriggered(self):
        """__get_edgeTriggered(self) -> int"""
        return _moose.SpikeGen___get_edgeTriggered(self)

    def __set_edgeTriggered(self, *args):
        """__set_edgeTriggered(self, int edgeTriggered)"""
        return _moose.SpikeGen___set_edgeTriggered(self, *args)

    threshold = _swig_property(_moose.SpikeGen_threshold_get, _moose.SpikeGen_threshold_set)
    refractT = _swig_property(_moose.SpikeGen_refractT_get, _moose.SpikeGen_refractT_set)
    absRefractT = _swig_property(_moose.SpikeGen_absRefractT_get, _moose.SpikeGen_absRefractT_set)
    amplitude = _swig_property(_moose.SpikeGen_amplitude_get, _moose.SpikeGen_amplitude_set)
    state = _swig_property(_moose.SpikeGen_state_get, _moose.SpikeGen_state_set)
    edgeTriggered = _swig_property(_moose.SpikeGen_edgeTriggered_get, _moose.SpikeGen_edgeTriggered_set)
SpikeGen_swigregister = _moose.SpikeGen_swigregister
SpikeGen_swigregister(SpikeGen)

class StochSpikeGen(SpikeGen):
    """Proxy of C++ pymoose::StochSpikeGen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string objectName, Id parentId) -> StochSpikeGen
        __init__(self, string className, string path) -> StochSpikeGen
        __init__(self, string className, string objectName, PyMooseBase parent) -> StochSpikeGen
        __init__(self, Id id) -> StochSpikeGen
        __init__(self, string path) -> StochSpikeGen
        __init__(self, string name, Id parentId) -> StochSpikeGen
        __init__(self, string name, PyMooseBase parent) -> StochSpikeGen
        __init__(self, StochSpikeGen src, string name, PyMooseBase parent) -> StochSpikeGen
        __init__(self, StochSpikeGen src, string name, Id parent) -> StochSpikeGen
        __init__(self, StochSpikeGen src, string path) -> StochSpikeGen
        __init__(self, Id src, string name, Id parent) -> StochSpikeGen
        __init__(self, Id src, string path) -> StochSpikeGen
        """
        this = _moose.new_StochSpikeGen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_StochSpikeGen
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.StochSpikeGen_getType(self)

    def __get_pr(self):
        """__get_pr(self) -> double"""
        return _moose.StochSpikeGen___get_pr(self)

    def __set_pr(self, *args):
        """__set_pr(self, double pr)"""
        return _moose.StochSpikeGen___set_pr(self, *args)

    pr = _swig_property(_moose.StochSpikeGen_pr_get, _moose.StochSpikeGen_pr_set)
StochSpikeGen_swigregister = _moose.StochSpikeGen_swigregister
StochSpikeGen_swigregister(StochSpikeGen)

class RandomSpike(Neutral):
    """Proxy of C++ pymoose::RandomSpike class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> RandomSpike
        __init__(self, string path) -> RandomSpike
        __init__(self, string name, Id parentId) -> RandomSpike
        __init__(self, string name, PyMooseBase parent) -> RandomSpike
        __init__(self, RandomSpike src, string name, PyMooseBase parent) -> RandomSpike
        __init__(self, RandomSpike src, string name, Id parent) -> RandomSpike
        __init__(self, RandomSpike src, string path) -> RandomSpike
        __init__(self, Id src, string name, Id parent) -> RandomSpike
        __init__(self, Id src, string path) -> RandomSpike
        """
        this = _moose.new_RandomSpike(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_RandomSpike
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.RandomSpike_getType(self)

    def __get_minAmp(self):
        """__get_minAmp(self) -> double"""
        return _moose.RandomSpike___get_minAmp(self)

    def __set_minAmp(self, *args):
        """__set_minAmp(self, double minAmp)"""
        return _moose.RandomSpike___set_minAmp(self, *args)

    def __get_maxAmp(self):
        """__get_maxAmp(self) -> double"""
        return _moose.RandomSpike___get_maxAmp(self)

    def __set_maxAmp(self, *args):
        """__set_maxAmp(self, double maxAmp)"""
        return _moose.RandomSpike___set_maxAmp(self, *args)

    def __get_rate(self):
        """__get_rate(self) -> double"""
        return _moose.RandomSpike___get_rate(self)

    def __set_rate(self, *args):
        """__set_rate(self, double rate)"""
        return _moose.RandomSpike___set_rate(self, *args)

    def __get_resetValue(self):
        """__get_resetValue(self) -> double"""
        return _moose.RandomSpike___get_resetValue(self)

    def __set_resetValue(self, *args):
        """__set_resetValue(self, double resetValue)"""
        return _moose.RandomSpike___set_resetValue(self, *args)

    def __get_state(self):
        """__get_state(self) -> double"""
        return _moose.RandomSpike___get_state(self)

    def __set_state(self, *args):
        """__set_state(self, double state)"""
        return _moose.RandomSpike___set_state(self, *args)

    def __get_absRefract(self):
        """__get_absRefract(self) -> double"""
        return _moose.RandomSpike___get_absRefract(self)

    def __set_absRefract(self, *args):
        """__set_absRefract(self, double absRefract)"""
        return _moose.RandomSpike___set_absRefract(self, *args)

    def __get_lastEvent(self):
        """__get_lastEvent(self) -> double"""
        return _moose.RandomSpike___get_lastEvent(self)

    def __get_reset(self):
        """__get_reset(self) -> int"""
        return _moose.RandomSpike___get_reset(self)

    def __set_reset(self, *args):
        """__set_reset(self, int reset)"""
        return _moose.RandomSpike___set_reset(self, *args)

    minAmp = _swig_property(_moose.RandomSpike_minAmp_get, _moose.RandomSpike_minAmp_set)
    maxAmp = _swig_property(_moose.RandomSpike_maxAmp_get, _moose.RandomSpike_maxAmp_set)
    rate = _swig_property(_moose.RandomSpike_rate_get, _moose.RandomSpike_rate_set)
    resetValue = _swig_property(_moose.RandomSpike_resetValue_get, _moose.RandomSpike_resetValue_set)
    state = _swig_property(_moose.RandomSpike_state_get, _moose.RandomSpike_state_set)
    absRefract = _swig_property(_moose.RandomSpike_absRefract_get, _moose.RandomSpike_absRefract_set)
    lastEvent = _swig_property(_moose.RandomSpike_lastEvent_get)
    reset = _swig_property(_moose.RandomSpike_reset_get, _moose.RandomSpike_reset_set)
RandomSpike_swigregister = _moose.RandomSpike_swigregister
RandomSpike_swigregister(RandomSpike)

class Efield(Neutral):
    """Proxy of C++ pymoose::Efield class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string objectName, Id parentId) -> Efield
        __init__(self, string className, string path) -> Efield
        __init__(self, string className, string objectName, PyMooseBase parent) -> Efield
        __init__(self, Id id) -> Efield
        __init__(self, string path) -> Efield
        __init__(self, string name, Id parentId) -> Efield
        __init__(self, string name, PyMooseBase parent) -> Efield
        __init__(self, Efield src, string name, PyMooseBase parent) -> Efield
        __init__(self, Efield src, string name, Id parent) -> Efield
        __init__(self, Efield src, string path) -> Efield
        __init__(self, Id src, string name, Id parent) -> Efield
        __init__(self, Id src, string path) -> Efield
        """
        this = _moose.new_Efield(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Efield
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Efield_getType(self)

    def __get_x(self):
        """__get_x(self) -> double"""
        return _moose.Efield___get_x(self)

    def __set_x(self, *args):
        """__set_x(self, double x)"""
        return _moose.Efield___set_x(self, *args)

    def __get_y(self):
        """__get_y(self) -> double"""
        return _moose.Efield___get_y(self)

    def __set_y(self, *args):
        """__set_y(self, double y)"""
        return _moose.Efield___set_y(self, *args)

    def __get_z(self):
        """__get_z(self) -> double"""
        return _moose.Efield___get_z(self)

    def __set_z(self, *args):
        """__set_z(self, double z)"""
        return _moose.Efield___set_z(self, *args)

    def __get_scale(self):
        """__get_scale(self) -> double"""
        return _moose.Efield___get_scale(self)

    def __set_scale(self, *args):
        """__set_scale(self, double scale)"""
        return _moose.Efield___set_scale(self, *args)

    def __get_potential(self):
        """__get_potential(self) -> double"""
        return _moose.Efield___get_potential(self)

    x = _swig_property(_moose.Efield_x_get, _moose.Efield_x_set)
    y = _swig_property(_moose.Efield_y_get, _moose.Efield_y_set)
    z = _swig_property(_moose.Efield_z_get, _moose.Efield_z_set)
    scale = _swig_property(_moose.Efield_scale_get, _moose.Efield_scale_set)
    potential = _swig_property(_moose.Efield_potential_get)
Efield_swigregister = _moose.Efield_swigregister
Efield_swigregister(Efield)

class PulseGen(Neutral):
    """Proxy of C++ pymoose::PulseGen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> PulseGen
        __init__(self, string path) -> PulseGen
        __init__(self, string name, Id parentId) -> PulseGen
        __init__(self, string name, PyMooseBase parent) -> PulseGen
        __init__(self, PulseGen src, string name, PyMooseBase parent) -> PulseGen
        __init__(self, PulseGen src, string name, Id parent) -> PulseGen
        __init__(self, PulseGen src, string path) -> PulseGen
        __init__(self, Id src, string name, Id parent) -> PulseGen
        __init__(self, Id src, string path) -> PulseGen
        """
        this = _moose.new_PulseGen(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PulseGen
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.PulseGen_getType(self)

    def __get_firstLevel(self):
        """__get_firstLevel(self) -> double"""
        return _moose.PulseGen___get_firstLevel(self)

    def __set_firstLevel(self, *args):
        """__set_firstLevel(self, double firstLevel)"""
        return _moose.PulseGen___set_firstLevel(self, *args)

    def __get_firstWidth(self):
        """__get_firstWidth(self) -> double"""
        return _moose.PulseGen___get_firstWidth(self)

    def __set_firstWidth(self, *args):
        """__set_firstWidth(self, double firstWidth)"""
        return _moose.PulseGen___set_firstWidth(self, *args)

    def __get_firstDelay(self):
        """__get_firstDelay(self) -> double"""
        return _moose.PulseGen___get_firstDelay(self)

    def __set_firstDelay(self, *args):
        """__set_firstDelay(self, double firstDelay)"""
        return _moose.PulseGen___set_firstDelay(self, *args)

    def __get_secondLevel(self):
        """__get_secondLevel(self) -> double"""
        return _moose.PulseGen___get_secondLevel(self)

    def __set_secondLevel(self, *args):
        """__set_secondLevel(self, double secondLevel)"""
        return _moose.PulseGen___set_secondLevel(self, *args)

    def __get_secondWidth(self):
        """__get_secondWidth(self) -> double"""
        return _moose.PulseGen___get_secondWidth(self)

    def __set_secondWidth(self, *args):
        """__set_secondWidth(self, double secondWidth)"""
        return _moose.PulseGen___set_secondWidth(self, *args)

    def __get_secondDelay(self):
        """__get_secondDelay(self) -> double"""
        return _moose.PulseGen___get_secondDelay(self)

    def __set_secondDelay(self, *args):
        """__set_secondDelay(self, double secondDelay)"""
        return _moose.PulseGen___set_secondDelay(self, *args)

    def __get_baseLevel(self):
        """__get_baseLevel(self) -> double"""
        return _moose.PulseGen___get_baseLevel(self)

    def __set_baseLevel(self, *args):
        """__set_baseLevel(self, double baseLevel)"""
        return _moose.PulseGen___set_baseLevel(self, *args)

    def __get_output(self):
        """__get_output(self) -> double"""
        return _moose.PulseGen___get_output(self)

    def __get_trigTime(self):
        """__get_trigTime(self) -> double"""
        return _moose.PulseGen___get_trigTime(self)

    def __set_trigTime(self, *args):
        """__set_trigTime(self, double trigTime)"""
        return _moose.PulseGen___set_trigTime(self, *args)

    def __get_trigMode(self):
        """__get_trigMode(self) -> int"""
        return _moose.PulseGen___get_trigMode(self)

    def __set_trigMode(self, *args):
        """__set_trigMode(self, int trigMode)"""
        return _moose.PulseGen___set_trigMode(self, *args)

    def __get_prevInput(self):
        """__get_prevInput(self) -> int"""
        return _moose.PulseGen___get_prevInput(self)

    def setCount(self, *args):
        """setCount(self, int count)"""
        return _moose.PulseGen_setCount(self, *args)

    def getCount(self):
        """getCount(self) -> int"""
        return _moose.PulseGen_getCount(self)

    def setDelay(self, *args):
        """setDelay(self, int index, double value)"""
        return _moose.PulseGen_setDelay(self, *args)

    def getDelay(self, *args):
        """getDelay(self, int index) -> double"""
        return _moose.PulseGen_getDelay(self, *args)

    def setLevel(self, *args):
        """setLevel(self, int index, double value)"""
        return _moose.PulseGen_setLevel(self, *args)

    def getLevel(self, *args):
        """getLevel(self, int index) -> double"""
        return _moose.PulseGen_getLevel(self, *args)

    def setWidth(self, *args):
        """setWidth(self, int index, double value)"""
        return _moose.PulseGen_setWidth(self, *args)

    def getWidth(self, *args):
        """getWidth(self, int index) -> double"""
        return _moose.PulseGen_getWidth(self, *args)

    firstLevel = _swig_property(_moose.PulseGen_firstLevel_get, _moose.PulseGen_firstLevel_set)
    firstWidth = _swig_property(_moose.PulseGen_firstWidth_get, _moose.PulseGen_firstWidth_set)
    firstDelay = _swig_property(_moose.PulseGen_firstDelay_get, _moose.PulseGen_firstDelay_set)
    secondLevel = _swig_property(_moose.PulseGen_secondLevel_get, _moose.PulseGen_secondLevel_set)
    secondWidth = _swig_property(_moose.PulseGen_secondWidth_get, _moose.PulseGen_secondWidth_set)
    secondDelay = _swig_property(_moose.PulseGen_secondDelay_get, _moose.PulseGen_secondDelay_set)
    baseLevel = _swig_property(_moose.PulseGen_baseLevel_get, _moose.PulseGen_baseLevel_set)
    output = _swig_property(_moose.PulseGen_output_get)
    trigTime = _swig_property(_moose.PulseGen_trigTime_get, _moose.PulseGen_trigTime_set)
    trigMode = _swig_property(_moose.PulseGen_trigMode_get, _moose.PulseGen_trigMode_set)
    prevInput = _swig_property(_moose.PulseGen_prevInput_get)
    count = _swig_property(_moose.PulseGen_count_get, _moose.PulseGen_count_set)
PulseGen_swigregister = _moose.PulseGen_swigregister
PulseGen_swigregister(PulseGen)

PulseGen.width = listproperty(PulseGen.getWidth, PulseGen.setWidth, len=PulseGen.getCount)
PulseGen.delay = listproperty(PulseGen.getDelay, PulseGen.setDelay, len=PulseGen.getCount)
PulseGen.level = listproperty(PulseGen.getLevel, PulseGen.setLevel, len=PulseGen.getCount)

class Nernst(Neutral):
    """Proxy of C++ pymoose::Nernst class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Nernst
        __init__(self, string path) -> Nernst
        __init__(self, string name, Id parentId) -> Nernst
        __init__(self, string name, PyMooseBase parent) -> Nernst
        __init__(self, Nernst src, string name, PyMooseBase parent) -> Nernst
        __init__(self, Nernst src, string name, Id parent) -> Nernst
        __init__(self, Nernst src, string path) -> Nernst
        __init__(self, Id src, string name, Id parent) -> Nernst
        __init__(self, Id src, string path) -> Nernst
        """
        this = _moose.new_Nernst(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Nernst
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Nernst_getType(self)

    def __get_E(self):
        """__get_E(self) -> double"""
        return _moose.Nernst___get_E(self)

    def __set_E(self, *args):
        """__set_E(self, double E)"""
        return _moose.Nernst___set_E(self, *args)

    def __get_Temperature(self):
        """__get_Temperature(self) -> double"""
        return _moose.Nernst___get_Temperature(self)

    def __set_Temperature(self, *args):
        """__set_Temperature(self, double Temperature)"""
        return _moose.Nernst___set_Temperature(self, *args)

    def __get_valence(self):
        """__get_valence(self) -> int"""
        return _moose.Nernst___get_valence(self)

    def __set_valence(self, *args):
        """__set_valence(self, int valence)"""
        return _moose.Nernst___set_valence(self, *args)

    def __get_Cin(self):
        """__get_Cin(self) -> double"""
        return _moose.Nernst___get_Cin(self)

    def __set_Cin(self, *args):
        """__set_Cin(self, double Cin)"""
        return _moose.Nernst___set_Cin(self, *args)

    def __get_Cout(self):
        """__get_Cout(self) -> double"""
        return _moose.Nernst___get_Cout(self)

    def __set_Cout(self, *args):
        """__set_Cout(self, double Cout)"""
        return _moose.Nernst___set_Cout(self, *args)

    def __get_scale(self):
        """__get_scale(self) -> double"""
        return _moose.Nernst___get_scale(self)

    def __set_scale(self, *args):
        """__set_scale(self, double scale)"""
        return _moose.Nernst___set_scale(self, *args)

    def __get_ESrc(self):
        """__get_ESrc(self) -> double"""
        return _moose.Nernst___get_ESrc(self)

    def __set_ESrc(self, *args):
        """__set_ESrc(self, double ESrc)"""
        return _moose.Nernst___set_ESrc(self, *args)

    def __get_CinMsg(self):
        """__get_CinMsg(self) -> double"""
        return _moose.Nernst___get_CinMsg(self)

    def __set_CinMsg(self, *args):
        """__set_CinMsg(self, double CinMsg)"""
        return _moose.Nernst___set_CinMsg(self, *args)

    def __get_CoutMsg(self):
        """__get_CoutMsg(self) -> double"""
        return _moose.Nernst___get_CoutMsg(self)

    def __set_CoutMsg(self, *args):
        """__set_CoutMsg(self, double CoutMsg)"""
        return _moose.Nernst___set_CoutMsg(self, *args)

    E = _swig_property(_moose.Nernst_E_get)
    Temperature = _swig_property(_moose.Nernst_Temperature_get, _moose.Nernst_Temperature_set)
    valence = _swig_property(_moose.Nernst_valence_get, _moose.Nernst_valence_set)
    Cin = _swig_property(_moose.Nernst_Cin_get, _moose.Nernst_Cin_set)
    Cout = _swig_property(_moose.Nernst_Cout_get, _moose.Nernst_Cout_set)
    scale = _swig_property(_moose.Nernst_scale_get, _moose.Nernst_scale_set)
Nernst_swigregister = _moose.Nernst_swigregister
Nernst_swigregister(Nernst)

class CaConc(Neutral):
    """Proxy of C++ pymoose::CaConc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> CaConc
        __init__(self, string path) -> CaConc
        __init__(self, string name, Id parentId) -> CaConc
        __init__(self, string name, PyMooseBase parent) -> CaConc
        __init__(self, CaConc src, string name, PyMooseBase parent) -> CaConc
        __init__(self, CaConc src, string name, Id parent) -> CaConc
        __init__(self, Id src, string name, Id parent) -> CaConc
        __init__(self, CaConc src, string path) -> CaConc
        __init__(self, Id src, string path) -> CaConc
        """
        this = _moose.new_CaConc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_CaConc
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.CaConc_getType(self)

    def __get_Ca(self):
        """__get_Ca(self) -> double"""
        return _moose.CaConc___get_Ca(self)

    def __set_Ca(self, *args):
        """__set_Ca(self, double Ca)"""
        return _moose.CaConc___set_Ca(self, *args)

    def __get_CaBasal(self):
        """__get_CaBasal(self) -> double"""
        return _moose.CaConc___get_CaBasal(self)

    def __set_CaBasal(self, *args):
        """__set_CaBasal(self, double CaBasal)"""
        return _moose.CaConc___set_CaBasal(self, *args)

    def __get_Ca_base(self):
        """__get_Ca_base(self) -> double"""
        return _moose.CaConc___get_Ca_base(self)

    def __set_Ca_base(self, *args):
        """__set_Ca_base(self, double Ca_base)"""
        return _moose.CaConc___set_Ca_base(self, *args)

    def __get_tau(self):
        """__get_tau(self) -> double"""
        return _moose.CaConc___get_tau(self)

    def __set_tau(self, *args):
        """__set_tau(self, double tau)"""
        return _moose.CaConc___set_tau(self, *args)

    def __get_B(self):
        """__get_B(self) -> double"""
        return _moose.CaConc___get_B(self)

    def __set_B(self, *args):
        """__set_B(self, double B)"""
        return _moose.CaConc___set_B(self, *args)

    def __get_thick(self):
        """__get_thick(self) -> double"""
        return _moose.CaConc___get_thick(self)

    def __set_thick(self, *args):
        """__set_thick(self, double thick)"""
        return _moose.CaConc___set_thick(self, *args)

    def __get_ceiling(self):
        """__get_ceiling(self) -> double"""
        return _moose.CaConc___get_ceiling(self)

    def __set_ceiling(self, *args):
        """__set_ceiling(self, double ceiling)"""
        return _moose.CaConc___set_ceiling(self, *args)

    def __get_floor(self):
        """__get_floor(self) -> double"""
        return _moose.CaConc___get_floor(self)

    def __set_floor(self, *args):
        """__set_floor(self, double floor)"""
        return _moose.CaConc___set_floor(self, *args)

    Ca = _swig_property(_moose.CaConc_Ca_get, _moose.CaConc_Ca_set)
    CaBasal = _swig_property(_moose.CaConc_CaBasal_get, _moose.CaConc_CaBasal_set)
    Ca_base = _swig_property(_moose.CaConc_Ca_base_get, _moose.CaConc_Ca_base_set)
    tau = _swig_property(_moose.CaConc_tau_get, _moose.CaConc_tau_set)
    B = _swig_property(_moose.CaConc_B_get, _moose.CaConc_B_set)
    thick = _swig_property(_moose.CaConc_thick_get, _moose.CaConc_thick_set)
    ceiling = _swig_property(_moose.CaConc_ceiling_get, _moose.CaConc_ceiling_set)
    floor = _swig_property(_moose.CaConc_floor_get, _moose.CaConc_floor_set)
CaConc_swigregister = _moose.CaConc_swigregister
CaConc_swigregister(CaConc)

class HHGate(Neutral):
    """Proxy of C++ pymoose::HHGate class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string name, Id parentId) -> HHGate
        __init__(self, string className, string path) -> HHGate
        __init__(self, string className, string objectName, PyMooseBase parent) -> HHGate
        __init__(self, Id id) -> HHGate
        __init__(self, string path) -> HHGate
        __init__(self, string name, Id parentId) -> HHGate
        __init__(self, string name, PyMooseBase parent) -> HHGate
        __init__(self, HHGate src, string name, PyMooseBase parent) -> HHGate
        __init__(self, HHGate src, string name, Id parent) -> HHGate
        __init__(self, HHGate src, string path) -> HHGate
        __init__(self, Id src, string name, Id parent) -> HHGate
        __init__(self, Id src, string path) -> HHGate
        """
        this = _moose.new_HHGate(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHGate
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.HHGate_getType(self)

    def __get_A(self):
        """__get_A(self) -> Interpol"""
        return _moose.HHGate___get_A(self)

    def __get_B(self):
        """__get_B(self) -> Interpol"""
        return _moose.HHGate___get_B(self)

    def tabFill(self, *args):
        """tabFill(self, int xdivs, int mode)"""
        return _moose.HHGate_tabFill(self, *args)

    def setupAlpha(self, *args):
        """
        setupAlpha(self, double AA, double AB, double AC, double AD, double AF, 
            double BA, double BB, double BC, double BD, 
            double BF, double size = 3000, double min = -0.1, 
            double max = 0.05)
        setupAlpha(self, double AA, double AB, double AC, double AD, double AF, 
            double BA, double BB, double BC, double BD, 
            double BF, double size = 3000, double min = -0.1)
        setupAlpha(self, double AA, double AB, double AC, double AD, double AF, 
            double BA, double BB, double BC, double BD, 
            double BF, double size = 3000)
        setupAlpha(self, double AA, double AB, double AC, double AD, double AF, 
            double BA, double BB, double BC, double BD, 
            double BF)
        """
        return _moose.HHGate_setupAlpha(self, *args)

    def setupTau(self, *args):
        """
        setupTau(self, double AA, double AB, double AC, double AD, double AF, 
            double BA, double BB, double BC, double BD, 
            double BF, double size = 3000, double min = -0.1, 
            double max = 0.05)
        setupTau(self, double AA, double AB, double AC, double AD, double AF, 
            double BA, double BB, double BC, double BD, 
            double BF, double size = 3000, double min = -0.1)
        setupTau(self, double AA, double AB, double AC, double AD, double AF, 
            double BA, double BB, double BC, double BD, 
            double BF, double size = 3000)
        setupTau(self, double AA, double AB, double AC, double AD, double AF, 
            double BA, double BB, double BC, double BD, 
            double BF)
        """
        return _moose.HHGate_setupTau(self, *args)

    def tweakAlpha(self):
        """tweakAlpha(self)"""
        return _moose.HHGate_tweakAlpha(self)

    def tweakTau(self):
        """tweakTau(self)"""
        return _moose.HHGate_tweakTau(self)

    A = _swig_property(_moose.HHGate_A_get)
    B = _swig_property(_moose.HHGate_B_get)
HHGate_swigregister = _moose.HHGate_swigregister
HHGate_swigregister(HHGate)

class Leakage(Neutral):
    """Proxy of C++ pymoose::Leakage class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Leakage
        __init__(self, string path) -> Leakage
        __init__(self, string name, Id parentId) -> Leakage
        __init__(self, string name, PyMooseBase parent) -> Leakage
        __init__(self, Leakage src, string name, PyMooseBase parent) -> Leakage
        __init__(self, Leakage src, string name, Id parent) -> Leakage
        __init__(self, Leakage src, string path) -> Leakage
        __init__(self, Id src, string name, Id parent) -> Leakage
        __init__(self, Id src, string path) -> Leakage
        """
        this = _moose.new_Leakage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Leakage
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Leakage_getType(self)

    def __get_Ek(self):
        """__get_Ek(self) -> double"""
        return _moose.Leakage___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(self, double Ek)"""
        return _moose.Leakage___set_Ek(self, *args)

    def __get_Gk(self):
        """__get_Gk(self) -> double"""
        return _moose.Leakage___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(self, double Gk)"""
        return _moose.Leakage___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(self) -> double"""
        return _moose.Leakage___get_Ik(self)

    def __get_activation(self):
        """__get_activation(self) -> double"""
        return _moose.Leakage___get_activation(self)

    def __set_activation(self, *args):
        """__set_activation(self, double activation)"""
        return _moose.Leakage___set_activation(self, *args)

    Ek = _swig_property(_moose.Leakage_Ek_get, _moose.Leakage_Ek_set)
    Gk = _swig_property(_moose.Leakage_Gk_get, _moose.Leakage_Gk_set)
    Ik = _swig_property(_moose.Leakage_Ik_get)
    activation = _swig_property(_moose.Leakage_activation_get, _moose.Leakage_activation_set)
Leakage_swigregister = _moose.Leakage_swigregister
Leakage_swigregister(Leakage)

class HHChannel(Neutral):
    """Proxy of C++ pymoose::HHChannel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string name, Id parentId) -> HHChannel
        __init__(self, string className, string path) -> HHChannel
        __init__(self, string className, string objectName, PyMooseBase parent) -> HHChannel
        __init__(self, Id id) -> HHChannel
        __init__(self, string path) -> HHChannel
        __init__(self, string name, Id parentId) -> HHChannel
        __init__(self, string name, PyMooseBase parent) -> HHChannel
        __init__(self, HHChannel src, string name, PyMooseBase parent) -> HHChannel
        __init__(self, HHChannel src, string name, Id parent) -> HHChannel
        __init__(self, HHChannel src, string path) -> HHChannel
        __init__(self, Id src, string name, Id parent) -> HHChannel
        __init__(self, Id src, string path) -> HHChannel
        """
        this = _moose.new_HHChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHChannel
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.HHChannel_getType(self)

    def __get_Gbar(self):
        """__get_Gbar(self) -> double"""
        return _moose.HHChannel___get_Gbar(self)

    def __set_Gbar(self, *args):
        """__set_Gbar(self, double Gbar)"""
        return _moose.HHChannel___set_Gbar(self, *args)

    def __get_Ek(self):
        """__get_Ek(self) -> double"""
        return _moose.HHChannel___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(self, double Ek)"""
        return _moose.HHChannel___set_Ek(self, *args)

    def __get_Xpower(self):
        """__get_Xpower(self) -> double"""
        return _moose.HHChannel___get_Xpower(self)

    def __set_Xpower(self, *args):
        """__set_Xpower(self, double Xpower)"""
        return _moose.HHChannel___set_Xpower(self, *args)

    def __get_Ypower(self):
        """__get_Ypower(self) -> double"""
        return _moose.HHChannel___get_Ypower(self)

    def __set_Ypower(self, *args):
        """__set_Ypower(self, double Ypower)"""
        return _moose.HHChannel___set_Ypower(self, *args)

    def __get_Zpower(self):
        """__get_Zpower(self) -> double"""
        return _moose.HHChannel___get_Zpower(self)

    def __set_Zpower(self, *args):
        """__set_Zpower(self, double Zpower)"""
        return _moose.HHChannel___set_Zpower(self, *args)

    def __get_instant(self):
        """__get_instant(self) -> int"""
        return _moose.HHChannel___get_instant(self)

    def __set_instant(self, *args):
        """__set_instant(self, int instant)"""
        return _moose.HHChannel___set_instant(self, *args)

    def __get_Gk(self):
        """__get_Gk(self) -> double"""
        return _moose.HHChannel___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(self, double Gk)"""
        return _moose.HHChannel___set_Gk(self, *args)

    def __get_Ik(self):
        """__get_Ik(self) -> double"""
        return _moose.HHChannel___get_Ik(self)

    def __get_X(self):
        """__get_X(self) -> double"""
        return _moose.HHChannel___get_X(self)

    def __set_X(self, *args):
        """__set_X(self, double X)"""
        return _moose.HHChannel___set_X(self, *args)

    def __get_Y(self):
        """__get_Y(self) -> double"""
        return _moose.HHChannel___get_Y(self)

    def __set_Y(self, *args):
        """__set_Y(self, double Y)"""
        return _moose.HHChannel___set_Y(self, *args)

    def __get_Z(self):
        """__get_Z(self) -> double"""
        return _moose.HHChannel___get_Z(self)

    def __set_Z(self, *args):
        """__set_Z(self, double Z)"""
        return _moose.HHChannel___set_Z(self, *args)

    def __get_useConcentration(self):
        """__get_useConcentration(self) -> int"""
        return _moose.HHChannel___get_useConcentration(self)

    def __set_useConcentration(self, *args):
        """__set_useConcentration(self, int useConcentration)"""
        return _moose.HHChannel___set_useConcentration(self, *args)

    def createTable(self, *args):
        """createTable(self, string gate, unsigned int divs, double min, double max)"""
        return _moose.HHChannel_createTable(self, *args)

    def tweakAlpha(self, *args):
        """tweakAlpha(self, string gate)"""
        return _moose.HHChannel_tweakAlpha(self, *args)

    def tweakTau(self, *args):
        """tweakTau(self, string gate)"""
        return _moose.HHChannel_tweakTau(self, *args)

    def setupAlpha(self, *args):
        """
        setupAlpha(self, string gate, double_vector params)
        setupAlpha(self, string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, 
            double BD, double BF, double size = 3000, 
            double min = -0.1, double max = 0.05)
        setupAlpha(self, string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, 
            double BD, double BF, double size = 3000, 
            double min = -0.1)
        setupAlpha(self, string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, 
            double BD, double BF, double size = 3000)
        setupAlpha(self, string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, 
            double BD, double BF)
        """
        return _moose.HHChannel_setupAlpha(self, *args)

    def setupTau(self, *args):
        """
        setupTau(self, string gate, double_vector params)
        setupTau(self, string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, 
            double BD, double BF, double size = 3000, 
            double min = -0.1, double max = 0.05)
        setupTau(self, string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, 
            double BD, double BF, double size = 3000, 
            double min = -0.1)
        setupTau(self, string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, 
            double BD, double BF, double size = 3000)
        setupTau(self, string gate, double AA, double AB, double AC, double AD, 
            double AF, double BA, double BB, double BC, 
            double BD, double BF)
        """
        return _moose.HHChannel_setupTau(self, *args)

    Gbar = _swig_property(_moose.HHChannel_Gbar_get, _moose.HHChannel_Gbar_set)
    Ek = _swig_property(_moose.HHChannel_Ek_get, _moose.HHChannel_Ek_set)
    Ik = _swig_property(_moose.HHChannel_Ik_get)
    Gk = _swig_property(_moose.HHChannel_Gk_get, _moose.HHChannel_Gk_set)
    Xpower = _swig_property(_moose.HHChannel_Xpower_get, _moose.HHChannel_Xpower_set)
    Ypower = _swig_property(_moose.HHChannel_Ypower_get, _moose.HHChannel_Ypower_set)
    Zpower = _swig_property(_moose.HHChannel_Zpower_get, _moose.HHChannel_Zpower_set)
    X = _swig_property(_moose.HHChannel_X_get, _moose.HHChannel_X_set)
    Y = _swig_property(_moose.HHChannel_Y_get, _moose.HHChannel_Y_set)
    Z = _swig_property(_moose.HHChannel_Z_get, _moose.HHChannel_Z_set)
    instant = _swig_property(_moose.HHChannel_instant_get, _moose.HHChannel_instant_set)
    useConcentration = _swig_property(_moose.HHChannel_useConcentration_get, _moose.HHChannel_useConcentration_set)
    def __get_xGate(self):
        if self.Xpower != 0:
            return HHGate('xGate', self)
        else:
            return None

    def __get_yGate(self):
        if self.Ypower != 0:
            return HHGate('yGate', self)
        else:
            return None
    def __get_zGate(self):
        if self.Zpower != 0:
            return HHGate('zGate', self)
        else:
            return None

    xGate = property(__get_xGate)
    yGate = property(__get_yGate)
    zGate = property(__get_zGate)

HHChannel_swigregister = _moose.HHChannel_swigregister
HHChannel_swigregister(HHChannel)

class Mg_block(Neutral):
    """Proxy of C++ pymoose::Mg_block class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Mg_block
        __init__(self, string path) -> Mg_block
        __init__(self, string name, Id parentId) -> Mg_block
        __init__(self, string name, PyMooseBase parent) -> Mg_block
        __init__(self, Mg_block src, string name, PyMooseBase parent) -> Mg_block
        __init__(self, Mg_block src, string name, Id parent) -> Mg_block
        __init__(self, Mg_block src, string path) -> Mg_block
        __init__(self, Id src, string name, Id parent) -> Mg_block
        __init__(self, Id src, string path) -> Mg_block
        """
        this = _moose.new_Mg_block(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Mg_block
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Mg_block_getType(self)

    def __get_KMg_A(self):
        """__get_KMg_A(self) -> double"""
        return _moose.Mg_block___get_KMg_A(self)

    def __set_KMg_A(self, *args):
        """__set_KMg_A(self, double KMg_A)"""
        return _moose.Mg_block___set_KMg_A(self, *args)

    def __get_KMg_B(self):
        """__get_KMg_B(self) -> double"""
        return _moose.Mg_block___get_KMg_B(self)

    def __set_KMg_B(self, *args):
        """__set_KMg_B(self, double KMg_B)"""
        return _moose.Mg_block___set_KMg_B(self, *args)

    def __get_CMg(self):
        """__get_CMg(self) -> double"""
        return _moose.Mg_block___get_CMg(self)

    def __set_CMg(self, *args):
        """__set_CMg(self, double CMg)"""
        return _moose.Mg_block___set_CMg(self, *args)

    def __get_Ik(self):
        """__get_Ik(self) -> double"""
        return _moose.Mg_block___get_Ik(self)

    def __set_Ik(self, *args):
        """__set_Ik(self, double Ik)"""
        return _moose.Mg_block___set_Ik(self, *args)

    def __get_Gk(self):
        """__get_Gk(self) -> double"""
        return _moose.Mg_block___get_Gk(self)

    def __set_Gk(self, *args):
        """__set_Gk(self, double Gk)"""
        return _moose.Mg_block___set_Gk(self, *args)

    def __get_Ek(self):
        """__get_Ek(self) -> double"""
        return _moose.Mg_block___get_Ek(self)

    def __set_Ek(self, *args):
        """__set_Ek(self, double Ek)"""
        return _moose.Mg_block___set_Ek(self, *args)

    def __get_Zk(self):
        """__get_Zk(self) -> double"""
        return _moose.Mg_block___get_Zk(self)

    def __set_Zk(self, *args):
        """__set_Zk(self, double Zk)"""
        return _moose.Mg_block___set_Zk(self, *args)

    KMg_A = _swig_property(_moose.Mg_block_KMg_A_get, _moose.Mg_block_KMg_A_set)
    KMg_B = _swig_property(_moose.Mg_block_KMg_B_get, _moose.Mg_block_KMg_B_set)
    CMg = _swig_property(_moose.Mg_block_CMg_get, _moose.Mg_block_CMg_set)
    Ik = _swig_property(_moose.Mg_block_Ik_get, _moose.Mg_block_Ik_set)
    Gk = _swig_property(_moose.Mg_block_Gk_get, _moose.Mg_block_Gk_set)
    Ek = _swig_property(_moose.Mg_block_Ek_get, _moose.Mg_block_Ek_set)
    Zk = _swig_property(_moose.Mg_block_Zk_get, _moose.Mg_block_Zk_set)
Mg_block_swigregister = _moose.Mg_block_swigregister
Mg_block_swigregister(Mg_block)

class Compartment(Neutral):
    """Proxy of C++ pymoose::Compartment class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Compartment
        __init__(self, string path) -> Compartment
        __init__(self, string name, Id parentId) -> Compartment
        __init__(self, string name, PyMooseBase parent) -> Compartment
        __init__(self, Compartment src, string name, PyMooseBase parent) -> Compartment
        __init__(self, Compartment src, string name, Id parent) -> Compartment
        __init__(self, Id src, string name, Id parent) -> Compartment
        __init__(self, Compartment src, string path) -> Compartment
        __init__(self, Id src, string path) -> Compartment
        """
        this = _moose.new_Compartment(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Compartment
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Compartment_getType(self)

    def __get_Vm(self):
        """__get_Vm(self) -> double"""
        return _moose.Compartment___get_Vm(self)

    def __set_Vm(self, *args):
        """__set_Vm(self, double Vm)"""
        return _moose.Compartment___set_Vm(self, *args)

    def __get_Cm(self):
        """__get_Cm(self) -> double"""
        return _moose.Compartment___get_Cm(self)

    def __set_Cm(self, *args):
        """__set_Cm(self, double Cm)"""
        return _moose.Compartment___set_Cm(self, *args)

    def __get_Em(self):
        """__get_Em(self) -> double"""
        return _moose.Compartment___get_Em(self)

    def __set_Em(self, *args):
        """__set_Em(self, double Em)"""
        return _moose.Compartment___set_Em(self, *args)

    def __get_Im(self):
        """__get_Im(self) -> double"""
        return _moose.Compartment___get_Im(self)

    def __set_Im(self, *args):
        """__set_Im(self, double Im)"""
        return _moose.Compartment___set_Im(self, *args)

    def __get_inject(self):
        """__get_inject(self) -> double"""
        return _moose.Compartment___get_inject(self)

    def __set_inject(self, *args):
        """__set_inject(self, double inject)"""
        return _moose.Compartment___set_inject(self, *args)

    def __get_initVm(self):
        """__get_initVm(self) -> double"""
        return _moose.Compartment___get_initVm(self)

    def __set_initVm(self, *args):
        """__set_initVm(self, double initVm)"""
        return _moose.Compartment___set_initVm(self, *args)

    def __get_Rm(self):
        """__get_Rm(self) -> double"""
        return _moose.Compartment___get_Rm(self)

    def __set_Rm(self, *args):
        """__set_Rm(self, double Rm)"""
        return _moose.Compartment___set_Rm(self, *args)

    def __get_Ra(self):
        """__get_Ra(self) -> double"""
        return _moose.Compartment___get_Ra(self)

    def __set_Ra(self, *args):
        """__set_Ra(self, double Ra)"""
        return _moose.Compartment___set_Ra(self, *args)

    def __get_diameter(self):
        """__get_diameter(self) -> double"""
        return _moose.Compartment___get_diameter(self)

    def __set_diameter(self, *args):
        """__set_diameter(self, double diameter)"""
        return _moose.Compartment___set_diameter(self, *args)

    def __get_length(self):
        """__get_length(self) -> double"""
        return _moose.Compartment___get_length(self)

    def __set_length(self, *args):
        """__set_length(self, double length)"""
        return _moose.Compartment___set_length(self, *args)

    def __get_x(self):
        """__get_x(self) -> double"""
        return _moose.Compartment___get_x(self)

    def __set_x(self, *args):
        """__set_x(self, double x)"""
        return _moose.Compartment___set_x(self, *args)

    def __get_y(self):
        """__get_y(self) -> double"""
        return _moose.Compartment___get_y(self)

    def __set_y(self, *args):
        """__set_y(self, double y)"""
        return _moose.Compartment___set_y(self, *args)

    def __get_z(self):
        """__get_z(self) -> double"""
        return _moose.Compartment___get_z(self)

    def __set_z(self, *args):
        """__set_z(self, double z)"""
        return _moose.Compartment___set_z(self, *args)

    def __get_x0(self):
        """__get_x0(self) -> double"""
        return _moose.Compartment___get_x0(self)

    def __set_x0(self, *args):
        """__set_x0(self, double x)"""
        return _moose.Compartment___set_x0(self, *args)

    def __get_y0(self):
        """__get_y0(self) -> double"""
        return _moose.Compartment___get_y0(self)

    def __set_y0(self, *args):
        """__set_y0(self, double y)"""
        return _moose.Compartment___set_y0(self, *args)

    def __get_z0(self):
        """__get_z0(self) -> double"""
        return _moose.Compartment___get_z0(self)

    def __set_z0(self, *args):
        """__set_z0(self, double z)"""
        return _moose.Compartment___set_z0(self, *args)

    Vm = _swig_property(_moose.Compartment_Vm_get, _moose.Compartment_Vm_set)
    Cm = _swig_property(_moose.Compartment_Cm_get, _moose.Compartment_Cm_set)
    Em = _swig_property(_moose.Compartment_Em_get, _moose.Compartment_Em_set)
    Im = _swig_property(_moose.Compartment_Im_get, _moose.Compartment_Im_set)
    inject = _swig_property(_moose.Compartment_inject_get, _moose.Compartment_inject_set)
    initVm = _swig_property(_moose.Compartment_initVm_get, _moose.Compartment_initVm_set)
    Rm = _swig_property(_moose.Compartment_Rm_get, _moose.Compartment_Rm_set)
    Ra = _swig_property(_moose.Compartment_Ra_get, _moose.Compartment_Ra_set)
    diameter = _swig_property(_moose.Compartment_diameter_get, _moose.Compartment_diameter_set)
    length = _swig_property(_moose.Compartment_length_get, _moose.Compartment_length_set)
    x = _swig_property(_moose.Compartment_x_get, _moose.Compartment_x_set)
    y = _swig_property(_moose.Compartment_y_get, _moose.Compartment_y_set)
    z = _swig_property(_moose.Compartment_z_get, _moose.Compartment_z_set)
    x0 = _swig_property(_moose.Compartment_x0_get, _moose.Compartment_x0_set)
    y0 = _swig_property(_moose.Compartment_y0_get, _moose.Compartment_y0_set)
    z0 = _swig_property(_moose.Compartment_z0_get, _moose.Compartment_z0_set)
Compartment_swigregister = _moose.Compartment_swigregister
Compartment_swigregister(Compartment)

class NeuroScan(PyMooseBase):
    """Proxy of C++ pymoose::NeuroScan class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> NeuroScan
        __init__(self, string path) -> NeuroScan
        __init__(self, string name, Id parentId) -> NeuroScan
        __init__(self, string name, PyMooseBase parent) -> NeuroScan
        __init__(self, NeuroScan src, string name, PyMooseBase parent) -> NeuroScan
        __init__(self, NeuroScan src, string name, Id parent) -> NeuroScan
        __init__(self, NeuroScan src, string path) -> NeuroScan
        __init__(self, Id src, string name, Id parent) -> NeuroScan
        __init__(self, Id src, string path) -> NeuroScan
        """
        this = _moose.new_NeuroScan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_NeuroScan
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.NeuroScan_getType(self)

    def __get_VDiv(self):
        """__get_VDiv(self) -> int"""
        return _moose.NeuroScan___get_VDiv(self)

    def __set_VDiv(self, *args):
        """__set_VDiv(self, int VDiv)"""
        return _moose.NeuroScan___set_VDiv(self, *args)

    def __get_VMin(self):
        """__get_VMin(self) -> double"""
        return _moose.NeuroScan___get_VMin(self)

    def __set_VMin(self, *args):
        """__set_VMin(self, double VMin)"""
        return _moose.NeuroScan___set_VMin(self, *args)

    def __get_VMax(self):
        """__get_VMax(self) -> double"""
        return _moose.NeuroScan___get_VMax(self)

    def __set_VMax(self, *args):
        """__set_VMax(self, double VMax)"""
        return _moose.NeuroScan___set_VMax(self, *args)

    def __get_CaDiv(self):
        """__get_CaDiv(self) -> int"""
        return _moose.NeuroScan___get_CaDiv(self)

    def __set_CaDiv(self, *args):
        """__set_CaDiv(self, int CaDiv)"""
        return _moose.NeuroScan___set_CaDiv(self, *args)

    def __get_CaMin(self):
        """__get_CaMin(self) -> double"""
        return _moose.NeuroScan___get_CaMin(self)

    def __set_CaMin(self, *args):
        """__set_CaMin(self, double CaMin)"""
        return _moose.NeuroScan___set_CaMin(self, *args)

    def __get_CaMax(self):
        """__get_CaMax(self) -> double"""
        return _moose.NeuroScan___get_CaMax(self)

    def __set_CaMax(self, *args):
        """__set_CaMax(self, double CaMax)"""
        return _moose.NeuroScan___set_CaMax(self, *args)

    VDiv = _swig_property(_moose.NeuroScan_VDiv_get, _moose.NeuroScan_VDiv_set)
    VMin = _swig_property(_moose.NeuroScan_VMin_get, _moose.NeuroScan_VMin_set)
    VMax = _swig_property(_moose.NeuroScan_VMax_get, _moose.NeuroScan_VMax_set)
    CaDiv = _swig_property(_moose.NeuroScan_CaDiv_get, _moose.NeuroScan_CaDiv_set)
    CaMin = _swig_property(_moose.NeuroScan_CaMin_get, _moose.NeuroScan_CaMin_set)
    CaMax = _swig_property(_moose.NeuroScan_CaMax_get, _moose.NeuroScan_CaMax_set)
NeuroScan_swigregister = _moose.NeuroScan_swigregister
NeuroScan_swigregister(NeuroScan)

class HSolve(Neutral):
    """Proxy of C++ pymoose::HSolve class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> HSolve
        __init__(self, string path) -> HSolve
        __init__(self, string name, Id parentId) -> HSolve
        __init__(self, string name, PyMooseBase parent) -> HSolve
        __init__(self, HSolve src, string name, PyMooseBase parent) -> HSolve
        __init__(self, HSolve src, string name, Id parent) -> HSolve
        __init__(self, HSolve src, string path) -> HSolve
        __init__(self, Id src, string name, Id parent) -> HSolve
        __init__(self, Id src, string path) -> HSolve
        """
        this = _moose.new_HSolve(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HSolve
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.HSolve_getType(self)

    def __get_seed_path(self):
        """__get_seed_path(self) -> string"""
        return _moose.HSolve___get_seed_path(self)

    def __set_seed_path(self, *args):
        """__set_seed_path(self, string path)"""
        return _moose.HSolve___set_seed_path(self, *args)

    def __get_NDiv(self):
        """__get_NDiv(self) -> int"""
        return _moose.HSolve___get_NDiv(self)

    def __set_NDiv(self, *args):
        """__set_NDiv(self, int NDiv)"""
        return _moose.HSolve___set_NDiv(self, *args)

    def __get_VLo(self):
        """__get_VLo(self) -> double"""
        return _moose.HSolve___get_VLo(self)

    def __set_VLo(self, *args):
        """__set_VLo(self, double VLo)"""
        return _moose.HSolve___set_VLo(self, *args)

    def __get_VHi(self):
        """__get_VHi(self) -> double"""
        return _moose.HSolve___get_VHi(self)

    def __set_VHi(self, *args):
        """__set_VHi(self, double VHi)"""
        return _moose.HSolve___set_VHi(self, *args)

    seedPath = _swig_property(_moose.HSolve_seedPath_get, _moose.HSolve_seedPath_set)
    NDiv = _swig_property(_moose.HSolve_NDiv_get, _moose.HSolve_NDiv_set)
    VLo = _swig_property(_moose.HSolve_VLo_get, _moose.HSolve_VLo_set)
    VHi = _swig_property(_moose.HSolve_VHi_get, _moose.HSolve_VHi_set)
HSolve_swigregister = _moose.HSolve_swigregister
HSolve_swigregister(HSolve)

class Kintegrator(Neutral):
    """Proxy of C++ pymoose::Kintegrator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Kintegrator
        __init__(self, string path) -> Kintegrator
        __init__(self, string name, Id parentId) -> Kintegrator
        __init__(self, string name, PyMooseBase parent) -> Kintegrator
        __init__(self, Kintegrator src, string name, PyMooseBase parent) -> Kintegrator
        __init__(self, Kintegrator src, string name, Id parent) -> Kintegrator
        __init__(self, Kintegrator src, string path) -> Kintegrator
        __init__(self, Id src, string name, Id parent) -> Kintegrator
        __init__(self, Id src, string path) -> Kintegrator
        """
        this = _moose.new_Kintegrator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Kintegrator
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Kintegrator_getType(self)

    def __get_isInitiatilized(self):
        """__get_isInitiatilized(self) -> bool"""
        return _moose.Kintegrator___get_isInitiatilized(self)

    def __get_method(self):
        """__get_method(self) -> string"""
        return _moose.Kintegrator___get_method(self)

    def __set_method(self, *args):
        """__set_method(self, string method)"""
        return _moose.Kintegrator___set_method(self, *args)

    isInitiatilized = _swig_property(_moose.Kintegrator_isInitiatilized_get)
    integrate_method = _swig_property(_moose.Kintegrator_integrate_method_get, _moose.Kintegrator_integrate_method_set)
Kintegrator_swigregister = _moose.Kintegrator_swigregister
Kintegrator_swigregister(Kintegrator)

class SteadyState(Neutral):
    """Proxy of C++ pymoose::SteadyState class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> SteadyState
        __init__(self, string path) -> SteadyState
        __init__(self, string name, Id parentId) -> SteadyState
        __init__(self, string name, PyMooseBase parent) -> SteadyState
        __init__(self, SteadyState src, string name, PyMooseBase parent) -> SteadyState
        __init__(self, SteadyState src, string name, Id parent) -> SteadyState
        __init__(self, SteadyState src, string path) -> SteadyState
        __init__(self, Id src, string name, Id parent) -> SteadyState
        __init__(self, Id src, string path) -> SteadyState
        """
        this = _moose.new_SteadyState(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SteadyState
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.SteadyState_getType(self)

    def __get_badStoichiometry(self):
        """__get_badStoichiometry(self) -> bool"""
        return _moose.SteadyState___get_badStoichiometry(self)

    def __get_isInitialized(self):
        """__get_isInitialized(self) -> bool"""
        return _moose.SteadyState___get_isInitialized(self)

    def __get_nIter(self):
        """__get_nIter(self) -> unsigned int"""
        return _moose.SteadyState___get_nIter(self)

    def __get_status(self):
        """__get_status(self) -> string"""
        return _moose.SteadyState___get_status(self)

    def __get_maxIter(self):
        """__get_maxIter(self) -> unsigned int"""
        return _moose.SteadyState___get_maxIter(self)

    def __set_maxIter(self, *args):
        """__set_maxIter(self, unsigned int maxIter)"""
        return _moose.SteadyState___set_maxIter(self, *args)

    def __get_convergenceCriterion(self):
        """__get_convergenceCriterion(self) -> double"""
        return _moose.SteadyState___get_convergenceCriterion(self)

    def __set_convergenceCriterion(self, *args):
        """__set_convergenceCriterion(self, double convergenceCriterion)"""
        return _moose.SteadyState___set_convergenceCriterion(self, *args)

    def __get_nVarMols(self):
        """__get_nVarMols(self) -> unsigned int"""
        return _moose.SteadyState___get_nVarMols(self)

    def __get_rank(self):
        """__get_rank(self) -> unsigned int"""
        return _moose.SteadyState___get_rank(self)

    def __get_stateType(self):
        """__get_stateType(self) -> unsigned int"""
        return _moose.SteadyState___get_stateType(self)

    def __get_nNegEigenvalues(self):
        """__get_nNegEigenvalues(self) -> unsigned int"""
        return _moose.SteadyState___get_nNegEigenvalues(self)

    def __get_nPosEigenvalues(self):
        """__get_nPosEigenvalues(self) -> unsigned int"""
        return _moose.SteadyState___get_nPosEigenvalues(self)

    def __get_solutionStatus(self):
        """__get_solutionStatus(self) -> unsigned int"""
        return _moose.SteadyState___get_solutionStatus(self)

    badStoichiometry = _swig_property(_moose.SteadyState_badStoichiometry_get)
    isInitialized = _swig_property(_moose.SteadyState_isInitialized_get)
    nIter = _swig_property(_moose.SteadyState_nIter_get)
    status = _swig_property(_moose.SteadyState_status_get)
    maxIter = _swig_property(_moose.SteadyState_maxIter_get, _moose.SteadyState_maxIter_set)
    convergenceCriterion = _swig_property(_moose.SteadyState_convergenceCriterion_get, _moose.SteadyState_convergenceCriterion_set)
    nVarMols = _swig_property(_moose.SteadyState_nVarMols_get)
    rank = _swig_property(_moose.SteadyState_rank_get)
    stateType = _swig_property(_moose.SteadyState_stateType_get)
    nNegEigenvalues = _swig_property(_moose.SteadyState_nNegEigenvalues_get)
    nPosEigenvalues = _swig_property(_moose.SteadyState_nPosEigenvalues_get)
    solutionStatus = _swig_property(_moose.SteadyState_solutionStatus_get)
SteadyState_swigregister = _moose.SteadyState_swigregister
SteadyState_swigregister(SteadyState)

class MathFunc(Neutral):
    """Proxy of C++ pymoose::MathFunc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> MathFunc
        __init__(self, string path) -> MathFunc
        __init__(self, string name, Id parentId) -> MathFunc
        __init__(self, string name, PyMooseBase parent) -> MathFunc
        __init__(self, MathFunc src, string name, PyMooseBase parent) -> MathFunc
        __init__(self, MathFunc src, string name, Id parent) -> MathFunc
        __init__(self, MathFunc src, string path) -> MathFunc
        __init__(self, Id src, string name, Id parent) -> MathFunc
        __init__(self, Id src, string path) -> MathFunc
        """
        this = _moose.new_MathFunc(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_MathFunc
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.MathFunc_getType(self)

    def __get_mathML(self):
        """__get_mathML(self) -> string"""
        return _moose.MathFunc___get_mathML(self)

    def __set_mathML(self, *args):
        """__set_mathML(self, string mathML)"""
        return _moose.MathFunc___set_mathML(self, *args)

    def __get_function(self):
        """__get_function(self) -> string"""
        return _moose.MathFunc___get_function(self)

    def __set_function(self, *args):
        """__set_function(self, string function)"""
        return _moose.MathFunc___set_function(self, *args)

    def __get_result(self):
        """__get_result(self) -> double"""
        return _moose.MathFunc___get_result(self)

    def __set_result(self, *args):
        """__set_result(self, double result)"""
        return _moose.MathFunc___set_result(self, *args)

    mathML = _swig_property(_moose.MathFunc_mathML_get, _moose.MathFunc_mathML_set)
    function = _swig_property(_moose.MathFunc_function_get, _moose.MathFunc_function_set)
    result = _swig_property(_moose.MathFunc_result_get, _moose.MathFunc_result_set)
MathFunc_swigregister = _moose.MathFunc_swigregister
MathFunc_swigregister(MathFunc)

class Stoich(Neutral):
    """Proxy of C++ pymoose::Stoich class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string name, Id parentId) -> Stoich
        __init__(self, string className, string path) -> Stoich
        __init__(self, string className, string objectName, PyMooseBase parent) -> Stoich
        __init__(self, Id id) -> Stoich
        __init__(self, string path) -> Stoich
        __init__(self, string name, Id parentId) -> Stoich
        __init__(self, string name, PyMooseBase parent) -> Stoich
        __init__(self, Stoich src, string name, PyMooseBase parent) -> Stoich
        __init__(self, Stoich src, string name, Id parent) -> Stoich
        __init__(self, Stoich src, string path) -> Stoich
        __init__(self, Id src, string name, Id parent) -> Stoich
        __init__(self, Id src, string path) -> Stoich
        """
        this = _moose.new_Stoich(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Stoich
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Stoich_getType(self)

    def __get_nMols(self):
        """__get_nMols(self) -> unsigned int"""
        return _moose.Stoich___get_nMols(self)

    def __get_nVarMols(self):
        """__get_nVarMols(self) -> unsigned int"""
        return _moose.Stoich___get_nVarMols(self)

    def __get_nSumTot(self):
        """__get_nSumTot(self) -> unsigned int"""
        return _moose.Stoich___get_nSumTot(self)

    def __get_nBuffered(self):
        """__get_nBuffered(self) -> unsigned int"""
        return _moose.Stoich___get_nBuffered(self)

    def __get_nReacs(self):
        """__get_nReacs(self) -> unsigned int"""
        return _moose.Stoich___get_nReacs(self)

    def __get_nEnz(self):
        """__get_nEnz(self) -> unsigned int"""
        return _moose.Stoich___get_nEnz(self)

    def __get_nMMenz(self):
        """__get_nMMenz(self) -> unsigned int"""
        return _moose.Stoich___get_nMMenz(self)

    def __get_nExternalRates(self):
        """__get_nExternalRates(self) -> unsigned int"""
        return _moose.Stoich___get_nExternalRates(self)

    def __get_useOneWayReacs(self):
        """__get_useOneWayReacs(self) -> bool"""
        return _moose.Stoich___get_useOneWayReacs(self)

    def __set_useOneWayReacs(self, *args):
        """__set_useOneWayReacs(self, bool useOneWayReacs)"""
        return _moose.Stoich___set_useOneWayReacs(self, *args)

    def __get_targetPath(self):
        """__get_targetPath(self) -> string"""
        return _moose.Stoich___get_targetPath(self)

    def __set_targetPath(self, *args):
        """__set_targetPath(self, string path)"""
        return _moose.Stoich___set_targetPath(self, *args)

    def __get_pathVec(self):
        """__get_pathVec(self) -> Id_vector"""
        return _moose.Stoich___get_pathVec(self)

    def __get_rateVectorSize(self):
        """__get_rateVectorSize(self) -> unsigned int"""
        return _moose.Stoich___get_rateVectorSize(self)

    nMols = _swig_property(_moose.Stoich_nMols_get)
    nVarMols = _swig_property(_moose.Stoich_nVarMols_get)
    nSumTot = _swig_property(_moose.Stoich_nSumTot_get)
    nBuffered = _swig_property(_moose.Stoich_nBuffered_get)
    nReacs = _swig_property(_moose.Stoich_nReacs_get)
    nEnz = _swig_property(_moose.Stoich_nEnz_get)
    nMMenz = _swig_property(_moose.Stoich_nMMenz_get)
    nExternalRates = _swig_property(_moose.Stoich_nExternalRates_get)
    useOneWayReacs = _swig_property(_moose.Stoich_useOneWayReacs_get, _moose.Stoich_useOneWayReacs_set)
    targetPath = _swig_property(_moose.Stoich_targetPath_get, _moose.Stoich_targetPath_set)
    rateVectorSize = _swig_property(_moose.Stoich_rateVectorSize_get)
    pathVec = _swig_property(_moose.Stoich_pathVec_get)
Stoich_swigregister = _moose.Stoich_swigregister
Stoich_swigregister(Stoich)

class KineticHub(Neutral):
    """Proxy of C++ pymoose::KineticHub class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> KineticHub
        __init__(self, string path) -> KineticHub
        __init__(self, string name, Id parentId) -> KineticHub
        __init__(self, string name, PyMooseBase parent) -> KineticHub
        __init__(self, KineticHub src, string name, PyMooseBase parent) -> KineticHub
        __init__(self, KineticHub src, string name, Id parent) -> KineticHub
        __init__(self, KineticHub src, string path) -> KineticHub
        __init__(self, Id src, string name, Id parent) -> KineticHub
        __init__(self, Id src, string path) -> KineticHub
        """
        this = _moose.new_KineticHub(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KineticHub
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.KineticHub_getType(self)

    def __get_nVarMol(self):
        """__get_nVarMol(self) -> unsigned int"""
        return _moose.KineticHub___get_nVarMol(self)

    def __get_nReac(self):
        """__get_nReac(self) -> unsigned int"""
        return _moose.KineticHub___get_nReac(self)

    def __get_nEnz(self):
        """__get_nEnz(self) -> unsigned int"""
        return _moose.KineticHub___get_nEnz(self)

    def __get_zombifySeparate(self):
        """__get_zombifySeparate(self) -> bool"""
        return _moose.KineticHub___get_zombifySeparate(self)

    def __set_zombifySeparate(self, *args):
        """__set_zombifySeparate(self, bool zombifySeparate)"""
        return _moose.KineticHub___set_zombifySeparate(self, *args)

    nVarMol = _swig_property(_moose.KineticHub_nVarMol_get)
    nReac = _swig_property(_moose.KineticHub_nReac_get)
    nEnz = _swig_property(_moose.KineticHub_nEnz_get)
    zombifySeparate = _swig_property(_moose.KineticHub_zombifySeparate_get, _moose.KineticHub_zombifySeparate_set)
KineticHub_swigregister = _moose.KineticHub_swigregister
KineticHub_swigregister(KineticHub)

class GslIntegrator(Neutral):
    """Proxy of C++ pymoose::GslIntegrator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string objectName, Id parentId) -> GslIntegrator
        __init__(self, string className, string path) -> GslIntegrator
        __init__(self, string className, string objectName, PyMooseBase parent) -> GslIntegrator
        __init__(self, Id id) -> GslIntegrator
        __init__(self, string path) -> GslIntegrator
        __init__(self, string name, Id parentId) -> GslIntegrator
        __init__(self, string name, PyMooseBase parent) -> GslIntegrator
        __init__(self, GslIntegrator src, string name, PyMooseBase parent) -> GslIntegrator
        __init__(self, GslIntegrator src, string name, Id parent) -> GslIntegrator
        __init__(self, GslIntegrator src, string path) -> GslIntegrator
        __init__(self, Id src, string name, Id parent) -> GslIntegrator
        __init__(self, Id src, string path) -> GslIntegrator
        """
        this = _moose.new_GslIntegrator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GslIntegrator
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.GslIntegrator_getType(self)

    def __get_isInitiatilized(self):
        """__get_isInitiatilized(self) -> bool"""
        return _moose.GslIntegrator___get_isInitiatilized(self)

    def __get_method(self):
        """__get_method(self) -> string"""
        return _moose.GslIntegrator___get_method(self)

    def __set_method(self, *args):
        """__set_method(self, string method)"""
        return _moose.GslIntegrator___set_method(self, *args)

    def __get_relativeAccuracy(self):
        """__get_relativeAccuracy(self) -> double"""
        return _moose.GslIntegrator___get_relativeAccuracy(self)

    def __set_relativeAccuracy(self, *args):
        """__set_relativeAccuracy(self, double relativeAccuracy)"""
        return _moose.GslIntegrator___set_relativeAccuracy(self, *args)

    def __get_absoluteAccuracy(self):
        """__get_absoluteAccuracy(self) -> double"""
        return _moose.GslIntegrator___get_absoluteAccuracy(self)

    def __set_absoluteAccuracy(self, *args):
        """__set_absoluteAccuracy(self, double absoluteAccuracy)"""
        return _moose.GslIntegrator___set_absoluteAccuracy(self, *args)

    def __get_internalDt(self):
        """__get_internalDt(self) -> double"""
        return _moose.GslIntegrator___get_internalDt(self)

    def __set_internalDt(self, *args):
        """__set_internalDt(self, double internalDt)"""
        return _moose.GslIntegrator___set_internalDt(self, *args)

    isInitiatilized = _swig_property(_moose.GslIntegrator_isInitiatilized_get)
    method = _swig_property(_moose.GslIntegrator_method_get, _moose.GslIntegrator_method_set)
    relativeAccuracy = _swig_property(_moose.GslIntegrator_relativeAccuracy_get, _moose.GslIntegrator_relativeAccuracy_set)
    absoluteAccuracy = _swig_property(_moose.GslIntegrator_absoluteAccuracy_get, _moose.GslIntegrator_absoluteAccuracy_set)
    internalDt = _swig_property(_moose.GslIntegrator_internalDt_get, _moose.GslIntegrator_internalDt_set)
GslIntegrator_swigregister = _moose.GslIntegrator_swigregister
GslIntegrator_swigregister(GslIntegrator)

class Enzyme(Neutral):
    """Proxy of C++ pymoose::Enzyme class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Enzyme
        __init__(self, string path) -> Enzyme
        __init__(self, string name, Id parentId) -> Enzyme
        __init__(self, string name, PyMooseBase parent) -> Enzyme
        __init__(self, Enzyme src, string name, PyMooseBase parent) -> Enzyme
        __init__(self, Enzyme src, string name, Id parent) -> Enzyme
        __init__(self, Id src, string name, Id parent) -> Enzyme
        __init__(self, Enzyme src, string path) -> Enzyme
        __init__(self, Id src, string path) -> Enzyme
        """
        this = _moose.new_Enzyme(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Enzyme
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Enzyme_getType(self)

    def __get_k1(self):
        """__get_k1(self) -> double"""
        return _moose.Enzyme___get_k1(self)

    def __set_k1(self, *args):
        """__set_k1(self, double k1)"""
        return _moose.Enzyme___set_k1(self, *args)

    def __get_k2(self):
        """__get_k2(self) -> double"""
        return _moose.Enzyme___get_k2(self)

    def __set_k2(self, *args):
        """__set_k2(self, double k2)"""
        return _moose.Enzyme___set_k2(self, *args)

    def __get_k3(self):
        """__get_k3(self) -> double"""
        return _moose.Enzyme___get_k3(self)

    def __set_k3(self, *args):
        """__set_k3(self, double k3)"""
        return _moose.Enzyme___set_k3(self, *args)

    def __get_Km(self):
        """__get_Km(self) -> double"""
        return _moose.Enzyme___get_Km(self)

    def __set_Km(self, *args):
        """__set_Km(self, double Km)"""
        return _moose.Enzyme___set_Km(self, *args)

    def __get_kcat(self):
        """__get_kcat(self) -> double"""
        return _moose.Enzyme___get_kcat(self)

    def __set_kcat(self, *args):
        """__set_kcat(self, double kcat)"""
        return _moose.Enzyme___set_kcat(self, *args)

    def __get_mode(self):
        """__get_mode(self) -> bool"""
        return _moose.Enzyme___get_mode(self)

    def __set_mode(self, *args):
        """__set_mode(self, bool mode)"""
        return _moose.Enzyme___set_mode(self, *args)

    def __get_scaleKm(self):
        """__get_scaleKm(self) -> double"""
        return _moose.Enzyme___get_scaleKm(self)

    def __set_scaleKm(self, *args):
        """__set_scaleKm(self, double scaleKm)"""
        return _moose.Enzyme___set_scaleKm(self, *args)

    def __get_scaleKcat(self):
        """__get_scaleKcat(self) -> double"""
        return _moose.Enzyme___get_scaleKcat(self)

    def __set_scaleKcat(self, *args):
        """__set_scaleKcat(self, double scaleKcat)"""
        return _moose.Enzyme___set_scaleKcat(self, *args)

    def __get_intramol(self):
        """__get_intramol(self) -> double"""
        return _moose.Enzyme___get_intramol(self)

    def __set_intramol(self, *args):
        """__set_intramol(self, double intramol)"""
        return _moose.Enzyme___set_intramol(self, *args)

    def __get_x(self):
        """__get_x(self) -> double"""
        return _moose.Enzyme___get_x(self)

    def __set_x(self, *args):
        """__set_x(self, double x)"""
        return _moose.Enzyme___set_x(self, *args)

    def __get_y(self):
        """__get_y(self) -> double"""
        return _moose.Enzyme___get_y(self)

    def __set_y(self, *args):
        """__set_y(self, double y)"""
        return _moose.Enzyme___set_y(self, *args)

    def __get_xtreeTextFg(self):
        """__get_xtreeTextFg(self) -> string"""
        return _moose.Enzyme___get_xtreeTextFg(self)

    def __set_xtreeTextFg(self, *args):
        """__set_xtreeTextFg(self, string xtreeTextFg)"""
        return _moose.Enzyme___set_xtreeTextFg(self, *args)

    k1 = _swig_property(_moose.Enzyme_k1_get, _moose.Enzyme_k1_set)
    k2 = _swig_property(_moose.Enzyme_k2_get, _moose.Enzyme_k2_set)
    k3 = _swig_property(_moose.Enzyme_k3_get, _moose.Enzyme_k3_set)
    Km = _swig_property(_moose.Enzyme_Km_get, _moose.Enzyme_Km_set)
    kcat = _swig_property(_moose.Enzyme_kcat_get, _moose.Enzyme_kcat_set)
    mode = _swig_property(_moose.Enzyme_mode_get, _moose.Enzyme_mode_set)
    x = _swig_property(_moose.Enzyme_x_get, _moose.Enzyme_x_set)
    y = _swig_property(_moose.Enzyme_y_get, _moose.Enzyme_y_set)
    xtreeTextFg = _swig_property(_moose.Enzyme_xtreeTextFg_get, _moose.Enzyme_xtreeTextFg_set)
Enzyme_swigregister = _moose.Enzyme_swigregister
Enzyme_swigregister(Enzyme)

class Reaction(Neutral):
    """Proxy of C++ pymoose::Reaction class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Reaction
        __init__(self, string path) -> Reaction
        __init__(self, string name, Id parentId) -> Reaction
        __init__(self, string name, PyMooseBase parent) -> Reaction
        __init__(self, Reaction src, string name, PyMooseBase parent) -> Reaction
        __init__(self, Reaction src, string name, Id parent) -> Reaction
        __init__(self, Reaction src, string path) -> Reaction
        __init__(self, Id src, string name, Id parent) -> Reaction
        __init__(self, Id src, string path) -> Reaction
        """
        this = _moose.new_Reaction(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Reaction
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Reaction_getType(self)

    def __get_kf(self):
        """__get_kf(self) -> double"""
        return _moose.Reaction___get_kf(self)

    def __set_kf(self, *args):
        """__set_kf(self, double scaleKf)"""
        return _moose.Reaction___set_kf(self, *args)

    def __get_kb(self):
        """__get_kb(self) -> double"""
        return _moose.Reaction___get_kb(self)

    def __set_kb(self, *args):
        """__set_kb(self, double scaleKb)"""
        return _moose.Reaction___set_kb(self, *args)

    def __get_Kf(self):
        """__get_Kf(self) -> double"""
        return _moose.Reaction___get_Kf(self)

    def __set_Kf(self, *args):
        """__set_Kf(self, double scaleKf)"""
        return _moose.Reaction___set_Kf(self, *args)

    def __get_Kb(self):
        """__get_Kb(self) -> double"""
        return _moose.Reaction___get_Kb(self)

    def __set_Kb(self, *args):
        """__set_Kb(self, double scaleKb)"""
        return _moose.Reaction___set_Kb(self, *args)

    def __get_x(self):
        """__get_x(self) -> double"""
        return _moose.Reaction___get_x(self)

    def __set_x(self, *args):
        """__set_x(self, double x)"""
        return _moose.Reaction___set_x(self, *args)

    def __get_y(self):
        """__get_y(self) -> double"""
        return _moose.Reaction___get_y(self)

    def __set_y(self, *args):
        """__set_y(self, double y)"""
        return _moose.Reaction___set_y(self, *args)

    def __get_xtreeTextFg(self):
        """__get_xtreeTextFg(self) -> string"""
        return _moose.Reaction___get_xtreeTextFg(self)

    def __set_xtreeTextFg(self, *args):
        """__set_xtreeTextFg(self, string xtreeTextFg)"""
        return _moose.Reaction___set_xtreeTextFg(self, *args)

    kf = _swig_property(_moose.Reaction_kf_get, _moose.Reaction_kf_set)
    kb = _swig_property(_moose.Reaction_kb_get, _moose.Reaction_kb_set)
    Kf = _swig_property(_moose.Reaction_Kf_get, _moose.Reaction_Kf_set)
    Kb = _swig_property(_moose.Reaction_Kb_get, _moose.Reaction_Kb_set)
    x = _swig_property(_moose.Reaction_x_get, _moose.Reaction_x_set)
    y = _swig_property(_moose.Reaction_y_get, _moose.Reaction_y_set)
    xtreeTextFg = _swig_property(_moose.Reaction_xtreeTextFg_get, _moose.Reaction_xtreeTextFg_set)
Reaction_swigregister = _moose.Reaction_swigregister
Reaction_swigregister(Reaction)

class Molecule(Neutral):
    """Proxy of C++ pymoose::Molecule class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Molecule
        __init__(self, string path) -> Molecule
        __init__(self, string name, Id parentId) -> Molecule
        __init__(self, string name, PyMooseBase parent) -> Molecule
        __init__(self, Molecule src, string name, PyMooseBase parent) -> Molecule
        __init__(self, Molecule src, string name, Id parent) -> Molecule
        __init__(self, Molecule src, string path) -> Molecule
        __init__(self, Id src, string name, Id parent) -> Molecule
        __init__(self, Id src, string path) -> Molecule
        """
        this = _moose.new_Molecule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Molecule
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Molecule_getType(self)

    def __get_nInit(self):
        """__get_nInit(self) -> double"""
        return _moose.Molecule___get_nInit(self)

    def __set_nInit(self, *args):
        """__set_nInit(self, double nInit)"""
        return _moose.Molecule___set_nInit(self, *args)

    def __get_volumeScale(self):
        """__get_volumeScale(self) -> double"""
        return _moose.Molecule___get_volumeScale(self)

    def __set_volumeScale(self, *args):
        """__set_volumeScale(self, double volumeScale)"""
        return _moose.Molecule___set_volumeScale(self, *args)

    def __get_n(self):
        """__get_n(self) -> double"""
        return _moose.Molecule___get_n(self)

    def __set_n(self, *args):
        """__set_n(self, double n)"""
        return _moose.Molecule___set_n(self, *args)

    def __get_mode(self):
        """__get_mode(self) -> int"""
        return _moose.Molecule___get_mode(self)

    def __set_mode(self, *args):
        """__set_mode(self, int mode)"""
        return _moose.Molecule___set_mode(self, *args)

    def __get_slave_enable(self):
        """__get_slave_enable(self) -> int"""
        return _moose.Molecule___get_slave_enable(self)

    def __set_slave_enable(self, *args):
        """__set_slave_enable(self, int slave_enable)"""
        return _moose.Molecule___set_slave_enable(self, *args)

    def __get_conc(self):
        """__get_conc(self) -> double"""
        return _moose.Molecule___get_conc(self)

    def __set_conc(self, *args):
        """__set_conc(self, double conc)"""
        return _moose.Molecule___set_conc(self, *args)

    def __get_concInit(self):
        """__get_concInit(self) -> double"""
        return _moose.Molecule___get_concInit(self)

    def __set_concInit(self, *args):
        """__set_concInit(self, double concInit)"""
        return _moose.Molecule___set_concInit(self, *args)

    def __get_nSrc(self):
        """__get_nSrc(self) -> double"""
        return _moose.Molecule___get_nSrc(self)

    def __set_nSrc(self, *args):
        """__set_nSrc(self, double nSrc)"""
        return _moose.Molecule___set_nSrc(self, *args)

    def __get_sumTotal(self):
        """__get_sumTotal(self) -> double"""
        return _moose.Molecule___get_sumTotal(self)

    def __set_sumTotal(self, *args):
        """__set_sumTotal(self, double sumTotal)"""
        return _moose.Molecule___set_sumTotal(self, *args)

    def __get_x(self):
        """__get_x(self) -> double"""
        return _moose.Molecule___get_x(self)

    def __set_x(self, *args):
        """__set_x(self, double x)"""
        return _moose.Molecule___set_x(self, *args)

    def __get_y(self):
        """__get_y(self) -> double"""
        return _moose.Molecule___get_y(self)

    def __set_y(self, *args):
        """__set_y(self, double y)"""
        return _moose.Molecule___set_y(self, *args)

    def __get_D(self):
        """__get_D(self) -> double"""
        return _moose.Molecule___get_D(self)

    def __set_D(self, *args):
        """__set_D(self, double d)"""
        return _moose.Molecule___set_D(self, *args)

    def __get_xtreeTextFg(self):
        """__get_xtreeTextFg(self) -> string"""
        return _moose.Molecule___get_xtreeTextFg(self)

    def __set_xtreeTextFg(self, *args):
        """__set_xtreeTextFg(self, string xtreeTextFg)"""
        return _moose.Molecule___set_xtreeTextFg(self, *args)

    D = _swig_property(_moose.Molecule_D_get, _moose.Molecule_D_set)
    nInit = _swig_property(_moose.Molecule_nInit_get, _moose.Molecule_nInit_set)
    volumeScale = _swig_property(_moose.Molecule_volumeScale_get, _moose.Molecule_volumeScale_set)
    n = _swig_property(_moose.Molecule_n_get, _moose.Molecule_n_set)
    mode = _swig_property(_moose.Molecule_mode_get, _moose.Molecule_mode_set)
    slave_enable = _swig_property(_moose.Molecule_slave_enable_get, _moose.Molecule_slave_enable_set)
    conc = _swig_property(_moose.Molecule_conc_get, _moose.Molecule_conc_set)
    concInit = _swig_property(_moose.Molecule_concInit_get, _moose.Molecule_concInit_set)
    nSrc = _swig_property(_moose.Molecule_nSrc_get, _moose.Molecule_nSrc_set)
    sumTotal = _swig_property(_moose.Molecule_sumTotal_get, _moose.Molecule_sumTotal_set)
    x = _swig_property(_moose.Molecule_x_get, _moose.Molecule_x_set)
    y = _swig_property(_moose.Molecule_y_get, _moose.Molecule_y_set)
    xtreeTextFg = _swig_property(_moose.Molecule_xtreeTextFg_get, _moose.Molecule_xtreeTextFg_set)
Molecule_swigregister = _moose.Molecule_swigregister
Molecule_swigregister(Molecule)


def mtrand():
  """mtrand() -> double"""
  return _moose.mtrand()

def mtseed(*args):
  """mtseed(long seed)"""
  return _moose.mtseed(*args)

def genrand_int32():
  """genrand_int32() -> unsigned long"""
  return _moose.genrand_int32()
class Probability(object):
    """Proxy of C++ Probability class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _moose.delete_Probability
    __del__ = lambda self : None;
    def getMean(self):
        """getMean(self) -> double"""
        return _moose.Probability_getMean(self)

    def getVariance(self):
        """getVariance(self) -> double"""
        return _moose.Probability_getVariance(self)

    def getNextSample(self):
        """getNextSample(self) -> double"""
        return _moose.Probability_getNextSample(self)

Probability_swigregister = _moose.Probability_swigregister
Probability_swigregister(Probability)

class Binomial(Probability):
    """Proxy of C++ Binomial class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Binomial
        __init__(self, long n, double p) -> Binomial
        """
        this = _moose.new_Binomial(*args)
        try: self.this.append(this)
        except: self.this = this
    def getN(self):
        """getN(self) -> long"""
        return _moose.Binomial_getN(self)

    def getP(self):
        """getP(self) -> double"""
        return _moose.Binomial_getP(self)

    def getMean(self):
        """getMean(self) -> double"""
        return _moose.Binomial_getMean(self)

    def getVariance(self):
        """getVariance(self) -> double"""
        return _moose.Binomial_getVariance(self)

    def getNextSample(self):
        """getNextSample(self) -> double"""
        return _moose.Binomial_getNextSample(self)

    __swig_destroy__ = _moose.delete_Binomial
    __del__ = lambda self : None;
Binomial_swigregister = _moose.Binomial_swigregister
Binomial_swigregister(Binomial)

class Gamma(Probability):
    """Proxy of C++ Gamma class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, double alpha, double theta) -> Gamma"""
        this = _moose.new_Gamma(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAlpha(self):
        """getAlpha(self) -> double"""
        return _moose.Gamma_getAlpha(self)

    def getTheta(self):
        """getTheta(self) -> double"""
        return _moose.Gamma_getTheta(self)

    def getMean(self):
        """getMean(self) -> double"""
        return _moose.Gamma_getMean(self)

    def getVariance(self):
        """getVariance(self) -> double"""
        return _moose.Gamma_getVariance(self)

    def getNextSample(self):
        """getNextSample(self) -> double"""
        return _moose.Gamma_getNextSample(self)

    __swig_destroy__ = _moose.delete_Gamma
    __del__ = lambda self : None;
Gamma_swigregister = _moose.Gamma_swigregister
Gamma_swigregister(Gamma)

ALIAS = _moose.ALIAS
BOX_MUELLER = _moose.BOX_MUELLER
ZIGGURAT = _moose.ZIGGURAT
class Normal(Probability):
    """Proxy of C++ Normal class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double mean = 0.0, double variance = 1.0, NormalGenerator algorithm = ALIAS) -> Normal
        __init__(self, double mean = 0.0, double variance = 1.0) -> Normal
        __init__(self, double mean = 0.0) -> Normal
        __init__(self) -> Normal
        """
        this = _moose.new_Normal(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMean(self):
        """getMean(self) -> double"""
        return _moose.Normal_getMean(self)

    def setMean(self, *args):
        """setMean(self, double value)"""
        return _moose.Normal_setMean(self, *args)

    def getVariance(self):
        """getVariance(self) -> double"""
        return _moose.Normal_getVariance(self)

    def setVariance(self, *args):
        """setVariance(self, double value)"""
        return _moose.Normal_setVariance(self, *args)

    def getMethod(self):
        """getMethod(self) -> NormalGenerator"""
        return _moose.Normal_getMethod(self)

    def setMethod(self, *args):
        """setMethod(self, NormalGenerator method)"""
        return _moose.Normal_setMethod(self, *args)

    def getNextSample(self):
        """getNextSample(self) -> double"""
        return _moose.Normal_getNextSample(self)

    __swig_destroy__ = _moose.delete_Normal
    __del__ = lambda self : None;
Normal_swigregister = _moose.Normal_swigregister
Normal_swigregister(Normal)

class Poisson(Probability):
    """Proxy of C++ Poisson class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, mean = 1.0): 
        """
        __init__(self, double mean = 1.0) -> Poisson
        __init__(self) -> Poisson
        """
        this = _moose.new_Poisson(mean)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Poisson
    __del__ = lambda self : None;
    def setMean(self, *args):
        """setMean(self, double mean)"""
        return _moose.Poisson_setMean(self, *args)

    def getMean(self):
        """getMean(self) -> double"""
        return _moose.Poisson_getMean(self)

    def getVariance(self):
        """getVariance(self) -> double"""
        return _moose.Poisson_getVariance(self)

    def getNextSample(self):
        """getNextSample(self) -> double"""
        return _moose.Poisson_getNextSample(self)

Poisson_swigregister = _moose.Poisson_swigregister
Poisson_swigregister(Poisson)

LOGARITHMIC = _moose.LOGARITHMIC
RANDOM_MINIMIZATION = _moose.RANDOM_MINIMIZATION
class Exponential(Probability):
    """Proxy of C++ Exponential class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, double mean) -> Exponential
        __init__(self, ExponentialGenerator generator, double mean) -> Exponential
        """
        this = _moose.new_Exponential(*args)
        try: self.this.append(this)
        except: self.this = this
    def getMean(self):
        """getMean(self) -> double"""
        return _moose.Exponential_getMean(self)

    def getVariance(self):
        """getVariance(self) -> double"""
        return _moose.Exponential_getVariance(self)

    def getNextSample(self):
        """getNextSample(self) -> double"""
        return _moose.Exponential_getNextSample(self)

    __swig_destroy__ = _moose.delete_Exponential
    __del__ = lambda self : None;
Exponential_swigregister = _moose.Exponential_swigregister
Exponential_swigregister(Exponential)

class RandGenerator(Neutral):
    """Proxy of C++ pymoose::RandGenerator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> RandGenerator
        __init__(self, string className, string path) -> RandGenerator
        __init__(self, string className, string name, Id parentId) -> RandGenerator
        __init__(self, RandGenerator src, string name, PyMooseBase parent) -> RandGenerator
        __init__(self, RandGenerator src, string name, Id parent) -> RandGenerator
        __init__(self, Id src, string name, Id parent) -> RandGenerator
        __init__(self, Id src, string path) -> RandGenerator
        __init__(self, RandGenerator src, string path) -> RandGenerator
        __init__(self, string className, string name, PyMooseBase parent) -> RandGenerator
        """
        this = _moose.new_RandGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(self):
        """getType(self) -> string"""
        return _moose.RandGenerator_getType(self)

    def __get_sample(self):
        """__get_sample(self) -> double"""
        return _moose.RandGenerator___get_sample(self)

    def __set_sample(self, *args):
        """__set_sample(self, double sample)"""
        return _moose.RandGenerator___set_sample(self, *args)

    def __get_mean(self):
        """__get_mean(self) -> double"""
        return _moose.RandGenerator___get_mean(self)

    def __set_mean(self, *args):
        """__set_mean(self, double mean)"""
        return _moose.RandGenerator___set_mean(self, *args)

    def __get_variance(self):
        """__get_variance(self) -> double"""
        return _moose.RandGenerator___get_variance(self)

    def __set_variance(self, *args):
        """__set_variance(self, double variance)"""
        return _moose.RandGenerator___set_variance(self, *args)

    def __get_output(self):
        """__get_output(self) -> double"""
        return _moose.RandGenerator___get_output(self)

    def __set_output(self, *args):
        """__set_output(self, double output)"""
        return _moose.RandGenerator___set_output(self, *args)

    sample = _swig_property(_moose.RandGenerator_sample_get)
    mean = _swig_property(_moose.RandGenerator_mean_get, _moose.RandGenerator_mean_set)
    variance = _swig_property(_moose.RandGenerator_variance_get)
    __swig_destroy__ = _moose.delete_RandGenerator
    __del__ = lambda self : None;
RandGenerator_swigregister = _moose.RandGenerator_swigregister
RandGenerator_swigregister(RandGenerator)

class UniformRng(RandGenerator):
    """Proxy of C++ pymoose::UniformRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> UniformRng
        __init__(self, string path) -> UniformRng
        __init__(self, string name, Id parentId) -> UniformRng
        __init__(self, string name, PyMooseBase parent) -> UniformRng
        __init__(self, UniformRng src, string name, PyMooseBase parent) -> UniformRng
        __init__(self, UniformRng src, string name, Id parent) -> UniformRng
        __init__(self, Id src, string name, Id parent) -> UniformRng
        __init__(self, UniformRng src, string path) -> UniformRng
        __init__(self, Id src, string path) -> UniformRng
        """
        this = _moose.new_UniformRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_UniformRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.UniformRng_getType(self)

    def __get_min(self):
        """__get_min(self) -> double"""
        return _moose.UniformRng___get_min(self)

    def __set_min(self, *args):
        """__set_min(self, double min)"""
        return _moose.UniformRng___set_min(self, *args)

    def __get_max(self):
        """__get_max(self) -> double"""
        return _moose.UniformRng___get_max(self)

    def __set_max(self, *args):
        """__set_max(self, double max)"""
        return _moose.UniformRng___set_max(self, *args)

    min = _swig_property(_moose.UniformRng_min_get, _moose.UniformRng_min_set)
    max = _swig_property(_moose.UniformRng_max_get, _moose.UniformRng_max_set)
UniformRng_swigregister = _moose.UniformRng_swigregister
UniformRng_swigregister(UniformRng)

class GammaRng(RandGenerator):
    """Proxy of C++ pymoose::GammaRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> GammaRng
        __init__(self, string path) -> GammaRng
        __init__(self, string name, Id parentId) -> GammaRng
        __init__(self, string name, PyMooseBase parent) -> GammaRng
        __init__(self, GammaRng src, string name, PyMooseBase parent) -> GammaRng
        __init__(self, GammaRng src, string name, Id parent) -> GammaRng
        __init__(self, Id src, string name, Id parent) -> GammaRng
        __init__(self, GammaRng src, string path) -> GammaRng
        __init__(self, Id src, string path) -> GammaRng
        """
        this = _moose.new_GammaRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GammaRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.GammaRng_getType(self)

    def __get_alpha(self):
        """__get_alpha(self) -> double"""
        return _moose.GammaRng___get_alpha(self)

    def __set_alpha(self, *args):
        """__set_alpha(self, double alpha)"""
        return _moose.GammaRng___set_alpha(self, *args)

    def __get_theta(self):
        """__get_theta(self) -> double"""
        return _moose.GammaRng___get_theta(self)

    def __set_theta(self, *args):
        """__set_theta(self, double theta)"""
        return _moose.GammaRng___set_theta(self, *args)

    alpha = _swig_property(_moose.GammaRng_alpha_get, _moose.GammaRng_alpha_set)
    theta = _swig_property(_moose.GammaRng_theta_get, _moose.GammaRng_theta_set)
GammaRng_swigregister = _moose.GammaRng_swigregister
GammaRng_swigregister(GammaRng)

class ExponentialRng(RandGenerator):
    """Proxy of C++ pymoose::ExponentialRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> ExponentialRng
        __init__(self, string path) -> ExponentialRng
        __init__(self, string name, Id parentId) -> ExponentialRng
        __init__(self, string name, PyMooseBase parent) -> ExponentialRng
        __init__(self, ExponentialRng src, string name, PyMooseBase parent) -> ExponentialRng
        __init__(self, ExponentialRng src, string name, Id parent) -> ExponentialRng
        __init__(self, Id src, string name, Id parent) -> ExponentialRng
        __init__(self, ExponentialRng src, string path) -> ExponentialRng
        __init__(self, Id src, string path) -> ExponentialRng
        """
        this = _moose.new_ExponentialRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_ExponentialRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.ExponentialRng_getType(self)

    def __get_method(self):
        """__get_method(self) -> int"""
        return _moose.ExponentialRng___get_method(self)

    def __set_method(self, *args):
        """__set_method(self, int method)"""
        return _moose.ExponentialRng___set_method(self, *args)

    method = _swig_property(_moose.ExponentialRng_method_get, _moose.ExponentialRng_method_set)
ExponentialRng_swigregister = _moose.ExponentialRng_swigregister
ExponentialRng_swigregister(ExponentialRng)

class BinomialRng(RandGenerator):
    """Proxy of C++ pymoose::BinomialRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> BinomialRng
        __init__(self, string path) -> BinomialRng
        __init__(self, string name, Id parentId) -> BinomialRng
        __init__(self, string name, PyMooseBase parent) -> BinomialRng
        __init__(self, BinomialRng src, string name, PyMooseBase parent) -> BinomialRng
        __init__(self, BinomialRng src, string name, Id parent) -> BinomialRng
        __init__(self, Id src, string name, Id parent) -> BinomialRng
        __init__(self, BinomialRng src, string path) -> BinomialRng
        __init__(self, Id src, string path) -> BinomialRng
        """
        this = _moose.new_BinomialRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_BinomialRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.BinomialRng_getType(self)

    def __get_n(self):
        """__get_n(self) -> int"""
        return _moose.BinomialRng___get_n(self)

    def __set_n(self, *args):
        """__set_n(self, int n)"""
        return _moose.BinomialRng___set_n(self, *args)

    def __get_p(self):
        """__get_p(self) -> double"""
        return _moose.BinomialRng___get_p(self)

    def __set_p(self, *args):
        """__set_p(self, double p)"""
        return _moose.BinomialRng___set_p(self, *args)

    n = _swig_property(_moose.BinomialRng_n_get, _moose.BinomialRng_n_set)
    p = _swig_property(_moose.BinomialRng_p_get, _moose.BinomialRng_p_set)
BinomialRng_swigregister = _moose.BinomialRng_swigregister
BinomialRng_swigregister(BinomialRng)

class PoissonRng(RandGenerator):
    """Proxy of C++ pymoose::PoissonRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> PoissonRng
        __init__(self, string path) -> PoissonRng
        __init__(self, string name, Id parentId) -> PoissonRng
        __init__(self, string name, PyMooseBase parent) -> PoissonRng
        __init__(self, PoissonRng src, string name, PyMooseBase parent) -> PoissonRng
        __init__(self, PoissonRng src, string name, Id parent) -> PoissonRng
        __init__(self, Id src, string name, Id parent) -> PoissonRng
        __init__(self, PoissonRng src, string path) -> PoissonRng
        __init__(self, Id src, string path) -> PoissonRng
        """
        this = _moose.new_PoissonRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PoissonRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.PoissonRng_getType(self)

PoissonRng_swigregister = _moose.PoissonRng_swigregister
PoissonRng_swigregister(PoissonRng)

class NormalRng(RandGenerator):
    """Proxy of C++ pymoose::NormalRng class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> NormalRng
        __init__(self, string path) -> NormalRng
        __init__(self, string name, Id parentId) -> NormalRng
        __init__(self, string name, PyMooseBase parent) -> NormalRng
        __init__(self, NormalRng src, string name, PyMooseBase parent) -> NormalRng
        __init__(self, NormalRng src, string name, Id parent) -> NormalRng
        __init__(self, Id src, string name, Id parent) -> NormalRng
        __init__(self, NormalRng src, string path) -> NormalRng
        __init__(self, Id src, string path) -> NormalRng
        """
        this = _moose.new_NormalRng(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_NormalRng
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.NormalRng_getType(self)

    def __get_method(self):
        """__get_method(self) -> int"""
        return _moose.NormalRng___get_method(self)

    def __set_method(self, *args):
        """__set_method(self, int method)"""
        return _moose.NormalRng___set_method(self, *args)

    method = _swig_property(_moose.NormalRng_method_get, _moose.NormalRng_method_set)
NormalRng_swigregister = _moose.NormalRng_swigregister
NormalRng_swigregister(NormalRng)

class KinCompt(Neutral):
    """Proxy of C++ pymoose::KinCompt class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, string className, string objectName, Id parentId) -> KinCompt
        __init__(self, string className, string path) -> KinCompt
        __init__(self, string className, string objectName, PyMooseBase parent) -> KinCompt
        __init__(self, Id id) -> KinCompt
        __init__(self, string path) -> KinCompt
        __init__(self, string name, Id parentId) -> KinCompt
        __init__(self, string name, PyMooseBase parent) -> KinCompt
        __init__(self, KinCompt src, string name, PyMooseBase parent) -> KinCompt
        __init__(self, KinCompt src, string name, Id parent) -> KinCompt
        __init__(self, KinCompt src, string path) -> KinCompt
        __init__(self, Id src, string name, Id parent) -> KinCompt
        __init__(self, Id src, string path) -> KinCompt
        """
        this = _moose.new_KinCompt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KinCompt
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.KinCompt_getType(self)

    def __get_volume(self):
        """__get_volume(self) -> double"""
        return _moose.KinCompt___get_volume(self)

    def __set_volume(self, *args):
        """__set_volume(self, double volume)"""
        return _moose.KinCompt___set_volume(self, *args)

    def __get_area(self):
        """__get_area(self) -> double"""
        return _moose.KinCompt___get_area(self)

    def __set_area(self, *args):
        """__set_area(self, double area)"""
        return _moose.KinCompt___set_area(self, *args)

    def __get_perimeter(self):
        """__get_perimeter(self) -> double"""
        return _moose.KinCompt___get_perimeter(self)

    def __set_perimeter(self, *args):
        """__set_perimeter(self, double perimeter)"""
        return _moose.KinCompt___set_perimeter(self, *args)

    def __get_size(self):
        """__get_size(self) -> double"""
        return _moose.KinCompt___get_size(self)

    def __set_size(self, *args):
        """__set_size(self, double size)"""
        return _moose.KinCompt___set_size(self, *args)

    def __get_numDimensions(self):
        """__get_numDimensions(self) -> unsigned int"""
        return _moose.KinCompt___get_numDimensions(self)

    def __set_numDimensions(self, *args):
        """__set_numDimensions(self, unsigned int numDimensions)"""
        return _moose.KinCompt___set_numDimensions(self, *args)

    def __get_x(self):
        """__get_x(self) -> double"""
        return _moose.KinCompt___get_x(self)

    def __set_x(self, *args):
        """__set_x(self, double x)"""
        return _moose.KinCompt___set_x(self, *args)

    def __get_y(self):
        """__get_y(self) -> double"""
        return _moose.KinCompt___get_y(self)

    def __set_y(self, *args):
        """__set_y(self, double y)"""
        return _moose.KinCompt___set_y(self, *args)

    volume = _swig_property(_moose.KinCompt_volume_get, _moose.KinCompt_volume_set)
    area = _swig_property(_moose.KinCompt_area_get, _moose.KinCompt_area_set)
    perimeter = _swig_property(_moose.KinCompt_perimeter_get, _moose.KinCompt_perimeter_set)
    size = _swig_property(_moose.KinCompt_size_get, _moose.KinCompt_size_set)
    numDimensions = _swig_property(_moose.KinCompt_numDimensions_get, _moose.KinCompt_numDimensions_set)
    x = _swig_property(_moose.KinCompt_x_get, _moose.KinCompt_x_set)
    y = _swig_property(_moose.KinCompt_y_get, _moose.KinCompt_y_set)
KinCompt_swigregister = _moose.KinCompt_swigregister
KinCompt_swigregister(KinCompt)

class KineticManager(KinCompt):
    """Proxy of C++ pymoose::KineticManager class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> KineticManager
        __init__(self, string path) -> KineticManager
        __init__(self, string name, Id parentId) -> KineticManager
        __init__(self, string name, PyMooseBase parent) -> KineticManager
        __init__(self, KineticManager src, string name, PyMooseBase parent) -> KineticManager
        __init__(self, KineticManager src, string name, Id parent) -> KineticManager
        __init__(self, KineticManager src, string path) -> KineticManager
        __init__(self, Id src, string name, Id parent) -> KineticManager
        __init__(self, Id src, string path) -> KineticManager
        """
        this = _moose.new_KineticManager(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_KineticManager
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.KineticManager_getType(self)

    def __get_autoMode(self):
        """__get_autoMode(self) -> bool"""
        return _moose.KineticManager___get_autoMode(self)

    def __set_autoMode(self, *args):
        """__set_autoMode(self, bool autoMode)"""
        return _moose.KineticManager___set_autoMode(self, *args)

    def __get_stochastic(self):
        """__get_stochastic(self) -> bool"""
        return _moose.KineticManager___get_stochastic(self)

    def __set_stochastic(self, *args):
        """__set_stochastic(self, bool stochastic)"""
        return _moose.KineticManager___set_stochastic(self, *args)

    def __get_spatial(self):
        """__get_spatial(self) -> bool"""
        return _moose.KineticManager___get_spatial(self)

    def __set_spatial(self, *args):
        """__set_spatial(self, bool spatial)"""
        return _moose.KineticManager___set_spatial(self, *args)

    def __get_method(self):
        """__get_method(self) -> string"""
        return _moose.KineticManager___get_method(self)

    def __set_method(self, *args):
        """__set_method(self, string method)"""
        return _moose.KineticManager___set_method(self, *args)

    def __get_variableDt(self):
        """__get_variableDt(self) -> bool"""
        return _moose.KineticManager___get_variableDt(self)

    def __get_singleParticle(self):
        """__get_singleParticle(self) -> bool"""
        return _moose.KineticManager___get_singleParticle(self)

    def __get_multiscale(self):
        """__get_multiscale(self) -> bool"""
        return _moose.KineticManager___get_multiscale(self)

    def __get_implicit(self):
        """__get_implicit(self) -> bool"""
        return _moose.KineticManager___get_implicit(self)

    def __get_recommendedDt(self):
        """__get_recommendedDt(self) -> double"""
        return _moose.KineticManager___get_recommendedDt(self)

    def __get_loadEstimate(self):
        """__get_loadEstimate(self) -> double"""
        return _moose.KineticManager___get_loadEstimate(self)

    def __get_memEstimate(self):
        """__get_memEstimate(self) -> unsigned int"""
        return _moose.KineticManager___get_memEstimate(self)

    def __get_eulerError(self):
        """__get_eulerError(self) -> double"""
        return _moose.KineticManager___get_eulerError(self)

    def __set_eulerError(self, *args):
        """__set_eulerError(self, double eulerError)"""
        return _moose.KineticManager___set_eulerError(self, *args)

    autoMode = _swig_property(_moose.KineticManager_autoMode_get, _moose.KineticManager_autoMode_set)
    stochastic = _swig_property(_moose.KineticManager_stochastic_get, _moose.KineticManager_stochastic_set)
    spatial = _swig_property(_moose.KineticManager_spatial_get, _moose.KineticManager_spatial_set)
    method = _swig_property(_moose.KineticManager_method_get, _moose.KineticManager_method_set)
    variableDt = _swig_property(_moose.KineticManager_variableDt_get)
    singleParticle = _swig_property(_moose.KineticManager_singleParticle_get)
    multiscale = _swig_property(_moose.KineticManager_multiscale_get)
    implicit = _swig_property(_moose.KineticManager_implicit_get)
    description = _swig_property(_moose.KineticManager_description_get)
    recommendedDt = _swig_property(_moose.KineticManager_recommendedDt_get)
    eulerError = _swig_property(_moose.KineticManager_eulerError_get, _moose.KineticManager_eulerError_set)
    auto = _swig_property(_moose.KineticManager_auto_get, _moose.KineticManager_auto_set)
    loadEstimate = _swig_property(_moose.KineticManager_loadEstimate_get)
    memEstimate = _swig_property(_moose.KineticManager_memEstimate_get)
KineticManager_swigregister = _moose.KineticManager_swigregister
KineticManager_swigregister(KineticManager)

class Panel(Neutral):
    """Proxy of C++ pymoose::Panel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Panel
        __init__(self, string path) -> Panel
        __init__(self, string name, Id parentId) -> Panel
        __init__(self, string name, PyMooseBase parent) -> Panel
        __init__(self, Panel src, string name, PyMooseBase parent) -> Panel
        __init__(self, Panel src, string name, Id parent) -> Panel
        __init__(self, Panel src, string path) -> Panel
        __init__(self, Id src, string name, Id parent) -> Panel
        __init__(self, Id src, string path) -> Panel
        __init__(self, string typeName, string objectName, Id parentId) -> Panel
        __init__(self, string typeName, string path) -> Panel
        __init__(self, string typeName, string objectName, PyMooseBase parent) -> Panel
        """
        this = _moose.new_Panel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Panel
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Panel_getType(self)

    def __get_nPts(self):
        """__get_nPts(self) -> unsigned int"""
        return _moose.Panel___get_nPts(self)

    def __get_nDims(self):
        """__get_nDims(self) -> unsigned int"""
        return _moose.Panel___get_nDims(self)

    def __get_nNeighbors(self):
        """__get_nNeighbors(self) -> unsigned int"""
        return _moose.Panel___get_nNeighbors(self)

    def __get_shapeId(self):
        """__get_shapeId(self) -> unsigned int"""
        return _moose.Panel___get_shapeId(self)

    def __get_coords(self):
        """__get_coords(self) -> double_vector"""
        return _moose.Panel___get_coords(self)

    nPts = _swig_property(_moose.Panel_nPts_get)
    nDims = _swig_property(_moose.Panel_nDims_get)
    nNeighbors = _swig_property(_moose.Panel_nNeighbors_get)
    shapeId = _swig_property(_moose.Panel_shapeId_get)
    coords = _swig_property(_moose.Panel_coords_get)
Panel_swigregister = _moose.Panel_swigregister
Panel_swigregister(Panel)

class DiskPanel(Panel):
    """Proxy of C++ pymoose::DiskPanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> DiskPanel
        __init__(self, string path) -> DiskPanel
        __init__(self, string name, Id parentId) -> DiskPanel
        __init__(self, string name, PyMooseBase parent) -> DiskPanel
        __init__(self, DiskPanel src, string name, PyMooseBase parent) -> DiskPanel
        __init__(self, DiskPanel src, string name, Id parent) -> DiskPanel
        __init__(self, DiskPanel src, string path) -> DiskPanel
        __init__(self, Id src, string name, Id parent) -> DiskPanel
        __init__(self, Id src, string path) -> DiskPanel
        """
        this = _moose.new_DiskPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_DiskPanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.DiskPanel_getType(self)

DiskPanel_swigregister = _moose.DiskPanel_swigregister
DiskPanel_swigregister(DiskPanel)

class CylPanel(Panel):
    """Proxy of C++ pymoose::CylPanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> CylPanel
        __init__(self, string path) -> CylPanel
        __init__(self, string name, Id parentId) -> CylPanel
        __init__(self, string name, PyMooseBase parent) -> CylPanel
        __init__(self, CylPanel src, string name, PyMooseBase parent) -> CylPanel
        __init__(self, CylPanel src, string name, Id parent) -> CylPanel
        __init__(self, CylPanel src, string path) -> CylPanel
        __init__(self, Id src, string name, Id parent) -> CylPanel
        __init__(self, Id src, string path) -> CylPanel
        """
        this = _moose.new_CylPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_CylPanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.CylPanel_getType(self)

CylPanel_swigregister = _moose.CylPanel_swigregister
CylPanel_swigregister(CylPanel)

class HemispherePanel(Panel):
    """Proxy of C++ pymoose::HemispherePanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> HemispherePanel
        __init__(self, string path) -> HemispherePanel
        __init__(self, string name, Id parentId) -> HemispherePanel
        __init__(self, string name, PyMooseBase parent) -> HemispherePanel
        __init__(self, HemispherePanel src, string name, PyMooseBase parent) -> HemispherePanel
        __init__(self, HemispherePanel src, string name, Id parent) -> HemispherePanel
        __init__(self, HemispherePanel src, string path) -> HemispherePanel
        __init__(self, Id src, string name, Id parent) -> HemispherePanel
        __init__(self, Id src, string path) -> HemispherePanel
        """
        this = _moose.new_HemispherePanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HemispherePanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.HemispherePanel_getType(self)

HemispherePanel_swigregister = _moose.HemispherePanel_swigregister
HemispherePanel_swigregister(HemispherePanel)

class SpherePanel(Panel):
    """Proxy of C++ pymoose::SpherePanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> SpherePanel
        __init__(self, string path) -> SpherePanel
        __init__(self, string name, Id parentId) -> SpherePanel
        __init__(self, string name, PyMooseBase parent) -> SpherePanel
        __init__(self, SpherePanel src, string name, PyMooseBase parent) -> SpherePanel
        __init__(self, SpherePanel src, string name, Id parent) -> SpherePanel
        __init__(self, SpherePanel src, string path) -> SpherePanel
        __init__(self, Id src, string name, Id parent) -> SpherePanel
        __init__(self, Id src, string path) -> SpherePanel
        """
        this = _moose.new_SpherePanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SpherePanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.SpherePanel_getType(self)

SpherePanel_swigregister = _moose.SpherePanel_swigregister
SpherePanel_swigregister(SpherePanel)

class TriPanel(Panel):
    """Proxy of C++ pymoose::TriPanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> TriPanel
        __init__(self, string path) -> TriPanel
        __init__(self, string name, Id parentId) -> TriPanel
        __init__(self, string name, PyMooseBase parent) -> TriPanel
        __init__(self, TriPanel src, string name, PyMooseBase parent) -> TriPanel
        __init__(self, TriPanel src, string name, Id parent) -> TriPanel
        __init__(self, TriPanel src, string path) -> TriPanel
        __init__(self, Id src, string name, Id parent) -> TriPanel
        __init__(self, Id src, string path) -> TriPanel
        """
        this = _moose.new_TriPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_TriPanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.TriPanel_getType(self)

TriPanel_swigregister = _moose.TriPanel_swigregister
TriPanel_swigregister(TriPanel)

class RectPanel(Panel):
    """Proxy of C++ pymoose::RectPanel class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> RectPanel
        __init__(self, string path) -> RectPanel
        __init__(self, string name, Id parentId) -> RectPanel
        __init__(self, string name, PyMooseBase parent) -> RectPanel
        __init__(self, RectPanel src, string name, PyMooseBase parent) -> RectPanel
        __init__(self, RectPanel src, string name, Id parent) -> RectPanel
        __init__(self, RectPanel src, string path) -> RectPanel
        __init__(self, Id src, string name, Id parent) -> RectPanel
        __init__(self, Id src, string path) -> RectPanel
        """
        this = _moose.new_RectPanel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_RectPanel
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.RectPanel_getType(self)

RectPanel_swigregister = _moose.RectPanel_swigregister
RectPanel_swigregister(RectPanel)

class Surface(Neutral):
    """Proxy of C++ pymoose::Surface class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Surface
        __init__(self, string path) -> Surface
        __init__(self, string name, Id parentId) -> Surface
        __init__(self, string name, PyMooseBase parent) -> Surface
        __init__(self, Surface src, string name, PyMooseBase parent) -> Surface
        __init__(self, Surface src, string name, Id parent) -> Surface
        __init__(self, Surface src, string path) -> Surface
        __init__(self, Id src, string name, Id parent) -> Surface
        __init__(self, Id src, string path) -> Surface
        """
        this = _moose.new_Surface(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Surface
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Surface_getType(self)

    def __get_volume(self):
        """__get_volume(self) -> double"""
        return _moose.Surface___get_volume(self)

    volume = _swig_property(_moose.Surface_volume_get)
Surface_swigregister = _moose.Surface_swigregister
Surface_swigregister(Surface)

class Geometry(Neutral):
    """Proxy of C++ pymoose::Geometry class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Geometry
        __init__(self, string path) -> Geometry
        __init__(self, string name, Id parentId) -> Geometry
        __init__(self, string name, PyMooseBase parent) -> Geometry
        __init__(self, Geometry src, string name, PyMooseBase parent) -> Geometry
        __init__(self, Geometry src, string name, Id parent) -> Geometry
        __init__(self, Geometry src, string path) -> Geometry
        __init__(self, Id src, string name, Id parent) -> Geometry
        __init__(self, Id src, string path) -> Geometry
        """
        this = _moose.new_Geometry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Geometry
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Geometry_getType(self)

    def __get_epsilon(self):
        """__get_epsilon(self) -> double"""
        return _moose.Geometry___get_epsilon(self)

    def __set_epsilon(self, *args):
        """__set_epsilon(self, double epsilon)"""
        return _moose.Geometry___set_epsilon(self, *args)

    def __get_neighdist(self):
        """__get_neighdist(self) -> double"""
        return _moose.Geometry___get_neighdist(self)

    def __set_neighdist(self, *args):
        """__set_neighdist(self, double neighdist)"""
        return _moose.Geometry___set_neighdist(self, *args)

    epsilon = _swig_property(_moose.Geometry_epsilon_get, _moose.Geometry_epsilon_set)
    neighdist = _swig_property(_moose.Geometry_neighdist_get, _moose.Geometry_neighdist_set)
Geometry_swigregister = _moose.Geometry_swigregister
Geometry_swigregister(Geometry)

class Adaptor(Neutral):
    """Proxy of C++ pymoose::Adaptor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> Adaptor
        __init__(self, string path) -> Adaptor
        __init__(self, string name, Id parentId) -> Adaptor
        __init__(self, string name, PyMooseBase parent) -> Adaptor
        __init__(self, Adaptor src, string name, PyMooseBase parent) -> Adaptor
        __init__(self, Adaptor src, string name, Id parent) -> Adaptor
        __init__(self, Adaptor src, string path) -> Adaptor
        __init__(self, Id src, string name, Id parent) -> Adaptor
        __init__(self, Id src, string path) -> Adaptor
        """
        this = _moose.new_Adaptor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_Adaptor
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.Adaptor_getType(self)

    def __get_inputOffset(self):
        """__get_inputOffset(self) -> double"""
        return _moose.Adaptor___get_inputOffset(self)

    def __set_inputOffset(self, *args):
        """__set_inputOffset(self, double inputOffset)"""
        return _moose.Adaptor___set_inputOffset(self, *args)

    def __get_outputOffset(self):
        """__get_outputOffset(self) -> double"""
        return _moose.Adaptor___get_outputOffset(self)

    def __set_outputOffset(self, *args):
        """__set_outputOffset(self, double outputOffset)"""
        return _moose.Adaptor___set_outputOffset(self, *args)

    def __get_scale(self):
        """__get_scale(self) -> double"""
        return _moose.Adaptor___get_scale(self)

    def __set_scale(self, *args):
        """__set_scale(self, double scale)"""
        return _moose.Adaptor___set_scale(self, *args)

    def __get_output(self):
        """__get_output(self) -> double"""
        return _moose.Adaptor___get_output(self)

    inputOffset = _swig_property(_moose.Adaptor_inputOffset_get, _moose.Adaptor_inputOffset_set)
    outputOffset = _swig_property(_moose.Adaptor_outputOffset_get, _moose.Adaptor_outputOffset_set)
    scale = _swig_property(_moose.Adaptor_scale_get, _moose.Adaptor_scale_set)
    output = _swig_property(_moose.Adaptor_output_get)
Adaptor_swigregister = _moose.Adaptor_swigregister
Adaptor_swigregister(Adaptor)

class SigNeur(Neutral):
    """Proxy of C++ pymoose::SigNeur class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> SigNeur
        __init__(self, string path) -> SigNeur
        __init__(self, string name, Id parentId) -> SigNeur
        __init__(self, string name, PyMooseBase parent) -> SigNeur
        __init__(self, SigNeur src, string name, PyMooseBase parent) -> SigNeur
        __init__(self, SigNeur src, string name, Id parent) -> SigNeur
        __init__(self, SigNeur src, string path) -> SigNeur
        __init__(self, Id src, string name, Id parent) -> SigNeur
        __init__(self, Id src, string path) -> SigNeur
        """
        this = _moose.new_SigNeur(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_SigNeur
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.SigNeur_getType(self)

    def __get_cellProto(self):
        """__get_cellProto(self) -> string"""
        return _moose.SigNeur___get_cellProto(self)

    def __set_cellProto(self, *args):
        """__set_cellProto(self, string cellProto)"""
        return _moose.SigNeur___set_cellProto(self, *args)

    def __get_spineProto(self):
        """__get_spineProto(self) -> string"""
        return _moose.SigNeur___get_spineProto(self)

    def __set_spineProto(self, *args):
        """__set_spineProto(self, string spineProto)"""
        return _moose.SigNeur___set_spineProto(self, *args)

    def __get_dendProto(self):
        """__get_dendProto(self) -> string"""
        return _moose.SigNeur___get_dendProto(self)

    def __set_dendProto(self, *args):
        """__set_dendProto(self, string dendProto)"""
        return _moose.SigNeur___set_dendProto(self, *args)

    def __get_somaProto(self):
        """__get_somaProto(self) -> string"""
        return _moose.SigNeur___get_somaProto(self)

    def __set_somaProto(self, *args):
        """__set_somaProto(self, string somaProto)"""
        return _moose.SigNeur___set_somaProto(self, *args)

    def __get_cell(self):
        """__get_cell(self) -> string"""
        return _moose.SigNeur___get_cell(self)

    def __get_spine(self):
        """__get_spine(self) -> string"""
        return _moose.SigNeur___get_spine(self)

    def __get_dend(self):
        """__get_dend(self) -> string"""
        return _moose.SigNeur___get_dend(self)

    def __get_soma(self):
        """__get_soma(self) -> string"""
        return _moose.SigNeur___get_soma(self)

    def __get_cellMethod(self):
        """__get_cellMethod(self) -> string"""
        return _moose.SigNeur___get_cellMethod(self)

    def __set_cellMethod(self, *args):
        """__set_cellMethod(self, string cellMethod)"""
        return _moose.SigNeur___set_cellMethod(self, *args)

    def __get_spineMethod(self):
        """__get_spineMethod(self) -> string"""
        return _moose.SigNeur___get_spineMethod(self)

    def __set_spineMethod(self, *args):
        """__set_spineMethod(self, string spineMethod)"""
        return _moose.SigNeur___set_spineMethod(self, *args)

    def __get_dendMethod(self):
        """__get_dendMethod(self) -> string"""
        return _moose.SigNeur___get_dendMethod(self)

    def __set_dendMethod(self, *args):
        """__set_dendMethod(self, string dendMethod)"""
        return _moose.SigNeur___set_dendMethod(self, *args)

    def __get_somaMethod(self):
        """__get_somaMethod(self) -> string"""
        return _moose.SigNeur___get_somaMethod(self)

    def __set_somaMethod(self, *args):
        """__set_somaMethod(self, string somaMethod)"""
        return _moose.SigNeur___set_somaMethod(self, *args)

    def __get_sigDt(self):
        """__get_sigDt(self) -> double"""
        return _moose.SigNeur___get_sigDt(self)

    def __set_sigDt(self, *args):
        """__set_sigDt(self, double sigDt)"""
        return _moose.SigNeur___set_sigDt(self, *args)

    def __get_cellDt(self):
        """__get_cellDt(self) -> double"""
        return _moose.SigNeur___get_cellDt(self)

    def __set_cellDt(self, *args):
        """__set_cellDt(self, double cellDt)"""
        return _moose.SigNeur___set_cellDt(self, *args)

    def __get_Dscale(self):
        """__get_Dscale(self) -> double"""
        return _moose.SigNeur___get_Dscale(self)

    def __set_Dscale(self, *args):
        """__set_Dscale(self, double Dscale)"""
        return _moose.SigNeur___set_Dscale(self, *args)

    def __get_lambda(self):
        """__get_lambda(self) -> double"""
        return _moose.SigNeur___get_lambda(self)

    def __set_lambda(self, *args):
        """__set_lambda(self, double _lambda)"""
        return _moose.SigNeur___set_lambda(self, *args)

    def __get_parallelMode(self):
        """__get_parallelMode(self) -> int"""
        return _moose.SigNeur___get_parallelMode(self)

    def __set_parallelMode(self, *args):
        """__set_parallelMode(self, int parallelMode)"""
        return _moose.SigNeur___set_parallelMode(self, *args)

    def __get_updateStep(self):
        """__get_updateStep(self) -> double"""
        return _moose.SigNeur___get_updateStep(self)

    def __set_updateStep(self, *args):
        """__set_updateStep(self, double updateStep)"""
        return _moose.SigNeur___set_updateStep(self, *args)

    def __get_calciumScale(self):
        """__get_calciumScale(self) -> double"""
        return _moose.SigNeur___get_calciumScale(self)

    def __set_calciumScale(self, *args):
        """__set_calciumScale(self, double calciumScale)"""
        return _moose.SigNeur___set_calciumScale(self, *args)

    def __get_dendInclude(self):
        """__get_dendInclude(self) -> string"""
        return _moose.SigNeur___get_dendInclude(self)

    def __set_dendInclude(self, *args):
        """__set_dendInclude(self, string dendInclude)"""
        return _moose.SigNeur___set_dendInclude(self, *args)

    def __get_dendExclude(self):
        """__get_dendExclude(self) -> string"""
        return _moose.SigNeur___get_dendExclude(self)

    def __set_dendExclude(self, *args):
        """__set_dendExclude(self, string dendExclude)"""
        return _moose.SigNeur___set_dendExclude(self, *args)

    def build(self):
        """build(self)"""
        return _moose.SigNeur_build(self)

    cellProto = _swig_property(_moose.SigNeur_cellProto_get, _moose.SigNeur_cellProto_set)
    spineProto = _swig_property(_moose.SigNeur_spineProto_get, _moose.SigNeur_spineProto_set)
    dendProto = _swig_property(_moose.SigNeur_dendProto_get, _moose.SigNeur_dendProto_set)
    somaProto = _swig_property(_moose.SigNeur_somaProto_get, _moose.SigNeur_somaProto_set)
    cell = _swig_property(_moose.SigNeur_cell_get)
    spine = _swig_property(_moose.SigNeur_spine_get)
    dend = _swig_property(_moose.SigNeur_dend_get)
    soma = _swig_property(_moose.SigNeur_soma_get)
    cellMethod = _swig_property(_moose.SigNeur_cellMethod_get, _moose.SigNeur_cellMethod_set)
    spineMethod = _swig_property(_moose.SigNeur_spineMethod_get, _moose.SigNeur_spineMethod_set)
    dendMethod = _swig_property(_moose.SigNeur_dendMethod_get, _moose.SigNeur_dendMethod_set)
    somaMethod = _swig_property(_moose.SigNeur_somaMethod_get, _moose.SigNeur_somaMethod_set)
    sigDt = _swig_property(_moose.SigNeur_sigDt_get, _moose.SigNeur_sigDt_set)
    cellDt = _swig_property(_moose.SigNeur_cellDt_get, _moose.SigNeur_cellDt_set)
    Dscale = _swig_property(_moose.SigNeur_Dscale_get, _moose.SigNeur_Dscale_set)
    lambda_ = _swig_property(_moose.SigNeur_lambda__get, _moose.SigNeur_lambda__set)
    parallelMode = _swig_property(_moose.SigNeur_parallelMode_get, _moose.SigNeur_parallelMode_set)
    updateStep = _swig_property(_moose.SigNeur_updateStep_get, _moose.SigNeur_updateStep_set)
    calciumScale = _swig_property(_moose.SigNeur_calciumScale_get, _moose.SigNeur_calciumScale_set)
    dendInclude = _swig_property(_moose.SigNeur_dendInclude_get, _moose.SigNeur_dendInclude_set)
    dendExclude = _swig_property(_moose.SigNeur_dendExclude_get, _moose.SigNeur_dendExclude_set)
SigNeur_swigregister = _moose.SigNeur_swigregister
SigNeur_swigregister(SigNeur)

class AscFile(Neutral):
    """Proxy of C++ pymoose::AscFile class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> AscFile
        __init__(self, string path) -> AscFile
        __init__(self, string name, Id parentId) -> AscFile
        __init__(self, string name, PyMooseBase parent) -> AscFile
        __init__(self, AscFile src, string name, PyMooseBase parent) -> AscFile
        __init__(self, AscFile src, string name, Id parent) -> AscFile
        __init__(self, AscFile src, string path) -> AscFile
        __init__(self, Id src, string name, Id parent) -> AscFile
        __init__(self, Id src, string path) -> AscFile
        """
        this = _moose.new_AscFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_AscFile
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.AscFile_getType(self)

    def __get_filename(self):
        """__get_filename(self) -> string"""
        return _moose.AscFile___get_filename(self)

    def __set_filename(self, *args):
        """__set_filename(self, string filename)"""
        return _moose.AscFile___set_filename(self, *args)

    def __get_append(self):
        """__get_append(self) -> int"""
        return _moose.AscFile___get_append(self)

    def __set_append(self, *args):
        """__set_append(self, int append)"""
        return _moose.AscFile___set_append(self, *args)

    def __get_time(self):
        """__get_time(self) -> int"""
        return _moose.AscFile___get_time(self)

    def __set_time(self, *args):
        """__set_time(self, int time)"""
        return _moose.AscFile___set_time(self, *args)

    def __get_header(self):
        """__get_header(self) -> int"""
        return _moose.AscFile___get_header(self)

    def __set_header(self, *args):
        """__set_header(self, int header)"""
        return _moose.AscFile___set_header(self, *args)

    def __get_comment(self):
        """__get_comment(self) -> string"""
        return _moose.AscFile___get_comment(self)

    def __set_comment(self, *args):
        """__set_comment(self, string comment)"""
        return _moose.AscFile___set_comment(self, *args)

    def __get_delimiter(self):
        """__get_delimiter(self) -> string"""
        return _moose.AscFile___get_delimiter(self)

    def __set_delimiter(self, *args):
        """__set_delimiter(self, string delimiter)"""
        return _moose.AscFile___set_delimiter(self, *args)

    filename = _swig_property(_moose.AscFile_filename_get, _moose.AscFile_filename_set)
    appendFlag = _swig_property(_moose.AscFile_appendFlag_get, _moose.AscFile_appendFlag_set)
    time = _swig_property(_moose.AscFile_time_get, _moose.AscFile_time_set)
    header = _swig_property(_moose.AscFile_header_get, _moose.AscFile_header_set)
    comment = _swig_property(_moose.AscFile_comment_get, _moose.AscFile_comment_set)
    delimiter = _swig_property(_moose.AscFile_delimiter_get, _moose.AscFile_delimiter_set)
AscFile_swigregister = _moose.AscFile_swigregister
AscFile_swigregister(AscFile)

class DifShell(Neutral):
    """Proxy of C++ pymoose::DifShell class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> DifShell
        __init__(self, string path) -> DifShell
        __init__(self, string name, Id parentId) -> DifShell
        __init__(self, string name, PyMooseBase parent) -> DifShell
        __init__(self, DifShell src, string name, PyMooseBase parent) -> DifShell
        __init__(self, DifShell src, string name, Id parent) -> DifShell
        __init__(self, DifShell src, string path) -> DifShell
        __init__(self, Id src, string name, Id parent) -> DifShell
        __init__(self, Id src, string path) -> DifShell
        """
        this = _moose.new_DifShell(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_DifShell
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.DifShell_getType(self)

    def __get_C(self):
        """__get_C(self) -> double"""
        return _moose.DifShell___get_C(self)

    def __get_Ceq(self):
        """__get_Ceq(self) -> double"""
        return _moose.DifShell___get_Ceq(self)

    def __set_Ceq(self, *args):
        """__set_Ceq(self, double Ceq)"""
        return _moose.DifShell___set_Ceq(self, *args)

    def __get_D(self):
        """__get_D(self) -> double"""
        return _moose.DifShell___get_D(self)

    def __set_D(self, *args):
        """__set_D(self, double D)"""
        return _moose.DifShell___set_D(self, *args)

    def __get_valence(self):
        """__get_valence(self) -> double"""
        return _moose.DifShell___get_valence(self)

    def __set_valence(self, *args):
        """__set_valence(self, double valence)"""
        return _moose.DifShell___set_valence(self, *args)

    def __get_leak(self):
        """__get_leak(self) -> double"""
        return _moose.DifShell___get_leak(self)

    def __set_leak(self, *args):
        """__set_leak(self, double leak)"""
        return _moose.DifShell___set_leak(self, *args)

    def __get_shapeMode(self):
        """__get_shapeMode(self) -> unsigned int"""
        return _moose.DifShell___get_shapeMode(self)

    def __set_shapeMode(self, *args):
        """__set_shapeMode(self, unsigned int shapeMode)"""
        return _moose.DifShell___set_shapeMode(self, *args)

    def __get_length(self):
        """__get_length(self) -> double"""
        return _moose.DifShell___get_length(self)

    def __set_length(self, *args):
        """__set_length(self, double length)"""
        return _moose.DifShell___set_length(self, *args)

    def __get_diameter(self):
        """__get_diameter(self) -> double"""
        return _moose.DifShell___get_diameter(self)

    def __set_diameter(self, *args):
        """__set_diameter(self, double diameter)"""
        return _moose.DifShell___set_diameter(self, *args)

    def __get_thickness(self):
        """__get_thickness(self) -> double"""
        return _moose.DifShell___get_thickness(self)

    def __set_thickness(self, *args):
        """__set_thickness(self, double thickness)"""
        return _moose.DifShell___set_thickness(self, *args)

    def __get_volume(self):
        """__get_volume(self) -> double"""
        return _moose.DifShell___get_volume(self)

    def __set_volume(self, *args):
        """__set_volume(self, double volume)"""
        return _moose.DifShell___set_volume(self, *args)

    def __get_outerArea(self):
        """__get_outerArea(self) -> double"""
        return _moose.DifShell___get_outerArea(self)

    def __set_outerArea(self, *args):
        """__set_outerArea(self, double outerArea)"""
        return _moose.DifShell___set_outerArea(self, *args)

    def __get_innerArea(self):
        """__get_innerArea(self) -> double"""
        return _moose.DifShell___get_innerArea(self)

    def __set_innerArea(self, *args):
        """__set_innerArea(self, double innerArea)"""
        return _moose.DifShell___set_innerArea(self, *args)

    C = _swig_property(_moose.DifShell_C_get)
    Ceq = _swig_property(_moose.DifShell_Ceq_get, _moose.DifShell_Ceq_set)
    D = _swig_property(_moose.DifShell_D_get, _moose.DifShell_D_set)
    valence = _swig_property(_moose.DifShell_valence_get, _moose.DifShell_valence_set)
    leak = _swig_property(_moose.DifShell_leak_get, _moose.DifShell_leak_set)
    shapeMode = _swig_property(_moose.DifShell_shapeMode_get, _moose.DifShell_shapeMode_set)
    length = _swig_property(_moose.DifShell_length_get, _moose.DifShell_length_set)
    diameter = _swig_property(_moose.DifShell_diameter_get, _moose.DifShell_diameter_set)
    thickness = _swig_property(_moose.DifShell_thickness_get, _moose.DifShell_thickness_set)
    volume = _swig_property(_moose.DifShell_volume_get, _moose.DifShell_volume_set)
    outerArea = _swig_property(_moose.DifShell_outerArea_get, _moose.DifShell_outerArea_set)
    innerArea = _swig_property(_moose.DifShell_innerArea_get, _moose.DifShell_innerArea_set)
DifShell_swigregister = _moose.DifShell_swigregister
DifShell_swigregister(DifShell)

class GssaStoich(Stoich):
    """Proxy of C++ pymoose::GssaStoich class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> GssaStoich
        __init__(self, string path) -> GssaStoich
        __init__(self, string name, Id parentId) -> GssaStoich
        __init__(self, string name, PyMooseBase parent) -> GssaStoich
        __init__(self, GssaStoich src, string name, PyMooseBase parent) -> GssaStoich
        __init__(self, GssaStoich src, string name, Id parent) -> GssaStoich
        __init__(self, GssaStoich src, string path) -> GssaStoich
        __init__(self, Id src, string name, Id parent) -> GssaStoich
        __init__(self, Id src, string path) -> GssaStoich
        """
        this = _moose.new_GssaStoich(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GssaStoich
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.GssaStoich_getType(self)

    def __get_method(self):
        """__get_method(self) -> string"""
        return _moose.GssaStoich___get_method(self)

    def __set_method(self, *args):
        """__set_method(self, string method)"""
        return _moose.GssaStoich___set_method(self, *args)

    def __set_path(self, *args):
        """__set_path(self, string path)"""
        return _moose.GssaStoich___set_path(self, *args)

    method = _swig_property(_moose.GssaStoich_method_get, _moose.GssaStoich_method_set)
    path = _swig_property(_moose.GssaStoich_path_get)
GssaStoich_swigregister = _moose.GssaStoich_swigregister
GssaStoich_swigregister(GssaStoich)

class TauPump(Neutral):
    """Proxy of C++ pymoose::TauPump class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> TauPump
        __init__(self, string path) -> TauPump
        __init__(self, string name, Id parentId) -> TauPump
        __init__(self, string name, PyMooseBase parent) -> TauPump
        __init__(self, TauPump src, string name, PyMooseBase parent) -> TauPump
        __init__(self, TauPump src, string name, Id parent) -> TauPump
        __init__(self, TauPump src, string path) -> TauPump
        __init__(self, Id src, string name, Id parent) -> TauPump
        __init__(self, Id src, string path) -> TauPump
        """
        this = _moose.new_TauPump(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_TauPump
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.TauPump_getType(self)

    def __get_pumpRate(self):
        """__get_pumpRate(self) -> double"""
        return _moose.TauPump___get_pumpRate(self)

    def __set_pumpRate(self, *args):
        """__set_pumpRate(self, double pumpRate)"""
        return _moose.TauPump___set_pumpRate(self, *args)

    def __get_eqConc(self):
        """__get_eqConc(self) -> double"""
        return _moose.TauPump___get_eqConc(self)

    def __set_eqConc(self, *args):
        """__set_eqConc(self, double eqConc)"""
        return _moose.TauPump___set_eqConc(self, *args)

    def __get_TA(self):
        """__get_TA(self) -> double"""
        return _moose.TauPump___get_TA(self)

    def __set_TA(self, *args):
        """__set_TA(self, double TA)"""
        return _moose.TauPump___set_TA(self, *args)

    def __get_TB(self):
        """__get_TB(self) -> double"""
        return _moose.TauPump___get_TB(self)

    def __set_TB(self, *args):
        """__set_TB(self, double TB)"""
        return _moose.TauPump___set_TB(self, *args)

    def __get_TC(self):
        """__get_TC(self) -> double"""
        return _moose.TauPump___get_TC(self)

    def __set_TC(self, *args):
        """__set_TC(self, double TC)"""
        return _moose.TauPump___set_TC(self, *args)

    def __get_TV(self):
        """__get_TV(self) -> double"""
        return _moose.TauPump___get_TV(self)

    def __set_TV(self, *args):
        """__set_TV(self, double TV)"""
        return _moose.TauPump___set_TV(self, *args)

    pumpRate = _swig_property(_moose.TauPump_pumpRate_get, _moose.TauPump_pumpRate_set)
    eqConc = _swig_property(_moose.TauPump_eqConc_get, _moose.TauPump_eqConc_set)
    TA = _swig_property(_moose.TauPump_TA_get, _moose.TauPump_TA_set)
    TB = _swig_property(_moose.TauPump_TB_get, _moose.TauPump_TB_set)
    TC = _swig_property(_moose.TauPump_TC_get, _moose.TauPump_TC_set)
    TV = _swig_property(_moose.TauPump_TV_get, _moose.TauPump_TV_set)
TauPump_swigregister = _moose.TauPump_swigregister
TauPump_swigregister(TauPump)

class TimeTable(Neutral):
    """Proxy of C++ pymoose::TimeTable class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> TimeTable
        __init__(self, string path) -> TimeTable
        __init__(self, string name, Id parentId) -> TimeTable
        __init__(self, string name, PyMooseBase parent) -> TimeTable
        __init__(self, TimeTable src, string name, PyMooseBase parent) -> TimeTable
        __init__(self, TimeTable src, string name, Id parent) -> TimeTable
        __init__(self, TimeTable src, string path) -> TimeTable
        __init__(self, Id src, string name, Id parent) -> TimeTable
        __init__(self, Id src, string path) -> TimeTable
        """
        this = _moose.new_TimeTable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_TimeTable
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.TimeTable_getType(self)

    def __get_maxTime(self):
        """__get_maxTime(self) -> double"""
        return _moose.TimeTable___get_maxTime(self)

    def __set_maxTime(self, *args):
        """__set_maxTime(self, double maxTime)"""
        return _moose.TimeTable___set_maxTime(self, *args)

    def __get_tableVector(self):
        """__get_tableVector(self) -> double_vector"""
        return _moose.TimeTable___get_tableVector(self)

    def __set_tableVector(self, *args):
        """__set_tableVector(self, double_vector tableVector)"""
        return _moose.TimeTable___set_tableVector(self, *args)

    def __get_tableSize(self):
        """__get_tableSize(self) -> unsigned int"""
        return _moose.TimeTable___get_tableSize(self)

    def __getitem__(self, *args):
        """__getitem__(self, unsigned int index) -> double"""
        return _moose.TimeTable___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, unsigned int index, double value)"""
        return _moose.TimeTable___setitem__(self, *args)

    def __get_state(self):
        """__get_state(self) -> double"""
        return _moose.TimeTable___get_state(self)

    def __get_method(self):
        """__get_method(self) -> int"""
        return _moose.TimeTable___get_method(self)

    def __set_method(self, *args):
        """__set_method(self, int method)"""
        return _moose.TimeTable___set_method(self, *args)

    def __get_filename(self):
        """__get_filename(self) -> string"""
        return _moose.TimeTable___get_filename(self)

    def __set_filename(self, *args):
        """__set_filename(self, string filename)"""
        return _moose.TimeTable___set_filename(self, *args)

    maxTime = _swig_property(_moose.TimeTable_maxTime_get, _moose.TimeTable_maxTime_set)
    tableSize = _swig_property(_moose.TimeTable_tableSize_get)
    state = _swig_property(_moose.TimeTable_state_get)
    method = _swig_property(_moose.TimeTable_method_get, _moose.TimeTable_method_set)
    filename = _swig_property(_moose.TimeTable_filename_get, _moose.TimeTable_filename_set)
TimeTable_swigregister = _moose.TimeTable_swigregister
TimeTable_swigregister(TimeTable)

class RC(Neutral):
    """Proxy of C++ pymoose::RC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> RC
        __init__(self, string path) -> RC
        __init__(self, string name, Id parentId) -> RC
        __init__(self, string name, PyMooseBase parent) -> RC
        __init__(self, RC src, string name, PyMooseBase parent) -> RC
        __init__(self, RC src, string name, Id parent) -> RC
        __init__(self, RC src, string path) -> RC
        __init__(self, Id src, string name, Id parent) -> RC
        __init__(self, Id src, string path) -> RC
        """
        this = _moose.new_RC(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_RC
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.RC_getType(self)

    def __get_V0(self):
        """__get_V0(self) -> double"""
        return _moose.RC___get_V0(self)

    def __set_V0(self, *args):
        """__set_V0(self, double V0)"""
        return _moose.RC___set_V0(self, *args)

    def __get_R(self):
        """__get_R(self) -> double"""
        return _moose.RC___get_R(self)

    def __set_R(self, *args):
        """__set_R(self, double R)"""
        return _moose.RC___set_R(self, *args)

    def __get_C(self):
        """__get_C(self) -> double"""
        return _moose.RC___get_C(self)

    def __set_C(self, *args):
        """__set_C(self, double C)"""
        return _moose.RC___set_C(self, *args)

    def __get_state(self):
        """__get_state(self) -> double"""
        return _moose.RC___get_state(self)

    def __get_inject(self):
        """__get_inject(self) -> double"""
        return _moose.RC___get_inject(self)

    def __set_inject(self, *args):
        """__set_inject(self, double inject)"""
        return _moose.RC___set_inject(self, *args)

    V0 = _swig_property(_moose.RC_V0_get, _moose.RC_V0_set)
    R = _swig_property(_moose.RC_R_get, _moose.RC_R_set)
    C = _swig_property(_moose.RC_C_get, _moose.RC_C_set)
    state = _swig_property(_moose.RC_state_get)
    inject = _swig_property(_moose.RC_inject_get, _moose.RC_inject_set)
RC_swigregister = _moose.RC_swigregister
RC_swigregister(RC)

class PIDController(Neutral):
    """Proxy of C++ pymoose::PIDController class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> PIDController
        __init__(self, string path) -> PIDController
        __init__(self, string name, Id parentId) -> PIDController
        __init__(self, string name, PyMooseBase parent) -> PIDController
        __init__(self, PIDController src, string name, PyMooseBase parent) -> PIDController
        __init__(self, PIDController src, string name, Id parent) -> PIDController
        __init__(self, PIDController src, string path) -> PIDController
        __init__(self, Id src, string name, Id parent) -> PIDController
        __init__(self, Id src, string path) -> PIDController
        """
        this = _moose.new_PIDController(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_PIDController
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.PIDController_getType(self)

    def __get_gain(self):
        """__get_gain(self) -> double"""
        return _moose.PIDController___get_gain(self)

    def __set_gain(self, *args):
        """__set_gain(self, double gain)"""
        return _moose.PIDController___set_gain(self, *args)

    def __get_saturation(self):
        """__get_saturation(self) -> double"""
        return _moose.PIDController___get_saturation(self)

    def __set_saturation(self, *args):
        """__set_saturation(self, double saturation)"""
        return _moose.PIDController___set_saturation(self, *args)

    def __get_command(self):
        """__get_command(self) -> double"""
        return _moose.PIDController___get_command(self)

    def __set_command(self, *args):
        """__set_command(self, double command)"""
        return _moose.PIDController___set_command(self, *args)

    def __get_sensed(self):
        """__get_sensed(self) -> double"""
        return _moose.PIDController___get_sensed(self)

    def __get_tauI(self):
        """__get_tauI(self) -> double"""
        return _moose.PIDController___get_tauI(self)

    def __set_tauI(self, *args):
        """__set_tauI(self, double tauI)"""
        return _moose.PIDController___set_tauI(self, *args)

    def __get_tauD(self):
        """__get_tauD(self) -> double"""
        return _moose.PIDController___get_tauD(self)

    def __set_tauD(self, *args):
        """__set_tauD(self, double tauD)"""
        return _moose.PIDController___set_tauD(self, *args)

    def __get_output(self):
        """__get_output(self) -> double"""
        return _moose.PIDController___get_output(self)

    def __get_error(self):
        """__get_error(self) -> double"""
        return _moose.PIDController___get_error(self)

    def __get_integral(self):
        """__get_integral(self) -> double"""
        return _moose.PIDController___get_integral(self)

    def __get_derivative(self):
        """__get_derivative(self) -> double"""
        return _moose.PIDController___get_derivative(self)

    def __get_e_previous(self):
        """__get_e_previous(self) -> double"""
        return _moose.PIDController___get_e_previous(self)

    gain = _swig_property(_moose.PIDController_gain_get, _moose.PIDController_gain_set)
    saturation = _swig_property(_moose.PIDController_saturation_get, _moose.PIDController_saturation_set)
    command = _swig_property(_moose.PIDController_command_get, _moose.PIDController_command_set)
    sensed = _swig_property(_moose.PIDController_sensed_get)
    tauI = _swig_property(_moose.PIDController_tauI_get, _moose.PIDController_tauI_set)
    tauD = _swig_property(_moose.PIDController_tauD_get, _moose.PIDController_tauD_set)
    output = _swig_property(_moose.PIDController_output_get)
PIDController_swigregister = _moose.PIDController_swigregister
PIDController_swigregister(PIDController)

class DiffAmp(Neutral):
    """Proxy of C++ pymoose::DiffAmp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> DiffAmp
        __init__(self, string path) -> DiffAmp
        __init__(self, string name, Id parentId) -> DiffAmp
        __init__(self, string name, PyMooseBase parent) -> DiffAmp
        __init__(self, DiffAmp src, string name, PyMooseBase parent) -> DiffAmp
        __init__(self, DiffAmp src, string name, Id parent) -> DiffAmp
        __init__(self, DiffAmp src, string path) -> DiffAmp
        __init__(self, Id src, string name, Id parent) -> DiffAmp
        __init__(self, Id src, string path) -> DiffAmp
        """
        this = _moose.new_DiffAmp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_DiffAmp
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.DiffAmp_getType(self)

    def __get_gain(self):
        """__get_gain(self) -> double"""
        return _moose.DiffAmp___get_gain(self)

    def __set_gain(self, *args):
        """__set_gain(self, double gain)"""
        return _moose.DiffAmp___set_gain(self, *args)

    def __get_saturation(self):
        """__get_saturation(self) -> double"""
        return _moose.DiffAmp___get_saturation(self)

    def __set_saturation(self, *args):
        """__set_saturation(self, double saturation)"""
        return _moose.DiffAmp___set_saturation(self, *args)

    def __get_plus(self):
        """__get_plus(self) -> double"""
        return _moose.DiffAmp___get_plus(self)

    def __get_minus(self):
        """__get_minus(self) -> double"""
        return _moose.DiffAmp___get_minus(self)

    def __get_output(self):
        """__get_output(self) -> double"""
        return _moose.DiffAmp___get_output(self)

    gain = _swig_property(_moose.DiffAmp_gain_get, _moose.DiffAmp_gain_set)
    saturation = _swig_property(_moose.DiffAmp_saturation_get, _moose.DiffAmp_saturation_set)
    plus = _swig_property(_moose.DiffAmp_plus_get)
    minus = _swig_property(_moose.DiffAmp_minus_get)
    output = _swig_property(_moose.DiffAmp_output_get)
DiffAmp_swigregister = _moose.DiffAmp_swigregister
DiffAmp_swigregister(DiffAmp)

class IntFire(Neutral):
    """Proxy of C++ pymoose::IntFire class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> IntFire
        __init__(self, string path) -> IntFire
        __init__(self, string name, Id parentId) -> IntFire
        __init__(self, string name, PyMooseBase parent) -> IntFire
        __init__(self, IntFire src, string name, PyMooseBase parent) -> IntFire
        __init__(self, IntFire src, string name, Id parent) -> IntFire
        __init__(self, IntFire src, string path) -> IntFire
        __init__(self, Id src, string name, Id parent) -> IntFire
        __init__(self, Id src, string path) -> IntFire
        """
        this = _moose.new_IntFire(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_IntFire
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.IntFire_getType(self)

    def __get_Vt(self):
        """__get_Vt(self) -> double"""
        return _moose.IntFire___get_Vt(self)

    def __set_Vt(self, *args):
        """__set_Vt(self, double Vt)"""
        return _moose.IntFire___set_Vt(self, *args)

    def __get_Vr(self):
        """__get_Vr(self) -> double"""
        return _moose.IntFire___get_Vr(self)

    def __set_Vr(self, *args):
        """__set_Vr(self, double Vr)"""
        return _moose.IntFire___set_Vr(self, *args)

    def __get_Rm(self):
        """__get_Rm(self) -> double"""
        return _moose.IntFire___get_Rm(self)

    def __set_Rm(self, *args):
        """__set_Rm(self, double Rm)"""
        return _moose.IntFire___set_Rm(self, *args)

    def __get_Cm(self):
        """__get_Cm(self) -> double"""
        return _moose.IntFire___get_Cm(self)

    def __set_Cm(self, *args):
        """__set_Cm(self, double Cm)"""
        return _moose.IntFire___set_Cm(self, *args)

    def __get_Vm(self):
        """__get_Vm(self) -> double"""
        return _moose.IntFire___get_Vm(self)

    def __set_Vm(self, *args):
        """__set_Vm(self, double Vm)"""
        return _moose.IntFire___set_Vm(self, *args)

    def __get_tau(self):
        """__get_tau(self) -> double"""
        return _moose.IntFire___get_tau(self)

    def __get_Em(self):
        """__get_Em(self) -> double"""
        return _moose.IntFire___get_Em(self)

    def __set_Em(self, *args):
        """__set_Em(self, double Em)"""
        return _moose.IntFire___set_Em(self, *args)

    def __get_refractT(self):
        """__get_refractT(self) -> double"""
        return _moose.IntFire___get_refractT(self)

    def __set_refractT(self, *args):
        """__set_refractT(self, double refractT)"""
        return _moose.IntFire___set_refractT(self, *args)

    def __get_initVm(self):
        """__get_initVm(self) -> double"""
        return _moose.IntFire___get_initVm(self)

    def __set_initVm(self, *args):
        """__set_initVm(self, double initVm)"""
        return _moose.IntFire___set_initVm(self, *args)

    def __get_inject(self):
        """__get_inject(self) -> double"""
        return _moose.IntFire___get_inject(self)

    def __set_inject(self, *args):
        """__set_inject(self, double inject)"""
        return _moose.IntFire___set_inject(self, *args)

    Vt = _swig_property(_moose.IntFire_Vt_get, _moose.IntFire_Vt_set)
    Vr = _swig_property(_moose.IntFire_Vr_get, _moose.IntFire_Vr_set)
    Rm = _swig_property(_moose.IntFire_Rm_get, _moose.IntFire_Rm_set)
    Cm = _swig_property(_moose.IntFire_Cm_get, _moose.IntFire_Cm_set)
    Vm = _swig_property(_moose.IntFire_Vm_get, _moose.IntFire_Vm_set)
    tau = _swig_property(_moose.IntFire_tau_get)
    Em = _swig_property(_moose.IntFire_Em_get, _moose.IntFire_Em_set)
    refractT = _swig_property(_moose.IntFire_refractT_get, _moose.IntFire_refractT_set)
    initVm = _swig_property(_moose.IntFire_initVm_get, _moose.IntFire_initVm_set)
    inject = _swig_property(_moose.IntFire_inject_get, _moose.IntFire_inject_set)
IntFire_swigregister = _moose.IntFire_swigregister
IntFire_swigregister(IntFire)

class IzhikevichNrn(Neutral):
    """Proxy of C++ pymoose::IzhikevichNrn class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> IzhikevichNrn
        __init__(self, string path) -> IzhikevichNrn
        __init__(self, string name, Id parentId) -> IzhikevichNrn
        __init__(self, string name, PyMooseBase parent) -> IzhikevichNrn
        __init__(self, IzhikevichNrn src, string name, PyMooseBase parent) -> IzhikevichNrn
        __init__(self, IzhikevichNrn src, string name, Id parent) -> IzhikevichNrn
        __init__(self, IzhikevichNrn src, string path) -> IzhikevichNrn
        __init__(self, Id src, string name, Id parent) -> IzhikevichNrn
        __init__(self, Id src, string path) -> IzhikevichNrn
        """
        this = _moose.new_IzhikevichNrn(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_IzhikevichNrn
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.IzhikevichNrn_getType(self)

    def __get_Vmax(self):
        """__get_Vmax(self) -> double"""
        return _moose.IzhikevichNrn___get_Vmax(self)

    def __set_Vmax(self, *args):
        """__set_Vmax(self, double Vmax)"""
        return _moose.IzhikevichNrn___set_Vmax(self, *args)

    def __get_c(self):
        """__get_c(self) -> double"""
        return _moose.IzhikevichNrn___get_c(self)

    def __set_c(self, *args):
        """__set_c(self, double c)"""
        return _moose.IzhikevichNrn___set_c(self, *args)

    def __get_d(self):
        """__get_d(self) -> double"""
        return _moose.IzhikevichNrn___get_d(self)

    def __set_d(self, *args):
        """__set_d(self, double d)"""
        return _moose.IzhikevichNrn___set_d(self, *args)

    def __get_a(self):
        """__get_a(self) -> double"""
        return _moose.IzhikevichNrn___get_a(self)

    def __set_a(self, *args):
        """__set_a(self, double a)"""
        return _moose.IzhikevichNrn___set_a(self, *args)

    def __get_b(self):
        """__get_b(self) -> double"""
        return _moose.IzhikevichNrn___get_b(self)

    def __set_b(self, *args):
        """__set_b(self, double b)"""
        return _moose.IzhikevichNrn___set_b(self, *args)

    def __get_Vm(self):
        """__get_Vm(self) -> double"""
        return _moose.IzhikevichNrn___get_Vm(self)

    def __set_Vm(self, *args):
        """__set_Vm(self, double Vm)"""
        return _moose.IzhikevichNrn___set_Vm(self, *args)

    def __get_u(self):
        """__get_u(self) -> double"""
        return _moose.IzhikevichNrn___get_u(self)

    def __get_Im(self):
        """__get_Im(self) -> double"""
        return _moose.IzhikevichNrn___get_Im(self)

    def __get_initVm(self):
        """__get_initVm(self) -> double"""
        return _moose.IzhikevichNrn___get_initVm(self)

    def __set_initVm(self, *args):
        """__set_initVm(self, double initVm)"""
        return _moose.IzhikevichNrn___set_initVm(self, *args)

    def __get_initU(self):
        """__get_initU(self) -> double"""
        return _moose.IzhikevichNrn___get_initU(self)

    def __set_initU(self, *args):
        """__set_initU(self, double initU)"""
        return _moose.IzhikevichNrn___set_initU(self, *args)

    def __get_alpha(self):
        """__get_alpha(self) -> double"""
        return _moose.IzhikevichNrn___get_alpha(self)

    def __set_alpha(self, *args):
        """__set_alpha(self, double alpha)"""
        return _moose.IzhikevichNrn___set_alpha(self, *args)

    def __get_beta(self):
        """__get_beta(self) -> double"""
        return _moose.IzhikevichNrn___get_beta(self)

    def __set_beta(self, *args):
        """__set_beta(self, double beta)"""
        return _moose.IzhikevichNrn___set_beta(self, *args)

    def __get_gamma(self):
        """__get_gamma(self) -> double"""
        return _moose.IzhikevichNrn___get_gamma(self)

    def __set_gamma(self, *args):
        """__set_gamma(self, double gamma)"""
        return _moose.IzhikevichNrn___set_gamma(self, *args)

    def __get_Rm(self):
        """__get_Rm(self) -> double"""
        return _moose.IzhikevichNrn___get_Rm(self)

    def __set_Rm(self, *args):
        """__set_Rm(self, double Rm)"""
        return _moose.IzhikevichNrn___set_Rm(self, *args)

    Vmax = _swig_property(_moose.IzhikevichNrn_Vmax_get, _moose.IzhikevichNrn_Vmax_set)
    c = _swig_property(_moose.IzhikevichNrn_c_get, _moose.IzhikevichNrn_c_set)
    d = _swig_property(_moose.IzhikevichNrn_d_get, _moose.IzhikevichNrn_d_set)
    a = _swig_property(_moose.IzhikevichNrn_a_get, _moose.IzhikevichNrn_a_set)
    b = _swig_property(_moose.IzhikevichNrn_b_get, _moose.IzhikevichNrn_b_set)
    Vm = _swig_property(_moose.IzhikevichNrn_Vm_get, _moose.IzhikevichNrn_Vm_set)
    u = _swig_property(_moose.IzhikevichNrn_u_get)
    Im = _swig_property(_moose.IzhikevichNrn_Im_get)
    initVm = _swig_property(_moose.IzhikevichNrn_initVm_get, _moose.IzhikevichNrn_initVm_set)
    initU = _swig_property(_moose.IzhikevichNrn_initU_get, _moose.IzhikevichNrn_initU_set)
    alpha = _swig_property(_moose.IzhikevichNrn_alpha_get, _moose.IzhikevichNrn_alpha_set)
    beta = _swig_property(_moose.IzhikevichNrn_beta_get, _moose.IzhikevichNrn_beta_set)
    gamma = _swig_property(_moose.IzhikevichNrn_gamma_get, _moose.IzhikevichNrn_gamma_set)
IzhikevichNrn_swigregister = _moose.IzhikevichNrn_swigregister
IzhikevichNrn_swigregister(IzhikevichNrn)

class GHK(Neutral):
    """Proxy of C++ pymoose::GHK class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> GHK
        __init__(self, string path) -> GHK
        __init__(self, string name, Id parentId) -> GHK
        __init__(self, string name, PyMooseBase parent) -> GHK
        __init__(self, GHK src, string name, PyMooseBase parent) -> GHK
        __init__(self, GHK src, string name, Id parent) -> GHK
        __init__(self, GHK src, string path) -> GHK
        __init__(self, Id src, string name, Id parent) -> GHK
        __init__(self, Id src, string path) -> GHK
        """
        this = _moose.new_GHK(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_GHK
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.GHK_getType(self)

    def __get_Ik(self):
        """__get_Ik(self) -> double"""
        return _moose.GHK___get_Ik(self)

    def __get_Gk(self):
        """__get_Gk(self) -> double"""
        return _moose.GHK___get_Gk(self)

    def __get_Ek(self):
        """__get_Ek(self) -> double"""
        return _moose.GHK___get_Ek(self)

    def __get_T(self):
        """__get_T(self) -> double"""
        return _moose.GHK___get_T(self)

    def __set_T(self, *args):
        """__set_T(self, double T)"""
        return _moose.GHK___set_T(self, *args)

    def __get_p(self):
        """__get_p(self) -> double"""
        return _moose.GHK___get_p(self)

    def __set_p(self, *args):
        """__set_p(self, double p)"""
        return _moose.GHK___set_p(self, *args)

    def __get_Vm(self):
        """__get_Vm(self) -> double"""
        return _moose.GHK___get_Vm(self)

    def __set_Vm(self, *args):
        """__set_Vm(self, double Vm)"""
        return _moose.GHK___set_Vm(self, *args)

    def __get_Cin(self):
        """__get_Cin(self) -> double"""
        return _moose.GHK___get_Cin(self)

    def __set_Cin(self, *args):
        """__set_Cin(self, double Cin)"""
        return _moose.GHK___set_Cin(self, *args)

    def __get_Cout(self):
        """__get_Cout(self) -> double"""
        return _moose.GHK___get_Cout(self)

    def __set_Cout(self, *args):
        """__set_Cout(self, double Cout)"""
        return _moose.GHK___set_Cout(self, *args)

    def __get_valency(self):
        """__get_valency(self) -> double"""
        return _moose.GHK___get_valency(self)

    def __set_valency(self, *args):
        """__set_valency(self, double valency)"""
        return _moose.GHK___set_valency(self, *args)

    Ik = _swig_property(_moose.GHK_Ik_get)
    Gk = _swig_property(_moose.GHK_Gk_get)
    Ek = _swig_property(_moose.GHK_Ek_get)
    T = _swig_property(_moose.GHK_T_get, _moose.GHK_T_set)
    p = _swig_property(_moose.GHK_p_get, _moose.GHK_p_set)
    Vm = _swig_property(_moose.GHK_Vm_get, _moose.GHK_Vm_set)
    Cin = _swig_property(_moose.GHK_Cin_get, _moose.GHK_Cin_set)
    Cout = _swig_property(_moose.GHK_Cout_get, _moose.GHK_Cout_set)
    valency = _swig_property(_moose.GHK_valency_get, _moose.GHK_valency_set)
GHK_swigregister = _moose.GHK_swigregister
GHK_swigregister(GHK)

class HHGate2D(HHGate):
    """Proxy of C++ pymoose::HHGate2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> HHGate2D
        __init__(self, string path) -> HHGate2D
        __init__(self, string name, Id parentId) -> HHGate2D
        __init__(self, string name, PyMooseBase parent) -> HHGate2D
        __init__(self, HHGate2D src, string name, PyMooseBase parent) -> HHGate2D
        __init__(self, HHGate2D src, string name, Id parent) -> HHGate2D
        __init__(self, HHGate2D src, string path) -> HHGate2D
        __init__(self, Id src, string name, Id parent) -> HHGate2D
        __init__(self, Id src, string path) -> HHGate2D
        """
        this = _moose.new_HHGate2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHGate2D
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.HHGate2D_getType(self)

    A = _swig_property(_moose.HHGate2D_A_get)
    B = _swig_property(_moose.HHGate2D_B_get)
HHGate2D_swigregister = _moose.HHGate2D_swigregister
HHGate2D_swigregister(HHGate2D)

class HHChannel2D(HHChannel):
    """Proxy of C++ pymoose::HHChannel2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, Id id) -> HHChannel2D
        __init__(self, string path) -> HHChannel2D
        __init__(self, string name, Id parentId) -> HHChannel2D
        __init__(self, string name, PyMooseBase parent) -> HHChannel2D
        __init__(self, HHChannel2D src, string name, PyMooseBase parent) -> HHChannel2D
        __init__(self, HHChannel2D src, string name, Id parent) -> HHChannel2D
        __init__(self, HHChannel2D src, string path) -> HHChannel2D
        __init__(self, Id src, string name, Id parent) -> HHChannel2D
        __init__(self, Id src, string path) -> HHChannel2D
        """
        this = _moose.new_HHChannel2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _moose.delete_HHChannel2D
    __del__ = lambda self : None;
    def getType(self):
        """getType(self) -> string"""
        return _moose.HHChannel2D_getType(self)

    def __get_Xindex(self):
        """__get_Xindex(self) -> string"""
        return _moose.HHChannel2D___get_Xindex(self)

    def __set_Xindex(self, *args):
        """__set_Xindex(self, string Xindex)"""
        return _moose.HHChannel2D___set_Xindex(self, *args)

    def __get_Yindex(self):
        """__get_Yindex(self) -> string"""
        return _moose.HHChannel2D___get_Yindex(self)

    def __set_Yindex(self, *args):
        """__set_Yindex(self, string Yindex)"""
        return _moose.HHChannel2D___set_Yindex(self, *args)

    def __get_Zindex(self):
        """__get_Zindex(self) -> string"""
        return _moose.HHChannel2D___get_Zindex(self)

    def __set_Zindex(self, *args):
        """__set_Zindex(self, string Zindex)"""
        return _moose.HHChannel2D___set_Zindex(self, *args)

    Xindex = _swig_property(_moose.HHChannel2D_Xindex_get, _moose.HHChannel2D_Xindex_set)
    Yindex = _swig_property(_moose.HHChannel2D_Yindex_get, _moose.HHChannel2D_Yindex_set)
    Zindex = _swig_property(_moose.HHChannel2D_Zindex_get, _moose.HHChannel2D_Zindex_set)
    def __get_xGate(self):
        if self.Xpower != 0:
            return HHGate2D('xGate', self)
        else:
            return None

    def __get_yGate(self):
        if self.Ypower != 0:
            return HHGate2D('yGate', self)
        else:
            return None
    def __get_zGate(self):
        if self.Zpower != 0:
            return HHGate2D('zGate', self)
        else:
            return None

    xGate = property(__get_xGate)
    yGate = property(__get_yGate)
    zGate = property(__get_zGate)                    

HHChannel2D_swigregister = _moose.HHChannel2D_swigregister
HHChannel2D_swigregister(HHChannel2D)



